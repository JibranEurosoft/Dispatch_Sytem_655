using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Taxi_BLL;
using DAL;
using Taxi_Model;
using Telerik.WinControls.UI;
using Utils;
using System.Threading;
using System.Diagnostics;
using Telerik.WinControls;
using Telerik.WinControls.UI.Docking;

using System.Net;
using System.Xml;
using Telerik.WinControls.Enumerations;
using System.IO;
using System.Collections;
using Taxi_AppMain.Forms;

using Telerik.WinControls.Primitives;

using System.Text.RegularExpressions;

using System.Speech.Synthesis;
using System.Linq.Expressions;
using System.Reflection;






namespace Taxi_AppMain
{
    public partial class frmBookingDashBoard : UI.SetupBase
    {
        int DefaultBookingExpiryInMins = 0;


        RadDropDownMenu statsContextMenu = null;
        RadDropDownMenu EditFare = null;
        frmAuthorization frmAuth = null;
        BookingBO objMaster;

        public Color GridBackColor = Color.White;
        private Color selectedRowBackColor;
        private Color selectedRowForeColor;

        RadDropDownMenu firstContextMenu = null;
        RadDropDownMenu secondContextMenu = null;
        RadDropDownMenu driverContextMenu = null;

        RadDropDownMenu searchJobContextMenu = null;

        delegate void UIDelegate();
        delegate void UIParameterizedDelegate(string name, string phoneNumber);
        delegate void UIOnlineBookingDelegate(List<Booking> list);
        delegate void UIOnlineBookingDelegateTab(List<ClsOnlineBooking> list);




        delegate void UIOnlineBookingMultiDelegate(long jobId, List<ClsOnlineBooking> objNewBooking);

        delegate void UIOnlineBookingMultiDelegateBooking(long jobId, Booking objNewBooking);


        frmSMSReply frmInbox = null;

        private bool IsServer = true;

        bool CanReadSMS;



        ConditionalFormattingObject objPanic = null;
        ConditionalFormattingObject objPanicBlink = null;
        DateTime now;

        private bool _IsLicenseExpired;

        public bool IsLicenseExpired
        {
            get { return _IsLicenseExpired; }
            set { _IsLicenseExpired = value; }
        }


        string contentText = string.Empty;
        string captionText = string.Empty;
        Image contentImage = null;
        System.Media.SystemSound alertSound = null;


        frmLoading frm = null;

        private bool _EnablePDA;

        public bool EnablePDA
        {
            get { return _EnablePDA; }
            set { _EnablePDA = value; }
        }


        Font regularFont = new Font("Tahoma", 10, FontStyle.Regular);

        Font oldFont = new Font("Tahoma", 10, FontStyle.Bold);
        Font newFont = new Font("Tahoma", 10, FontStyle.Bold);
        Font bigFont = new Font("Tahoma", 12, FontStyle.Bold);
        Font VerybigFontNormal = new Font("Tahoma", 16, FontStyle.Regular);
        Font VerybigFont = new Font("Tahoma", 16, FontStyle.Bold);

        private Color _HeaderRowBackColor = Color.SteelBlue;

        public Color HeaderRowBackColor
        {
            get { return _HeaderRowBackColor; }
            set { _HeaderRowBackColor = value; }
        }


        private Color _CellForeColor = Color.Black;

        private Color _HeaderRowBorderColor = Color.DarkSlateBlue;

        public Color HeaderRowBorderColor
        {
            get { return _HeaderRowBorderColor; }
            set { _HeaderRowBorderColor = value; }
        }

        private int AvgFirstBookingExpMins = 0;
        private int EachAdditoinalBookingExpMins = 0;




        DateTime? fromDate = null;
        DateTime? tillDate = null;

        private int DaysInTodayBooking = 0;
        bool IsRecentJob_TabbedOpened = false;



        private int BookingAlertMins = 0;

        System.Media.SoundPlayer sp = new System.Media.SoundPlayer(System.Windows.Forms.Application.StartupPath + "\\sound\\Startup.wav");
        System.Media.SoundPlayer spMessaging = new System.Media.SoundPlayer();



        List<Gen_Syspolicy_LocationExpiry> listofLocationExpiry = null;

        private bool HasWebBookingTab;
        private bool DisableWebBookingPopup;
        private string AccJobsShowNotifyDay = string.Empty;

        private bool DisablePopupNotifications;
        private bool ApplyAccBgOnRow;


        int PHCVehicleDays = 0;
        int PHCDriverDays = 0;
        int MOTDays = 0;
        int InsuranceDays = 0;
        int MOT2Days = 0;
        int LicenseDays = 0;
        int RoadTaxDays = 0;


        private bool AutoEmailControllerReport;
        private int PreBookingDefaultDays;
        private string ControllerReportDay;
        private bool AutoBookingDueAlert;
        private bool EnableGhostJob = false;


        private bool UseNewLayout = false;

        TaxiDataContext db = new TaxiDataContext();
        public frmBookingDashBoard()
        {

            // InitializeComponent();
            try
            {



                UseNewLayout = AppVars.objPolicyConfiguration.EnableOnBoardDrivers.ToBool();


                if (UseNewLayout)
                    GridBackColor = Color.FromArgb(243, 243, 243);



                if (ThemeResolutionService.ApplicationThemeName != "ControlDefault")
                {
                    GridBackColor = Color.Black;
                    _CellForeColor = Color.White;
                }


                if (UseNewLayout == false)
                    InitializeComponent();
                else
                    InitializeComponentLayout2();

                InitializeLayoutSettings();


                IsServer = false;



                this.Load += new EventHandler(frmBookingsList_Load);
                ddlDriver.Enter += new EventHandler(ddlDriver_Enter);
                ddlVehicleType.Enter += new EventHandler(ddlVehicleType_Enter);
                ddlCompany.Enter += new EventHandler(ddlCompany_Enter);

                if (ThemeResolutionService.ApplicationThemeName == "ControlDefault")
                {
                    this.selectedRowBackColor = Color.DeepSkyBlue;
                    this.selectedRowForeColor = Color.White;
                }
                else
                {

                    this.selectedRowBackColor = Color.Empty;
                    this.selectedRowForeColor = Color.Black;
                    GridGroupRowForeColor = Color.White;
                    GridRowBorderColor = Color.Gray;
                    GridBackColor = Color.Black;
                }


                grdPendingJobs.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);



                RadDragDropService dragDropServicePending = grdPendingJobs.GridViewElement.GetService<RadDragDropService>();
                dragDropServicePending.PreviewDragStart += new EventHandler<PreviewDragStartEventArgs>(dragDropServicePending_PreviewDragStart);



                this.FormClosing += new FormClosingEventHandler(frmBookingDashBoard_FormClosing);

                grdDriverWaiting.ShowRowHeaderColumn = false;
                grdDriverWaiting.ShowGroupPanel = false;
                grdDriverWaiting.AllowAddNewRow = false;
                grdDriverWaiting.CommandCellClick += new CommandCellClickEventHandler(grdDriverWaiting_CommandCellClick);

                //   grdDriverWaiting.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
                //     grdDriverWaiting.AllowAutoSizeColumns = true;

                grdDriverWaiting.Font = new Font("Tahoma", 9, FontStyle.Regular);
                grdDriverWaiting.ToolTipTextNeeded += new ToolTipTextNeededEventHandler(grdDriverWaiting_ToolTipTextNeeded);
                grdDriverWaiting.CellDoubleClick += new GridViewCellEventHandler(grdDriver_CellDoubleClick);





                grdDriverWaiting.AllowColumnResize = false;
                grdDriverWaiting.AllowColumnReorder = false;

                grdDriverWaiting.EnableSorting = false;
                grdDriverWaiting.AllowRowResize = false;

                grdDriverWaiting.AllowRowReorder = true;
                grdDriverWaiting.SelectionMode = GridViewSelectionMode.FullRowSelect;
                grdDriverWaiting.ReadOnly = true;


                if (Debugger.IsAttached == false)
                {


                    RadDragDropService dragDropService = grdDriverWaiting.GridViewElement.GetService<RadDragDropService>();

                    dragDropService.PreviewDragOver += new EventHandler<RadDragOverEventArgs>(dragDropService_PreviewDragOver);
                    dragDropService.PreviewDragDrop += new EventHandler<RadDropEventArgs>(dragDropService_PreviewDragDrop);

                    dragDropService.PreviewDragHint += new EventHandler<PreviewDragHintEventArgs>(dragDropService_PreviewDragHint);
                    dragDropService.PreviewDragStart += new EventHandler<PreviewDragStartEventArgs>(dragDropService_PreviewDragStart);
                }




                grdOnBoardDriver.ShowRowHeaderColumn = false;
                grdOnBoardDriver.ShowGroupPanel = false;
                grdOnBoardDriver.AllowAddNewRow = false;
                grdOnBoardDriver.CommandCellClick += new CommandCellClickEventHandler(grdDriverWaiting_CommandCellClick);

                grdOnBoardDriver.Font = new Font("Tahoma", 9, FontStyle.Regular);
                grdOnBoardDriver.ToolTipTextNeeded += new ToolTipTextNeededEventHandler(grdDriverWaiting_ToolTipTextNeeded);

                grdOnBoardDriver.CellDoubleClick += new GridViewCellEventHandler(grdDriver_CellDoubleClick);
                grdOnBoardDriver.AllowColumnResize = false;
                grdOnBoardDriver.AllowColumnReorder = false;

                grdOnBoardDriver.EnableSorting = false;
                grdOnBoardDriver.AllowRowResize = false;
                grdOnBoardDriver.AllowRowReorder = false;




                grdPendingJobs.AllowColumnReorder = false;
                grdPendingJobs.AllowColumnResize = false;
                grdPendingJobs.AllowRowResize = false;
                grdPendingJobs.EnableSorting = false;
                grdPendingJobs.AllowEditRow = false;

                grdPendingJobs.AllowAutoSizeColumns = true;
                grdPendingJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;


                grdPreBookings.AllowColumnReorder = false;
                grdPreBookings.AllowColumnResize = false;
                grdPreBookings.AllowRowResize = false;
                grdPreBookings.EnableSorting = false;
                grdPreBookings.AllowAutoSizeColumns = true;
                grdPreBookings.AllowEditRow = false;
                grdPreBookings.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;


                grdAllJobs.AllowColumnReorder = false;
                grdAllJobs.AllowColumnResize = false;
                grdAllJobs.AllowRowResize = false;
                grdAllJobs.EnableSorting = false;
                grdAllJobs.AllowEditRow = false;
                grdAllJobs.AllowAutoSizeColumns = true;
                grdAllJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;

                if (AppVars.objPolicyConfiguration != null && AppVars.objPolicyConfiguration.GridRowSize.ToInt() > 0)
                {
                    grdPendingJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                    grdPreBookings.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                    grdAllJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                }

                grdPendingJobs.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                grdPreBookings.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                grdAllJobs.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);

                grdPreBookings.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);


                grdAllJobs.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);
                //   grdAllJobs.RowsChanging += new GridViewCollectionChangingEventHandler(AllGrid_RowsChanging);

                grdAllJobs.ShowGroupPanel = false;





                grdPendingJobs.KeyDown += new KeyEventHandler(grdPendingJobs_KeyDown);
                grdPreBookings.KeyDown += new KeyEventHandler(grdPendingJobs_KeyDown);
                grdAllJobs.KeyDown += new KeyEventHandler(grdPendingJobs_KeyDown);

                objMaster = new BookingBO();

                this.SetProperties((INavigation)objMaster);
                grdPendingJobs.ShowGroupPanel = false;

                this.Shown += new EventHandler(frmBookingDashBoard_Shown);
                radPageView1.SelectedPage = Pg_PendingJobs;




                this.grdPendingJobs.MasterTemplate.ShowFilterCellOperatorText = false;
                this.grdPreBookings.MasterTemplate.ShowFilterCellOperatorText = false;
                this.grdAllJobs.MasterTemplate.ShowFilterCellOperatorText = false;

                this.grdCancelledJobs.MasterTemplate.ShowFilterCellOperatorText = false;
                this.grdNoShowJobs.MasterTemplate.ShowFilterCellOperatorText = false;



                grdPendingJobs.ViewCellFormatting += new CellFormattingEventHandler(grdPendingJobs_ViewCellFormatting);

                grdPendingJobs.ToolTipTextNeeded += GrdPendingJobs_ToolTipTextNeeded;





                // need to uncomment both
                grdPreBookings.ViewCellFormatting += new CellFormattingEventHandler(grdPendingJobs_ViewCellFormatting);


                grdPreBookings.ViewRowFormatting += new RowFormattingEventHandler(grdPreBookings_ViewRowFormatting);



                grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";


                //grdPreBookings.AutoExpandGroups = true;


                grdAllJobs.ViewCellFormatting += new CellFormattingEventHandler(grdAllJobs_ViewCellFormatting);

                grdAllJobs.AllowAddNewRow = false;

                this.KeyDown += new KeyEventHandler(frmBookingDashBoard_KeyDown);





                BookingAlertMins = AppVars.objPolicyConfiguration.BookingAlertExpiryNoticeInMins.ToInt();

                BookingHours = AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt();
                EnablePDA = AppVars.objPolicyConfiguration.EnablePDA.ToBool();

                ApplyAccBgOnRow = AppVars.objPolicyConfiguration.ApplyAccBgColorOnRow.ToBool();
                DisablePopupNotifications = AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool();


                this.AutoEmailControllerReport = AppVars.objPolicyConfiguration.AutoEmailControllerReport.ToBool();
                this.ControllerReportDay = AppVars.objPolicyConfiguration.DayOfWeekControllerReport.ToStr().Trim();
                this.PreBookingDefaultDays = AppVars.objPolicyConfiguration.HourControllerReport.ToInt();
                this.DisableWebBookingPopup = AppVars.objPolicyConfiguration.DisableWebBookingAlertPopup.ToBool();


                //     AppVars.objPolicyConfiguration.

                DefaultBookingExpiryInMins = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt();

                this.AutoBookingDueAlert = AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool();
                this.AvgFirstBookingExpMins = AppVars.objPolicyConfiguration.AvgFirstMileExpiryMins.ToInt();
                this.EachAdditoinalBookingExpMins = AppVars.objPolicyConfiguration.EachAdditionalMileExpiryMins.ToInt();


                grdOnPlotDrivers.Visible = EnablePDA;


                if (ApplyAccBgOnRow)
                {

                    grdPendingJobs.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);
                    grdPreBookings.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);
                    grdAllJobs.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);



                }

                // PDA Driver Context Menu
                driverContextMenu = new RadDropDownMenu();
                driverContextMenu.FadeAnimationType = FadeAnimationType.None;


                bool HasClickACall = AppVars.listUserRights.Count(c => c.functionId.ToUpper() == "CLICK TO CALL") > 0;

                RadMenuItem clickACallItem = new RadMenuItem("Call Customer"); // 21 index
                clickACallItem.ForeColor = Color.Blue;
                clickACallItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                clickACallItem.Click += new EventHandler(btnCallCustomer_Click);
                clickACallItem.Name = "CallCustomer";


                if (!HasClickACall)
                    clickACallItem.Visibility = ElementVisibility.Collapsed;

                //   clickACallItem.Image = Resources.Resource1.Call;


                driverContextMenu.Items.Add(clickACallItem);


                clickACallItem = new RadMenuItem("Call Driver"); // 21 index
                clickACallItem.ForeColor = Color.Blue;
                clickACallItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                clickACallItem.Click += new EventHandler(btnCallDriver_Click);
                // clickACallItem.Image = Resources.Resource1.Call;
                clickACallItem.Visibility = ElementVisibility.Visible;
                clickACallItem.Name = "CallDriver";
                if (!HasClickACall)
                    clickACallItem.Visibility = ElementVisibility.Collapsed;
                driverContextMenu.Items.Add(clickACallItem);


                RadMenuItem viewJobItem = new RadMenuItem("View Job");
                viewJobItem.Name = "ViewJob";
                viewJobItem.ForeColor = Color.Blue;
                viewJobItem.BackColor = Color.Blue;
                viewJobItem.Click += new EventHandler(ViewJobItem_Click);
                viewJobItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(viewJobItem);

                RadMenuItem NoShowJobContextMenuItemC = new RadMenuItem("Cancel Job");
                NoShowJobContextMenuItemC.Name = "CancelJob";
                NoShowJobContextMenuItemC.ForeColor = Color.OrangeRed;
                NoShowJobContextMenuItemC.BackColor = Color.Blue;
                NoShowJobContextMenuItemC.Font = new Font("Tahoma", 10, FontStyle.Bold);
                NoShowJobContextMenuItemC.Click += new EventHandler(CancelJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(NoShowJobContextMenuItemC);


                RadMenuItem RecoverJobContextMenuItem1 = new RadMenuItem("Recover Job");
                RecoverJobContextMenuItem1.Name = "RecoverJob";
                RecoverJobContextMenuItem1.ForeColor = Color.Red;
                RecoverJobContextMenuItem1.BackColor = Color.Blue;
                RecoverJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                RecoverJobContextMenuItem1.Click += new EventHandler(RecoverJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(RecoverJobContextMenuItem1);


                RadMenuItem NoShowJobContextMenuItem1 = new RadMenuItem("No Pickup");
                NoShowJobContextMenuItem1.Name = "NoShowJob";
                NoShowJobContextMenuItem1.ForeColor = Color.OrangeRed;
                NoShowJobContextMenuItem1.BackColor = Color.Blue;
                NoShowJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                NoShowJobContextMenuItem1.Click += new EventHandler(NoShowJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(NoShowJobContextMenuItem1);


                RadMenuItem ShiftJobContextMenuItem1 = new RadMenuItem("View Shift Jobs");
                ShiftJobContextMenuItem1.Name = "ShiftJob";
                ShiftJobContextMenuItem1.ForeColor = Color.Blue;
                ShiftJobContextMenuItem1.BackColor = Color.Blue;
                ShiftJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                ShiftJobContextMenuItem1.Click += new EventHandler(ShiftJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(ShiftJobContextMenuItem1);




                RadMenuItem ClearJobContextMenuItem1 = new RadMenuItem("Clear Job");
                ClearJobContextMenuItem1.Name = "ClearJob";
                ClearJobContextMenuItem1.ForeColor = Color.Green;
                ClearJobContextMenuItem1.BackColor = Color.Blue;
                ClearJobContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                ClearJobContextMenuItem1.Click += new EventHandler(ClearJobContextMenuItem1_Click);
                driverContextMenu.Items.Add(ClearJobContextMenuItem1);



                RadMenuItem streetViewItem = new RadMenuItem("Street View");
                streetViewItem.Name = "StreetView";
                streetViewItem.ForeColor = Color.Blue;
                streetViewItem.BackColor = Color.Blue;
                streetViewItem.Click += new EventHandler(streetViewItem_Click);
                streetViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                streetViewItem.Visibility = AppVars.objPolicyConfiguration.MapType.ToInt() == 2 ? ElementVisibility.Collapsed : ElementVisibility.Visible;

                driverContextMenu.Items.Add(streetViewItem);


                RadMenuItem callItem = new RadMenuItem("Call");
                callItem.Name = "Call";
                callItem.ForeColor = Color.Blue;
                callItem.BackColor = Color.Blue;
                callItem.Click += new EventHandler(CallItem_Click);
                callItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(callItem);


                RadMenuItem unBlockViewItem = new RadMenuItem("UnBlock");
                unBlockViewItem.Name = "UnBlock";
                unBlockViewItem.ForeColor = Color.Black;
                unBlockViewItem.BackColor = Color.Red;
                unBlockViewItem.Click += new EventHandler(unBlockViewItem_Click);
                unBlockViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(unBlockViewItem);


                RadMenuItem ForceActionItem = new RadMenuItem("Force Arrive Request");
                ForceActionItem.Name = "ArrivedPOB";
                ForceActionItem.ForeColor = Color.Red;
                ForceActionItem.BackColor = Color.Red;
                ForceActionItem.Click += new EventHandler(ForceActionItem_Click);
                ForceActionItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(ForceActionItem);



                RadMenuItem trackDrvItem = new RadMenuItem("Track Driver");
                trackDrvItem.Name = "TrackDriver";
                trackDrvItem.ForeColor = Color.Blue;
                trackDrvItem.BackColor = Color.Blue;
                trackDrvItem.Click += new EventHandler(TrackDriverItem_Click);
                trackDrvItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(trackDrvItem);

                RadMenuItem trackEscortItem = new RadMenuItem("Track Escort");
                trackEscortItem.Name = "TrackEscort";
                trackEscortItem.ForeColor = Color.Blue;
                trackEscortItem.BackColor = Color.Blue;
                trackEscortItem.Click += new EventHandler(TrackEscortItem_Click);
                trackEscortItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                if (AppVars.listUserRights.Count(c => c.functionId.ToUpper() == "SHOW TRACK ESCORT") > 0)
                {
                    trackEscortItem.Visibility = ElementVisibility.Visible;
                }
                else
                {
                    trackEscortItem.Visibility = ElementVisibility.Hidden;
                }
                driverContextMenu.Items.Add(trackEscortItem);

                RadMenuItem ForceLogoutItem = new RadMenuItem("Logout");
                ForceLogoutItem.Name = "Logout";
                ForceLogoutItem.ForeColor = Color.Red;
                ForceLogoutItem.BackColor = Color.Red;
                ForceLogoutItem.Click += new EventHandler(ForceLogoutItem_Click);
                ForceLogoutItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                driverContextMenu.Items.Add(ForceLogoutItem);


                RadMenuItem recoverFojItem = new RadMenuItem("Recover FOJ");
                recoverFojItem.Name = "RecoverFOJ";
                recoverFojItem.ForeColor = Color.Purple;
                recoverFojItem.BackColor = Color.Blue;
                recoverFojItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                recoverFojItem.Click += new EventHandler(RecoveFOJFromDriverStatustem_Click);
                driverContextMenu.Items.Add(recoverFojItem);




                firstContextMenu = new RadDropDownMenu();
                firstContextMenu.BackColor = Color.Orange;

                RadMenuItem firstContextMenuItem1 = new RadMenuItem("OnBreak");
                firstContextMenuItem1.ForeColor = Color.DarkOrange;
                firstContextMenuItem1.BackColor = Color.Orange;
                firstContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);

                firstContextMenuItem1.Click += new EventHandler(firstContextMenuItem1_Click);
                firstContextMenu.Items.Add(firstContextMenuItem1);


                secondContextMenu = new RadDropDownMenu();
                secondContextMenu.BackColor = Color.DarkGreen;
                RadMenuItem secondContextMenuItem1 = new RadMenuItem("Available");
                secondContextMenuItem1.ForeColor = Color.DarkGreen;
                secondContextMenuItem1.BackColor = Color.Green;
                secondContextMenuItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);

                secondContextMenuItem1.Click += new EventHandler(secondContextMenuItem1_Click);
                secondContextMenu.Items.Add(secondContextMenuItem1);


                grdOnPlotDrivers.ShowCellToolTips = true;
                grdOnPlotDrivers.CellMouseDown += new DataGridViewCellMouseEventHandler(grdOnPlotDrivers_CellMouseDown);
                // grdOnPlotDrivers.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdOnPlotDrivers_ContextMenuOpening);
                grdDriverWaiting.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdDriver_ContextMenuOpening);
                grdOnBoardDriver.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdDriver_ContextMenuOpening);


                //priceplots
                grdDriverPricePlot.CellMouseDown += new DataGridViewCellMouseEventHandler(grdDriverPricePlot_CellMouseDown);

                if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                {
                    tmrAlert.Enabled = true;
                    tmrAlert.Start();
                }

                //-------------------

                EditFare = new RadDropDownMenu();

                EditFare.BackColor = Color.Orange;
                EditFare.FadeAnimationType = FadeAnimationType.None;

                RadMenuItem EditFareItem1 = new RadMenuItem("Dispatch Job");  // 0 index
                EditFareItem1.ForeColor = Color.Blue;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(btnDespatchJob_Click);
                EditFare.Items.Add(EditFareItem1);





                EditFareItem1 = new RadMenuItem("Edit Fare");  // 1 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(EditFareItem1_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Cancel Job");  // 2 index
                EditFareItem1.ForeColor = Color.Red;
                EditFareItem1.Name = "CancelJobBooking";
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(CancelJobItem_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Allocate Driver");  // 3 index
                EditFareItem1.ForeColor = Color.Green;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(AllocateDriverItem_Click);
                EditFare.Items.Add(EditFareItem1);


                //  if (EnablePDA && AppVars.objPolicyConfiguration.EnableFOJ.ToBool())
                //  {
                EditFareItem1 = new RadMenuItem("Follow-On-Job");  // 4 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(FOJJobItem_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Dispatch SMS");  // 5 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(DespatchSMS_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Complete Job");  // 6 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(ForceCompleteJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("View Group");  // 7 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(GroupJobItem_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Send Pre-Job");  // 8 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(SendPreJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Recover Pre-Job");  // 9 index
                EditFareItem1.ForeColor = Color.Crimson;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(RecoverPreJob_Click);
                EditFareItem1.Name = "RecoverPreJob";
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("SMS Job Details");  // 10 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(SMSJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Copy Booking");  // 11 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(CopyBooking_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("Clear Job");  // 12 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(ClearJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Bidding");  // 13 index
                EditFareItem1.CheckOnClick = true;

                EditFareItem1.ForeColor = Color.RosyBrown;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(OnBiddingJob_Click);
                EditFare.Items.Add(EditFareItem1);

                EditFareItem1 = new RadMenuItem("AutoDespatch");  // 14 index
                EditFareItem1.ForeColor = Color.RosyBrown;
                EditFareItem1.CheckOnClick = true;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(OnAutoDespatchJob_Click);
                EditFare.Items.Add(EditFareItem1);


                EditFareItem1 = new RadMenuItem("ReSend Pre-Job");  // 15 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(ResendJob_Click);
                EditFare.Items.Add(EditFareItem1);

                EditFareItem1 = new RadMenuItem("Recall Job");  // 16 index
                EditFareItem1.ForeColor = Color.Blue;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(RecallPendingJob_Click);
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Transfer to Pool");  // 17 index
                EditFareItem1.ForeColor = Color.Purple;
                EditFareItem1.Name = "TransferJob";
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(TransferJob_Click);
                EditFareItem1.Visibility = AppVars.listUserRights.Count(c => c.functionId == "JOB POOL") > 0 ? ElementVisibility.Visible : ElementVisibility.Collapsed;

                if (EditFareItem1.Visibility == ElementVisibility.Visible)
                    EditFareItem1.Tag = true;

                EditFare.Items.Add(EditFareItem1);



                if (AppVars.AppTheme != "ControlDefault")
                {
                    foreach (var item in EditFare.Items)
                    {
                        if (item.ForeColor != Color.Red && item.ForeColor != Color.Crimson && item.ForeColor != Color.RosyBrown)
                            item.ForeColor = Color.White;
                    }


                    foreach (var item in driverContextMenu.Items)
                    {
                        if (item.ForeColor != Color.Red && item.ForeColor != Color.Crimson && item.ForeColor != Color.RosyBrown)
                            item.ForeColor = Color.White;
                    }
                }

                if (EditFareItem1.Visibility == ElementVisibility.Visible)
                {
                    try
                    {

                        this.Pg_PoolJobs = new Telerik.WinControls.UI.RadPageViewPage();
                        this.tableLayoutPanel3 = new System.Windows.Forms.TableLayoutPanel();
                        this.panel3 = new System.Windows.Forms.Panel();
                        this.lblError = new System.Windows.Forms.Label();
                        this.grdAcceptorPooljobs = new Telerik.WinControls.UI.RadGridView();
                        this.radPanel6 = new Telerik.WinControls.UI.RadPanel();
                        this.lblPoolJobs = new Telerik.WinControls.UI.RadLabel();
                        this.pnlTransferredPool = new System.Windows.Forms.Panel();
                        this.grdJobsPool = new Telerik.WinControls.UI.RadGridView();
                        this.radPanel5 = new Telerik.WinControls.UI.RadPanel();
                        this.lblTransferredJobs = new Telerik.WinControls.UI.RadLabel();
                        this.btnShowAllJobsPool = new Telerik.WinControls.UI.RadButton();
                        this.dtpFromJobsPool = new UI.MyDatePicker();
                        this.label19 = new System.Windows.Forms.Label();
                        this.label18 = new System.Windows.Forms.Label();
                        this.dtpTillJobsPool = new UI.MyDatePicker();
                        this.btnSearchJobsPool = new Telerik.WinControls.UI.RadButton();
                        this.radLabel31 = new Telerik.WinControls.UI.RadLabel();




                        this.Pg_PoolJobs.SuspendLayout();
                        this.tableLayoutPanel3.SuspendLayout();
                        this.panel3.SuspendLayout();
                        ((System.ComponentModel.ISupportInitialize)(this.grdAcceptorPooljobs)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.grdAcceptorPooljobs.MasterTemplate)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.radPanel6)).BeginInit();
                        this.radPanel6.SuspendLayout();
                        ((System.ComponentModel.ISupportInitialize)(this.lblPoolJobs)).BeginInit();
                        this.pnlTransferredPool.SuspendLayout();
                        ((System.ComponentModel.ISupportInitialize)(this.grdJobsPool)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.grdJobsPool.MasterTemplate)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.radPanel5)).BeginInit();
                        this.radPanel5.SuspendLayout();
                        ((System.ComponentModel.ISupportInitialize)(this.lblTransferredJobs)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.btnShowAllJobsPool)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.dtpFromJobsPool)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.dtpTillJobsPool)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.btnSearchJobsPool)).BeginInit();
                        ((System.ComponentModel.ISupportInitialize)(this.radLabel31)).BeginInit();





                        //  this.radPageView1.Controls.Add(this.Pg_PoolJobs);


                        // Pg_PoolJobs
                        // 
                        this.Pg_PoolJobs.Controls.Add(this.tableLayoutPanel3);
                        this.Pg_PoolJobs.Controls.Add(this.radLabel31);
                        this.Pg_PoolJobs.Location = new System.Drawing.Point(10, 10);
                        this.Pg_PoolJobs.Name = "Pg_PoolJobs";
                        this.Pg_PoolJobs.Size = new System.Drawing.Size(1179, 686);
                        this.Pg_PoolJobs.Text = "Treasure Pool";
                        // 
                        // tableLayoutPanel3
                        // 
                        this.tableLayoutPanel3.ColumnCount = 1;
                        this.tableLayoutPanel3.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 100F));
                        this.tableLayoutPanel3.Controls.Add(this.panel3, 0, 1);
                        this.tableLayoutPanel3.Controls.Add(this.pnlTransferredPool, 0, 0);
                        this.tableLayoutPanel3.Dock = System.Windows.Forms.DockStyle.Fill;
                        this.tableLayoutPanel3.Location = new System.Drawing.Point(0, 30);
                        this.tableLayoutPanel3.Name = "tableLayoutPanel3";
                        this.tableLayoutPanel3.RowCount = 2;
                        this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
                        this.tableLayoutPanel3.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
                        this.tableLayoutPanel3.Size = new System.Drawing.Size(1179, 656);
                        this.tableLayoutPanel3.TabIndex = 122;
                        // 
                        // panel3
                        // 
                        this.panel3.Controls.Add(this.lblError);
                        this.panel3.Controls.Add(this.grdAcceptorPooljobs);
                        this.panel3.Controls.Add(this.radPanel6);
                        this.panel3.Dock = System.Windows.Forms.DockStyle.Fill;
                        this.panel3.Location = new System.Drawing.Point(3, 331);
                        this.panel3.Name = "panel3";
                        this.panel3.Size = new System.Drawing.Size(1173, 322);
                        this.panel3.TabIndex = 1;
                        // 
                        // lblError
                        // 
                        this.lblError.Font = new System.Drawing.Font("Segoe UI", 16F, System.Drawing.FontStyle.Bold);
                        this.lblError.ForeColor = System.Drawing.Color.Red;
                        this.lblError.Location = new System.Drawing.Point(0, 37);
                        this.lblError.Name = "lblError";
                        this.lblError.Size = new System.Drawing.Size(1170, 37);
                        this.lblError.TabIndex = 123;
                        this.lblError.Text = "Job Pool Authorization failed.";
                        this.lblError.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
                        // 
                        // grdAcceptorPooljobs
                        // 
                        this.grdAcceptorPooljobs.Dock = System.Windows.Forms.DockStyle.Fill;
                        this.grdAcceptorPooljobs.EnableHotTracking = false;
                        this.grdAcceptorPooljobs.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.grdAcceptorPooljobs.Location = new System.Drawing.Point(0, 36);
                        // 
                        // grdAcceptorPooljobs
                        // 
                        this.grdAcceptorPooljobs.MasterTemplate.AllowAddNewRow = false;
                        this.grdAcceptorPooljobs.MasterTemplate.EnableFiltering = true;
                        this.grdAcceptorPooljobs.Name = "grdAcceptorPooljobs";
                        this.grdAcceptorPooljobs.ShowGroupPanel = false;
                        this.grdAcceptorPooljobs.Size = new System.Drawing.Size(1173, 286);
                        this.grdAcceptorPooljobs.TabIndex = 122;
                        this.grdAcceptorPooljobs.Text = "myGridView1";
                        // 
                        // radPanel6
                        // 
                        this.radPanel6.BackColor = System.Drawing.Color.GhostWhite;
                        this.radPanel6.Controls.Add(this.lblPoolJobs);
                        this.radPanel6.Dock = System.Windows.Forms.DockStyle.Top;
                        this.radPanel6.Location = new System.Drawing.Point(0, 0);
                        this.radPanel6.Name = "radPanel6";
                        this.radPanel6.Size = new System.Drawing.Size(1173, 36);
                        this.radPanel6.TabIndex = 121;
                        // 
                        // lblPoolJobs
                        // 
                        this.lblPoolJobs.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.lblPoolJobs.Location = new System.Drawing.Point(7, 10);
                        this.lblPoolJobs.Name = "lblPoolJobs";
                        this.lblPoolJobs.Size = new System.Drawing.Size(86, 23);
                        this.lblPoolJobs.TabIndex = 17;
                        this.lblPoolJobs.Text = "Pool Jobs";
                        // 
                        // pnlTransferredPool
                        // 
                        this.pnlTransferredPool.Controls.Add(this.grdJobsPool);
                        this.pnlTransferredPool.Controls.Add(this.radPanel5);
                        this.pnlTransferredPool.Dock = System.Windows.Forms.DockStyle.Fill;
                        this.pnlTransferredPool.Location = new System.Drawing.Point(3, 3);
                        this.pnlTransferredPool.Name = "pnlTransferredPool";
                        this.pnlTransferredPool.Size = new System.Drawing.Size(1173, 322);
                        this.pnlTransferredPool.TabIndex = 0;
                        // 
                        // grdJobsPool
                        // 
                        this.grdJobsPool.Dock = System.Windows.Forms.DockStyle.Fill;
                        this.grdJobsPool.EnableHotTracking = false;
                        this.grdJobsPool.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.grdJobsPool.Location = new System.Drawing.Point(0, 42);
                        // 
                        // grdJobsPool
                        // 
                        this.grdJobsPool.MasterTemplate.AllowAddNewRow = false;
                        this.grdJobsPool.MasterTemplate.EnableFiltering = true;
                        this.grdJobsPool.Name = "grdJobsPool";
                        this.grdJobsPool.ShowGroupPanel = false;
                        this.grdJobsPool.Size = new System.Drawing.Size(1173, 280);
                        this.grdJobsPool.TabIndex = 121;
                        this.grdJobsPool.Text = "myGridView1";
                        // 
                        // radPanel5
                        // 
                        this.radPanel5.BackColor = System.Drawing.Color.GhostWhite;
                        this.radPanel5.Controls.Add(this.lblTransferredJobs);
                        this.radPanel5.Controls.Add(this.btnShowAllJobsPool);
                        this.radPanel5.Controls.Add(this.dtpFromJobsPool);
                        this.radPanel5.Controls.Add(this.label19);
                        this.radPanel5.Controls.Add(this.label18);
                        this.radPanel5.Controls.Add(this.dtpTillJobsPool);
                        this.radPanel5.Controls.Add(this.btnSearchJobsPool);
                        this.radPanel5.Dock = System.Windows.Forms.DockStyle.Top;
                        this.radPanel5.Location = new System.Drawing.Point(0, 0);
                        this.radPanel5.Name = "radPanel5";
                        this.radPanel5.Size = new System.Drawing.Size(1173, 42);
                        this.radPanel5.TabIndex = 120;
                        // 
                        // lblTransferredJobs
                        // 
                        this.lblTransferredJobs.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.lblTransferredJobs.Location = new System.Drawing.Point(3, 10);
                        this.lblTransferredJobs.Name = "lblTransferredJobs";
                        this.lblTransferredJobs.Size = new System.Drawing.Size(147, 23);
                        this.lblTransferredJobs.TabIndex = 16;
                        this.lblTransferredJobs.Text = "Transferred Jobs";
                        this.lblTransferredJobs.TextAlignment = System.Drawing.ContentAlignment.MiddleLeft;
                        // 
                        // btnShowAllJobsPool
                        // 
                        this.btnShowAllJobsPool.Location = new System.Drawing.Point(1081, 9);
                        this.btnShowAllJobsPool.Name = "btnShowAllJobsPool";
                        this.btnShowAllJobsPool.Size = new System.Drawing.Size(77, 24);
                        this.btnShowAllJobsPool.TabIndex = 15;
                        this.btnShowAllJobsPool.Tag = "";
                        this.btnShowAllJobsPool.Text = "Show All ";
                        this.btnShowAllJobsPool.Visible = false;
                        this.btnShowAllJobsPool.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                        this.btnShowAllJobsPool.Click += new System.EventHandler(this.btnShowAllJobsPool_Click);
                        ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllJobsPool.GetChildAt(0))).Image = null;
                        ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllJobsPool.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                        ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllJobsPool.GetChildAt(0))).Text = "Show All ";
                        ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShowAllJobsPool.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                        ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShowAllJobsPool.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        // 
                        // dtpFromJobsPool
                        // 
                        this.dtpFromJobsPool.Culture = new System.Globalization.CultureInfo("en-GB");
                        this.dtpFromJobsPool.CustomFormat = "dd/MM/yyyy";
                        this.dtpFromJobsPool.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.dtpFromJobsPool.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
                        this.dtpFromJobsPool.Location = new System.Drawing.Point(744, 10);
                        this.dtpFromJobsPool.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
                        this.dtpFromJobsPool.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
                        this.dtpFromJobsPool.Name = "dtpFromJobsPool";
                        this.dtpFromJobsPool.NullDate = new System.DateTime(((long)(0)));
                        this.dtpFromJobsPool.Size = new System.Drawing.Size(102, 24);
                        this.dtpFromJobsPool.TabIndex = 12;
                        this.dtpFromJobsPool.TabStop = false;
                        this.dtpFromJobsPool.Text = "myDatePicker1";
                        this.dtpFromJobsPool.Value = null;
                        this.dtpFromJobsPool.Visible = false;
                        // 
                        // label19
                        // 
                        this.label19.AutoSize = true;
                        this.label19.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.label19.Location = new System.Drawing.Point(669, 14);
                        this.label19.Name = "label19";
                        this.label19.Size = new System.Drawing.Size(74, 16);
                        this.label19.TabIndex = 8;
                        this.label19.Text = "Date From";
                        this.label19.Visible = false;
                        // 
                        // label18
                        // 
                        this.label18.AutoSize = true;
                        this.label18.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.label18.Location = new System.Drawing.Point(853, 14);
                        this.label18.Name = "label18";
                        this.label18.Size = new System.Drawing.Size(23, 16);
                        this.label18.TabIndex = 13;
                        this.label18.Text = "To";
                        this.label18.Visible = false;
                        // 
                        // dtpTillJobsPool
                        // 
                        this.dtpTillJobsPool.Culture = new System.Globalization.CultureInfo("en-GB");
                        this.dtpTillJobsPool.CustomFormat = "dd/MM/yyyy";
                        this.dtpTillJobsPool.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.dtpTillJobsPool.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
                        this.dtpTillJobsPool.Location = new System.Drawing.Point(877, 9);
                        this.dtpTillJobsPool.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
                        this.dtpTillJobsPool.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
                        this.dtpTillJobsPool.Name = "dtpTillJobsPool";
                        this.dtpTillJobsPool.NullDate = new System.DateTime(((long)(0)));
                        this.dtpTillJobsPool.Size = new System.Drawing.Size(102, 24);
                        this.dtpTillJobsPool.TabIndex = 14;
                        this.dtpTillJobsPool.TabStop = false;
                        this.dtpTillJobsPool.Text = "myDatePicker1";
                        this.dtpTillJobsPool.Value = null;
                        this.dtpTillJobsPool.Visible = false;
                        // 
                        // btnSearchJobsPool
                        // 
                        this.btnSearchJobsPool.Image = global::Taxi_AppMain.Properties.Resources.pic_Search;
                        this.btnSearchJobsPool.Location = new System.Drawing.Point(1003, 9);
                        this.btnSearchJobsPool.Name = "btnSearchJobsPool";
                        this.btnSearchJobsPool.Size = new System.Drawing.Size(59, 24);
                        this.btnSearchJobsPool.TabIndex = 7;
                        this.btnSearchJobsPool.Tag = "";
                        this.btnSearchJobsPool.Text = "Find";

                        this.btnSearchJobsPool.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                        this.btnSearchJobsPool.Click += new System.EventHandler(this.btnSearchJobsPool_Click);
                        ((Telerik.WinControls.UI.RadButtonElement)(this.btnSearchJobsPool.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.pic_Search;
                        ((Telerik.WinControls.UI.RadButtonElement)(this.btnSearchJobsPool.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                        ((Telerik.WinControls.UI.RadButtonElement)(this.btnSearchJobsPool.GetChildAt(0))).Text = "Find";
                        ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnSearchJobsPool.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                        ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnSearchJobsPool.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        // 
                        // radLabel31
                        // 
                        this.radLabel31.AutoSize = false;
                        this.radLabel31.BackColor = System.Drawing.Color.DimGray;
                        this.radLabel31.Dock = System.Windows.Forms.DockStyle.Top;
                        this.radLabel31.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.radLabel31.ForeColor = System.Drawing.Color.White;
                        this.radLabel31.Location = new System.Drawing.Point(0, 0);
                        this.radLabel31.Name = "radLabel31";

                        // 
                        // 
                        // 
                        this.radLabel31.RootElement.ForeColor = System.Drawing.Color.White;
                        this.radLabel31.Size = new System.Drawing.Size(1179, 30);
                        this.radLabel31.TabIndex = 119;
                        this.radLabel31.Text = "Treasure Pool";
                        this.radLabel31.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                        //  this.radLabel31.Click += new System.EventHandler(this.radLabel31_Click);



                        this.btnSearchJobsPool.Visible = false;

                        this.Pg_PoolJobs.ResumeLayout(false);
                        this.tableLayoutPanel3.ResumeLayout(false);
                        this.panel3.ResumeLayout(false);
                        ((System.ComponentModel.ISupportInitialize)(this.grdAcceptorPooljobs.MasterTemplate)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.grdAcceptorPooljobs)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.radPanel6)).EndInit();
                        this.radPanel6.ResumeLayout(false);
                        this.radPanel6.PerformLayout();
                        ((System.ComponentModel.ISupportInitialize)(this.lblPoolJobs)).EndInit();
                        this.pnlTransferredPool.ResumeLayout(false);
                        ((System.ComponentModel.ISupportInitialize)(this.grdJobsPool.MasterTemplate)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.grdJobsPool)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.radPanel5)).EndInit();
                        this.radPanel5.ResumeLayout(false);
                        this.radPanel5.PerformLayout();
                        ((System.ComponentModel.ISupportInitialize)(this.lblTransferredJobs)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.btnShowAllJobsPool)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.dtpFromJobsPool)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.dtpTillJobsPool)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.btnSearchJobsPool)).EndInit();
                        ((System.ComponentModel.ISupportInitialize)(this.radLabel31)).EndInit();

                        this.radPageView1.Controls.Add(this.Pg_PoolJobs);
                        radPageView1.Pages.ChangeIndex(Pg_PoolJobs, 8);



                        InitializeJobPoolConfig();
                    }
                    catch
                    {


                    }


                }





                EditFareItem1 = new RadMenuItem("Send Bidding Notification"); // 18 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                //  EditFareItem1.Click += new EventHandler(BiddingPriceNotification_Click);
                EditFareItem1.Visibility = ElementVisibility.Collapsed;
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Show Driver Bids"); // 19 index
                EditFareItem1.ForeColor = Color.Black;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                // EditFareItem1.Click += new EventHandler(ShowDriverPriceBidding_Click);
                EditFareItem1.Visibility = ElementVisibility.Collapsed;
                EditFare.Items.Add(EditFareItem1);




                EditFareItem1 = new RadMenuItem("Dispatch as Ghost Job"); // 20 index
                EditFareItem1.ForeColor = Color.Gray;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(btnDespatchGhostJob_Click);
                EditFareItem1.Visibility = AppVars.objPolicyConfiguration.EnableGhostJob.ToBool() ? ElementVisibility.Visible : ElementVisibility.Collapsed;
                EditFare.Items.Add(EditFareItem1);


                if (EditFareItem1.Visibility == ElementVisibility.Visible)
                {
                    lblTokenNo.Visible = true;
                    txtTokenNo.Visible = true;

                    EnableGhostJob = true;

                }


                EditFareItem1 = new RadMenuItem("Call Customer"); // 21 index
                EditFareItem1.ForeColor = Color.Blue;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(btnCallCustomer_Click);
                EditFareItem1.Visibility = ElementVisibility.Visible;
                //  EditFareItem1.Image= Resources.Resource1.Call; 
                EditFareItem1.Name = "CallCustomer";



                if (AppVars.listUserRights.Count(c => c.functionId.ToUpper() == "CLICK TO CALL") == 0)
                    EditFareItem1.Visibility = ElementVisibility.Collapsed;
                EditFare.Items.Add(EditFareItem1);



                EditFareItem1 = new RadMenuItem("Quick Re-Dispatch Job");  // 0 index
                EditFareItem1.ForeColor = Color.Blue;
                EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                EditFareItem1.Click += new EventHandler(btnQuickReDespatchJob_Click);
                EditFareItem1.Name = "QuickReDispatchJob";
                EditFare.Items.Add(EditFareItem1);

                //EditFareItem1 = new RadMenuItem("Call Driver"); // 22 index
                //EditFareItem1.ForeColor = Color.Blue;
                //EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                //EditFareItem1.Click += new EventHandler(btnDespatchGhostJob_Click);
                //EditFareItem1.Visibility = ElementVisibility.Visible;
                //EditFare.Items.Add(EditFareItem1);



                //if (AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "JOB AUDIT TRAIL") > 0)
                //{
                //    EditFareItem1 = new RadMenuItem("Job Audit Trail");
                //    EditFareItem1.ForeColor = Color.Black;
                //    EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                //    EditFareItem1.Click += new EventHandler(AuditReport_Click);
                //    EditFare.Items.Add(EditFareItem1);
                //}



                grdPendingJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);
                grdPreBookings.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);
                grdAllJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);




                if (IsServer)
                    this.CanReadSMS = AppVars.objSMSConfiguration.CanReadSMS.ToBool();




                //if (!CanReadSMS)
                //{
                //    btnEmailPrint.Visibility = ElementVisibility.Collapsed;
                //}




                grdStats.ScreenTipNeeded += new ScreenTipNeededEventHandler(grdStats_ScreenTipNeeded);
                grdStats.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdStats_ContextMenuOpening);


                listofLocationExpiry = General.GetQueryable<Gen_Syspolicy_LocationExpiry>(c => c.ExpiryMins != null).ToList();


                grdQuotations.Font = new Font("Tahoma", 9, FontStyle.Regular);

                lst_cdr.DoubleClick += new EventHandler(lst_cdr_DoubleClick);
                lst_cdr.SelectionMode = SelectionMode.None;
                lst_cdr.Font = new Font("Tahoma", 8, FontStyle.Bold);


                this.HasWebBookingTab = AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "SHOW WEB BOOKING TAB") > 0;

                HasBookingHistoryTab = AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "SHOW BOOKING HISTORY TAB") > 0;



                if (HasWebBookingTab)
                {

                    InitializeWebBookingTab();

                    FormatNewWebBookingGrid();
                    //   FormatPendingWebBookingGrid();

                    grdWebBookingsNew.AllowEditRow = false;
                    grdWebBookingsNew.ViewCellFormatting += new CellFormattingEventHandler(grdWebBookings_ViewCellFormatting);
                    grdWebBookingsNew.GridViewElement.TableElement.VScrollBar.ValueChanged += VScrollBar_ValueChanged;
                    grdWebBookingsNew.KeyPress += new System.Windows.Forms.KeyPressEventHandler(grdWebBookingsNew_KeyPress);
                    grdWebBookingsNew.MouseClick += new System.Windows.Forms.MouseEventHandler(grdWebBookingsNew_MouseClick);


                    //   grdWebBookingsPending.ViewCellFormatting += new CellFormattingEventHandler(grdWebBookings_ViewCellFormatting);


                    PopulateWebBookingsGrid();
                    //   PopulateDeclinedWebBookings();

                }


                if (HasBookingHistoryTab)
                {

                    InitializeBookingHistoryTab();
                }





            }
            catch (Exception ex)
            {


            }
        }

        private void GrdPendingJobs_ToolTipTextNeeded(object sender, ToolTipTextNeededEventArgs e)
        {
            GridDataCellElement dataCell = sender as GridDataCellElement;
            if (dataCell != null)


            {
                if (dataCell.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID && dataCell.RowInfo.Cells["HasNotes"].Value.ToInt() > 0)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        e.ToolTipText = string.Join(Environment.NewLine, db.Booking_Notes.Where(c => c.BookingId == dataCell.RowInfo.Cells["Id"].Value.ToLong()).Select(c => c.notes).ToArray<string>());


                    }

                }

            }
        }

        private void InitializeLayoutSettings()
        {



            radPanel9.Visible = false;
            this.Pg_PendingJobs.Image = Resources.Resource1.today_booking; //needback
            this.Pg_PreBookings.Image = Resources.Resource1.pre_booking; //needback
            this.Pg_RecentJobs.Image = Resources.Resource1.search_job; //needback
            this.Pg_AllJobs.Image = Resources.Resource1.recent_job; //needback
            this.Pg_DrvBookingStats.Image = Resources.Resource1.driver_booking; //needback
            this.Pg_Quotations.Image = Resources.Resource1.quotation; //needback
            this.Pg_NoShow.Image = Resources.Resource1.no_show1; //needback
            this.Pg_Cancelled.Image = Resources.Resource1.cancelled; //needback
        }


        private void FullScreenLayout(bool showFullScreen)
        {


            tableLayoutPanel2.Visible = !showFullScreen;
        }



        void ddlCompany_Enter(object sender, EventArgs e)
        {
            if (ddlCompany.DataSource == null)
                ComboFunctions.FillCompanyCombo(ddlCompany);
        }

        void ddlVehicleType_Enter(object sender, EventArgs e)
        {
            if (ddlVehicleType.DataSource == null)
            {
                ComboFunctions.FillVehicleTypeCombo(ddlVehicleType);
            }
        }

        void ddlDriver_Enter(object sender, EventArgs e)
        {
            if (ddlDriver.DataSource == null)
            {
                ComboFunctions.FillDriverNoCombo(ddlDriver);


            }
        }

        void dragDropServicePending_PreviewDragStart(object sender, PreviewDragStartEventArgs e)
        {
            e.CanStart = false;
        }

        private void FillBookingTypesList()
        {
            if (listofBookingTypes == null)
            {
                try
                {

                    listofBookingTypes = db.BookingTypes.Where(c => c.BackgroundColor != null).ToList();
                }
                catch (Exception ex)
                {

                }

            }
        }



        List<BookingType> listofBookingTypes = null;
        void grdPendingJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {



            try
            {




                if (e.CellElement is GridHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        //    e.CellElement
                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = Color.White;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }

                }

                else if (e.CellElement is GridFilterCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        //e.CellElement.BackColor = GridBackColor;
                        // e.CellElement.RowElement.BackColor = GridBackColor;
                        // e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.ForeColor = Color.Black;
                        e.CellElement.BorderColor = GridRowBorderColor;
                        //   e.CellElement.BackColor = Color.White;
                        //  e.CellElement.RowElement.BackColor = Color.White;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }
                }





                else if (e.CellElement is GridGroupContentCellElement)
                {


                    e.CellElement.Font = bigFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.AliceBlue;
                    e.CellElement.RowElement.BackColor = Color.AliceBlue;
                    e.CellElement.RowElement.NumberOfColors = 1;
                    e.CellElement.ForeColor = GridGroupRowForeColor;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridRowHeaderCellElement)
                {


                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.CellElement is GridTableHeaderCellElement)
                        {

                            e.CellElement.BorderColor = _HeaderRowBorderColor;

                            e.CellElement.BackColor = _HeaderRowBackColor;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.Font = newFont;
                            e.CellElement.ForeColor = GridBackColor;
                            e.CellElement.DrawFill = true;

                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }
                        else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                        {

                            e.CellElement.Font = oldFont;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.White;
                            e.CellElement.RowElement.BackColor = GridBackColor;
                            e.CellElement.RowElement.NumberOfColors = 1;



                            e.CellElement.BorderColor = GridRowBorderColor;


                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }

                        else
                        {
                            e.CellElement.DrawFill = false;

                            if ((e.Row.Cells["SubCompanyBgColor"] != null))
                            {

                                e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BorderColor = GridRowBorderColor;
                                e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                e.CellElement.DrawFill = true;
                            }

                            if (e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool()
                                && e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool() == false)
                            //&& e.Row.Cells["DeadMileage"].Value.ToDecimal()<=AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToDecimal())
                            {

                                if (ApplyAccBgOnRow)
                                    e.CellElement.ForeColor = Color.Black;


                                e.CellElement.Font = VerybigFontNormal;
                                e.CellElement.Text = "A";




                            }
                            else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
                                && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool() == false)
                            {

                                if (ApplyAccBgOnRow)
                                    e.CellElement.ForeColor = Color.Black;


                                e.CellElement.Font = VerybigFontNormal;
                                e.CellElement.Text = "B";

                            }
                            else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
                               && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool())
                            {

                                if (ApplyAccBgOnRow)
                                    e.CellElement.ForeColor = Color.Black;



                                e.CellElement.Font = VerybigFont;
                                e.CellElement.Text = "R";

                            }
                            else
                            {
                                if (ApplyAccBgOnRow)
                                    e.CellElement.ForeColor = Color.Black;


                                e.CellElement.Font = VerybigFontNormal;
                                e.CellElement.Text = "H";


                            }

                        }
                    }
                }





                else if (e.CellElement is GridDataCellElement)
                {





                    e.CellElement.BackgroundImage = null;
                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;





                    if (ApplyAccBgOnRow == false)
                    {
                        //blackthemechanges NEW
                        if (AppVars.AppTheme == "ControlDefault")
                        {
                            e.CellElement.ForeColor = Color.Black;
                        }
                        else
                            e.CellElement.ForeColor = Color.White;

                        //old
                        // e.CellElement.ForeColor = Color.Black;



                        e.CellElement.Font = oldFont;

                        if (AppVars.AppTheme == "ControlDefault")
                        {
                            if (e.CellElement.RowElement.IsSelected == true)
                            {

                                e.CellElement.RowElement.NumberOfColors = 1;
                                e.CellElement.RowElement.BackColor = this.selectedRowBackColor;

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = this.selectedRowBackColor;
                                e.CellElement.ForeColor = this.selectedRowForeColor;
                                e.CellElement.Font = newFont;

                            }


                            else
                            {
                                e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                                if (e.CellElement.BackColor == this.selectedRowBackColor)
                                    e.CellElement.DrawFill = false;
                            }
                        }





                        //if (e.Column.IsVisible &&
                        //    (e.Column.Name != "Plot"
                        //    && e.Column.Name != "Time" && e.Column.Name != "PickupDate" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
                        //    && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
                        //   && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
                        //{
                        //    e.CellElement.DrawFill = false;
                        //}



                        //if (e.Column.IsVisible &&
                        //    (e.Column.Name != "Plot"
                        //    && e.Column.Name != "Time" && e.Column.Name != "PickupDate" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
                        //    && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
                        //   && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
                        //{
                        //    e.CellElement.DrawFill = false;
                        //}

                        //if (e.Column.IsVisible && ( e.Column.Name == "PickupDate" || e.Column.Name == "Passenger" ||  e.Column.Name == "Plot"))
                        //    {

                        //    e.CellElement.DrawFill = false;
                        //}





                        if (e.Column.Name == "Account"

                            )
                        {


                            if (e.CellElement.Value.ToStr() != string.Empty)
                            {

                                e.CellElement.NumberOfColors = 1;



                                string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                                string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                                if (Bgcolor != string.Empty && textColor != string.Empty)
                                {



                                    e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                                }
                                else
                                {
                                    e.CellElement.ForeColor = GridBackColor;
                                    e.CellElement.BackColor = Color.Crimson;


                                }

                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                e.CellElement.DrawFill = false;

                            }
                        }

                        else if (e.Column.Name == "Vehicle")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string Bgcolor = e.Row.Cells["BackgroundColor"].Value.ToStr().Trim();
                            string textColor = e.Row.Cells["TextColor"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {

                                e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());
                                e.CellElement.DrawFill = true;
                            }
                        }
                        else if (e.Column.Name == "Pax")
                        {

                            e.CellElement.TextAlignment = ContentAlignment.MiddleCenter;
                        }




                        else if (e.Column.IsVisible && (e.Column.Name == "From" || e.Column.Name == "Pickup"))
                        {





                            if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;

                                if (listofAirports == null)
                                {
                                    FillAirportsList();
                                }

                                if (listofAirports.Count(c => c.PostCode == e.Row.Cells["FromPostCode"].Value.ToStr()) > 0)
                                {
                                    e.CellElement.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["FromPostCode"].Value.ToStr())).BackgroundColor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["FromPostCode"].Value.ToStr())).TextColor.ToInt());


                                    //   e.CellElement.ForeColor = Color.Black;                                
                                }
                                else
                                {

                                    e.CellElement.BackColor = Color.FromArgb(-5374161);
                                    e.CellElement.ForeColor = Color.Black;
                                }






                                //if (e.Row.Cells["FromLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["FromLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;



                            }
                            //else if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.OUTOFTOWN)
                            //{
                            //    if (e.CellElement.RowElement.IsSelected == false)
                            //    {
                            //        e.CellElement.BackColor = GridBackColor;
                            //    }

                            //    //int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                            //    //if (bgColor != 0)
                            //    //{
                            //    //    e.CellElement.NumberOfColors = 1;
                            //    //    e.CellElement.BackColor = Color.FromArgb(bgColor);
                            //    //    e.CellElement.DrawFill = true;
                            //    //}

                            //}
                            else
                            {


                                e.CellElement.DrawFill = false;



                            }
                        }

                        else if (e.Column.IsVisible && (e.Column.Name == "To" || e.Column.Name == "GoingTo"))
                        {

                            if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;


                                //e.CellElement.BackColor = Color.FromArgb(-5374161);
                                //e.CellElement.ForeColor = Color.Black;


                                if (listofAirports == null)
                                {
                                    FillAirportsList();
                                }

                                if (listofAirports.Count(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())) > 0)
                                {
                                    e.CellElement.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())).BackgroundColor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())).TextColor.ToInt());


                                }
                                else
                                {

                                    e.CellElement.BackColor = Color.FromArgb(-5374161);
                                    e.CellElement.ForeColor = Color.Black;
                                }


                                //  e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["ToLocBgColor"].Value.ToInt());


                                //if (e.Row.Cells["ToLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["ToLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;


                            }
                            else
                                e.CellElement.DrawFill = false;


                        }

                        else if (e.Column.Name == "Status")
                        {


                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                            e.CellElement.ForeColor = Color.Black;

                            e.CellElement.DrawFill = true;





                        }
                        else if (e.Column.Name == "Driver")
                        {
                            if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
                            {
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.Aqua;
                                e.CellElement.ForeColor = Color.Black;
                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                if (e.CellElement.BackColor == Color.Aqua)
                                {
                                    e.CellElement.BackColor = GridBackColor;
                                    e.CellElement.ForeColor = Color.Black;
                                }
                                else
                                {
                                    e.CellElement.DrawFill = false;

                                }
                            }

                        }

                        else if (e.Column.Name == "Fare")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string quoted = e.Row.Cells["NoofLuggages"].Value.ToStr().Trim();
                            if (quoted == "1")
                            {

                                e.CellElement.BackColor = Color.Orange;
                                e.CellElement.DrawFill = true;
                            }
                            else
                                e.CellElement.DrawFill = false;
                        }

                        else if (e.Column.Name == "HasNotesImg")
                        {

                            if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.OUTOFTOWN)
                            {
                                if (e.CellElement.RowElement.IsSelected == false)
                                {
                                    e.CellElement.BackColor = GridBackColor;
                                }

                                int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                                if (bgColor != 0)
                                {
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BackColor = Color.FromArgb(bgColor);
                                    e.CellElement.DrawFill = true;
                                }
                                else
                                {


                                    e.CellElement.DrawFill = false;



                                }

                            }

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }


                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;
                                }
                                else
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;

                                }
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {

                                if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
                                {

                                    e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn___Congestion;

                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;



                            }
                            else if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.Congestion;

                            }
                            else if (e.Row.Cells["BookingBackgroundColor"].Value != null || e.Row.Cells["GroupId"].Value.ToStr().Length > 0)
                            {
                                if (listofBookingTypes == null)
                                    FillBookingTypesList();


                                if (listofBookingTypes != null)
                                {
                                    e.CellElement.Text = listofBookingTypes.Where(c => c.BackgroundColor == e.Row.Cells["BookingBackgroundColor"].Value.ToInt())
                                        .Select(c => c.BookingTypeName).FirstOrDefault();


                                }

                                if (e.Row.Cells["GroupId"].Value.ToStr().Length > 0)
                                {
                                    e.CellElement.Text = e.Row.Cells["GroupId"].Value.ToStr();

                                }

                            }



                            else
                            {
                                e.CellElement.DrawFill = false;
                                e.CellElement.BackgroundImage = null;


                            }
                        }
                        else if (e.Column.Name == "Lead" || e.Column.Name == "Plot" || e.Column.Name == "Time" || e.Column.Name == "PickUpDate")
                        {

                            if (e.CellElement.BackColor != Color.Yellow && e.CellElement.BackColor != Color.LightPink)
                                e.CellElement.DrawFill = false;


                        }
                        else
                        {
                            e.CellElement.DrawFill = false;

                        }
                    }
                    else
                    {


                        //if (e.Column.IsVisible &&
                        //  (e.Column.Name == "Plot"
                        //  || e.Column.Name == "Time" || e.Column.Name == "Passenger" || e.Column.Name == "Driver"
                        //  || e.Column.Name == "To" || e.Column.Name == "UpdateBy" || e.Column.Name == "Fare" || e.Column.Name == "MobileNo" || e.Column.Name == "From"
                        // || e.Column.Name == "FromPostCode" || e.Column.Name == "ToPostCode"))
                        //{
                        //    if (e.Row.Cells["PickupDateTemp"].Value.ToDateTime()<now)
                        //    {
                        //        e.CellElement.NumberOfColors = 1;
                        //        e.CellElement.BackColor = Color.LightPink;
                        //        e.CellElement.ForeColor = Color.Black;
                        //        e.CellElement.DrawFill = true;
                        //    }
                        //}

                        if (e.Column.Name == "Driver")
                        {

                            if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
                            {
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.Aqua;
                                e.CellElement.ForeColor = Color.Black;
                                e.CellElement.DrawFill = true;
                            }
                            else
                            {

                                e.CellElement.BackColor = GridBackColor;
                                e.CellElement.ForeColor = Color.Black;
                                e.CellElement.DrawFill = true;



                            }



                        }
                        else if (e.Column.Name == "Fare")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string quoted = e.Row.Cells["NoofLuggages"].Value.ToStr().Trim();
                            if (quoted == "1")
                            {

                                e.CellElement.BackColor = Color.Orange;
                                e.CellElement.DrawFill = true;
                            }
                            else
                                e.CellElement.DrawFill = false;
                        }
                        else if (e.Column.Name == "HasNotesImg")


                        {


                            if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.OUTOFTOWN)
                            {
                                e.CellElement.DrawFill = false;
                                if (e.CellElement.RowElement.IsSelected == false)
                                {
                                    e.CellElement.BackColor = GridBackColor;
                                    //    e.CellElement.DrawFill = true;
                                }

                                int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                                if (bgColor != 0)
                                {
                                    e.CellElement.DrawFill = true;
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BackColor = Color.FromArgb(bgColor);

                                    //e.CellElement.DrawFill = true;
                                }
                                else
                                {


                                    e.CellElement.DrawFill = false;



                                }

                            }

                            if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;
                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {

                                if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
                                {

                                    e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn___Congestion;

                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;



                            }
                            else if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.Congestion;

                            }

                            else if (e.Row.Cells["BookingBackgroundColor"].Value != null)
                            {
                                if (listofBookingTypes == null)
                                    FillBookingTypesList();


                                if (listofBookingTypes != null)
                                {
                                    e.CellElement.Text = listofBookingTypes.Where(c => c.BackgroundColor == e.Row.Cells["BookingBackgroundColor"].Value.ToInt()).Select(c => c.BookingTypeName).FirstOrDefault();
                                }
                            }


                            else
                            {
                                e.CellElement.DrawFill = false;
                                e.CellElement.BackgroundImage = null;


                            }
                        }

                        if (e.CellElement.IsCurrent)
                        {
                            e.CellElement.DrawFill = false;
                        }


                    }



                    if (e.Column.IsVisible)

                    {
                        e.CellElement.ToolTipText = e.CellElement.Value.ToStr();
                    }


























                }
            }
            catch { }
        }


        //void grdPendingJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        //{



        //    try
        //    {




        //        if (e.CellElement is GridHeaderCellElement)
        //        {
        //            if (AppVars.AppTheme == "ControlDefault")
        //            {
        //                //    e.CellElement
        //                e.CellElement.BorderColor = _HeaderRowBorderColor;
        //                e.CellElement.BorderColor2 = _HeaderRowBorderColor;
        //                e.CellElement.BorderColor3 = _HeaderRowBorderColor;
        //                e.CellElement.BorderColor4 = _HeaderRowBorderColor;


        //                // e.CellElement.DrawBorder = false;
        //                e.CellElement.BackColor = _HeaderRowBackColor;
        //                e.CellElement.NumberOfColors = 1;
        //                e.CellElement.Font = newFont;
        //                e.CellElement.ForeColor = Color.White;
        //                e.CellElement.DrawFill = true;

        //                e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
        //            }

        //        }

        //        else if (e.CellElement is GridFilterCellElement)
        //        {
        //            if (AppVars.AppTheme == "ControlDefault")
        //            {
        //                 e.CellElement.Font = oldFont;
        //                //e.CellElement.NumberOfColors = 1;
        //                //e.CellElement.BackColor = GridBackColor;
        //                // e.CellElement.RowElement.BackColor = GridBackColor;
        //                // e.CellElement.RowElement.NumberOfColors = 1;
        //                e.CellElement.ForeColor = Color.Gainsboro;
        //                e.CellElement.BorderColor = GridRowBorderColor;


        //                e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
        //            }
        //        }


        //        else if (e.CellElement is GridGroupContentCellElement)
        //        {


        //            e.CellElement.Font = bigFont;
        //            e.CellElement.NumberOfColors = 1;
        //            e.CellElement.BackColor = GridBackColor;
        //            e.CellElement.RowElement.BackColor = GridBackColor;
        //            e.CellElement.RowElement.NumberOfColors = 1;
        //            e.CellElement.ForeColor = GridGroupRowForeColor;

        //            e.CellElement.BorderColor = GridRowBorderColor;
        //            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
        //        }

        //        else if (e.CellElement is GridRowHeaderCellElement)
        //        {


        //            if (AppVars.AppTheme == "ControlDefault")
        //            {
        //                if (e.CellElement is GridTableHeaderCellElement)
        //                {

        //                    e.CellElement.BorderColor = _HeaderRowBorderColor;

        //                    e.CellElement.BackColor = _HeaderRowBackColor;
        //                    e.CellElement.NumberOfColors = 1;
        //                    e.CellElement.Font = newFont;
        //                    e.CellElement.ForeColor = GridBackColor;
        //                    e.CellElement.DrawFill = true;

        //                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

        //                }
        //                else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
        //                {

        //                    e.CellElement.Font = oldFont;
        //                    e.CellElement.NumberOfColors = 1;
        //                    e.CellElement.BackColor = Color.White;
        //                    e.CellElement.RowElement.BackColor = GridBackColor;
        //                    e.CellElement.RowElement.NumberOfColors = 1;



        //                    e.CellElement.BorderColor = GridRowBorderColor;


        //                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

        //                }

        //                else
        //                {
        //                    e.CellElement.DrawFill = false;

        //                    if ((e.Row.Cells["SubCompanyBgColor"] != null))
        //                    {

        //                        e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
        //                        e.CellElement.NumberOfColors = 1;
        //                        e.CellElement.BorderColor = GridRowBorderColor;
        //                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
        //                        e.CellElement.DrawFill = true;
        //                    }

        //                    if (e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool()
        //                        && e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool() == false)
        //                    //&& e.Row.Cells["DeadMileage"].Value.ToDecimal()<=AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToDecimal())
        //                    {

        //                        if (ApplyAccBgOnRow)
        //                            e.CellElement.ForeColor = Color.Black;


        //                        e.CellElement.Font = VerybigFontNormal;
        //                        e.CellElement.Text = "A";




        //                    }
        //                    else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
        //                        && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool() == false)
        //                    {

        //                        if (ApplyAccBgOnRow)
        //                            e.CellElement.ForeColor = Color.Black;


        //                        e.CellElement.Font = VerybigFontNormal;
        //                        e.CellElement.Text = "B";

        //                    }
        //                    else if (e.Row.Cells["IsBidding"] != null && e.Row.Cells["IsBidding"].Value.ToBool()
        //                       && e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool())
        //                    {

        //                        if (ApplyAccBgOnRow)
        //                            e.CellElement.ForeColor = Color.Black;



        //                        e.CellElement.Font = VerybigFont;
        //                        e.CellElement.Text = "R";

        //                    }
        //                    else
        //                    {
        //                        if (ApplyAccBgOnRow)
        //                            e.CellElement.ForeColor = Color.Black;


        //                        e.CellElement.Font = VerybigFontNormal;
        //                        e.CellElement.Text = "H";


        //                    }

        //                }
        //            }
        //        }





        //        else if (e.CellElement is GridDataCellElement)
        //        {





        //            e.CellElement.BackgroundImage = null;
        //            e.CellElement.BorderColor = GridRowBorderColor;
        //            e.CellElement.BorderColor2 = GridRowBorderColor;
        //            e.CellElement.BorderColor3 = GridRowBorderColor;
        //            e.CellElement.BorderColor4 = GridRowBorderColor;

        //            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;





        //            if (ApplyAccBgOnRow == false)
        //            {
        //                //blackthemechanges NEW
        //                if (AppVars.AppTheme == "ControlDefault")
        //                {
        //                    e.CellElement.ForeColor = Color.Black;
        //                }
        //                else
        //                    e.CellElement.ForeColor = Color.White;

        //                //old
        //                // e.CellElement.ForeColor = Color.Black;



        //                e.CellElement.Font = oldFont;

        //                if (AppVars.AppTheme == "ControlDefault")
        //                {
        //                    if (e.CellElement.RowElement.IsSelected == true)
        //                    {

        //                        e.CellElement.RowElement.NumberOfColors = 1;
        //                        e.CellElement.RowElement.BackColor = this.selectedRowBackColor;

        //                        e.CellElement.NumberOfColors = 1;
        //                        e.CellElement.BackColor = this.selectedRowBackColor;
        //                        e.CellElement.ForeColor = this.selectedRowForeColor;
        //                        e.CellElement.Font = newFont;

        //                    }


        //                    else
        //                    {
        //                        e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

        //                        if (e.CellElement.BackColor == this.selectedRowBackColor)
        //                            e.CellElement.DrawFill = false;
        //                    }
        //                }





        //                //if (e.Column.IsVisible &&
        //                //    (e.Column.Name != "Plot"
        //                //    && e.Column.Name != "Time" && e.Column.Name != "PickupDate" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
        //                //    && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
        //                //   && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
        //                //{
        //                //    e.CellElement.DrawFill = false;
        //                //}



        //                if (e.Column.IsVisible &&
        //                    (e.Column.Name != "Plot"
        //                    && e.Column.Name != "Time" && e.Column.Name != "PickUpDate" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
        //                    && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
        //                   && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
        //                {
        //                    e.CellElement.DrawFill = false;
        //                }






        //                if (e.Column.Name == "Account"

        //                    )
        //                {


        //                    if (e.CellElement.Value.ToStr() != string.Empty)
        //                    {

        //                        e.CellElement.NumberOfColors = 1;



        //                        string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
        //                        string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

        //                        if (Bgcolor != string.Empty && textColor != string.Empty)
        //                        {



        //                            e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
        //                            e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

        //                        }
        //                        else
        //                        {
        //                            e.CellElement.ForeColor = GridBackColor;
        //                            e.CellElement.BackColor = Color.Crimson;


        //                        }

        //                        e.CellElement.DrawFill = true;
        //                    }
        //                    else
        //                    {
        //                        e.CellElement.DrawFill = false;

        //                    }
        //                }

        //                else if (e.Column.Name == "Vehicle")
        //                {

        //                    e.CellElement.NumberOfColors = 1;



        //                    string Bgcolor = e.Row.Cells["BackgroundColor"].Value.ToStr().Trim();
        //                    string textColor = e.Row.Cells["TextColor"].Value.ToStr().Trim();

        //                    if (Bgcolor != string.Empty && textColor != string.Empty)
        //                    {

        //                        e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
        //                        e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());
        //                        e.CellElement.DrawFill = true;
        //                    }
        //                }
        //                else if (e.Column.Name == "Pax")
        //                {

        //                    e.CellElement.TextAlignment = ContentAlignment.MiddleCenter;
        //                }




        //                else if (e.Column.IsVisible && (e.Column.Name == "From" || e.Column.Name == "Pickup"))
        //                {





        //                    if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
        //                    {

        //                        e.CellElement.NumberOfColors = 1;
        //                        e.CellElement.DrawFill = true;

        //                        if (listofAirports == null)
        //                        {
        //                            FillAirportsList();
        //                        }

        //                        if (listofAirports.Count(c => c.PostCode == e.Row.Cells["FromPostCode"].Value.ToStr()) > 0)
        //                        {
        //                            e.CellElement.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["FromPostCode"].Value.ToStr())).BackgroundColor.ToInt());
        //                            e.CellElement.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["FromPostCode"].Value.ToStr())).TextColor.ToInt());


        //                            //   e.CellElement.ForeColor = Color.Black;                                
        //                        }
        //                        else
        //                        {

        //                            e.CellElement.BackColor = Color.FromArgb(-5374161);
        //                            e.CellElement.ForeColor = Color.Black;
        //                        }






        //                        //if (e.Row.Cells["FromLocTextColor"].Value != null)
        //                        //{

        //                        //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["FromLocTextColor"].Value.ToInt());

        //                        //}
        //                        //else
        //                        //    e.CellElement.ForeColor = Color.Black;



        //                    }
        //                    //else if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.OUTOFTOWN)
        //                    //{
        //                    //    if (e.CellElement.RowElement.IsSelected == false)
        //                    //    {
        //                    //        e.CellElement.BackColor = GridBackColor;
        //                    //    }

        //                    //    //int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

        //                    //    //if (bgColor != 0)
        //                    //    //{
        //                    //    //    e.CellElement.NumberOfColors = 1;
        //                    //    //    e.CellElement.BackColor = Color.FromArgb(bgColor);
        //                    //    //    e.CellElement.DrawFill = true;
        //                    //    //}

        //                    //}
        //                    else
        //                    {


        //                        e.CellElement.DrawFill = false;



        //                    }
        //                }

        //                else if (e.Column.IsVisible && (e.Column.Name == "To" || e.Column.Name == "GoingTo"))
        //                {

        //                    if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
        //                    {

        //                        e.CellElement.NumberOfColors = 1;
        //                        e.CellElement.DrawFill = true;


        //                        //e.CellElement.BackColor = Color.FromArgb(-5374161);
        //                        //e.CellElement.ForeColor = Color.Black;


        //                        if (listofAirports == null)
        //                        {
        //                            FillAirportsList();
        //                        }

        //                        if (listofAirports.Count(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())) > 0)
        //                        {
        //                            e.CellElement.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())).BackgroundColor.ToInt());
        //                            e.CellElement.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == (e.Row.Cells["ToPostCode"].Value.ToStr())).TextColor.ToInt());


        //                        }
        //                        else
        //                        {

        //                            e.CellElement.BackColor = Color.FromArgb(-5374161);
        //                            e.CellElement.ForeColor = Color.Black;
        //                        }


        //                        //  e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["ToLocBgColor"].Value.ToInt());


        //                        //if (e.Row.Cells["ToLocTextColor"].Value != null)
        //                        //{

        //                        //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["ToLocTextColor"].Value.ToInt());

        //                        //}
        //                        //else
        //                        //    e.CellElement.ForeColor = Color.Black;


        //                    }
        //                    else
        //                        e.CellElement.DrawFill = false;


        //                }

        //                else if (e.Column.Name == "Status")
        //                {


        //                    e.CellElement.NumberOfColors = 1;
        //                    e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
        //                    e.CellElement.ForeColor = Color.Black;

        //                    e.CellElement.DrawFill = true;





        //                }
        //                else if (e.Column.Name == "Driver")
        //                {
        //                    if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
        //                    {
        //                        e.CellElement.NumberOfColors = 1;
        //                        e.CellElement.BackColor = Color.Aqua;
        //                        e.CellElement.ForeColor = Color.Black;
        //                        e.CellElement.DrawFill = true;
        //                    }
        //                    else
        //                    {
        //                        if (e.CellElement.BackColor == Color.Aqua)
        //                        {
        //                            e.CellElement.BackColor = GridBackColor;
        //                            e.CellElement.ForeColor = Color.Black;
        //                        }
        //                    }

        //                }

        //                else if (e.Column.Name == "HasNotesImg")
        //                {

        //                    if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.OUTOFTOWN)
        //                    {
        //                        if (e.CellElement.RowElement.IsSelected == false)
        //                        {
        //                            e.CellElement.BackColor = GridBackColor;
        //                        }

        //                        int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

        //                        if (bgColor != 0)
        //                        {
        //                            e.CellElement.NumberOfColors = 1;
        //                            e.CellElement.BackColor = Color.FromArgb(bgColor);
        //                            e.CellElement.DrawFill = true;
        //                        }
        //                        else
        //                        {


        //                            e.CellElement.DrawFill = false;



        //                        }

        //                    }

        //                    if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
        //                    {

        //                        e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

        //                    }


        //                    else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
        //                    {
        //                        if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
        //                        {
        //                            e.CellElement.BackgroundImage = Resources.Resource1.bid3;

        //                        }
        //                        else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
        //                        {
        //                            e.CellElement.BackgroundImage = Resources.Resource1.text_WR;
        //                        }
        //                        else
        //                        {
        //                            e.CellElement.BackgroundImage = Resources.Resource1.text;

        //                        }
        //                    }
        //                    else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
        //                    {

        //                        if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
        //                        {

        //                            e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn___Congestion;

        //                        }
        //                        else
        //                            e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;



        //                    }
        //                    else if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
        //                    {

        //                        e.CellElement.BackgroundImage = Resources.Resource1.Congestion;

        //                    }
        //                    else if (e.Row.Cells["BookingBackgroundColor"].Value != null || e.Row.Cells["GroupId"].Value.ToStr().Length > 0)
        //                    {
        //                        if (listofBookingTypes == null)
        //                            FillBookingTypesList();


        //                        if (listofBookingTypes != null)
        //                        {
        //                            e.CellElement.Text = listofBookingTypes.Where(c => c.BackgroundColor == e.Row.Cells["BookingBackgroundColor"].Value.ToInt())
        //                                .Select(c => c.BookingTypeName).FirstOrDefault();


        //                        }

        //                        if (e.Row.Cells["GroupId"].Value.ToStr().Length > 0)
        //                        {
        //                            e.CellElement.Text = e.Row.Cells["GroupId"].Value.ToStr();

        //                        }

        //                    }



        //                    else
        //                    {
        //                        e.CellElement.DrawFill = false;
        //                        e.CellElement.BackgroundImage = null;


        //                    }
        //                }
        //            }
        //            else
        //            {


        //                //if (e.Column.IsVisible &&
        //                //  (e.Column.Name == "Plot"
        //                //  || e.Column.Name == "Time" || e.Column.Name == "Passenger" || e.Column.Name == "Driver"
        //                //  || e.Column.Name == "To" || e.Column.Name == "UpdateBy" || e.Column.Name == "Fare" || e.Column.Name == "MobileNo" || e.Column.Name == "From"
        //                // || e.Column.Name == "FromPostCode" || e.Column.Name == "ToPostCode"))
        //                //{
        //                //    if (e.Row.Cells["PickupDateTemp"].Value.ToDateTime()<now)
        //                //    {
        //                //        e.CellElement.NumberOfColors = 1;
        //                //        e.CellElement.BackColor = Color.LightPink;
        //                //        e.CellElement.ForeColor = Color.Black;
        //                //        e.CellElement.DrawFill = true;
        //                //    }
        //                //}

        //                if (e.Column.Name == "Driver")
        //                {
        //                    if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
        //                    {
        //                        e.CellElement.NumberOfColors = 1;
        //                        e.CellElement.BackColor = Color.Aqua;
        //                        e.CellElement.ForeColor = Color.Black;
        //                        e.CellElement.DrawFill = true;
        //                    }
        //                    else
        //                    {
        //                        if (e.CellElement.BackColor == Color.Aqua)
        //                        {
        //                            e.CellElement.BackColor = GridBackColor;
        //                            e.CellElement.ForeColor = Color.Black;
        //                            e.CellElement.DrawFill = true;
        //                        }

        //                    }



        //                }
        //                else if (e.Column.Name == "Fare")
        //                {

        //                    e.CellElement.NumberOfColors = 1;



        //                    string quoted = e.Row.Cells["NoofLuggages"].Value.ToStr().Trim();
        //                    if (quoted == "1")
        //                    {

        //                        e.CellElement.BackColor = Color.Orange;
        //                        e.CellElement.DrawFill = true;
        //                    }
        //                    else
        //                        e.CellElement.DrawFill = false;
        //                }
        //                else if (e.Column.Name == "HasNotesImg")


        //                {



        //                    if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
        //                    {
        //                        if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
        //                        {
        //                            e.CellElement.BackgroundImage = Resources.Resource1.bid3;

        //                        }
        //                        else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
        //                        {
        //                            e.CellElement.BackgroundImage = Resources.Resource1.text_WR;
        //                        }
        //                        else
        //                            e.CellElement.BackgroundImage = Resources.Resource1.text;
        //                    }
        //                    else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
        //                    {

        //                        if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
        //                        {

        //                            e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn___Congestion;

        //                        }
        //                        else
        //                            e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;



        //                    }
        //                    else if (e.Row.Cells["HasNotes"].Value.ToInt() == -1)
        //                    {

        //                        e.CellElement.BackgroundImage = Resources.Resource1.Congestion;

        //                    }

        //                    else if (e.Row.Cells["BookingBackgroundColor"].Value!=null)
        //                    {
        //                        if (listofBookingTypes == null)
        //                            FillBookingTypesList();


        //                        if (listofBookingTypes != null)
        //                        {
        //                            e.CellElement.Text = listofBookingTypes.Where(c=>c.BackgroundColor== e.Row.Cells["BookingBackgroundColor"].Value.ToInt()).Select(c=>c.BookingTypeName).FirstOrDefault();
        //                        }
        //                    }


        //                    else
        //                    {
        //                        e.CellElement.DrawFill = false;
        //                        e.CellElement.BackgroundImage = null;


        //                    }
        //                }

        //                if (e.CellElement.IsCurrent)
        //                {
        //                    e.CellElement.DrawFill = false;
        //                }


        //            }



        //            if (e.Column.IsVisible)

        //            {
        //                e.CellElement.ToolTipText = e.CellElement.Value.ToStr();
        //            }




























        //        }
        //    }
        //    catch { }
        //}


        public void FillAirportsList()
        {
            try
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {


                    listofAirports = db.Gen_Locations.Where(a => a.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT && a.BackgroundColor != null).ToList();
                    //where 
                    //select new Gen_Location
                    //{
                    //     Id= a.Id,
                    //     BackgroundColor= a.BackgroundColor,
                    //     TextColor= a.TextColor,
                    //      LocationName=a.LocationName

                    //}).ToList();

                }
            }
            catch
            {


            }

        }


        void grdPendingJobs_ViewRowFormatting(object sender, RowFormattingEventArgs e)
        {





            if (e.RowElement is GridDataRowElement)
            {




                e.RowElement.ForeColor = _CellForeColor;




                if (e.RowElement.RowInfo.Cells["Account"].Value.ToStr() != string.Empty)
                {

                    e.RowElement.Font = oldFont;

                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.RowElement.IsSelected == true)
                        {

                            e.RowElement.NumberOfColors = 1;
                            e.RowElement.BackColor = this.selectedRowBackColor;

                            e.RowElement.NumberOfColors = 1;
                            e.RowElement.BackColor = this.selectedRowBackColor;
                            e.RowElement.ForeColor = this.selectedRowForeColor;
                            e.RowElement.Font = newFont;
                            e.RowElement.DrawFill = true;
                        }


                        else
                        {
                            e.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);
                            e.RowElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.TwoWayBindingLocal);

                            if (e.RowElement.BackColor == this.selectedRowBackColor)
                                e.RowElement.DrawFill = false;



                            e.RowElement.NumberOfColors = 1;





                            string Bgcolor = e.RowElement.RowInfo.Cells["BackgroundColor1"].Value.ToStr().Trim();
                            string textColor = e.RowElement.RowInfo.Cells["TextColor1"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {




                                e.RowElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.RowElement.ForeColor = Color.FromArgb(textColor.ToInt());

                            }
                            else
                            {
                                e.RowElement.ForeColor = Color.AliceBlue;
                                e.RowElement.BackColor = Color.Crimson;


                            }



                        }
                    }





                    e.RowElement.DrawFill = true;



                }
                else
                {

                    e.RowElement.NumberOfColors = 1;

                    e.RowElement.Font = oldFont;

                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.RowElement.IsSelected == true)
                        {

                            e.RowElement.DrawFill = true;

                            e.RowElement.NumberOfColors = 1;
                            e.RowElement.BackColor = this.selectedRowBackColor;
                            e.RowElement.ForeColor = this.selectedRowForeColor;
                            e.RowElement.Font = newFont;

                        }


                        else
                        {



                            e.RowElement.BackColor = GridBackColor;
                            e.RowElement.ForeColor = Color.Black;
                            e.RowElement.DrawFill = true;
                        }
                    }




                    //if (e.RowElement.RowInfo.Cells["BookingBackgroundColor"].Value != null)
                    //{

                    //    e.RowElement.RowInfo.Cells["PickupDate"].Style.BackColor = Color.FromArgb((e.RowElement.RowInfo.Cells["BookingBackgroundColor"].Value.ToInt()));
                    //    e.RowElement.RowInfo.Cells["PickupDate"].Style.CustomizeFill = true;
                    //}





                }







                string Bggcolor = e.RowElement.RowInfo.Cells["BackgroundColor"].Value.ToStr().Trim();
                string texttColor = e.RowElement.RowInfo.Cells["TextColor"].Value.ToStr().Trim();

                if (Bggcolor != string.Empty && texttColor != string.Empty)
                {
                    if (e.RowElement.RowInfo.Cells["Vehicle"] != null)
                    {
                        e.RowElement.RowInfo.Cells["Vehicle"].Style.BackColor = Color.FromArgb(Bggcolor.ToInt());
                        e.RowElement.RowInfo.Cells["Vehicle"].Style.ForeColor = Color.FromArgb(texttColor.ToInt());
                        e.RowElement.RowInfo.Cells["Vehicle"].Style.CustomizeFill = true;
                    }

                }



                if (e.RowElement.RowInfo.Cells["FromLocTypeId"].Value.ToStr() != "" && e.RowElement.RowInfo.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {
                    if (listofAirports == null)
                        FillAirportsList();


                    if (listofAirports.Count(c => c.PostCode == e.RowElement.RowInfo.Cells["FromPostCode"].Value.ToStr()) > 0)
                    {
                        e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == e.RowElement.RowInfo.Cells["FromPostCode"].Value.ToStr()).BackgroundColor.ToInt());
                        // e.CellElement.ForeColor = Color.Black;
                        e.RowElement.RowInfo.Cells["From"].Style.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == e.RowElement.RowInfo.Cells["FromPostCode"].Value.ToStr()).TextColor.ToInt());

                    }
                    else
                    {
                        e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.GreenYellow;
                        e.RowElement.RowInfo.Cells["From"].Style.ForeColor = Color.Black;

                    }



                    e.RowElement.RowInfo.Cells["From"].Style.CustomizeFill = true;
                }

                if (e.RowElement.RowInfo.Cells["ToLocTypeId"].Value.ToStr() != "" && e.RowElement.RowInfo.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {

                    if (listofAirports == null)
                        FillAirportsList();



                    if (listofAirports.Count(c => c.PostCode == (e.RowElement.RowInfo.Cells["ToPostCode"].Value.ToStr())) > 0)
                    {
                        e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == e.RowElement.RowInfo.Cells["ToPostCode"].Value.ToStr()).BackgroundColor.ToInt());

                        e.RowElement.RowInfo.Cells["To"].Style.ForeColor = Color.FromArgb(listofAirports.FirstOrDefault(c => c.PostCode == e.RowElement.RowInfo.Cells["ToPostCode"].Value.ToStr()).TextColor.ToInt());

                    }
                    else
                    {
                        e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.GreenYellow;
                        e.RowElement.RowInfo.Cells["To"].Style.ForeColor = Color.Black;
                    }


                    e.RowElement.RowInfo.Cells["To"].Style.CustomizeFill = true;
                }

                if (e.RowElement.RowInfo.Cells["StatusColor"].Value.ToStr() != string.Empty)
                {

                    e.RowElement.RowInfo.Cells["Status"].Style.BackColor = Color.FromArgb(e.RowElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                    e.RowElement.RowInfo.Cells["Status"].Style.CustomizeFill = true;
                    // e.RowElement.DrawFill = true;
                }

                if (e.RowElement.RowInfo.Cells["Driver"].Value.ToStr() != string.Empty)
                {

                    if (e.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID

                   || (e.RowElement.RowInfo.Cells["IsConfirmedDriver"].Value.ToBool() == false
                   && e.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.WAITING)
                   || e.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.NOTACCEPTED
                   || e.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.REJECTED
                   || e.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.NOSHOW
                   )
                    {

                        if (AppVars.ShowAllocatedConfirmedDriver.ToBool() == false)
                        {

                            e.RowElement.RowInfo.Cells["Driver"].Style.BackColor = GridBackColor;
                            e.RowElement.RowInfo.Cells["Driver"].Style.ForeColor = GridBackColor;
                            e.RowElement.RowInfo.Cells["Driver"].Style.CustomizeFill = true;
                            // e.RowElement.DrawFill = true;
                        }
                    }
                    else
                    {
                        if (e.RowElement.RowInfo.Cells["Driver"].Style.ForeColor == GridBackColor)
                        {
                            e.RowElement.RowInfo.Cells["Driver"].Style.BackColor = GridBackColor;
                            e.RowElement.RowInfo.Cells["Driver"].Style.ForeColor = Color.Black;
                            e.RowElement.RowInfo.Cells["Driver"].Style.CustomizeFill = true;

                        }
                    }
                }



                #region dueregion
                if (e.RowElement.RowInfo.Cells["PickupDateTemp"].Value.ToDateTime() > now)
                {



                    cnt = 0;

                    if (cnt == 0)
                    {

                        if (e.RowElement.RowInfo.Cells["Due"].Value != null)
                        {
                            if (now > e.RowElement.RowInfo.Cells["Lead"].Value.ToDateTime())
                                cnt = 1;



                        }
                        else if (now > e.RowElement.RowInfo.Cells["Lead"].Value.ToDateTime())
                            cnt = 1;

                    }










                    if (cnt == 0)
                    {



                        if (e.RowElement.RowInfo.Cells["Time"].Style.BackColor == Color.Yellow)
                        {


                            if (e.RowElement.RowInfo.Cells["Plot"].ColumnInfo.IsVisible)
                            {

                                e.RowElement.RowInfo.Cells["Plot"].Style.CustomizeFill = false;

                            }

                            e.RowElement.RowInfo.Cells["PickupDate"].Style.CustomizeFill = false;

                            e.RowElement.RowInfo.Cells["Time"].Style.CustomizeFill = false;

                            //e.RowElement.RowInfo.Cells["Passenger"].Style.CustomizeFill = false;




                            //e.RowElement.RowInfo.Cells["To"].Style.CustomizeFill = false;






                            //e.RowElement.RowInfo.Cells["From"].Style.CustomizeFill = false;





                            //e.RowElement.RowInfo.Cells["MobileNo"].Style.CustomizeFill = false;



                            //e.RowElement.RowInfo.Cells["FromPostCode"].Style.CustomizeFill = false;





                            //e.RowElement.RowInfo.Cells["ToPostCode"].Style.CustomizeFill = false;

                            //e.RowElement.RowInfo.Cells["Driver"].Style.CustomizeFill = false;

                            //e.RowElement.RowInfo.Cells["UpdateBy"].Style.CustomizeFill = false;

                            //e.RowElement.RowInfo.Cells["Fare"].Style.CustomizeFill = false;

                        }

                    }
                    else
                    {



                        e.RowElement.RowInfo.Cells["Plot"].Style.BackColor = Color.Yellow;
                        e.RowElement.RowInfo.Cells["Plot"].Style.CustomizeFill = true;


                        e.RowElement.RowInfo.Cells["PickupDate"].Style.BackColor = Color.Yellow;
                        e.RowElement.RowInfo.Cells["PickupDate"].Style.CustomizeFill = true;

                        e.RowElement.RowInfo.Cells["Time"].Style.BackColor = Color.Yellow;
                        e.RowElement.RowInfo.Cells["Time"].Style.CustomizeFill = true;


                        //e.RowElement.RowInfo.Cells["Passenger"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["Passenger"].Style.CustomizeFill = true;




                        //if (e.RowElement.RowInfo.Cells["ToLocTypeId"].Value.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        //{
                        //    e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.Yellow;
                        //    e.RowElement.RowInfo.Cells["To"].Style.CustomizeFill = true;
                        //}

                        //if (e.RowElement.RowInfo.Cells["FromLocTypeId"].Value.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        //{
                        //    e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.Yellow;
                        //    e.RowElement.RowInfo.Cells["From"].Style.CustomizeFill = true;
                        //}

                        //e.RowElement.RowInfo.Cells["MobileNo"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["MobileNo"].Style.CustomizeFill = true;


                        //e.RowElement.RowInfo.Cells["FromPostCode"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["FromPostCode"].Style.CustomizeFill = true;

                        //e.RowElement.RowInfo.Cells["ToPostCode"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["ToPostCode"].Style.CustomizeFill = true;




                        //e.RowElement.RowInfo.Cells["Driver"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["Driver"].Style.CustomizeFill = true;


                        //e.RowElement.RowInfo.Cells["UpdateBy"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["UpdateBy"].Style.CustomizeFill = true;




                        //e.RowElement.RowInfo.Cells["Fare"].Style.BackColor = Color.Yellow;
                        //e.RowElement.RowInfo.Cells["Fare"].Style.CustomizeFill = true;


                    }
                }
                else
                {







                    //e.RowElement.RowInfo.Cells["UpdateBy"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["UpdateBy"].Style.CustomizeFill = true;

                    //if (e.RowElement.RowInfo.Cells["Driver"].Value == null)
                    //{
                    //    e.RowElement.RowInfo.Cells["Driver"].Style.BackColor = Color.LightPink;
                    //    e.RowElement.RowInfo.Cells["Driver"].Style.CustomizeFill = true;
                    //}
                    //e.RowElement.RowInfo.Cells["To"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["To"].Style.CustomizeFill = true;

                    //e.RowElement.RowInfo.Cells["From"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["From"].Style.CustomizeFill = true;

                    //e.RowElement.RowInfo.Cells["MobileNo"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["MobileNo"].Style.CustomizeFill = true;


                    //e.RowElement.RowInfo.Cells["FromPostCode"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["FromPostCode"].Style.CustomizeFill = true;

                    //e.RowElement.RowInfo.Cells["ToPostCode"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["ToPostCode"].Style.CustomizeFill = true;



                    //e.RowElement.RowInfo.Cells["Passenger"].Style.BackColor = Color.LightPink;
                    //e.RowElement.RowInfo.Cells["Passenger"].Style.CustomizeFill = true;

                    if (e.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() != Enums.BOOKINGSTATUS.BID)
                    {

                        e.RowElement.RowInfo.Cells["Time"].Style.BackColor = Color.LightPink;
                        e.RowElement.RowInfo.Cells["Time"].Style.CustomizeFill = true;



                        e.RowElement.RowInfo.Cells["Plot"].Style.BackColor = Color.LightPink;
                        e.RowElement.RowInfo.Cells["Plot"].Style.CustomizeFill = true;


                        e.RowElement.RowInfo.Cells["PickupDate"].Style.BackColor = Color.LightPink;
                        e.RowElement.RowInfo.Cells["PickupDate"].Style.CustomizeFill = true;
                    }








                }

                #endregion

            }

        }

        void grdPreBookings_ViewRowFormatting(object sender, RowFormattingEventArgs e)
        {
            if (e.RowElement.RowInfo.Group != null && e.RowElement.RowInfo.Group.IsExpanded == false)
            {
                e.RowElement.BorderColor = Color.Black;
                e.RowElement.BorderColor2 = Color.Black;
                e.RowElement.BorderColor3 = Color.Black;
                e.RowElement.BorderColor4 = Color.Black;
                e.RowElement.RowInfo.Group.Expand();

            }
        }



        void grdAllJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {


                //


                if (e.CellElement is GridHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        //    e.CellElement
                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = GridBackColor;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }

                }

                else if (e.CellElement is GridFilterCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        e.CellElement.Font = oldFont;
                        //e.CellElement.NumberOfColors = 1;
                        //e.CellElement.BackColor = GridBackColor;
                        // e.CellElement.RowElement.BackColor = GridBackColor;
                        // e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.ForeColor = Color.Black;
                        e.CellElement.BorderColor = GridRowBorderColor;


                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }

                }


                else if (e.CellElement is GridGroupContentCellElement)
                {




                    e.CellElement.Font = bigFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.NumberOfColors = 1;
                    e.CellElement.ForeColor = Color.Blue;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridRowHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.CellElement is GridTableHeaderCellElement)
                        {

                            e.CellElement.BorderColor = _HeaderRowBorderColor;

                            e.CellElement.BackColor = _HeaderRowBackColor;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.Font = newFont;
                            e.CellElement.ForeColor = GridBackColor;
                            e.CellElement.DrawFill = true;

                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }
                        else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                        {

                            e.CellElement.Font = oldFont;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = GridBackColor;
                            e.CellElement.RowElement.BackColor = GridBackColor;
                            e.CellElement.RowElement.NumberOfColors = 1;



                            e.CellElement.BorderColor = GridRowBorderColor;


                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }

                        else
                        {
                            e.CellElement.DrawFill = false;

                            if (e.Row.Cells["IsAutoDespatch"] != null && e.Row.Cells["IsAutoDespatch"].Value.ToBool() && e.Row.Cells["Plot"].Value.ToStr() != "")
                            //&& e.Row.Cells["DeadMileage"].Value.ToDecimal()<=AppVars.objPolicyConfiguration.AutoDespatchElapsedTime.ToDecimal())
                            {

                                if (e.CellElement.GridControl != null && e.CellElement.GridControl.Name == "grdAllJobs" && DateTime.Now.AddMinutes(5) >= e.Row.Cells["PickupDateTemp"].Value.ToDateTime())
                                {
                                    if (e.CellElement.RowElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                                    {

                                        e.CellElement.RowElement.BackColor = Color.DarkOrange;
                                        e.CellElement.RowElement.NumberOfColors = 1;
                                        e.CellElement.RowElement.BorderColor = GridRowBorderColor;
                                        e.CellElement.RowElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                        e.CellElement.RowElement.DrawFill = true;
                                    }
                                    else
                                    {
                                        e.CellElement.BackColor = Color.DarkOrange;
                                        e.CellElement.NumberOfColors = 1;
                                        e.CellElement.BorderColor = GridRowBorderColor;
                                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                        e.CellElement.DrawFill = true;

                                    }

                                }
                                else
                                {


                                    e.CellElement.BackColor = Color.DarkOrange;
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BorderColor = GridRowBorderColor;
                                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                    e.CellElement.DrawFill = true;
                                }

                            }
                            else
                            {



                                if ((e.Row.Cells["SubCompanyBgColor"] != null))
                                {

                                    e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BorderColor = GridRowBorderColor;
                                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                                    e.CellElement.DrawFill = true;
                                }
                            }

                        }
                    }
                }





                else if (e.CellElement is GridDataCellElement)
                {





                    e.CellElement.BackgroundImage = null;
                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;





                    if (ApplyAccBgOnRow == false)
                    {

                        if (AppVars.AppTheme == "ControlDefault")
                        {
                            e.CellElement.ForeColor = Color.Black;
                        }
                        else
                            e.CellElement.ForeColor = Color.White;
                        // e.CellElement.ForeColor = Color.Black;



                        e.CellElement.Font = oldFont;

                        if (AppVars.AppTheme == "ControlDefault")
                        {
                            if (e.CellElement.RowElement.IsSelected == true)
                            {

                                e.CellElement.RowElement.NumberOfColors = 1;
                                e.CellElement.RowElement.BackColor = this.selectedRowBackColor;

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = this.selectedRowBackColor;
                                e.CellElement.ForeColor = this.selectedRowForeColor;
                                e.CellElement.Font = newFont;

                            }


                            else
                            {
                                e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                                if (e.CellElement.BackColor == this.selectedRowBackColor)
                                    e.CellElement.DrawFill = false;
                            }
                        }





                        if (e.Column.IsVisible &&
                            (e.Column.Name != "Plot"
                            && e.Column.Name != "Time" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
                            && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
                           && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
                        {
                            e.CellElement.DrawFill = false;
                        }




                        //if (e.Column.Name == "RefNumber" || e.Column.Name == "PickUpDate")
                        //{





                        //    if (e.CellElement.RowElement.IsSelected == false)
                        //    {
                        //        e.CellElement.BackColor = GridBackColor;
                        //    }

                        //    //int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                        //    //if (bgColor != 0)
                        //    //{
                        //    //    e.CellElement.NumberOfColors = 1;
                        //    //    e.CellElement.BackColor = Color.FromArgb(bgColor);
                        //    //    e.CellElement.DrawFill = true;
                        //    //}


                        //}





                        if (e.Column.Name == "Account"

                            )
                        {


                            if (e.CellElement.Value.ToStr() != string.Empty)
                            {

                                e.CellElement.NumberOfColors = 1;



                                string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                                string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                                if (Bgcolor != string.Empty && textColor != string.Empty)
                                {



                                    e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                                }
                                else
                                {
                                    e.CellElement.ForeColor = GridBackColor;
                                    e.CellElement.BackColor = Color.Crimson;


                                }

                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                e.CellElement.DrawFill = false;

                            }
                        }

                        else if (e.Column.Name == "Vehicle")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string Bgcolor = e.Row.Cells["BackgroundColor"].Value.ToStr().Trim();
                            string textColor = e.Row.Cells["TextColor"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {

                                e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());
                                e.CellElement.DrawFill = true;
                            }
                        }


                        else if (e.Column.IsVisible && (e.Column.Name == "From" || e.Column.Name == "Pickup"))
                        {





                            if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;


                                e.CellElement.BackColor = Color.FromArgb(-5374161);
                                e.CellElement.ForeColor = Color.Black;




                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.IsVisible && (e.Column.Name == "To" || e.Column.Name == "GoingTo"))
                        {

                            if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;



                                e.CellElement.BackColor = Color.FromArgb(-5374161);
                                e.CellElement.ForeColor = Color.Black;



                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.Name == "Status")
                        {


                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                            e.CellElement.ForeColor = Color.Black;

                            e.CellElement.DrawFill = true;





                        }
                        else if (e.Column.Name == "Driver")
                        {

                            //if (e.Row.Cells["GroupId"].Value != null && e.Row.Cells["IsConfirmedDriver"].Value.ToBool() == false && e.Row.Cells["Driver"].Value != null)
                            //{

                            //    e.CellElement.Font = newFont;
                            //    e.CellElement.NumberOfColors = 1;
                            //    e.CellElement.BackColor = GridBackColor;
                            //    e.CellElement.ForeColor = Color.WhiteSmoke;
                            //    e.CellElement.DrawFill = true;
                            //}
                            //else
                            //{

                            if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
                            {
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = Color.Aqua;
                                e.CellElement.ForeColor = Color.Black;
                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                if (e.CellElement.BackColor == Color.Aqua)
                                {
                                    e.CellElement.BackColor = GridBackColor;
                                    e.CellElement.ForeColor = Color.Black;
                                }
                            }





                            // }




                        }

                        else if (e.Column.Name == "HasNotesImg")
                        {

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }

                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;

                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {
                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }


                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }
                    }
                    else
                    {


                        if (e.Column.Name == "Fare")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string quoted = e.Row.Cells["NoofLuggages"].Value.ToStr().Trim();
                            if (quoted == "1")
                            {

                                e.CellElement.BackColor = Color.Orange;
                                e.CellElement.DrawFill = true;
                            }
                            else
                                e.CellElement.DrawFill = false;
                        }

                        if (e.Column.Name == "HasNotesImg"

                       )
                        {

                            if (e.Row.Cells["BabySeats"].Value.ToStr() != "")
                            {

                                e.CellElement.BackgroundImage = Resources.Resource1.babyseatsmall;

                            }

                            else if (e.Row.Cells["HasNotes"].Value.ToInt() > 0)
                            {
                                if (e.Row.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.BID)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.bid3;

                                }
                                else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                {
                                    e.CellElement.BackgroundImage = Resources.Resource1.text_WR;

                                }
                                else
                                    e.CellElement.BackgroundImage = Resources.Resource1.text;
                            }
                            else if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {
                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }


                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }

                        if (e.CellElement.IsCurrent)
                        {
                            e.CellElement.DrawFill = false;
                        }


                    }



                    //if (e.Column.Name == "Plot" && e.CellElement.Value.ToStr() != "")
                    //{

                    //    e.CellElement.ToolTipText = "Pickup is " + e.Row.Cells["DeadMileage"].Value.ToStr() + " mi away";


                    //}
                    //else
                    //    e.CellElement.ToolTipText = string.Empty;


                }
            }
            catch { }
        }







        void grdOnPlotDrivers_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Right)
                {

                    if (e.RowIndex != -1 && e.ColumnIndex != -1 && grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
                    {





                        if (plotsContextMenu == null)
                        {

                            plotsContextMenu = new ContextMenu();

                            MenuItem mItem = new MenuItem();
                            mItem.Text = "Track Driver";
                            mItem.Name = "trackdriver";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverOnPlots_ItemClick);

                            plotsContextMenu.MenuItems.Add(mItem);

                            mItem = new MenuItem();
                            mItem.Text = "Track Escort";
                            mItem.Name = "trackescort";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            if (AppVars.listUserRights.Count(c => c.functionId.ToUpper() == "SHOW TRACK ESCORT") > 0)
                            {
                                mItem.Visible = true;
                            }
                            else
                            {
                                mItem.Visible = false;
                            }
                            mItem.Click += new EventHandler(EscortOnPlots_ItemClick);

                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "Message Driver";
                            mItem.Name = "messagedriver";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverOnPlots_ItemClick);
                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "View Job";
                            mItem.Name = "viewjob";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverOnPlots_ItemClick);
                            plotsContextMenu.MenuItems.Add(mItem);



                            //mItem = new MenuItem();
                            //mItem.Text = "Call Customer";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);



                            //mItem = new MenuItem();
                            //mItem.Text = "Call Driver";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);



                            //mItem = new MenuItem();
                            //mItem.Text = "Cancel Job";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);



                            //mItem = new MenuItem();
                            //mItem.Text = "Recover Job";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);


                            //mItem = new MenuItem();
                            //mItem.Text = "No Pickup";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);


                            //mItem = new MenuItem();
                            //mItem.Text = "View Shift Jobs";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);


                            //mItem = new MenuItem();
                            //mItem.Text = "Clear Job";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);


                            //mItem = new MenuItem();
                            //mItem.Text = "Street View";
                            //mItem.Name = "moveupitem";
                            //mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            //mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            //plotsContextMenu.MenuItems.Add(mItem);
                            //



                            mItem = new MenuItem();
                            mItem.Text = "Move Up";
                            mItem.Name = "moveupitem";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);



                            mItem = new MenuItem();
                            mItem.Text = "Move Down";
                            mItem.Name = "movedownitem";
                            mItem.Visible = false;

                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "UnBlock";
                            mItem.Name = "unblock";
                            mItem.Visible = false;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(unBlockViewItem_Click);
                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "Logout";
                            mItem.Name = "logoutitem";
                            mItem.Visible = false;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "Move to Top";
                            mItem.Name = "movetop";
                            mItem.Visible = true;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPositionMoveContextMenuItem1_Click);
                            plotsContextMenu.MenuItems.Add(mItem);



                            //mItem = new MenuItem("UnBlock");
                            //mItem.ForeColor = Color.Black;
                            //unBlockViewItem.BackColor = Color.Red;
                            //unBlockViewItem.Click += new EventHandler(unBlockViewItem_Click);
                            //unBlockViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                            //driverContextMenu.Items.Add(unBlockViewItem);

                        }

                        if (grdOnPlotDrivers.Columns[e.ColumnIndex].Name == "SIN BIN")
                        {

                            plotsContextMenu.MenuItems["unblock"].Visible = true;
                            plotsContextMenu.MenuItems["moveupitem"].Visible = false;
                            plotsContextMenu.MenuItems["movedownitem"].Visible = false;
                            plotsContextMenu.MenuItems["logoutitem"].Visible = false;
                            plotsContextMenu.MenuItems["movetop"].Visible = false;

                            plotsContextMenu.MenuItems["unblock"].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();

                        }
                        else
                        {
                            plotsContextMenu.MenuItems["trackdriver"].Tag = e.RowIndex.ToStr() + ", " + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems["trackescort"].Tag = e.RowIndex.ToStr() + ", " + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems["messagedriver"].Tag = e.RowIndex.ToStr() + ", " + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems["viewjob"].Tag = e.RowIndex.ToStr() + ", " + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems["trackdriver"].Visible = true;
                            plotsContextMenu.MenuItems["trackescort"].Visible = true;
                            plotsContextMenu.MenuItems["messagedriver"].Visible = true;
                            plotsContextMenu.MenuItems["viewjob"].Visible = true;


                            plotsContextMenu.MenuItems["moveupitem"].Visible = true;
                            plotsContextMenu.MenuItems["movedownitem"].Visible = true;
                            plotsContextMenu.MenuItems["logoutitem"].Visible = false;
                            plotsContextMenu.MenuItems["movetop"].Visible = true;

                            plotsContextMenu.MenuItems["moveupitem"].Tag = e.RowIndex.ToStr() + ", " + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems["movedownitem"].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();

                            plotsContextMenu.MenuItems["logoutitem"].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();


                            plotsContextMenu.MenuItems["movetop"].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            plotsContextMenu.MenuItems["unblock"].Visible = false;
                        }




                        if (e.Button == MouseButtons.Right)
                        {
                            DataGridViewRow clickedRow = (sender as DataGridView).Rows[e.RowIndex];
                            if (!clickedRow.Selected)
                                grdOnPlotDrivers.CurrentCell = clickedRow.Cells[e.ColumnIndex];
                            var mousePosition = grdOnPlotDrivers.PointToClient(Cursor.Position);
                            plotsContextMenu.Show(grdOnPlotDrivers, mousePosition);
                        }



                    }

                }
            }
            catch (Exception ex)
            {


            }
        }



        ContextMenu plotsContextMenu;

        // For Toolip
        private void grdOnPlotDrivers_CellMouseEnter(object sender, DataGridViewCellEventArgs e)
        {

            try
            {
                if (e.RowIndex == -1 || e.ColumnIndex == -1)
                    return;


                if (grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value.ToStr() != string.Empty)
                {







                    DataGridViewRow row = grdOnPlotDrivers.Rows[e.RowIndex];


                    if (row != null)
                    {
                        long id = 0;

                        string plot = string.Empty;

                        int driverId = 0;
                        DateTime? loginDateTime = null;
                        driverId = row.Cells[e.ColumnIndex].ErrorText.ToInt();




                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            //  db.time.ConnectionTimeout = 5;
                            var loginData = db.Fleet_DriverQueueLists.Where(c => c.DriverId == driverId && c.Status == true).Select(args => new { args.Id, args.LoginDateTime }).FirstOrDefault();

                            id = loginData.Id;
                            loginDateTime = loginData.LoginDateTime;

                            var obj = db.stp_GetDriverToolTipData(driverId, id.ToInt(), loginDateTime).FirstOrDefault();

                            loginDateTime = obj.LoginDateTime;

                            string vehicleNo = obj.CompanyVehicle.ToStr();



                            if ((obj.CurrentJobId != null && (obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.ONBREAK)))
                            {
                                string journeyType = "";


                                if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                    journeyType = "(One Way Journey)";
                                else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                                    journeyType = "(Return Journey)";
                                else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                    journeyType = "(Wait and Return Journey)";

                                string lastGPSContact = string.Empty;

                                lastGPSContact = " , Last GPS Contact : " + string.Format("{0:dd-MMM HH:mm}", obj.LastGpsContact.ToDateTime());



                                grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].ToolTipText = "Driver : " + obj.DriverNo.ToStr() + " - " + obj.DriverName.ToStr()

                                               + Environment.NewLine + "Status : " + obj.Status.ToStr() + lastGPSContact +
                                                (vehicleNo != string.Empty ? Environment.NewLine + "Company Vehicle : " + vehicleNo : "")

                                              + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + Environment.NewLine + "On Job:" + journeyType + Environment.NewLine + " Pickup : "
                                                                  + obj.FromAddress + Environment.NewLine + " Destination : " + obj.ToAddress : "")
                                              + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.DropOffZoneId != null ? Environment.NewLine + "DropOff Plot : " + obj.DropOffZoneName : "")
                                                + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + " Pickup Date/Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", obj.PickupDateTime) : "")

                                              + Environment.NewLine + "Vehicle : " + obj.VehicleType.ToStr() + " - " + obj.VehicleNo.ToStr() + " - " + obj.VehicleColor.ToStr() + " - " + obj.VehicleMake.ToStr();





                            }
                            else
                            {


                                loginDateTime = obj.LoginDateTime;



                                DateTime newLoginDateTime = loginDateTime.ToDateTime();

                                if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                                {

                                    newLoginDateTime = loginDateTime.Value.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                                    //   loginDateTime = General.GetObject<Fleet_DriverQueueList>(c => c.LogoutDateTime.Value > newLoginDateTime).DefaultIfEmpty().LoginDateTime;
                                }


                                if (loginDateTime == null)
                                    loginDateTime = obj.LoginDateTime;



                                string waitSince = string.Empty;

                                if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.WaitSinceOn != null)
                                {
                                    try
                                    {
                                        waitSince = GetMinsInWords(DateTime.Now.Subtract(obj.WaitSinceOn.Value).TotalMinutes);





                                        waitSince = Environment.NewLine + "Wait Since : " + waitSince;
                                    }
                                    catch
                                    {


                                    }


                                }






                                int totalMins = DateTime.Now.Subtract(loginDateTime.Value).TotalMinutes.ToInt();
                                decimal AvgEarning = 0.00m;


                                decimal totalEarning = obj.TotalEarning.ToDecimal();
                                string earn = string.Format("{0:c}", totalEarning).Substring(1);
                                string lastGPSContact = string.Empty;
                                string sinbinTill = string.Empty;

                                if (obj.DriverId != null)
                                {
                                    lastGPSContact = Environment.NewLine + "Last GPS Contact Time : " + string.Format("{0:dd-MMM HH:mm}", obj.LastGpsContact.ToDateTime());


                                    if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.SINBIN)
                                    {
                                        sinbinTill = " - till : " + string.Format("{0:HH:mm:ss}", obj.SinBinTillOn.ToDateTime());
                                    }

                                }





                                if (totalMins > 0)
                                {
                                    totalMins = Math.Ceiling((totalMins.ToDecimal() * 60) / 3600).ToInt();
                                    AvgEarning = Math.Round((totalEarning / totalMins), 2);



                                }

                                grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].ToolTipText = "Driver No : " + obj.DriverNo.ToStr()
                                                    + Environment.NewLine +
                                                     "Name : " + obj.DriverName.ToStr() + Environment.NewLine
                                                     + plot


                                                        + "Jobs Done : " + obj.TotalJobs.ToInt()
                                                    + Environment.NewLine + "Total Earned : £ " + earn
                                                     + Environment.NewLine + "Avg earning per hour  : £ " + AvgEarning
                                                    + Environment.NewLine + "Status : " + obj.Status.ToStr() + sinbinTill
                                                    + lastGPSContact
                                                    + (vehicleNo != string.Empty ? Environment.NewLine + "Company Vehicle : " + vehicleNo : "")
                                                    + Environment.NewLine + "Login Since : " + loginDateTime + " (" + obj.LoginFrom.ToStr() + ")"

                                                    + Environment.NewLine + "Vehicle : " + obj.VehicleType.ToStr() + " - " + obj.VehicleNo.ToStr() + " - " + obj.VehicleColor.ToStr() + " - " + obj.VehicleMake.ToStr()

                                                    + waitSince;
                            }

                        }





                    }

                    //if (row != null)
                    //{


                    //    string plot = string.Empty;


                    //    int driverId = row.Cells[e.ColumnIndex].ErrorText.ToInt();
                    //    if (driverId > 0)
                    //    {
                    //        obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                    //    }



                    //    DateTime? loginDateTime = null;

                    //    if (obj != null)
                    //    {



                    //        string vehicleNo = obj.FleetMasterId != null ? obj.Fleet_Master.Fleet_VehicleType.VehicleType + " - " + obj.Fleet_Master.Plateno.ToStr() : "";


                    //        loginDateTime = obj.LoginDateTime;
                    //        int driverType = obj.Fleet_Driver.DefaultIfEmpty().DriverTypeId.ToInt();





                    //        var list = from a in General.GetQueryable<Booking>(c => (c.PickupDateTime != null && c.PickupDateTime >= loginDateTime) && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                    //                                      && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED && c.Fleet_Driver.DriverTypeId == driverType)


                    //                   select new
                    //                   {

                    //                       FareRate = a.TotalCharges
                    //                   };



                    //        string waitSince = string.Empty;

                    //        if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.WaitSinceOn != null)
                    //        {
                    //            waitSince = string.Format("{0:HH:mm:ss}", DateTime.Now.Subtract(obj.WaitSinceOn.Value));
                    //            waitSince = waitSince.Remove(waitSince.LastIndexOf(":")).Trim() + " min(s)";


                    //            if (waitSince.StartsWith("00"))
                    //                waitSince = waitSince.Remove(0, waitSince.IndexOf(":") + 1).Trim();


                    //            else if (waitSince.StartsWith("0"))
                    //                waitSince = waitSince.Remove(0, 1);

                    //            if (waitSince.Contains(":"))
                    //                waitSince = waitSince.Replace(":", " hour(s) ").Trim();


                    //            waitSince = Environment.NewLine + "Wait Since : " + waitSince;


                    //        }


                    //        string journeyType = "";

                    //        if (obj.CurrentJobId != null)
                    //        {
                    //            if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                    //                journeyType = "(One Way Journey)";
                    //            else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                    //                journeyType = "(Return Journey)";
                    //            else if (obj.Booking.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                    //                journeyType = "(Wait and Return Journey)";
                    //        }


                    //        string lastGPSContact = string.Empty;

                    //        string sinbinTill = string.Empty;
                    //        if (obj.DriverId != null && obj.Fleet_Driver.HasPDA.ToBool() && obj.Fleet_Driver.Fleet_Driver_Locations.Count > 0)
                    //        {
                    //            lastGPSContact = Environment.NewLine + "Last GPS Contact Time : " + string.Format("{0:dd-MMM HH:mm}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().UpdateDate.ToDateTime());

                    //            if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.SINBIN)
                    //            {
                    //                sinbinTill = " - till : " + string.Format("{0:HH:mm:ss}", obj.Fleet_Driver.Fleet_Driver_Locations.FirstOrDefault().DefaultIfEmpty().SinBinTillOn.ToDateTime());
                    //            }
                    //        }


                    //        decimal totalEarning = list.Sum(c => c.FareRate).ToDecimal();
                    //        string earn = string.Format("{0:c}", totalEarning).Substring(1);
                    //        grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].ToolTipText = "Driver No : " + obj.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr()
                    //                            + Environment.NewLine +
                    //                             "Name : " + obj.Fleet_Driver.DefaultIfEmpty().DriverName.ToStr() + Environment.NewLine
                    //                             + plot


                    //                                + "Jobs Done : " + list.Count()
                    //                            + Environment.NewLine + "Total Earned : £ " + earn
                    //                            + Environment.NewLine + "Status : " + obj.Fleet_DriverWorkingStatus.DefaultIfEmpty().WorkStatus.ToStr() + sinbinTill
                    //                            + lastGPSContact
                    //                            + (vehicleNo != string.Empty ? Environment.NewLine + "Vehicle : " + vehicleNo : "")
                    //                            + Environment.NewLine + "Login Since : " + loginDateTime + " (" + obj.LoginFrom.ToStr() + ")"
                    //                            + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + Environment.NewLine + "On Job:" + journeyType + Environment.NewLine + " Pickup : "
                    //                                                + obj.Booking.FromAddress + Environment.NewLine + " Destination : " + obj.Booking.ToAddress : "")
                    //                            + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.Booking.DropOffZoneId != null ? Environment.NewLine + "DropOff Plot : " + obj.Booking.Gen_Zone.ZoneName + "(" + obj.Booking.Gen_Zone.DefaultIfEmpty().ShortName.ToStr() + ")" : "")
                    //                            + Environment.NewLine + "Vehicle : " + obj.Fleet_Driver.DefaultIfEmpty().Fleet_VehicleType.VehicleType.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleNo.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleColor.ToStr() + " - " + obj.Fleet_Driver.DefaultIfEmpty().VehicleMake.ToStr()

                    //                            + waitSince;


                    //    }




                    //}

                }

            }
            catch (Exception ex)
            {


            }




        }


        #region WEBBOOKING TAB

        private void InitializeBookingHistoryTab()
        {


            this.Pg_BookingHistory = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdLister = new Telerik.WinControls.UI.RadGridView();
            this.radPanel3 = new Telerik.WinControls.UI.RadPanel();
            this.btnLastRecords = new Telerik.WinControls.UI.RadButton();
            this.btnNextRecord = new Telerik.WinControls.UI.RadButton();
            this.btnPreviousRecords = new Telerik.WinControls.UI.RadButton();
            this.btnFirstRecords = new Telerik.WinControls.UI.RadButton();
            this.radPanel4 = new Telerik.WinControls.UI.RadPanel();
            this.radButton1 = new Telerik.WinControls.UI.RadButton();
            this.btnShowAllBookingHistory = new Telerik.WinControls.UI.RadButton();
            this.dtpToDate = new UI.MyDatePicker();
            this.label14 = new System.Windows.Forms.Label();
            this.dtpFromDate = new UI.MyDatePicker();
            this.label15 = new System.Windows.Forms.Label();
            this.btnFindBookingHistory = new Telerik.WinControls.UI.RadButton();
            this.txtsearchBookingHistory = new Telerik.WinControls.UI.RadTextBox();
            this.ddlColumnBookingHistory = new Telerik.WinControls.UI.RadDropDownList();
            this.label16 = new System.Windows.Forms.Label();
            this.radLabel27 = new Telerik.WinControls.UI.RadLabel();
            this.lblProgressBookingHistory = new Telerik.WinControls.UI.RadLabel();



            this.Pg_BookingHistory.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdLister)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdLister.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel3)).BeginInit();
            this.radPanel3.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.btnLastRecords)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnNextRecord)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnPreviousRecords)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFirstRecords)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel4)).BeginInit();
            this.radPanel4.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.radButton1)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnShowAllBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpToDate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpFromDate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFindBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtsearchBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.ddlColumnBookingHistory)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel27)).BeginInit();
            this.radLabel27.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.lblProgressBookingHistory)).BeginInit();





            this.radPageView1.Pages.Insert(2, Pg_BookingHistory);

            //  this.radPageView1.Controls.Add(this.Pg_BookingHistory);



            // 
            // Pg_BookingHistory
            // 
            this.Pg_BookingHistory.Controls.Add(this.grdLister);
            this.Pg_BookingHistory.Controls.Add(this.radPanel3);
            this.Pg_BookingHistory.Controls.Add(this.radPanel4);
            this.Pg_BookingHistory.Controls.Add(this.radLabel27);
            this.Pg_BookingHistory.Location = new System.Drawing.Point(10, 10);
            this.Pg_BookingHistory.Name = "Pg_BookingHistory";
            this.Pg_BookingHistory.Size = new System.Drawing.Size(1179, 686);
            this.Pg_BookingHistory.Text = "Booking History";
            // 
            // grdLister
            // 
            this.grdLister.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdLister.Location = new System.Drawing.Point(0, 64);
            this.grdLister.Name = "grdLister";
            this.grdLister.Size = new System.Drawing.Size(1179, 575);
            this.grdLister.TabIndex = 115;
            this.grdLister.Text = "myGridView1";
            // 
            // radPanel3
            // 
            this.radPanel3.BackColor = System.Drawing.Color.AliceBlue;
            this.radPanel3.Controls.Add(this.btnLastRecords);
            this.radPanel3.Controls.Add(this.btnNextRecord);
            this.radPanel3.Controls.Add(this.btnPreviousRecords);
            this.radPanel3.Controls.Add(this.btnFirstRecords);
            this.radPanel3.Dock = System.Windows.Forms.DockStyle.Bottom;
            this.radPanel3.Location = new System.Drawing.Point(0, 639);
            this.radPanel3.Name = "radPanel3";
            this.radPanel3.Size = new System.Drawing.Size(1179, 47);
            this.radPanel3.TabIndex = 116;
            // 
            // btnLastRecords
            // 
            this.btnLastRecords.Image = global::Taxi_AppMain.Properties.Resources.last_resultset1;
            this.btnLastRecords.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnLastRecords.Location = new System.Drawing.Point(668, 4);
            this.btnLastRecords.Name = "btnLastRecords";
            this.btnLastRecords.Size = new System.Drawing.Size(110, 40);
            this.btnLastRecords.TabIndex = 3;
            this.btnLastRecords.Text = "Move Last";
            this.btnLastRecords.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.last_resultset1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnLastRecords.GetChildAt(0))).Text = "Move Last";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnLastRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnLastRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnNextRecord
            // 
            this.btnNextRecord.Image = global::Taxi_AppMain.Properties.Resources.resultset_next1;
            this.btnNextRecord.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnNextRecord.Location = new System.Drawing.Point(522, 4);
            this.btnNextRecord.Name = "btnNextRecord";
            this.btnNextRecord.Size = new System.Drawing.Size(110, 40);
            this.btnNextRecord.TabIndex = 2;
            this.btnNextRecord.Text = "Move Next";
            this.btnNextRecord.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.resultset_next1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnNextRecord.GetChildAt(0))).Text = "Move Next";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnNextRecord.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnNextRecord.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnPreviousRecords
            // 
            this.btnPreviousRecords.Image = global::Taxi_AppMain.Properties.Resources.previous_resultset1;
            this.btnPreviousRecords.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnPreviousRecords.Location = new System.Drawing.Point(376, 4);
            this.btnPreviousRecords.Name = "btnPreviousRecords";
            this.btnPreviousRecords.Size = new System.Drawing.Size(110, 40);
            this.btnPreviousRecords.TabIndex = 1;
            this.btnPreviousRecords.Text = "Move Previous";
            this.btnPreviousRecords.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.previous_resultset1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnPreviousRecords.GetChildAt(0))).Text = "Move Previous";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnPreviousRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnPreviousRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnFirstRecords
            // 
            this.btnFirstRecords.Image = global::Taxi_AppMain.Properties.Resources.first_resultset1;
            this.btnFirstRecords.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.btnFirstRecords.Location = new System.Drawing.Point(228, 4);
            this.btnFirstRecords.Name = "btnFirstRecords";
            this.btnFirstRecords.Size = new System.Drawing.Size(110, 40);
            this.btnFirstRecords.TabIndex = 0;
            this.btnFirstRecords.Text = "Move First";
            this.btnFirstRecords.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.first_resultset1;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFirstRecords.GetChildAt(0))).Text = "Move First";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFirstRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFirstRecords.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // radPanel4
            // 
            this.radPanel4.BackColor = System.Drawing.Color.AliceBlue;
            this.radPanel4.Controls.Add(this.radButton1);
            this.radPanel4.Controls.Add(this.btnShowAllBookingHistory);
            this.radPanel4.Controls.Add(this.dtpToDate);
            this.radPanel4.Controls.Add(this.label14);
            this.radPanel4.Controls.Add(this.dtpFromDate);
            this.radPanel4.Controls.Add(this.label15);
            this.radPanel4.Controls.Add(this.btnFindBookingHistory);
            this.radPanel4.Controls.Add(this.txtsearchBookingHistory);
            this.radPanel4.Controls.Add(this.ddlColumnBookingHistory);
            this.radPanel4.Controls.Add(this.label16);
            this.radPanel4.Dock = System.Windows.Forms.DockStyle.Top;
            this.radPanel4.Location = new System.Drawing.Point(0, 30);
            this.radPanel4.Name = "radPanel4";
            this.radPanel4.Size = new System.Drawing.Size(1179, 34);
            this.radPanel4.TabIndex = 114;
            // 
            // radButton1
            // 
            this.radButton1.Dock = System.Windows.Forms.DockStyle.Right;
            this.radButton1.Image = global::Taxi_AppMain.Properties.Resources.delete;
            this.radButton1.Location = new System.Drawing.Point(1052, 0);
            this.radButton1.Margin = new System.Windows.Forms.Padding(10, 3, 3, 10);
            this.radButton1.Name = "radButton1";
            this.radButton1.Size = new System.Drawing.Size(127, 34);
            this.radButton1.TabIndex = 0;
            this.radButton1.Text = "Delete Selected";
            this.radButton1.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            this.radButton1.Visible = false;
            ((Telerik.WinControls.UI.RadButtonElement)(this.radButton1.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.delete;
            ((Telerik.WinControls.UI.RadButtonElement)(this.radButton1.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.radButton1.GetChildAt(0))).Text = "Delete Selected";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.radButton1.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.radButton1.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // btnShowAllBookingHistory
            // 
            this.btnShowAllBookingHistory.Location = new System.Drawing.Point(787, 5);
            this.btnShowAllBookingHistory.Name = "btnShowAllBookingHistory";
            this.btnShowAllBookingHistory.Size = new System.Drawing.Size(77, 24);
            this.btnShowAllBookingHistory.TabIndex = 15;
            this.btnShowAllBookingHistory.Tag = "";
            this.btnShowAllBookingHistory.Text = "Show All ";
            this.btnShowAllBookingHistory.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllBookingHistory.GetChildAt(0))).Image = null;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllBookingHistory.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnShowAllBookingHistory.GetChildAt(0))).Text = "Show All ";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShowAllBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShowAllBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // dtpToDate
            // 
            this.dtpToDate.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpToDate.CustomFormat = "dd/MM/yyyy HH:mm";
            this.dtpToDate.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpToDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpToDate.Location = new System.Drawing.Point(576, 4);
            this.dtpToDate.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpToDate.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpToDate.Name = "dtpToDate";
            this.dtpToDate.NullDate = new System.DateTime(((long)(0)));
            this.dtpToDate.Size = new System.Drawing.Size(140, 24);
            this.dtpToDate.TabIndex = 14;
            this.dtpToDate.TabStop = false;
            this.dtpToDate.Text = "myDatePicker1";
            this.dtpToDate.Value = null;
            // 
            // label14
            // 
            this.label14.AutoSize = true;
            this.label14.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label14.Location = new System.Drawing.Point(552, 9);
            this.label14.Name = "label14";
            this.label14.Size = new System.Drawing.Size(23, 16);
            this.label14.TabIndex = 13;
            this.label14.Text = "To";
            // 
            // dtpFromDate
            // 
            this.dtpFromDate.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpFromDate.CustomFormat = "dd/MM/yyyy HH:mm";
            this.dtpFromDate.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpFromDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpFromDate.Location = new System.Drawing.Point(409, 5);
            this.dtpFromDate.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpFromDate.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpFromDate.Name = "dtpFromDate";
            this.dtpFromDate.NullDate = new System.DateTime(((long)(0)));
            this.dtpFromDate.Size = new System.Drawing.Size(140, 24);
            this.dtpFromDate.TabIndex = 12;
            this.dtpFromDate.TabStop = false;
            this.dtpFromDate.Text = "myDatePicker1";
            this.dtpFromDate.Value = null;
            // 
            // label15
            // 
            this.label15.AutoSize = true;
            this.label15.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label15.Location = new System.Drawing.Point(334, 9);
            this.label15.Name = "label15";
            this.label15.Size = new System.Drawing.Size(74, 16);
            this.label15.TabIndex = 8;
            this.label15.Text = "Date From";
            // 
            // btnFindBookingHistory
            // 
            this.btnFindBookingHistory.Image = global::Taxi_AppMain.Properties.Resources.pic_Search;
            this.btnFindBookingHistory.Location = new System.Drawing.Point(722, 5);
            this.btnFindBookingHistory.Name = "btnFindBookingHistory";
            this.btnFindBookingHistory.Size = new System.Drawing.Size(59, 24);
            this.btnFindBookingHistory.TabIndex = 7;
            this.btnFindBookingHistory.Tag = "";
            this.btnFindBookingHistory.Text = "Find";
            this.btnFindBookingHistory.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFindBookingHistory.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.pic_Search;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFindBookingHistory.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnFindBookingHistory.GetChildAt(0))).Text = "Find";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFindBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnFindBookingHistory.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // txtsearchBookingHistory
            // 
            this.txtsearchBookingHistory.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtsearchBookingHistory.Location = new System.Drawing.Point(69, 7);
            this.txtsearchBookingHistory.Name = "txtsearchBookingHistory";
            this.txtsearchBookingHistory.Size = new System.Drawing.Size(133, 21);
            this.txtsearchBookingHistory.TabIndex = 5;
            this.txtsearchBookingHistory.TabStop = false;
            // 
            // ddlColumnBookingHistory
            // 
            this.ddlColumnBookingHistory.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
            this.ddlColumnBookingHistory.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlColumnBookingHistory.Location = new System.Drawing.Point(211, 6);
            this.ddlColumnBookingHistory.Name = "ddlColumnBookingHistory";
            this.ddlColumnBookingHistory.Size = new System.Drawing.Size(111, 23);
            this.ddlColumnBookingHistory.TabIndex = 6;
            // 
            // label16
            // 
            this.label16.AutoSize = true;
            this.label16.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label16.Location = new System.Drawing.Point(8, 10);
            this.label16.Name = "label16";
            this.label16.Size = new System.Drawing.Size(53, 16);
            this.label16.TabIndex = 4;
            this.label16.Text = "Search";
            // 
            // radLabel27
            // 
            this.radLabel27.AutoSize = false;
            this.radLabel27.BackColor = System.Drawing.Color.Red;
            this.radLabel27.Controls.Add(this.lblProgressBookingHistory);
            this.radLabel27.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel27.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel27.ForeColor = System.Drawing.Color.White;
            this.radLabel27.Location = new System.Drawing.Point(0, 0);
            this.radLabel27.Name = "radLabel27";
            // 
            // 
            // 
            this.radLabel27.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel27.Size = new System.Drawing.Size(1179, 30);
            this.radLabel27.TabIndex = 7;
            this.radLabel27.Text = "Booking History";
            this.radLabel27.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // lblProgressBookingHistory
            // 
            this.lblProgressBookingHistory.AutoSize = false;
            this.lblProgressBookingHistory.BackColor = System.Drawing.Color.Red;
            this.lblProgressBookingHistory.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblProgressBookingHistory.ForeColor = System.Drawing.Color.White;
            this.lblProgressBookingHistory.Image = global::Taxi_AppMain.Properties.Resources.spinner;
            this.lblProgressBookingHistory.Location = new System.Drawing.Point(1, 2);
            this.lblProgressBookingHistory.Name = "lblProgressBookingHistory";
            // 
            // 
            // 
            this.lblProgressBookingHistory.RootElement.ForeColor = System.Drawing.Color.White;
            this.lblProgressBookingHistory.Size = new System.Drawing.Size(185, 27);
            this.lblProgressBookingHistory.TabIndex = 14;
            this.lblProgressBookingHistory.Text = "Loading";
            this.lblProgressBookingHistory.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.lblProgressBookingHistory.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            this.lblProgressBookingHistory.Visible = false;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.spinner;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).ImageAlignment = System.Drawing.ContentAlignment.MiddleLeft;
            ((Telerik.WinControls.UI.RadLabelElement)(this.lblProgressBookingHistory.GetChildAt(0))).Text = "Loading";
            ((Telerik.WinControls.Layouts.ImageAndTextLayoutPanel)(this.lblProgressBookingHistory.GetChildAt(0).GetChildAt(2))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.lblProgressBookingHistory.GetChildAt(0).GetChildAt(2).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.lblProgressBookingHistory.GetChildAt(0).GetChildAt(2).GetChildAt(1))).BackColor = System.Drawing.Color.Red;



            this.Pg_BookingHistory.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdLister.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdLister)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel3)).EndInit();
            this.radPanel3.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.btnLastRecords)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnNextRecord)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnPreviousRecords)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFirstRecords)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radPanel4)).EndInit();
            this.radPanel4.ResumeLayout(false);
            this.radPanel4.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)(this.radButton1)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnShowAllBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpToDate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.dtpFromDate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.btnFindBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtsearchBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.ddlColumnBookingHistory)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel27)).EndInit();
            this.radLabel27.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.lblProgressBookingHistory)).EndInit();



            //HasBookingHistory


            grdLister.VerticalScroll.LargeChange = 100;
            grdLister.TableElement.VScrollBar.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.HighSpeed;
            grdLister.ShowGroupPanel = false;

            grdLister.CellDoubleClick += new GridViewCellEventHandler(grdBookingHistoryLister_CellDoubleClick);

            grdLister.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
            //    grdLister.CommandCellClick += new CommandCellClickEventHandler(grdLister_CommandCellClick);
            grdLister.ViewCellFormatting += new CellFormattingEventHandler(grdLister_ViewCellFormatting);
            grdLister.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdLister_ContextMenuOpening);


            pageSize = AppVars.objPolicyConfiguration.ListingPagingSize.ToInt();

            btnFirstRecords.Click += new EventHandler(btnFirstRecords_Click);
            btnPreviousRecords.Click += new EventHandler(btnPreviousRecords_Click);
            btnNextRecord.Click += new EventHandler(btnNextRecord_Click);
            btnLastRecords.Click += new EventHandler(btnLastRecords_Click);


            btnShowAllBookingHistory.Click += new EventHandler(btnShowAllBookingHistory_Click);
            btnFindBookingHistory.Click += new EventHandler(btnFindBookingHistory_Click);
            txtsearchBookingHistory.KeyDown += new KeyEventHandler(txtSearchBookingHistory_KeyDown);




        }



        void grdWebBookings_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                if (e.CellElement is GridHeaderCellElement)
                {
                    //e.CellElement
                    e.CellElement.BorderColor = _HeaderRowBorderColor;
                    e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                    //e.CellElement.DrawBorder = false;
                    e.CellElement.BackColor = _HeaderRowBackColor;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.Font = newFont;
                    e.CellElement.ForeColor = Color.White;
                    e.CellElement.DrawFill = true;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                }

                else if (e.CellElement is GridFilterCellElement)
                {

                    e.CellElement.Font = oldFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.White;
                    e.CellElement.RowElement.BackColor = Color.White;
                    e.CellElement.RowElement.NumberOfColors = 1;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridDataCellElement)
                {




                    e.CellElement.ToolTipText = e.CellElement.Text;






                }
            }
            catch { }
        }


        private void InitializeWebBookingTab()
        {
            this.Pg_NewWebBookings = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdWebBookingsNew = new Telerik.WinControls.UI.RadGridView();
            this.radLabel7 = new Telerik.WinControls.UI.RadLabel();
            this.btnRefreshWaitingWebBooking = new Telerik.WinControls.UI.RadButton();
            this.Pg_PendingWebBookings = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdWebBookingsPending = new Telerik.WinControls.UI.RadGridView();
            this.radLabel13 = new Telerik.WinControls.UI.RadLabel();
            this.btnRefreshPendingWebBooking = new Telerik.WinControls.UI.RadButton();

            this.txtNewWebBookingTotal = new Telerik.WinControls.UI.RadLabel();
            this.txtPendingWebBookingTotal = new Telerik.WinControls.UI.RadLabel();
            this.txtDeclinedWebBookingTotal = new Telerik.WinControls.UI.RadLabel();

            this.Pg_NewWebBookings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel7)).BeginInit();
            this.radLabel7.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshWaitingWebBooking)).BeginInit();
            this.Pg_PendingWebBookings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending.MasterTemplate)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel13)).BeginInit();
            this.radLabel13.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshPendingWebBooking)).BeginInit();

            ((System.ComponentModel.ISupportInitialize)(this.txtNewWebBookingTotal)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtPendingWebBookingTotal)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtDeclinedWebBookingTotal)).BeginInit();

            this.radPageView1.Controls.Add(this.Pg_NewWebBookings);
            this.radPageView1.Controls.Add(this.Pg_PendingWebBookings);




            // 
            // Pg_NewWebBookings
            // 
            this.Pg_NewWebBookings.Controls.Add(this.grdWebBookingsNew);
            this.Pg_NewWebBookings.Controls.Add(this.radLabel7);
            this.Pg_NewWebBookings.ImageAlignment = System.Drawing.ContentAlignment.BottomLeft;
            this.Pg_NewWebBookings.Location = new System.Drawing.Point(10, 10);
            this.Pg_NewWebBookings.Name = "Pg_NewWebBookings";
            this.Pg_NewWebBookings.Size = new System.Drawing.Size(1179, 686);
            this.Pg_NewWebBookings.Text = "Online Bookings";
            this.Pg_NewWebBookings.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            // 
            // grdWebBookingsNew
            // 
            this.grdWebBookingsNew.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdWebBookingsNew.EnableHotTracking = false;
            this.grdWebBookingsNew.Location = new System.Drawing.Point(0, 30);
            this.grdWebBookingsNew.Name = "grdWebBookingsNew";
            this.grdWebBookingsNew.Size = new System.Drawing.Size(1179, 656);
            this.grdWebBookingsNew.TabIndex = 114;
            this.grdWebBookingsNew.Text = "myGridView1";
            // 
            // radLabel7
            // 
            this.radLabel7.AutoSize = false;
            this.radLabel7.BackColor = System.Drawing.Color.Crimson;
            this.radLabel7.Controls.Add(this.btnRefreshWaitingWebBooking);
            this.radLabel7.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel7.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel7.ForeColor = System.Drawing.Color.White;
            this.radLabel7.Location = new System.Drawing.Point(0, 0);
            this.radLabel7.Name = "radLabel7";
            // 
            // 
            // 
            this.radLabel7.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel7.Size = new System.Drawing.Size(1179, 30);
            this.radLabel7.TabIndex = 7;
            this.radLabel7.Text = "New Online Bookings";
            this.radLabel7.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.radLabel7.Controls.Add(this.txtNewWebBookingTotal);


            // 
            // txtNewWebBookingTotal
            // 
            this.txtNewWebBookingTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.txtNewWebBookingTotal.Location = new System.Drawing.Point(938, 4);
            this.txtNewWebBookingTotal.Name = "txtNewWebBookingTotal";
            this.txtNewWebBookingTotal.Size = new System.Drawing.Size(223, 27);
            this.txtNewWebBookingTotal.TabIndex = 0;
            this.txtNewWebBookingTotal.Text = "1000";

            // 
            // btnRefreshWaitingWebBooking
            // 
            this.btnRefreshWaitingWebBooking.Dock = System.Windows.Forms.DockStyle.Right;
            this.btnRefreshWaitingWebBooking.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            this.btnRefreshWaitingWebBooking.Location = new System.Drawing.Point(1049, 0);
            this.btnRefreshWaitingWebBooking.Name = "btnRefreshWaitingWebBooking";
            this.btnRefreshWaitingWebBooking.Size = new System.Drawing.Size(130, 30);
            this.btnRefreshWaitingWebBooking.TabIndex = 0;
            this.btnRefreshWaitingWebBooking.Text = "Refresh";
            this.btnRefreshWaitingWebBooking.Click += new System.EventHandler(this.btnRefreshWaitingWebBooking_Click);
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshWaitingWebBooking.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshWaitingWebBooking.GetChildAt(0))).Text = "Refresh";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshWaitingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshWaitingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // 
            // Pg_PendingWebBookings
            // 
            this.Pg_PendingWebBookings.Controls.Add(this.grdWebBookingsPending);
            this.Pg_PendingWebBookings.Controls.Add(this.radLabel13);
            this.Pg_PendingWebBookings.ImageAlignment = System.Drawing.ContentAlignment.BottomLeft;
            this.Pg_PendingWebBookings.Location = new System.Drawing.Point(10, 10);
            this.Pg_PendingWebBookings.Name = "Pg_PendingWebBookings";
            this.Pg_PendingWebBookings.Size = new System.Drawing.Size(1179, 686);
            this.Pg_PendingWebBookings.Text = "Pending Web Bookings";
            this.Pg_PendingWebBookings.TextImageRelation = System.Windows.Forms.TextImageRelation.TextBeforeImage;
            // 
            // grdWebBookingsPending
            // 
            this.grdWebBookingsPending.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdWebBookingsPending.EnableHotTracking = false;
            this.grdWebBookingsPending.Location = new System.Drawing.Point(0, 30);
            this.grdWebBookingsPending.Name = "grdWebBookingsPending";
            this.grdWebBookingsPending.Size = new System.Drawing.Size(1179, 656);
            this.grdWebBookingsPending.TabIndex = 114;
            this.grdWebBookingsPending.Text = "myGridView1";



            // 
            // txtNewWebBookingTotal
            // 
            this.txtPendingWebBookingTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.txtPendingWebBookingTotal.Location = new System.Drawing.Point(938, 4);
            this.txtPendingWebBookingTotal.Name = "txtPendingWebBookingTotal";
            this.txtPendingWebBookingTotal.Size = new System.Drawing.Size(223, 27);
            this.txtPendingWebBookingTotal.TabIndex = 0;
            this.txtPendingWebBookingTotal.Text = "1000";

            // 
            // radLabel13
            // 
            this.radLabel13.AutoSize = false;
            this.radLabel13.BackColor = System.Drawing.Color.Crimson;
            this.radLabel13.Controls.Add(this.btnRefreshPendingWebBooking);
            this.radLabel13.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel13.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel13.ForeColor = System.Drawing.Color.White;
            this.radLabel13.Location = new System.Drawing.Point(0, 0);
            this.radLabel13.Name = "radLabel13";
            // 
            // 
            // 
            this.radLabel13.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel13.Size = new System.Drawing.Size(1179, 30);
            this.radLabel13.TabIndex = 7;
            this.radLabel13.Text = "Pending Web Bookings";
            this.radLabel13.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.radLabel13.Controls.Add(this.txtPendingWebBookingTotal);
            // 
            // btnRefreshPendingWebBooking
            // 
            this.btnRefreshPendingWebBooking.Dock = System.Windows.Forms.DockStyle.Right;
            this.btnRefreshPendingWebBooking.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            this.btnRefreshPendingWebBooking.Location = new System.Drawing.Point(1049, 0);
            this.btnRefreshPendingWebBooking.Name = "btnRefreshPendingWebBooking";
            this.btnRefreshPendingWebBooking.Size = new System.Drawing.Size(130, 30);
            this.btnRefreshPendingWebBooking.TabIndex = 1;
            this.btnRefreshPendingWebBooking.Text = "Refresh";
            this.btnRefreshPendingWebBooking.Click += new System.EventHandler(this.btnRefreshPendingWebBooking_Click);
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshPendingWebBooking.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
            ((Telerik.WinControls.UI.RadButtonElement)(this.btnRefreshPendingWebBooking.GetChildAt(0))).Text = "Refresh";
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshPendingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnRefreshPendingWebBooking.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));



            this.Pg_NewWebBookings.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsNew)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel7)).EndInit();
            this.radLabel7.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshWaitingWebBooking)).EndInit();
            this.Pg_PendingWebBookings.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdWebBookingsPending)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.radLabel13)).EndInit();
            this.radLabel13.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.btnRefreshPendingWebBooking)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtNewWebBookingTotal)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtPendingWebBookingTotal)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.txtDeclinedWebBookingTotal)).EndInit();




            this.radLabel26 = new Telerik.WinControls.UI.RadLabel();
            this.Pg_DeclinedWebBookings = new Telerik.WinControls.UI.RadPageViewPage();
            this.grdRejectedWebBookings = new Telerik.WinControls.UI.RadGridView();



            ((System.ComponentModel.ISupportInitialize)(this.radLabel26)).BeginInit();
            this.Pg_DeclinedWebBookings.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings.MasterTemplate)).BeginInit();


            this.radPageView1.Controls.Add(this.Pg_DeclinedWebBookings);


            // 
            // radLabel26
            // 
            this.radLabel26.AutoSize = false;
            this.radLabel26.BackColor = System.Drawing.Color.Crimson;
            this.radLabel26.Dock = System.Windows.Forms.DockStyle.Top;
            this.radLabel26.Font = new System.Drawing.Font("Tahoma", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.radLabel26.ForeColor = System.Drawing.Color.White;
            this.radLabel26.Location = new System.Drawing.Point(0, 0);
            this.radLabel26.Name = "radLabel26";



            // 
            // txtNewWebBookingTotal
            // 
            this.txtDeclinedWebBookingTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
            this.txtDeclinedWebBookingTotal.Location = new System.Drawing.Point(938, 4);
            this.txtDeclinedWebBookingTotal.Name = "txtDeclinedWebBookingTotal";
            this.txtDeclinedWebBookingTotal.Size = new System.Drawing.Size(223, 27);
            this.txtDeclinedWebBookingTotal.TabIndex = 0;
            this.txtDeclinedWebBookingTotal.Text = "1000";

            // 
            // 
            // 
            this.radLabel26.RootElement.ForeColor = System.Drawing.Color.White;
            this.radLabel26.Size = new System.Drawing.Size(1179, 30);
            this.radLabel26.TabIndex = 113;
            this.radLabel26.Text = "Declined Web Bookings";
            this.radLabel26.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
            this.radLabel26.Controls.Add(this.txtDeclinedWebBookingTotal);

            // 
            // Pg_DeclinedWebBookings
            // 
            this.Pg_DeclinedWebBookings.Controls.Add(this.grdRejectedWebBookings);
            this.Pg_DeclinedWebBookings.Controls.Add(this.radLabel26);
            this.Pg_DeclinedWebBookings.Location = new System.Drawing.Point(10, 10);
            this.Pg_DeclinedWebBookings.Name = "Pg_DeclinedWebBookings";
            this.Pg_DeclinedWebBookings.Size = new System.Drawing.Size(1179, 686);
            this.Pg_DeclinedWebBookings.Text = "Declined Web Bookings";
            // 
            // grdRejectedWebBookings
            // 
            this.grdRejectedWebBookings.Dock = System.Windows.Forms.DockStyle.Fill;
            this.grdRejectedWebBookings.EnableHotTracking = false;
            this.grdRejectedWebBookings.Location = new System.Drawing.Point(0, 30);
            this.grdRejectedWebBookings.Name = "grdRejectedWebBookings";
            this.grdRejectedWebBookings.Size = new System.Drawing.Size(1179, 656);
            this.grdRejectedWebBookings.TabIndex = 114;
            this.grdRejectedWebBookings.Text = "myGridView1";

            ((System.ComponentModel.ISupportInitialize)(this.radLabel26)).EndInit();
            this.Pg_DeclinedWebBookings.ResumeLayout(false);
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdRejectedWebBookings)).EndInit();

            Pg_DeclinedWebBookings.Item.Visibility = ElementVisibility.Collapsed;
            Pg_PendingWebBookings.Item.Visibility = ElementVisibility.Collapsed;
        }

        private void FormatNewWebBookingGrid()
        {


            GridViewTextBoxColumn col = new GridViewTextBoxColumn();
            col.HeaderText = "ID";
            col.IsVisible = false;
            col.Name = "ID";
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Ref #";
            col.Name = "REFNO";
            col.IsVisible = true;
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Booked On";
            col.Name = "BOOKEDON";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);







            col = new GridViewTextBoxColumn();
            col.HeaderText = "Passenger";
            col.Name = "PASSENGER";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Contact";
            col.Name = "CONTACTNO";
            col.Width = 140;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "EMAIL";

            grdWebBookingsNew.Columns.Add(col);


            //col = new GridViewTextBoxColumn();
            //col.IsVisible = false;
            //col.Name = "STATUS";
            //grdLister.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "BOOKINGTYPEID";
            grdWebBookingsNew.Columns.Add(col);

            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "DEFAULTCLIENTID";
            grdWebBookingsNew.Columns.Add(col);

            GridViewDateTimeColumn colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Pickup Date";
            colD.Name = "PICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.ReadOnly = true;
            colD.Format = DateTimePickerFormat.Custom;
            colD.Width = 95;
            colD.WrapText = true;
            colD.SortOrder = RadSortOrder.Ascending;
            colD.Sort(RadSortOrder.Descending, true);
            grdWebBookingsNew.Columns.Add(colD);

            colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Time";
            colD.Name = "PICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.Format = DateTimePickerFormat.Time;
            colD.FormatString = "{0:HH:mm}";
            colD.ReadOnly = true;
            colD.Width = 70;
            colD.WrapText = true;
            colD.SortOrder = RadSortOrder.Ascending;
            colD.Sort(RadSortOrder.Descending, true);
            grdWebBookingsNew.Columns.Add(colD);


            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.IsVisible = false;
            colD.Format = DateTimePickerFormat.Custom;
            grdWebBookingsNew.Columns.Add(colD);


            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.IsVisible = false;
            colD.Format = DateTimePickerFormat.Custom;
            grdWebBookingsNew.Columns.Add(colD);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Flight No";
            col.Name = "FlightNo";
            col.Width = 80;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Pickup";
            col.Name = "FROMADDRESS";
            col.ReadOnly = true;
            col.Width = 170;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Via";
            col.Name = "VIA";
            col.ReadOnly = true;
            col.Width = 130;
            col.IsVisible = false;
            col.WrapText = true;
            grdWebBookingsNew.Columns.Add(col);




            col = new GridViewTextBoxColumn();
            col.HeaderText = "Destination";
            col.Name = "TOADDRESS";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 170;
            grdWebBookingsNew.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Car Type";
            col.Name = "VEHICLETYPE";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 130;
            grdWebBookingsNew.Columns.Add(col);



            GridViewDecimalColumn colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Fares";
            colDec.Name = "FARES";
            col.ReadOnly = true;
            //  colDec.IsVisible = true;
            colDec.Width = 70;
            grdWebBookingsNew.Columns.Add(colDec);


            colDec = new GridViewDecimalColumn();
            colDec.Name = "OLDFARES";
            colDec.IsVisible = false;
            grdWebBookingsNew.Columns.Add(colDec);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Method";
            col.Name = "PAYMENTTYPE";
            col.Width = 150;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsNew.Columns.Add(col);




            colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Waiting Time(Mins)";
            colDec.Name = "WaitingTime";
            colDec.IsVisible = false;
            colDec.Width = 150;
            grdWebBookingsNew.Columns.Add(colDec);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Notes/Booker Info";
            col.Name = "Notes";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 230;
            grdWebBookingsNew.Columns.Add(col);


            GridViewCommandColumn commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Accept";
            commandCol.Name = "ACCEPT";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;
            grdWebBookingsNew.Columns.Add(commandCol);


            //commandCol = new GridViewCommandColumn();
            //commandCol.UseDefaultText = true;
            //commandCol.DefaultText = "Pending Accept";
            //commandCol.Name = "PENDINGACCEPT";
            //commandCol.HeaderText = "";
            //commandCol.Width = 100;
            //commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            //grdWebBookingsNew.Columns.Add(commandCol);







            commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Decline";
            commandCol.Name = "DECLINE";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsNew.Columns.Add(commandCol);



            grdWebBookingsNew.CommandCellClick += grdWebBookings_CommandCellClick;
            grdWebBookingsNew.ShowRowHeaderColumn = false;
            grdWebBookingsNew.ShowGroupPanel = false;
            grdWebBookingsNew.AllowAddNewRow = false;
            grdWebBookingsNew.ShowGroupPanel = false;

            grdWebBookingsNew.AllowColumnResize = false;
            grdWebBookingsNew.AllowColumnReorder = false;
            grdWebBookingsNew.AllowDeleteRow = false;
            grdWebBookingsNew.AllowMultiColumnSorting = true;


            grdWebBookingsNew.TableElement.RowHeight = 50;
            grdWebBookingsNew.AllowEditRow = false;
            //    grdWebBookingsNew.AllowDeleteRow = false;
            grdWebBookingsNew.Font = new Font("Tahoma", 9, FontStyle.Regular);
            grdWebBookingsNew.MasterTemplate.AllowColumnChooser = false;

            grdWebBookingsNew.EnableFiltering = true;
            grdWebBookingsNew.ShowFilteringRow = true;


            grdWebBookingsNew.CellDoubleClick += new GridViewCellEventHandler(grdWebBookingsNew_CellDoubleClick);
        }

        void grdWebBookingsNew_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {

            if (e.Row != null && e.Row is GridViewDataRowInfo)
            {


                General.ShowBookingForm(e.Row.Cells["Id"].Value.ToInt(), true, "", "", Enums.BOOKING_TYPES.LOCAL);
            }

        }




        private void FormatPendingWebBookingGrid()
        {


            GridViewTextBoxColumn col = new GridViewTextBoxColumn();
            col.HeaderText = "ID";
            col.IsVisible = false;
            col.Name = "ID";
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Ref #";
            col.Name = "REFNO";
            col.IsVisible = true;
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Booked On";
            col.Name = "BOOKEDON";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Passenger";
            col.Name = "PASSENGER";
            col.Width = 100;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Contact";
            col.Name = "CONTACTNO";
            col.Width = 160;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "EMAIL";

            grdWebBookingsPending.Columns.Add(col);


            //col = new GridViewTextBoxColumn();
            //col.IsVisible = false;
            //col.Name = "STATUS";
            //grdLister.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "BOOKINGTYPEID";
            grdWebBookingsPending.Columns.Add(col);

            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "DEFAULTCLIENTID";
            grdWebBookingsPending.Columns.Add(col);

            GridViewDateTimeColumn colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Pickup Date";
            colD.Name = "PICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.ReadOnly = false;
            colD.Width = 95;
            colD.WrapText = true;
            grdWebBookingsPending.Columns.Add(colD);


            colD = new GridViewDateTimeColumn();
            colD.HeaderText = "Time";
            colD.Name = "PICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.ReadOnly = false;
            colD.Width = 95;
            colD.WrapText = true;
            grdWebBookingsPending.Columns.Add(colD);



            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPDATETIME";
            colD.CustomFormat = "dd/MM/yyyy";
            colD.FormatString = "{0:dd/MM/yyyy}";
            colD.IsVisible = false;
            grdWebBookingsPending.Columns.Add(colD);



            colD = new GridViewDateTimeColumn();
            colD.Name = "OLDPICKUPTIME";
            colD.CustomFormat = "HH:mm";
            colD.FormatString = "{0:HH:mm}";
            colD.IsVisible = false;
            grdWebBookingsPending.Columns.Add(colD);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Flight No";
            col.Name = "FlightNo";
            col.Width = 80;
            col.ReadOnly = true;
            col.WrapText = true;
            grdWebBookingsPending.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.HeaderText = "Pickup";
            col.Name = "FROMADDRESS";
            col.ReadOnly = true;
            col.Width = 180;
            col.WrapText = true;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Via";
            col.Name = "VIA";
            col.ReadOnly = true;
            col.Width = 130;
            col.WrapText = true;
            col.IsVisible = false;
            grdWebBookingsPending.Columns.Add(col);




            col = new GridViewTextBoxColumn();
            col.HeaderText = "Destination";
            col.Name = "TOADDRESS";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 180;
            grdWebBookingsPending.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Car Type";
            col.Name = "VEHICLETYPE";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 130;
            grdWebBookingsPending.Columns.Add(col);



            GridViewDecimalColumn colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Fares";
            colDec.Name = "FARES";
            col.ReadOnly = false;
            //  colDec.IsVisible = true;
            colDec.Width = 70;
            grdWebBookingsPending.Columns.Add(colDec);


            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Method";
            col.Name = "PAYMENTTYPE";
            col.Width = 150;
            col.WrapText = true;
            col.ReadOnly = true;
            grdWebBookingsPending.Columns.Add(col);


            colDec = new GridViewDecimalColumn();
            colDec.Name = "OLDFARES";
            colDec.IsVisible = false;
            grdWebBookingsPending.Columns.Add(colDec);



            colDec = new GridViewDecimalColumn();
            colDec.HeaderText = "Waiting Time(Mins)";
            colDec.Name = "WaitingTime";
            colDec.IsVisible = false;
            colDec.Width = 150;
            grdWebBookingsPending.Columns.Add(colDec);




            col = new GridViewTextBoxColumn();
            col.HeaderText = "Payment Notes/Booker Info";
            col.Name = "Notes";
            col.ReadOnly = true;
            col.WrapText = true;
            col.Width = 230;
            grdWebBookingsPending.Columns.Add(col);

            GridViewCommandColumn commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Accept";
            commandCol.Name = "ACCEPT";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsPending.Columns.Add(commandCol);


            commandCol = new GridViewCommandColumn();
            commandCol.UseDefaultText = true;
            commandCol.DefaultText = "Decline";
            commandCol.Name = "DECLINE";
            commandCol.HeaderText = "";
            commandCol.Width = 60;
            commandCol.TextAlignment = ContentAlignment.MiddleCenter;

            grdWebBookingsPending.Columns.Add(commandCol);



            grdWebBookingsPending.CommandCellClick += grdWebBookings_CommandCellClick;
            grdWebBookingsPending.ShowRowHeaderColumn = false;
            grdWebBookingsPending.ShowGroupPanel = false;
            grdWebBookingsPending.AllowAddNewRow = false;

            grdWebBookingsNew.ShowGroupPanel = false;
            grdWebBookingsPending.TableElement.RowHeight = 50;
            grdWebBookingsPending.Font = new Font("Tahoma", 9, FontStyle.Regular);


            grdWebBookingsPending.AllowColumnResize = false;
            grdWebBookingsPending.AllowColumnReorder = false;
            grdWebBookingsPending.AllowDeleteRow = false;
            grdWebBookingsPending.AllowMultiColumnSorting = true;


            grdWebBookingsPending.MasterTemplate.AllowColumnChooser = false;

            grdWebBookingsPending.EnableFiltering = true;
            grdWebBookingsPending.ShowFilteringRow = true;
            // grdWebBookingsNew.AllowEditRow = false;
            //    grdWebBookingsPending.AllowDeleteRow = false;
            grdWebBookingsPending.CellDoubleClick += new GridViewCellEventHandler(grdWebBookingsNew_CellDoubleClick);
        }


        private List<ClsOnlineBooking> GetWebBookingList(Expression<Func<Booking, bool>> exp)
        {
            List<ClsOnlineBooking> list = null;

            using (TaxiDataContext db = new TaxiDataContext())
            {

                list = (from a in db.Bookings
                        join b in db.Gen_PaymentTypes on a.PaymentTypeId equals b.Id
                        join c in db.Gen_Companies on a.CompanyId equals c.Id into table2
                        join v in db.Fleet_VehicleTypes on a.VehicleTypeId equals v.Id
                        from c in table2.DefaultIfEmpty()
                        where a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING
                        && (a.BookingTypeId == Enums.BOOKING_TYPES.ONLINE || a.BookingTypeId == Enums.BOOKING_TYPES.WEB)

                        select new ClsOnlineBooking
                        {


                            Id = a.Id,
                            BookingNo = a.BookingNo,
                            BookingDate = a.BookingDate,
                            PickupDateTime = a.PickupDateTime,
                            CustomerName = a.CustomerName,
                            CustomerEmail = a.CustomerEmail,
                            CustomerMobileNo = a.CustomerMobileNo,
                            CustomerPhoneNo = a.CustomerPhoneNo,
                            CompanyPrice = a.CompanyPrice,
                            Extra = a.ExtraDropCharges,
                            FareRate = a.FareRate,
                            Parking = a.CongtionCharges,
                            Waiting = a.MeetAndGreetCharges,

                            FromAddress = a.FromAddress,
                            FromDoorNo = a.FromDoorNo,
                            FromStreet = a.FromStreet,
                            ToAddress = a.ToAddress,
                            ToDoorNo = a.ToDoorNo,

                            ToStreet = a.ToStreet,
                            BookingStatusId = a.BookingStatusId,
                            BookingTypeId = a.BookingTypeId,
                            CompanyName = c.CompanyName,
                            VehicleType = v.VehicleType,
                            ViaString = a.ViaString,
                            PaymentType = b.PaymentType,
                            SpecialRequirements = a.SpecialRequirements


                        }).ToList();





                //    PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());


            }

            return list;

        }


        public void PopulateWebBookingsGrid()
        {
            try
            {






                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateWebBookingsGrid));
                }

                else
                {
                    PopulateNewWebBookings(GetWebBookingList(null));
                }
                //    PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());




            }
            catch (Exception ex)
            {


            }
        }


        public void PopulateNewWebBookings(List<ClsOnlineBooking> listofNewWebBookings)
        {
            //     List<Booking> listofNewWebBookings = list.Where(c => c.BookingStatusId == 19).ToList();

            try
            {

                if (listofNewWebBookings == null)
                    listofNewWebBookings = GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING);


                grdWebBookingsNew.BeginUpdate();

                grdWebBookingsNew.RowCount = listofNewWebBookings.Count;

                int cnt = grdWebBookingsNew.RowCount;



                GridViewRowInfo row = null;
                for (int i = 0; i < cnt; i++)
                {

                    row = grdWebBookingsNew.Rows[i];

                    row.Cells["ID"].Value = listofNewWebBookings[i].Id;
                    row.Cells["REFNO"].Value = listofNewWebBookings[i].BookingNo;

                    row.Cells["BOOKEDON"].Value = string.Format("{0:dd/MM/yyyy HH:mm}", listofNewWebBookings[i].BookingDate.ToDateTime());

                    row.Cells["PASSENGER"].Value = listofNewWebBookings[i].CustomerName;

                    row.Cells["BOOKINGTYPEID"].Value = listofNewWebBookings[i].BookingTypeId;
                    //  row.Cells["DEFAULTCLIENTID"].Value = listofNewWebBookings[i].AddBy;
                    row.Cells["VEHICLETYPE"].Value = listofNewWebBookings[i].VehicleType.ToStr();


                    if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerPhoneNo) && !string.IsNullOrEmpty(listofNewWebBookings[i].CustomerMobileNo))
                        row.Cells["CONTACTNO"].Value = listofNewWebBookings[i].CustomerPhoneNo + "/" + listofNewWebBookings[i].CustomerMobileNo;

                    else if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerPhoneNo))
                        row.Cells["CONTACTNO"].Value = listofNewWebBookings[i].CustomerPhoneNo;

                    else if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerMobileNo))
                        row.Cells["CONTACTNO"].Value = listofNewWebBookings[i].CustomerMobileNo;


                    if (!string.IsNullOrEmpty(listofNewWebBookings[i].CustomerEmail))
                    {
                        row.Cells["CONTACTNO"].Value += Environment.NewLine + "Email : " + listofNewWebBookings[i].CustomerEmail;
                        row.Cells["EMAIL"].Value = listofNewWebBookings[i].CustomerEmail;

                    }


                    row.Cells["PICKUPDATETIME"].Value = listofNewWebBookings[i].PickupDateTime;
                    row.Cells["PICKUPTIME"].Value = listofNewWebBookings[i].PickupDateTime;

                    row.Cells["OLDPICKUPDATETIME"].Value = listofNewWebBookings[i].PickupDateTime;


                    row.Cells["FlightNo"].Value = listofNewWebBookings[i].FromDoorNo;


                    if (!string.IsNullOrEmpty(listofNewWebBookings[i].FromStreet.ToStr().Trim()))
                        row.Cells["FlightNo"].Value += " - " + listofNewWebBookings[i].FromStreet;




                    row.Cells["FROMADDRESS"].Value = listofNewWebBookings[i].FromAddress;
                    row.Cells["TOADDRESS"].Value = listofNewWebBookings[i].ToAddress;

                    row.Cells["FARES"].Value = listofNewWebBookings[i].FareRate.ToDecimal();
                    row.Cells["OLDFARES"].Value = listofNewWebBookings[i].FareRate.ToDecimal();


                    row.Cells["VIA"].Value = listofNewWebBookings[i].ViaString.ToStr();

                    row.Cells["PAYMENTTYPE"].Value = listofNewWebBookings[i].PaymentType.ToStr().Trim();



                    //   row.Cells["Notes"].Value = listofNewWebBookings[i].Booking_Notes.Count > 0 ? listofNewWebBookings[i].Booking_Notes[0].notes.ToStr() : "";


                }


                grdWebBookingsNew.EndUpdate();




                AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);


                txtNewWebBookingTotal.Text = cnt.ToStr();

                //grdWebBookingsNew.Columns["FARES"].ReadOnly = true;
                //grdWebBookingsNew.Columns["WaitingTime"].ReadOnly = true;
                //grdWebBookingsNew.Columns["WaitingTime"].IsVisible = false;

                //grdWebBookingsNew.Columns["FROMADDRESS"].Width += 50;
                //grdWebBookingsNew.Columns["TOADDRESS"].Width += 50;
                //grdWebBookingsNew.Columns["VIA"].Width += 50;
            }
            catch (Exception ex)
            {


            }
        }



        public void PopulatePendingWebBookings(List<Booking> list)
        {
            //try
            //{

            //    if (list == null)
            //        list = GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_WEBBOOKING);

            //    //     List<Booking> listofNewWebBookings = list.Where(c => c.BookingStatusId == 19).ToList();

            //    grdWebBookingsPending.BeginUpdate();


            //    grdWebBookingsPending.RowCount = list.Count;

            //    int cnt = grdWebBookingsPending.RowCount;



            //    GridViewRowInfo row = null;

            //    for (int i = 0; i < cnt; i++)
            //    {

            //        row = grdWebBookingsPending.Rows[i];


            //        row.Cells["ID"].Value = list[i].Id;
            //        row.Cells["REFNO"].Value = list[i].BookingNo;

            //        row.Cells["BOOKEDON"].Value = string.Format("{0:dd/MM/yyyy HH:mm}", list[i].BookingDate.ToDateTime());



            //        row.Cells["PASSENGER"].Value = list[i].CustomerName;

            //        row.Cells["BOOKINGTYPEID"].Value = list[i].BookingTypeId;
            //        row.Cells["DEFAULTCLIENTID"].Value = list[i].AddBy;

            //        row.Cells["VEHICLETYPE"].Value = list[i].Fleet_VehicleType.DefaultIfEmpty().VehicleType.ToStr();


            //        if (!string.IsNullOrEmpty(list[i].CustomerPhoneNo) && !string.IsNullOrEmpty(list[i].CustomerMobileNo))
            //            row.Cells["CONTACTNO"].Value = list[i].CustomerPhoneNo + "/" + list[i].CustomerMobileNo;

            //        else if (!string.IsNullOrEmpty(list[i].CustomerPhoneNo))
            //            row.Cells["CONTACTNO"].Value = list[i].CustomerPhoneNo;

            //        else if (!string.IsNullOrEmpty(list[i].CustomerMobileNo))
            //            row.Cells["CONTACTNO"].Value = list[i].CustomerMobileNo;


            //        if (!string.IsNullOrEmpty(list[i].CustomerEmail))
            //        {
            //            row.Cells["CONTACTNO"].Value += Environment.NewLine + "Email : " + list[i].CustomerEmail;
            //            row.Cells["EMAIL"].Value = list[i].CustomerEmail;

            //        }


            //        row.Cells["PICKUPDATETIME"].Value = list[i].PickupDateTime;
            //        row.Cells["PICKUPTIME"].Value = list[i].PickupDateTime;
            //        row.Cells["OLDPICKUPDATETIME"].Value = list[i].PickupDateTime;


            //        row.Cells["FlightNo"].Value = list[i].FromDoorNo;


            //        if (!string.IsNullOrEmpty(list[i].FromStreet.ToStr().Trim()))
            //            row.Cells["FlightNo"].Value += " - " + list[i].FromStreet;




            //        row.Cells["FROMADDRESS"].Value = list[i].FromAddress;
            //        row.Cells["TOADDRESS"].Value = list[i].ToAddress;

            //        row.Cells["FARES"].Value = list[i].FareRate.ToDecimal();
            //        row.Cells["OLDFARES"].Value = list[i].FareRate.ToDecimal();


            //        row.Cells["VIA"].Value = list[i].DistanceString.ToStr();


            //        row.Cells["PAYMENTTYPE"].Value = list[i].Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr().Trim();


            //        row.Cells["Notes"].Value = list[i].Booking_Notes.Count > 0 ? list[i].Booking_Notes[0].notes.ToStr() : "";



            //    }



            //    grdWebBookingsPending.EndUpdate();

            //    AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);

            //    txtPendingWebBookingTotal.Text = cnt.ToStr();
            //}
            //catch (Exception ex)
            //{


            //}
        }


        private void ResetWebBookingBlinking()
        {

            if (grdWebBookingsNew.Rows.Count == 0)
            {

                Pg_NewWebBookings.Tag = null;
            }

        }

        public void PopulateDeclinedWebBookingsGrid(IList list)
        {
            try
            {






                grdRejectedWebBookings.DataSource = list;


                txtDeclinedWebBookingTotal.Text = list.Count.ToStr();
            }
            catch (Exception ex)
            {

            }
        }


        public void PopulateDeclinedWebBookings()
        {
            try
            {

                DateTime fromdate = DateTime.Now.AddDays(-60).ToDate();

                var data1 = General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date >= fromdate



                   && (c.BookingTypeId == Enums.BOOKING_TYPES.WEB || c.BookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                   && (c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING || c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || c.BookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)

                  )


                 .OrderByDescending(c => c.PickupDateTime);
                var query = (from a in data1


                             select new
                             {
                                 Id = a.Id,
                                 RefNumber = a.BookingNo,
                                 BookingDate = a.BookingDate,
                                 PickupDate = a.PickupDateTime,
                                 Passenger = a.CustomerName,
                                 From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                 To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                 Fare = a.FareRate,
                                 Account = a.Gen_Company.CompanyName,
                                 Driver = a.Fleet_Driver.DriverNo,
                                 DriverId = a.DriverId,
                                 Vehicle = a.Fleet_VehicleType.VehicleType,
                                 Status = a.BookingStatus.StatusName,
                                 StatusColor = a.BookingStatus.BackgroundColor,
                                 BookingTypeId = a.BookingTypeId,
                                 VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                 VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                 BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                 TextColor1 = a.Gen_Company.TextColor,
                                 MobileNo = a.CustomerMobileNo,
                                 FromLocTypeId = a.FromLocTypeId,
                                 ToLocTypeId = a.ToLocTypeId,

                             }).ToList();


                //    this.grdRejectedWebBookings.TableElement.BeginUpdate();

                grdRejectedWebBookings.DataSource = query;
                //    this.grdRejectedWebBookings.TableElement.EndUpdate();

                //frmRejectedWebBookingsList frmRej = (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmRejectedWebBookingsList") as frmRejectedWebBookingsList);

                //if (frmRej != null)
                //{
                //    frmRej.RefreshData();

                //}

                txtDeclinedWebBookingTotal.Text = query.Count.ToStr();
            }
            catch (Exception ex)
            {

            }
        }


        // private string webBookingTemplate = string.Empty;


        public void SendEmail(Gen_SubCompany objSubCompany, string ToAddress, string subject, string strBody)
        {

            try
            {


                if (ToAddress.IsValidEmailAddress() && !string.IsNullOrEmpty(strBody))
                {

                    if (objSubCompany != null && objSubCompany.SmtpHost != null)
                    {

                        System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage();
                        msg.To.Add(ToAddress);
                        msg.From = new System.Net.Mail.MailAddress(objSubCompany.SmtpUserName.ToStr(), objSubCompany.CompanyName.ToStr());
                        msg.Subject = subject;



                        if (objSubCompany.EmailCC.ToStr().Trim() != string.Empty)
                        {
                            msg.CC.Add(objSubCompany.EmailCC.ToStr().Trim());
                        }




                        msg.Body = strBody;

                        msg.BodyEncoding = System.Text.Encoding.UTF8;
                        msg.IsBodyHtml = true;

                        //    msg.Priority = System.Net.Mail.MailPriority.High;

                        System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                        client.Credentials = new NetworkCredential(objSubCompany.SmtpUserName.ToStr(), objSubCompany.SmtpPassword.ToStr());
                        client.Port = Convert.ToInt32(objSubCompany.SmtpPort);
                        client.Host = objSubCompany.SmtpHost;
                        client.EnableSsl = objSubCompany.SmtpHasSSL.ToBool();




                        FieldInfo transport = client.GetType().GetField("transport", BindingFlags.NonPublic | BindingFlags.Instance);
                        FieldInfo authModules = transport.GetValue(client).GetType().GetField("authenticationModules", BindingFlags.NonPublic | BindingFlags.Instance);

                        Array modulesArray = authModules.GetValue(transport.GetValue(client)) as Array;
                        modulesArray.SetValue(modulesArray.GetValue(3), 1);

                        //ServicePointManager.ServerCertificateValidationCallback =
                        //    delegate(object s, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                        //             System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
                        //    { return true; };

                        client.Send(msg);
                    }
                    else
                    {
                        System.Net.Mail.MailMessage msg = new System.Net.Mail.MailMessage();
                        msg.To.Add(ToAddress);
                        msg.From = new System.Net.Mail.MailAddress(AppVars.objPolicyConfiguration.UserName.ToStr(), AppVars.objSubCompany.CompanyName.ToStr());
                        msg.Subject = subject;



                        if (AppVars.objSubCompany != null && AppVars.objSubCompany.EmailCC.ToStr().Trim() != string.Empty)
                        {
                            msg.CC.Add(AppVars.objSubCompany.EmailCC.ToStr().Trim());
                        }




                        msg.Body = strBody;
                        msg.BodyEncoding = System.Text.Encoding.UTF8;
                        msg.IsBodyHtml = true;
                        msg.Priority = System.Net.Mail.MailPriority.High;
                        System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient();
                        client.Credentials = new NetworkCredential(AppVars.objPolicyConfiguration.UserName.ToStr(), AppVars.objPolicyConfiguration.Password.ToStr());
                        client.Port = Convert.ToInt32(AppVars.objPolicyConfiguration.Port);
                        client.Host = AppVars.objPolicyConfiguration.SmtpHost;
                        client.EnableSsl = objSubCompany.SmtpHasSSL.ToBool();

                        FieldInfo transport = client.GetType().GetField("transport", BindingFlags.NonPublic | BindingFlags.Instance);
                        FieldInfo authModules = transport.GetValue(client).GetType().GetField("authenticationModules", BindingFlags.NonPublic | BindingFlags.Instance);

                        Array modulesArray = authModules.GetValue(transport.GetValue(client)) as Array;
                        modulesArray.SetValue(modulesArray.GetValue(3), 1);


                        ServicePointManager.ServerCertificateValidationCallback =
                            delegate (object s, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                     System.Security.Cryptography.X509Certificates.X509Chain chain, System.Net.Security.SslPolicyErrors sslPolicyErrors)
                            { return true; };

                        client.Send(msg);


                    }
                }
            }
            catch (Exception ex)
            {


            }

        }

        #endregion





        void grdStats_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                    return;

                if (statsContextMenu == null)
                {
                    statsContextMenu = new RadDropDownMenu();

                    RadMenuItem menu_showJobs = new RadMenuItem("Show Jobs");
                    menu_showJobs.ForeColor = Color.Blue;
                    menu_showJobs.BackColor = Color.Blue;
                    menu_showJobs.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    menu_showJobs.Click += new EventHandler(menu_showJobs_Click);
                    statsContextMenu.Items.Add(menu_showJobs);
                }

                e.ContextMenu = statsContextMenu;
            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }





        void menu_showJobs_Click(object sender, EventArgs e)
        {

            try
            {

                RadMenuItem item = (RadMenuItem)sender;
                GridViewRowInfo row = grdStats.CurrentRow;

                if (row != null && row is GridViewDataRowInfo)
                {
                    int driverId = row.Cells["DriverId"].Value.ToInt();


                    Fleet_DriverQueueList obj = null;
                    DateTime? fromDate = DateTime.Now.ToDate();
                    DateTime? tillDate = DateTime.Now.ToDate();


                    if (optDriverWise.ToggleState == ToggleState.On)
                    {

                        obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                    }
                    else if (optMonthWise.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();

                    }
                    else if (optToday.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();


                    }


                    if (obj != null || (fromDate != null && tillDate != null))
                    {


                        //
                        List<Booking> list = null;
                        if (obj != null)
                        {
                            DateTime newLoginDateTime = obj.LoginDateTime.ToDateTime();

                            if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                            {

                                newLoginDateTime = newLoginDateTime.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                                //   loginDateTime = General.GetObject<Fleet_DriverQueueList>(c => c.LogoutDateTime.Value > newLoginDateTime).DefaultIfEmpty().LoginDateTime;
                            }
                            list = General.GetQueryable<Booking>(c => c.PickupDateTime >= newLoginDateTime
                                                   && (c.DriverId == driverId)
                                                 && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();

                        }
                        else
                        {

                            if (optMonthWise.ToggleState == ToggleState.On)
                            {
                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value >= fromDate && c.PickupDateTime.Value <= tillDate)
                                                       && (c.DriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();
                            }
                            else if (optToday.ToggleState == ToggleState.On)
                            {

                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value.Date == DateTime.Now.Date && c.PickupDateTime.Value.TimeOfDay >= fromDate.Value.TimeOfDay && c.PickupDateTime.Value.TimeOfDay <= tillDate.Value.TimeOfDay)
                                                       && (c.DriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();
                            }
                        }

                        //  Fleet_DriverQueueList obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                        //if (obj != null)
                        //{

                        //    var list = General.GetQueryable<Booking>(c => c.PickupDateTime >= obj.LoginDateTime
                        //                                && (c.DriverId == driverId || c.ReturnDriverId == driverId)
                        //                              && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();


                        if (list.Count > 0)
                        {

                            frmDriverJobs frmDrvJobs = new frmDriverJobs(list, row.Cells["DriverNo"].Value.ToStr());
                            frmDrvJobs.StartPosition = FormStartPosition.CenterScreen;
                            frmDrvJobs.ShowDialog();
                            frmDrvJobs.Dispose();
                        }
                        // }
                    }
                }

            }
            catch
            {


            }


        }

        void grdStats_ScreenTipNeeded(object sender, ScreenTipNeededEventArgs e)
        {
            ShowScreenTipForCellStats(e.Item as GridDataCellElement);
        }



        private void ShowScreenTipForCellStats(GridDataCellElement cell)
        {
            if (cell == null)
                return;

            try
            {


                GridViewRowInfo row = cell.RowElement.RowInfo;

                if (row != null && row is GridViewDataRowInfo)
                {

                    int driverId = row.Cells["DriverId"].Value.ToInt();

                    Fleet_DriverQueueList obj = null;
                    DateTime? fromDate = DateTime.Now.ToDate();
                    DateTime? tillDate = DateTime.Now.ToDate();


                    if (optDriverWise.ToggleState == ToggleState.On)
                    {

                        obj = General.GetObject<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.Status == true);

                    }
                    else if (optMonthWise.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();

                    }
                    else if (optToday.ToggleState == ToggleState.On)
                    {
                        fromDate = dtpStatsFromDate.Value.ToDateTime();
                        tillDate = dtpStatsTillDate.Value.ToDateTime();


                    }


                    if (obj != null || (fromDate != null && tillDate != null))
                    {

                        List<Booking> list = null;
                        if (obj != null)
                        {
                            list = General.GetQueryable<Booking>(c => c.PickupDateTime >= obj.LoginDateTime
                                                   && (c.DriverId == driverId)
                                                 && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();

                        }
                        else
                        {

                            if (optMonthWise.ToggleState == ToggleState.On)
                            {
                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value.Date >= fromDate && c.PickupDateTime.Value.Date <= tillDate)
                                                       && (c.DriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).OrderByDescending(c => c.PickupDateTime).Take(15).ToList();
                            }
                            else if (optToday.ToggleState == ToggleState.On)
                            {

                                list = General.GetQueryable<Booking>(c => (c.PickupDateTime.Value.Date == DateTime.Now.Date && c.PickupDateTime.Value.TimeOfDay >= fromDate.Value.TimeOfDay && c.PickupDateTime.Value.TimeOfDay <= tillDate.Value.TimeOfDay)
                                                       && (c.DriverId == driverId)
                                                     && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).OrderByDescending(c => c.PickupDateTime).Take(15).ToList();
                            }
                        }




                        if (list.Count > 0)
                        {
                            StringBuilder text = new StringBuilder();

                            text.Append("<html>");

                            for (int i = 0; i < list.Count; i++)
                            {

                                text.Append("<b>" + (i + 1).ToStr() + "." + " Ref # : " + list[i].BookingNo.ToStr() + " @ <color=Red>" + string.Format("{0:dd/MM/yy HH:mm}", list[i].PickupDateTime) + "</b>");

                                text.Append("<br><color=Black>Pickup : " + list[i].FromAddress.ToStr());
                                text.Append("<br>Destination : " + list[i].ToAddress.ToStr());

                                text.Append("<br><br>");



                            }


                            RadOffice2007ScreenTipElement screenTip = new RadOffice2007ScreenTipElement();
                            screenTip.CaptionLabel.Margin = new Padding(3);

                            screenTip.CaptionLabel.Text = text.ToStr() + "<br><br><strong>For More Results, Right Click and press Show Jobs</strong>";
                            //   screenTip.CaptionLabel.Text = text.ToStr();
                            screenTip.MainTextLabel.Text = string.Empty;
                            screenTip.EnableCustomSize = false;


                            cell.ScreenTip = screenTip;
                        }
                    }
                }

            }
            catch (Exception ex)
            {


            }



        }





        private void PlaySoundNotification(string soundFileName, bool looping)
        {

            try
            {
                spMessaging.SoundLocation = System.Windows.Forms.Application.StartupPath + "\\sound\\" + soundFileName;




                if (File.Exists(spMessaging.SoundLocation))
                {

                    if (looping)
                        spMessaging.PlayLooping();

                    else
                        spMessaging.Play();
                }

            }
            catch
            {


            }
        }




        private void PlaySound(string soundFileName, bool looping)
        {


            //      sp.SoundLocation = System.Windows.Forms.Application.StartupPath + "\\sound\\" + soundFileName;




            try
            {
                if (File.Exists(sp.SoundLocation))
                {

                    if (looping)
                        sp.PlayLooping();

                    else
                        sp.Play();
                }

            }
            catch
            {


            }
        }



        private void StopJobDueSound()
        {
            if (frmJobDue != null && frmJobDue.IsDisposed == false)
            {
                frmJobDue.Close();
            }

        }





        private bool? HasHoldAndReleaseValue = null;


        void grdPendingJobs_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                RadGridView grd = (sender as RadGridView);
                if (grd.CurrentRow != null && grd.CurrentRow is GridViewDataRowInfo)
                {
                    if (e.KeyCode == Keys.I)
                    {


                        long id = grd.CurrentRow.Cells["Id"].Value.ToLong();


                        frmCustomScreenTip frmTip = new frmCustomScreenTip(id);
                        frmTip.StartPosition = FormStartPosition.CenterParent;
                        frmTip.ShowInTaskbar = false;
                        frmTip.ShowDialog();
                        KeyEventArgs key = frmTip.LastSendEventArgs;

                        frmTip.Dispose();
                        frmTip = null;
                        frmBookingDashBoard_KeyDown(null, key);

                    }
                    else if (e.KeyCode == Keys.H || e.KeyCode == Keys.R)
                    {

                        if (HasHoldAndReleaseValue == null)
                        {
                            if (AppVars.listUserRights.Count(c => c.functionId == "USE HOLD AND RELEASE SHORTKEYS") > 0)
                                HasHoldAndReleaseValue = true;
                            else
                                HasHoldAndReleaseValue = false;
                        }

                        if (HasHoldAndReleaseValue.ToBool())
                        {

                            if (e.KeyCode == Keys.H)
                            {


                                if (grd.Name == "grdPendingJobs")
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {

                                        if (db.GetTable<Booking>().Count(c => c.Id == grd.CurrentRow.Cells["Id"].Value.ToLong()
                                                  && (c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                  || c.BookingStatusId == Enums.BOOKINGSTATUS.POB || c.BookingStatusId == Enums.BOOKINGSTATUS.STC)) > 0)
                                        {

                                            MessageBox.Show("Job is already Accepted by driver");
                                        }
                                        else
                                        {

                                            db.stp_UpdateJobStatus(grd.CurrentRow.Cells["Id"].Value.ToLong(), Enums.BOOKINGSTATUS.ONHOLD);

                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_HOLDANDRELEASE + ">>" + grd.CurrentRow.Cells["Id"].Value.ToStr() + ">>hold");


                                        }
                                    }

                                }
                                else if (grd.Name == "grdPreBookings")
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {

                                        if (db.GetTable<Booking>().Count(c => c.Id == grd.CurrentRow.Cells["Id"].Value.ToLong()
                                                  && (c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                  || c.BookingStatusId == Enums.BOOKINGSTATUS.POB || c.BookingStatusId == Enums.BOOKINGSTATUS.STC
                                                  || c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START)) > 0)
                                        {

                                            MessageBox.Show("Job is already Accepted by driver");
                                        }
                                        else
                                        {

                                            db.stp_UpdateJobStatus(grd.CurrentRow.Cells["Id"].Value.ToLong(), Enums.BOOKINGSTATUS.ONHOLD);

                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_HOLDANDRELEASEPRE + ">>" + grd.CurrentRow.Cells["Id"].Value.ToStr() + ">>hold");


                                        }
                                    }

                                }



                            }
                            else if (e.KeyCode == Keys.R)
                            {


                                if (grd.Name == "grdPendingJobs")
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {




                                        var objBooking = db.Bookings.FirstOrDefault(c => c.Id == grd.CurrentRow.Cells["Id"].Value.ToLong());

                                        if (objBooking != null)
                                        {
                                            objBooking.AutoDespatch = true;
                                            objBooking.IsBidding = true;
                                            db.SubmitChanges();

                                            //  new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);
                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_HOLDANDRELEASE + ">>" + grd.CurrentRow.Cells["Id"].Value.ToStr() + ">>release");

                                        }

                                    }
                                }
                                else if (grd.Name == "grdPreBookings")
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {

                                        var objBooking = db.Bookings.FirstOrDefault(c => c.Id == grd.CurrentRow.Cells["Id"].Value.ToLong());

                                        if (objBooking != null)
                                        {
                                            objBooking.AutoDespatch = true;
                                            objBooking.IsBidding = true;
                                            db.SubmitChanges();

                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_HOLDANDRELEASEPRE + ">>" + grd.CurrentRow.Cells["Id"].Value.ToStr() + ">>release");

                                        }
                                    }
                                }

                            }



                        }


                    }

                }







            }
            catch
            {


            }
        }


        //private int GetDriverIdFromDriverNo(string driverNo)
        //{
        //    int driverId = 0;


        //    try
        //    {

        //        if (grdDriverWaiting.Rows.Count(c => c.Cells["DriverNo"].Value.ToStr() == driverNo
        //            && c.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE) > 0)
        //        {

        //            driverId = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverNo"].Value.ToStr() == driverNo).Cells["DriverId"].Value.ToInt();

        //        }
        //        else if (grdOnBoardDriver.Rows.Count(c => c.Cells["DriverNo"].Value.ToStr() == driverNo
        //            && c.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE) > 0)
        //        {

        //            driverId = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverNo"].Value.ToStr() == driverNo).Cells["DriverId"].Value.ToInt();

        //        }

        //    }
        //    catch (Exception ex)
        //    {


        //    }

        //    return driverId;

        //}





        void TrackDriverItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                long jobId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdDriverWaiting.CurrentRow.Cells["CurrentJobId"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }






                if (File.Exists(Application.StartupPath + "\\Booking\\TreasureBooking.exe"))
                {

                    ClsDataTransfer polObj = new ClsDataTransfer();

                    foreach (System.Reflection.PropertyInfo item in AppVars.objPolicyConfiguration.GetType().GetProperties())
                    {
                        try
                        {

                            if (polObj.GetType().GetProperty(item.Name) != null)
                                polObj.GetType().GetProperty(item.Name).SetValue(polObj, item.GetValue(AppVars.objPolicyConfiguration, null), null);
                        }
                        catch
                        {


                        }
                    }


                    polObj.DataString = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");
                    string pol = Newtonsoft.Json.JsonConvert.SerializeObject(polObj, Newtonsoft.Json.Formatting.Indented).Replace(" ", "~").Replace(Environment.NewLine, "").Replace("\"", "*");
                    string s = "XXX";
                    Process pp = new Process();
                    pp.StartInfo.FileName = Application.StartupPath + "\\Booking\\TreasureBooking.exe";
                    pp.StartInfo.Arguments = s + " " + pol + " " + Newtonsoft.Json.JsonConvert.SerializeObject(AppVars.LoginObj, Newtonsoft.Json.Formatting.Indented).Replace(" ", "").Replace(Environment.NewLine, "").Replace("\"", "*") + " " + Newtonsoft.Json.JsonConvert.SerializeObject(AppVars.keyLocations, Newtonsoft.Json.Formatting.Indented).Replace(" ", "").Replace(Environment.NewLine, "").Replace("\"", "*") + " " + Newtonsoft.Json.JsonConvert.SerializeObject(AppVars.zonesList, Newtonsoft.Json.Formatting.Indented).Replace(" ", "").Replace(Environment.NewLine, "").Replace("\"", "*");
                    pp.StartInfo.Arguments += " " + "rptJobRouthPathGoogle" + " " + jobId + " " + "true" + " " + driverId;
                    pp.Start();
                    Thread.Sleep(500);
                }
                else
                {
                    rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? General.GetObject<Booking>(c => c.Id == jobId) : null, true, driverId);
                    rpt.ShowDialog();
                    rpt.Dispose();

                    GC.Collect();


                }


            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        void TrackEscortItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                long jobId = 0;
                long? escortId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdDriverWaiting.CurrentRow.Cells["CurrentJobId"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();
                    escortId = db.ExecuteQuery<long?>("select EscortId from Booking where Id ={0}", jobId).FirstOrDefault().ToLongorNull();
                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                    escortId = db.ExecuteQuery<long?>("select EscortId from Booking where Id ={0}", jobId).FirstOrDefault().ToLongorNull();
                }






                if (File.Exists(Application.StartupPath + "\\Booking\\TreasureBooking.exe"))
                {

                    ClsDataTransfer polObj = new ClsDataTransfer();

                    foreach (System.Reflection.PropertyInfo item in AppVars.objPolicyConfiguration.GetType().GetProperties())
                    {
                        try
                        {

                            if (polObj.GetType().GetProperty(item.Name) != null)
                                polObj.GetType().GetProperty(item.Name).SetValue(polObj, item.GetValue(AppVars.objPolicyConfiguration, null), null);
                        }
                        catch
                        {


                        }
                    }


                    polObj.DataString = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");
                    string pol = Newtonsoft.Json.JsonConvert.SerializeObject(polObj, Newtonsoft.Json.Formatting.Indented).Replace(" ", "~").Replace(Environment.NewLine, "").Replace("\"", "*");
                    string s = "XXX";
                    Process pp = new Process();
                    pp.StartInfo.FileName = Application.StartupPath + "\\Booking\\TreasureBooking.exe";
                    pp.StartInfo.Arguments = s + " " + pol + " " + Newtonsoft.Json.JsonConvert.SerializeObject(AppVars.LoginObj, Newtonsoft.Json.Formatting.Indented).Replace(" ", "").Replace(Environment.NewLine, "").Replace("\"", "*") + " " + Newtonsoft.Json.JsonConvert.SerializeObject(AppVars.keyLocations, Newtonsoft.Json.Formatting.Indented).Replace(" ", "").Replace(Environment.NewLine, "").Replace("\"", "*") + " " + Newtonsoft.Json.JsonConvert.SerializeObject(AppVars.zonesList, Newtonsoft.Json.Formatting.Indented).Replace(" ", "").Replace(Environment.NewLine, "").Replace("\"", "*");
                    pp.StartInfo.Arguments += " " + "rptJobRouthPathGoogle" + " " + jobId + " " + "true" + " " + driverId;
                    pp.Start();
                    Thread.Sleep(500);
                }
                else
                {
                    rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? General.GetObject<Booking>(c => c.Id == jobId) : null, true, driverId, escortId);
                    rpt.ShowDialog();
                    rpt.Dispose();

                    GC.Collect();


                }


            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }


        void ForceLogoutItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                long Id = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }



                ForceLogoutDriver(Id, driverId, true);







            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        public void ForceLogoutDriver(long id, int? driverId, bool refreshdata)
        {
            try
            {
                int idleMins = AppVars.objPolicyConfiguration.AutoLogoutInActiveDrvMins.ToInt();

                if (idleMins == 0)
                    idleMins = 1;
                //  else if (idleMins > 1)
                //   idleMins = idleMins / 2;


                if (idleMins == 1 && General.GetQueryable<Fleet_Driver_Location>(c => c.DriverId == driverId && c.UpdateDate >= DateTime.Now.AddMinutes(-idleMins)).Count() > 0)
                {
                    MessageBox.Show("You Cannot Logout this Driver! " + Environment.NewLine + "Force Logout Minimum Idle Duration is " + idleMins + " min(s)");
                    return;
                }
                else
                {


                    if (id == 0)
                        id = General.GetObject<Fleet_DriverQueueList>(c => c.Status == true && c.DriverId == driverId).DefaultIfEmpty().Id;


                    if (id > 0)
                    {

                        DriverQueueBO objMaster = new DriverQueueBO();
                        objMaster.GetByPrimaryKey(id);

                        if (objMaster.Current != null)
                        {
                            objMaster.Current.LogoutDateTime = DateTime.Now;
                            objMaster.Current.Status = false;

                            objMaster.Save();


                            General.AddUserLog("Driver {" + objMaster.Current.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() + "} is forcefully logout by Controller", 3);


                            if (objMaster.Current.Fleet_Driver.HasPDA.ToBool())
                            {


                                new Thread(delegate ()
                                {
                                    General.SendMessageToPDA("request force logout=" + objMaster.Current.Fleet_Driver.DriverNo + "=" + driverId);
                                }).Start();

                                //  SendMessage("request force logout=" + objMaster.Current.Fleet_Driver.DriverNo);

                            }

                            if (refreshdata)
                                RefreshDashBoardDrivers();

                        }
                    }
                }

            }
            catch (Exception ex)
            {
                //ENUtils.ShowMessage(ex.Message);


            }
        }





        void streetViewItem_Click(object sender, EventArgs e)
        {

            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();

                }


                ShowStreetView(driverId);





            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        public void ShowStreetView(int driverId)
        {


            Fleet_Driver_Location objDrvLoc = General.GetObject<Fleet_Driver_Location>(c => c.DriverId == driverId);
            if (objDrvLoc == null)
            {

                ENUtils.ShowMessage("No Location found");

            }
            else
            {


                string connString = Application.StartupPath + "\\TreasureRouteMap.exe";




                if (connString.ToStr().Trim().Length > 0 && File.Exists(connString) == true)
                {
                    Process proc = Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                    if (proc != null)
                    {
                        proc.Kill();
                        proc.CloseMainWindow();
                        proc.Close();

                    }

                    string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");


                    string arg = "frmstreetview" + " " + conn + " " + driverId.ToStr() + " " + objDrvLoc.Id.ToStr();
                    Process.Start(connString, arg);
                }
                else
                {


                    frmStreetView frmStreet = new frmStreetView(driverId, objDrvLoc);

                    frmStreet.StartPosition = FormStartPosition.CenterScreen;
                    frmStreet.MaximizeBox = false;
                    frmStreet.ShowDialog();
                }


            }
        }

        void ForceActionItem_Click(object sender, EventArgs e)
        {

            try
            {

                if (grdOnBoardDriver.CurrentRow != null)
                {


                    int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();





                    // string driverId = grdOnPlotDrivers.CurrentCell.RowInfo.Cells[grdOnPlotDrivers.CurrentColumn.Index].ErrorText.ToStr();

                    if (driverId != 0)
                    {

                        RadMenuItem item = (RadMenuItem)sender;

                        string actionType = "";

                        if (item.Text.StartsWith("Force Arrive"))
                        {

                            actionType = "<<Arrive Job>>";
                        }
                        else if (item.Text.StartsWith("Force POB"))
                        {
                            actionType = "<<POB Job>>";

                        }


                        int statusId = grdOnBoardDriver.CurrentRow.Cells["WorkStatusId"].Value.ToInt();

                        long jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToLong();

                        string msg = "request pda=" + driverId + "=" + jobId + "=" + actionType + jobId + "=11";


                        new Thread(delegate ()
                        {
                            General.SendMessageToPDA(msg);


                        }).Start();

                        System.Threading.Thread.Sleep(1000);





                        //  new TaxiDataContext().stp_UnBlockDriver(driverId.ToInt(), AppVars.LoginObj.UserName.ToStr());
                        // LoadDriversGrid();

                    }
                }
            }
            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);
            }
        }


        void unBlockViewItem_Click(object sender, EventArgs e)
        {

            try
            {

                MenuItem item = (MenuItem)sender;





                if (item != null && item.Tag.ToStr() != string.Empty)
                {

                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });

                    int rowIndex = arr[0].ToInt();
                    int columnIndex = arr[1].ToInt();



                    string driverId = grdOnPlotDrivers.Rows[rowIndex].Cells[columnIndex].ErrorText.ToStr();

                    if (!string.IsNullOrEmpty(driverId) && driverId.IsNumeric())
                    {


                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.stp_UnBlockDriver(driverId.ToInt(), AppVars.LoginObj.UserName.ToStr());
                        }
                        // LoadDriversGrid();

                        RefreshDashBoardDrivers();
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }

        void DriverOnPlots_ItemClick(object sender, EventArgs e)
        {
            try
            {

                MenuItem item = (MenuItem)sender;

                if (item != null && item.Tag.ToStr().Contains(","))
                {
                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });

                    int columnIndex = arr[1].ToInt();
                    int rowIndex = arr[0].ToInt();
                    int driverId = grdOnPlotDrivers.Rows[rowIndex].Cells[columnIndex].ErrorText.ToInt();



                    if (item.Text.ToLower() == "track driver")
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            var objLogin = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Status == true && c.DriverId == driverId);

                            if (objLogin == null)
                            {
                                MessageBox.Show("Driver is not Login");

                            }
                            else
                            {
                                long jobId = objLogin.CurrentJobId.ToLong();


                                rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? db.Bookings.FirstOrDefault(c => c.Id == jobId) : null, true, driverId);
                                rpt.ShowDialog();
                                rpt.Dispose();

                                GC.Collect();

                            }
                        }
                    }
                    else if (item.Text.ToLower() == "message driver")
                    {
                        frmMessages frm = new frmMessages(driverId);
                        frm.StartPosition = FormStartPosition.CenterScreen;
                        frm.ShowDialog();
                        frm.Dispose();
                    }
                    else if (item.Text.ToLower() == "view job")
                    {
                        long currentJobId = General.GetQueryable<Fleet_DriverQueueList>(a => a.Status == true && a.DriverId == driverId).FirstOrDefault().DefaultIfEmpty().CurrentJobId.ToLong();

                        if (currentJobId > 0)
                        {

                            General.ShowBookingForm(currentJobId.ToInt(), true, "", "", Enums.BOOKING_TYPES.LOCAL);
                        }
                        else
                        {
                            MessageBox.Show("No Current Job Found");
                        }
                    }





                    // HideDriverMoveContextMenu(true);






                }




            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }

        void EscortOnPlots_ItemClick(object sender, EventArgs e)
        {
            try
            {

                MenuItem item = (MenuItem)sender;

                if (item != null && item.Tag.ToStr().Contains(","))
                {
                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });

                    int columnIndex = arr[1].ToInt();
                    int rowIndex = arr[0].ToInt();
                    int driverId = grdOnPlotDrivers.Rows[rowIndex].Cells[columnIndex].ErrorText.ToInt();



                    if (item.Text.ToLower() == "track driver")
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            var objLogin = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Status == true && c.DriverId == driverId);

                            if (objLogin == null)
                            {
                                MessageBox.Show("Driver is not Login");

                            }
                            else
                            {
                                long jobId = objLogin.CurrentJobId.ToLong();


                                rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? db.Bookings.FirstOrDefault(c => c.Id == jobId) : null, true, driverId);
                                rpt.ShowDialog();
                                rpt.Dispose();

                                GC.Collect();

                            }
                        }
                    }
                    else if (item.Text.ToLower() == "message driver")
                    {
                        frmMessages frm = new frmMessages(driverId);
                        frm.StartPosition = FormStartPosition.CenterScreen;
                        frm.ShowDialog();
                        frm.Dispose();
                    }
                    else if (item.Text.ToLower() == "view job")
                    {
                        long currentJobId = General.GetQueryable<Fleet_DriverQueueList>(a => a.Status == true && a.DriverId == driverId).FirstOrDefault().DefaultIfEmpty().CurrentJobId.ToLong();

                        if (currentJobId > 0)
                        {

                            General.ShowBookingForm(currentJobId.ToInt(), true, "", "", Enums.BOOKING_TYPES.LOCAL);
                        }
                        else
                        {
                            MessageBox.Show("No Current Job Found");
                        }
                    }





                    // HideDriverMoveContextMenu(true);






                }




            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }

        void DriverPositionMoveContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {

                MenuItem item = (MenuItem)sender;

                if (item != null && item.Tag.ToStr().Contains(","))
                {
                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });


                    int rowsCount = grdOnPlotDrivers.Rows.Count;
                    int columnIndex = arr[1].ToInt();
                    int rowIndex = arr[0].ToInt();
                    int driverId = grdOnPlotDrivers.Rows[rowIndex].Cells[columnIndex].ErrorText.ToInt();

                    int MoveToDriverId = 0;

                    if (item.Text.ToLower() == "move up")
                    {
                        if (rowIndex > 0 && grdOnPlotDrivers.Rows[rowIndex - 1].Cells[columnIndex].ErrorText.ToStr().Trim() != string.Empty)
                        {
                            MoveToDriverId = grdOnPlotDrivers.Rows[rowIndex - 1].Cells[columnIndex].ErrorText.ToInt();

                        }
                    }
                    else if (item.Text.ToLower() == "move down")
                    {
                        if (rowIndex >= 0 && (rowIndex + 1) <= (rowsCount - 1)
                            && grdOnPlotDrivers.Rows[rowIndex + 1].Cells[columnIndex].ErrorText.ToStr().Trim() != string.Empty)
                        {
                            MoveToDriverId = grdOnPlotDrivers.Rows[rowIndex + 1].Cells[columnIndex].ErrorText.ToInt();

                        }

                    }
                    else if (item.Text.ToLower() == "move to top")
                    {

                        MoveToDriverId = grdOnPlotDrivers.Rows[0].Cells[columnIndex].ErrorText.ToInt();



                    }





                    // HideDriverMoveContextMenu(true);



                    if (driverId > 0 && MoveToDriverId > 0)
                    {


                        try
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.stp_SwapDriverRank(driverId, MoveToDriverId, item.Text.ToLower());
                            }
                            RefreshPlotDrivers();
                        }

                        catch (Exception ex)
                        {
                            if (ex.Message.ToStr().ToLower().Contains("'error'"))
                                MessageBox.Show(ex.Message.Substring(ex.Message.ToStr().IndexOf("'error'") + 7));

                        }

                    }
                    else
                    {

                        if (driverId > 0 && item.Text.ToLower() == "logout")
                        {
                            ForceLogoutDriver(0, driverId, true);


                        }

                    }


                }




            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }





        private void HideDriverMoveContextMenu(bool hide)
        {
            if (driverContextMenu.Items.Count(c => c.Text == "Move Up" || c.Text == "Move Down") > 0)
            {

                driverContextMenu.Items["moveupitem"].Visibility = hide ? ElementVisibility.Collapsed : ElementVisibility.Visible;
                driverContextMenu.Items["movedownitem"].Visibility = hide ? ElementVisibility.Collapsed : ElementVisibility.Visible;
            }
        }

        void ViewJobItem_Click(object sender, EventArgs e)
        {
            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int jobId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdDriverWaiting.CurrentRow.Cells["CurrentJobId"].Value.ToInt();



                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    jobId = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToInt();

                }


                if (jobId != 0)
                {
                    ShowBookingForm(jobId, true);

                }

            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }

        void NoShowJobContextMenuItem1_Click(object sender, EventArgs e)
        {




            try
            {



                long Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();



                long jobId = GetDriverCurrentJobId(Id);
                //using (TaxiDataContext db = new TaxiDataContext())
                //{
                //    jobId = db.Fleet_DriverQueueLists.Where(c => c.Id == Id).Select(c => c.CurrentJobId).FirstOrDefault().ToLong();
                //}


                if (jobId != 0)
                {

                    if (IsShuttleJob(jobId, Enums.BOOKINGSTATUS.NOSHOW.ToInt()))
                        return;

                    int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                    string driverNo = grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();



                    General.ReCallBookingWithStatus(jobId.ToLong(), driverId.ToInt(), Enums.BOOKINGSTATUS.NOPICKUP, Enums.Driver_WORKINGSTATUS.AVAILABLE);

                    Thread.Sleep(500);
                    //   RefreshAllActiveData();

                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD + "=" + jobId + "=syncdrivers");

                    RefreshBookingListOnActive();

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Controller Pressed NO PICKUP from Driver (" + driverNo + ")");
                    }
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        void CancelJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {



                long Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

                long jobId = GetDriverCurrentJobId(Id);
                //long jobId = 0;
                //using (TaxiDataContext db = new TaxiDataContext())
                //{
                //    db.DeferredLoadingEnabled = false;
                //    jobId = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Id == Id).DefaultIfEmpty().CurrentJobId.ToLong();

                //}







                if (jobId != 0)
                {
                    if (IsShuttleJob(jobId, Enums.BOOKINGSTATUS.CANCELLED.ToInt()))
                        return;


                    CancelBookingDirect(jobId, "", 0, "");

                    UpdateNoPickupAndCancelledCountFromDb();

                }


            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }


        private long GetDriverCurrentJobId(long queueListId)
        {
            long jobId = 0;
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    jobId = db.Fleet_DriverQueueLists.Where(c => c.Id == queueListId).Select(c => c.CurrentJobId).FirstOrDefault().ToLong();

                }
            }
            catch
            {

            }


            return jobId;
        }


        private bool IsShuttleJob(long jobId, int statusId)
        {
            bool rtn = false;

            if (grdPendingJobs.Rows.Count(c => c.Cells["Id"].Value.ToLong() == jobId && c.Cells["GroupId"].Value.ToStr().Length > 0) > 0)
            {


                rtn = true;
            }
            else if (grdPreBookings.Rows.Count(c => c.Cells["Id"].Value.ToLong() == jobId && c.Cells["GroupId"].Value.ToStr().Length > 0) > 0)
            {


                rtn = true;
            }

            else if (grdAllJobs.Rows.Count(c => c.Cells["Id"].Value.ToLong() == jobId && c.Cells["GroupId"].Value.ToStr().Length > 0) > 0)
            {

                rtn = true;
            }

            if (rtn)
            {
                MessageBox.Show("You cannot cancel single shuttle job");
            }

            return rtn;

        }

        void RecoverJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {



                long Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

                //long jobId = 0;
                //using (TaxiDataContext db = new TaxiDataContext())
                //{
                //    jobId = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Id == Id).DefaultIfEmpty().CurrentJobId.ToLong();

                //}

                long jobId = GetDriverCurrentJobId(Id);


                if (jobId != 0)
                {



                    if (IsShuttleJob(jobId, Enums.BOOKINGSTATUS.NOSHOW.ToInt()))
                        return;




                    int driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                    string driverNo = grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();



                    General.ReCallBookingFromOnBoardGrid(jobId, driverId, true);


                    Thread.Sleep(500);


                    RefreshBookingListOnActive();
                    //RecentJobsRefreshRequired = true;
                    //RefreshDashBoardDriversSync("");
                    //RecentJobsRefreshRequired = false;



                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Job is Recovered from Driver (" + driverNo + ") by Controller");

                    }
                }

            }
            catch
            {
                // ENUtils.ShowMessage(ex.Message);

            }
        }


        void ShiftJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {


                string gridName = (sender as RadMenuItem).Tag.ToStr();
                string driverNo = string.Empty;
                long Id = 0;
                int driverId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();
                    driverNo = grdDriverWaiting.CurrentRow.Cells["DriverNo"].Value.ToStr();
                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                    driverNo = grdOnBoardDriver.CurrentRow.Cells["DriverNo"].Value.ToStr();
                }





                List<Booking> list = null;
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    DateTime loginDateTime = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.Id == Id).DefaultIfEmpty().LoginDateTime.ToDateTime();

                    if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                    {

                        DateTime? newloginDateTime = loginDateTime.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                        //  newloginDateTime = db.Fleet_DriverQueueLists.FirstOrDefault(c => c.LogoutDateTime.Value >= loginDateTime).DefaultIfEmpty().LoginDateTime.ToDateTimeorNull();


                        if (newloginDateTime != null)
                            loginDateTime = newloginDateTime.ToDateTime();

                    }

                    list = db.Bookings.Where(c => c.PickupDateTime >= loginDateTime
                                                  && (c.DriverId == driverId)
                                                && c.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED).ToList();
                }




                if (list != null)
                {



                    frmDriverJobs frmDrvJobs = new frmDriverJobs(list, driverNo);
                    frmDrvJobs.StartPosition = FormStartPosition.CenterScreen;
                    frmDrvJobs.ShowDialog();
                    frmDrvJobs.Dispose();
                    GC.Collect();
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void ClearJobContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                //if (DialogResult.Yes == MessageBox.Show("Do you want to clear this job manually ?", "Clear Job", MessageBoxButtons.YesNo))
                //{


                string gridName = (sender as RadMenuItem).Tag.ToStr();
                long Id = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();

                    //
                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    Id = grdOnBoardDriver.CurrentRow.Cells["Id"].Value.ToLong();

                }



                if (Id != 0)
                {

                    //if (AppVars.listUserRights.Count(c => c.functionId == "ENABLE 3DS PAYMENT") > 0)
                    //{
                    string response = General.UpdateClearManualJob(Id, 0, "", "");



                    if (response.ToStr().StartsWith("failed:"))
                    {


                        int paymenttypeid = 0;


                        frmManualPaymentPage frmProcess = new frmManualPaymentPage(response, Id);
                        frmProcess.ShowDialog();


                        paymenttypeid = frmProcess.PaymentTypeId;






                        if (paymenttypeid == Enums.PAYMENT_TYPES.CASH)
                            General.UpdateClearManualJob(Id, paymenttypeid, "");
                        else if (paymenttypeid == Enums.PAYMENT_TYPES.CREDIT_CARD)
                        {
                            frmBooking2 frm = new frmBooking2("", "", null, false);
                            frm.PickBookingTypeId = Enums.BOOKING_TYPES.LOCAL;
                            if (Id != 0)
                            {
                                frm.OnDisplayRecord(Id);
                            }
                            frm.ControlBox = true;
                            frm.FormBorderStyle = FormBorderStyle.Fixed3D;
                            frm.MaximizeBox = false;
                            frm.MakeDirectManualPayment = true;

                            frm.ShowDialog();

                            frm.Dispose();



                            General.UpdateClearManualJob(Id, paymenttypeid, "", "");

                        }

                        frmProcess.Dispose();
                    }

                    //  }
                    //else
                    //{

                    //    new Thread(delegate ()
                    //    {
                    //        General.ClearDriverCurrentJob(Id);

                    //    }).Start();


                    //    System.Threading.Thread.Sleep(1500);


                    //    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_DASHBOARD_DRIVER);
                    //}
                }
                //    }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }


        void CallItem_Click(object sender, EventArgs e)
        {


        }





        void grdPendingJobs_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {

                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                {
                    e.Cancel = true;
                    return;

                }

                if (EditFare != null && EditFare.Items.Count > 0)
                {
                    EditFare.Items[1].Visibility = ElementVisibility.Visible;


                    EditFare.Items["QuickReDispatchJob"].Visibility = ElementVisibility.Collapsed;

                }
                if (cell.GridControl.Name == "grdPreBookings")
                {
                    EditFare.Items[20].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[0].Visibility = ElementVisibility.Collapsed;



                    EditFare.Items[2].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[3].Visibility = ElementVisibility.Visible;


                    EditFare.Items[4].Visibility = ElementVisibility.Collapsed;



                    EditFare.Items[5].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[6].Visibility = ElementVisibility.Collapsed;




                    if (grdPreBookings.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.ONBIDDING)
                    {
                        EditFare.Items[18].Visibility = ElementVisibility.Visible;
                        EditFare.Items[19].Visibility = ElementVisibility.Visible;

                    }
                    else
                    {

                        EditFare.Items[7].Visibility = ElementVisibility.Collapsed;


                        EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[19].Visibility = ElementVisibility.Collapsed;

                    }

                    if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() < 5)
                    {

                        EditFare.Items[8].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                        EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[16].Visibility = ElementVisibility.Collapsed;

                    }
                    else
                    {


                        if (grdPreBookings.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START
                              || grdPreBookings.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                        {
                            EditFare.Items[8].Visibility = ElementVisibility.Collapsed;


                            EditFare.Items[9].Visibility = ElementVisibility.Visible;
                            EditFare.Items[15].Visibility = ElementVisibility.Visible;




                            if (grdPreBookings.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                                EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                            else
                                EditFare.Items[3].Visibility = ElementVisibility.Visible;

                        }
                        else
                        {
                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;
                            EditFare.Items[8].Visibility = ElementVisibility.Visible;

                            EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                        }

                    }


                    EditFare.Items[9].Tag = "grdPreBookings";
                    EditFare.Items[8].Tag = "grdPreBookings";

                    EditFare.Items[15].Tag = "grdPreBookings";
                    EditFare.Items[16].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items["CallCustomer"].Tag = "grdPreBookings";





                    EditFare.Items[12].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items["CancelJobBooking"].Visibility = ElementVisibility.Visible;
                    EditFare.Items["CancelJobBooking"].Tag = "grdPreBookings";


                    if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                    {
                        EditFare.Items[13].Visibility = ElementVisibility.Visible;
                        (EditFare.Items[13] as RadMenuItem).IsChecked = grdPreBookings.CurrentRow.Cells["IsBidding"].Value.ToBool();

                        EditFare.Items[14].Visibility = ElementVisibility.Visible;
                        (EditFare.Items[14] as RadMenuItem).IsChecked = grdPreBookings.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool();
                    }

                }
                else if (cell.GridControl.Name == "grdPendingJobs")
                {
                    if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo
                         &&
                         (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.WAITING ||
                          grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.ONHOLD ||
                          grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.NOTACCEPTED

                         )
                        )
                        EditFare.Items[3].Visibility = ElementVisibility.Visible;

                    else
                        EditFare.Items[3].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[0].Visibility = ElementVisibility.Visible;
                    EditFare.Items[2].Visibility = ElementVisibility.Visible;
                    EditFare.Items[2].Text = "Cancel Job";

                    if (AppVars.objPolicyConfiguration.EnableGhostJob.ToBool())
                        EditFare.Items[20].Visibility = ElementVisibility.Visible;


                    EditFare.Items[4].Visibility = EnablePDA && AppVars.objPolicyConfiguration.EnableFOJ.ToBool() ? ElementVisibility.Visible : ElementVisibility.Collapsed;


                    // EditFare.Items[3].Visibility = ElementVisibility.Visible;
                    EditFare.Items[5].Visibility = ElementVisibility.Visible;


                    EditFare.Items[6].Visibility = DisableCompleteJOb;


                    //if (grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.SHUTTLE && grdPendingJobs.CurrentRow.Cells["GroupId"].Value != null)
                    //{

                    //    EditFare.Items[7].Visibility = ElementVisibility.Visible;


                    //}
                    //else
                    if (grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.ONBIDDING)
                    {
                        EditFare.Items[18].Visibility = ElementVisibility.Visible;
                        EditFare.Items[19].Visibility = ElementVisibility.Visible;

                    }
                    else
                    {

                        EditFare.Items[7].Visibility = ElementVisibility.Collapsed;



                        // EditFare.Items[17].Visibility = ElementVisibility.Visible;
                        EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[19].Visibility = ElementVisibility.Collapsed;


                    }

                    // EditFare.Items[7].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[9].Tag = "grdPendingJobs";
                    EditFare.Items[8].Tag = "grdPendingJobs";
                    EditFare.Items[15].Tag = "grdPendingJobs";
                    EditFare.Items[16].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items["CallCustomer"].Tag = "grdPendingJobs";


                    // EditFare.Items["RecoverPreJob"].Visibility = ElementVisibility.Collapsed; 

                    if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START
                           || grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                    {
                        EditFare.Items[8].Visibility = ElementVisibility.Collapsed;

                        if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                            EditFare.Items[9].Visibility = ElementVisibility.Visible;
                        else
                        {
                            EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                            EditFare.Items["QuickReDispatchJob"].Visibility = ElementVisibility.Visible;
                        }


                        EditFare.Items[15].Visibility = ElementVisibility.Visible;

                        if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                            EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                        else
                            EditFare.Items[3].Visibility = ElementVisibility.Visible;


                        //    EditFare.Items["RecoverPreJob"].Visibility = ElementVisibility.Visible; 
                    }
                    else if (grdPendingJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                    {
                        //cabsmart.


                        EditFare.Items[0].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[1].Visibility = ElementVisibility.Collapsed;


                        EditFare.Items[2].Text = "Recover FOJ Job";
                        EditFare.Items[2].Visibility = ElementVisibility.Visible;
                        EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[4].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[5].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[6].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[7].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[8].Visibility = ElementVisibility.Collapsed;

                        EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                        EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[14].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[17].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[19].Visibility = ElementVisibility.Collapsed;


                        EditFare.Items[20].Visibility = ElementVisibility.Collapsed;



                    }

                    else
                    {
                        EditFare.Items[9].Visibility = ElementVisibility.Collapsed;
                        EditFare.Items[8].Visibility = ElementVisibility.Visible;

                        EditFare.Items[15].Visibility = ElementVisibility.Collapsed;
                    }




                    EditFare.Items[12].Visibility = ElementVisibility.Collapsed;


                    if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                    {
                        EditFare.Items[13].Visibility = ElementVisibility.Visible;
                        (EditFare.Items[13] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsBidding"].Value.ToBool();

                        EditFare.Items[14].Visibility = ElementVisibility.Visible;
                        (EditFare.Items[14] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool();
                    }



                    //if (AppVars.objPolicyConfiguration.EnableBidding.ToBool())
                    //{
                    //    EditFare.Items[13].Visibility = ElementVisibility.Visible;
                    //    (EditFare.Items[13] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsBidding"].Value.ToBool();
                    //}

                    //if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool())
                    //{

                    //    EditFare.Items[14].Visibility = ElementVisibility.Visible;
                    //    (EditFare.Items[14] as RadMenuItem).IsChecked = grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool();

                    //}                       


                    if (EditFare.Items["TransferJob"] != null && EditFare.Items["TransferJob"].Tag != null)
                        EditFare.Items["TransferJob"].Visibility = ElementVisibility.Visible;

                }
                else
                {
                    if (grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo
                       && grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                        EditFare.Items[2].Text = "Recover Job";
                    else
                        EditFare.Items[2].Text = "Cancel Job";

                    EditFare.Items[20].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[0].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[2].Visibility = ElementVisibility.Visible;
                    EditFare.Items[3].Visibility = ElementVisibility.Collapsed;



                    // if (EditFare.Items.Count == 4)
                    EditFare.Items[4].Visibility = ElementVisibility.Collapsed;




                    // EditFare.Items[3].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items[5].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[6].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[7].Visibility = ElementVisibility.Collapsed;



                    EditFare.Items[8].Visibility = ElementVisibility.Collapsed;




                    if (grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING_START)
                        EditFare.Items[9].Visibility = ElementVisibility.Visible;
                    else
                        EditFare.Items[9].Visibility = ElementVisibility.Collapsed;



                    if (grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                    {
                        EditFare.Items[2].Text = "Recover FOJ Job";
                        EditFare.Items[2].Visibility = ElementVisibility.Visible;

                    }


                    if (grdAllJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool())
                    {



                        if (grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING &&
                            (DateTime.Now.AddMinutes(5) >= grdAllJobs.CurrentRow.Cells["PickupDateTemp"].Value.ToDateTime()
                            || grdAllJobs.CurrentRow.Cells["PickupDateTemp"].Value.ToDateTime() <= DateTime.Now))
                            EditFare.Items[16].Visibility = ElementVisibility.Visible;
                        else
                        {
                            EditFare.Items[16].Visibility = ElementVisibility.Collapsed;
                        }


                    }
                    else
                    {
                        //EditFare.Items[9].Visibility = ElementVisibility.Collapsed;

                        if (grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.PENDING)
                        {


                            EditFare.Items[16].Visibility = ElementVisibility.Visible;

                        }
                    }

                    EditFare.Items[9].Tag = "grdAllJobs";
                    EditFare.Items[8].Tag = "grdAllJobs";
                    EditFare.Items[15].Tag = "grdAllJobs";
                    EditFare.Items["CallCustomer"].Tag = "grdAllJobs";




                    if (grdAllJobs.CurrentRow.Cells["PickupDateTemp"].Value.ToDateTime().AddHours(5) < DateTime.Now)
                        EditFare.Items[12].Visibility = ElementVisibility.Visible;
                    else
                        EditFare.Items[12].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items[14].Visibility = ElementVisibility.Collapsed;

                    EditFare.Items[15].Visibility = ElementVisibility.Collapsed;


                    EditFare.Items[17].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items[18].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items[19].Visibility = ElementVisibility.Collapsed;


                }


                if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool() == false)
                {
                    EditFare.Items[13].Visibility = ElementVisibility.Collapsed;
                    EditFare.Items[14].Visibility = ElementVisibility.Collapsed;
                }



                EditFare.Tag = cell.GridControl.Name;



                e.ContextMenu = EditFare;



            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        void EditFareItem1_Click(object sender, EventArgs e)
        {
            try
            {
                long jobId = 0;
                int openFrom = 1;
                GridViewRowInfo row = null;
                if (Pg_AllJobs.Item.IsSelected)
                {
                    if (grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                        row = grdAllJobs.CurrentRow;
                    }
                }
                else if (Pg_PendingJobs.Item.IsSelected)
                {
                    if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                        row = grdPendingJobs.CurrentRow;
                    }
                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    if (grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                        row = grdPreBookings.CurrentRow;
                    }
                }

                else if (Pg_BookingHistory != null && Pg_BookingHistory.Item.IsSelected)
                {
                    if (grdLister.CurrentRow != null && grdLister.CurrentRow is GridViewDataRowInfo)
                    {
                        jobId = grdLister.CurrentRow.Cells["Id"].Value.ToLong();
                    }
                    openFrom = 2;
                }

                if (jobId > 0)
                {
                    frmEditFare frm = new frmEditFare(jobId, openFrom);
                    frm.ShowDialog();
                    if (row != null)
                    {
                        row.Cells["Fare"].Value = Convert.ToDecimal(string.Format("{0:0.00}", frm.farerate));
                    }
                    frm.Dispose();
                }
            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }



        void RecoveFOJFromDriverStatustem_Click(object sender, EventArgs e)
        {
            try
            {






                int driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();


                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if (General.GetQueryable<Booking>(c => c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.FOJ && c.PickupDateTime > (DateTime.Now.AddDays(-1))).Count() == 1)
                    {

                        long JOBID = General.GetObject<Booking>(c => c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.FOJ && c.PickupDateTime > (DateTime.Now.AddDays(-1))).DefaultIfEmpty().Id;


                        if (JOBID > 0)
                        {


                            new Thread(delegate ()
                            {
                                try
                                {
                                    ReCallFOJBooking(JOBID, driverId);
                                }
                                catch
                                {

                                }
                            }).Start();

                            RefreshAllActiveData();
                            // RefreshActiveData();


                            Thread.Sleep(500);
                        }
                    }
                    else
                    {


                        long Id = 0;

                        Id = grdDriverWaiting.CurrentRow.Cells["Id"].Value.ToLong();

                        if (Id != 0)
                        {

                            new Thread(delegate ()
                            {
                                try
                                {
                                    General.UpdateClearManualJob(Id);
                                }
                                catch
                                {

                                }
                                //   General.ClearDriverCurrentJob(Id);

                            }).Start();


                            System.Threading.Thread.Sleep(1000);

                            RefreshDashBoardDrivers();
                        }

                    }

                }





                //  Booking objFOJ = General.GetObject<Booking>(c => c.Id == grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() && c.DriverId != null);








            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }

        private void CancelOption(string text, string tag)
        {
            try
            {


                if (tag.Equals("grdpendingjobs"))
                {

                    if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        if (VerifyCurrentRow())
                        {

                            if (text == "recover foj job")
                            {

                                int driverId = grdPendingJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                                long Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                                string refNo = grdPendingJobs.CurrentRow.Cells["RefNumber"].Value.ToStr();
                                int bookingTypeId = grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                                string mobileNo = grdPendingJobs.CurrentRow.Cells["MobileNo"].Value.ToStr();

                                if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId).Count() > 0)
                                {
                                    if (General.GetQueryable<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.CurrentJobId == Id).Count() > 0)
                                    {
                                        new Thread(delegate ()
                                        {
                                            CancelCurrentBooking(Id, driverId);
                                        }).Start();

                                        RefreshBookingListOnActive();

                                        new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);


                                        if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                                        {
                                            General.UpdateSupplierStatus(Id, driverId, Enums.BOOKINGSTATUS.CANCELLED.ToInt(), "cancelled", "");
                                        }
                                        else
                                        {
                                            string RefNumber = refNo;


                                            if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && bookingTypeId == Enums.BOOKING_TYPES.ONLINE && RefNumber.ToStr().Length > 0)
                                            {



                                                //  string mobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();
                                                string[] arrRef = RefNumber.ToStr().Trim().Split('/');

                                                refNo = arrRef.Count() == 1 ? arrRef[0].ToStr() : arrRef[1].ToStr();



                                                string newRefNo = string.Empty;
                                                for (int i = 0; i < refNo.Length; i++)
                                                {
                                                    if (char.IsLetter(refNo[i]))
                                                        newRefNo += refNo[i];
                                                }

                                                if (!string.IsNullOrEmpty(newRefNo) && newRefNo.Length > 0)
                                                {
                                                    refNo = refNo.Replace(newRefNo, "").Trim();
                                                }


                                                if (refNo.IsNumeric())
                                                {

                                                    new Thread(delegate ()
                                                    {

                                                        General.CancelWebBooking("", refNo);

                                                    }).Start();
                                                }
                                            }
                                        }
                                    }
                                    else if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING).Count() > 0)
                                    {
                                        using (TaxiDataContext db = new TaxiDataContext())
                                        {
                                            db.stp_CancelBooking(Id, "Job Cancelled from Recent Jobs", AppVars.LoginObj.UserName.ToStr());
                                            // db.stp_BookingLog(BookingId, AppVars.LoginObj.UserName.ToStr(), "Job is Cancelled ! Reason : " + reason);
                                        }

                                        new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);

                                    }
                                    else
                                    {

                                        new Thread(delegate ()
                                        {
                                            ReCallFOJBooking(Id, driverId);

                                        }).Start();

                                        Thread.Sleep(500);
                                        RefreshActiveData();
                                    }

                                    Thread.Sleep(500);
                                }
                            }
                            else
                            {

                                CancelBooking(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong(), grdPendingJobs.CurrentRow.Cells["RefNumber"].Value.ToStr(), grdPendingJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt(), grdPendingJobs.CurrentRow.Cells["MobileNo"].Value.ToStr());


                            }



                        }
                    }
                }
                else if (tag.Equals("grdprebookings"))
                {
                    CancelBooking(grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong(), grdPreBookings.CurrentRow.Cells["RefNumber"].Value.ToStr(), grdPreBookings.CurrentRow.Cells["BookingTypeId"].Value.ToInt(), grdPreBookings.CurrentRow.Cells["MobileNo"].Value.ToStr());

                }
                else if (tag.Equals("grdalljobs"))
                {


                    int driverId = grdAllJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                    long Id = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();


                    string refNo = grdAllJobs.CurrentRow.Cells["RefNumber"].Value.ToStr();
                    int bookingTypeId = grdAllJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                    string mobileNo = grdAllJobs.CurrentRow.Cells["MobileNo"].Value.ToStr();

                    int bookingstatusId = grdAllJobs.CurrentRow.Cells["StatusId"].Value.ToInt();
                    //using (TaxiDataContext db = new TaxiDataContext())
                    //{
                    //  Booking objFOJ = General.GetObject<Booking>(c => c.Id == grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() && c.DriverId != null);
                    if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId).Count() > 0)
                    {
                        if (General.GetQueryable<Fleet_DriverQueueList>(c => c.DriverId == driverId && c.CurrentJobId == Id).Count() > 0)
                        {
                            new Thread(delegate ()
                            {
                                try
                                {
                                    CancelCurrentBooking(Id, driverId);


                                    try
                                    {
                                        db.stp_BookingLog(Id, AppVars.LoginObj.UserName.ToStr(), "Job is Cancelled by Controller");
                                    }
                                    catch
                                    {


                                    }

                                    if (mobileNo.ToStr().Trim().Length >= 9 && AppVars.objPolicyConfiguration.SMSCancelJob.ToStr().Trim().Length > 0)
                                    {
                                        try
                                        {
                                            SendSMS(mobileNo, GetMessage(AppVars.objPolicyConfiguration.SMSCancelJob.ToStr(), null, Id), 0);
                                        }
                                        catch
                                        {


                                        }
                                    }

                                    UpdateNoPickupAndCancelledCountFromDb();
                                }
                                catch
                                {

                                }
                            }).Start();

                            RefreshBookingListOnActive();

                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);


                            if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                            {
                                General.UpdateSupplierStatus(Id, driverId, Enums.BOOKINGSTATUS.CANCELLED.ToInt(), "cancelled", "");
                            }
                            else
                            {
                                string RefNumber = refNo;


                                if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && bookingTypeId == Enums.BOOKING_TYPES.ONLINE && RefNumber.ToStr().Length > 0)
                                {



                                    //  string mobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();
                                    string[] arrRef = RefNumber.ToStr().Trim().Split('/');

                                    refNo = arrRef.Count() == 1 ? arrRef[0].ToStr() : arrRef[1].ToStr();



                                    string newRefNo = string.Empty;
                                    for (int i = 0; i < refNo.Length; i++)
                                    {
                                        if (char.IsLetter(refNo[i]))
                                            newRefNo += refNo[i];
                                    }

                                    if (!string.IsNullOrEmpty(newRefNo) && newRefNo.Length > 0)
                                    {
                                        refNo = refNo.Replace(newRefNo, "").Trim();
                                    }


                                    if (refNo.IsNumeric())
                                    {

                                        new Thread(delegate ()
                                        {

                                            General.CancelWebBooking("", refNo);

                                        }).Start();
                                    }
                                }
                            }
                        }
                        else if (General.GetQueryable<Booking>(c => c.Id == Id && c.DriverId == driverId && c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING).Count() > 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.stp_CancelBooking(Id, "Job Cancelled from Recent Jobs", AppVars.LoginObj.UserName.ToStr());
                                // db.stp_BookingLog(BookingId, AppVars.LoginObj.UserName.ToStr(), "Job is Cancelled ! Reason : " + reason);
                            }

                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ACTIVE_DASHBOARD);

                        }
                        else
                        {

                            if (bookingstatusId == Enums.BOOKINGSTATUS.PENDING_START)
                            {

                                CancelBooking(grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong(), grdAllJobs.CurrentRow.Cells["RefNumber"].Value.ToStr(), grdAllJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt(), grdAllJobs.CurrentRow.Cells["MobileNo"].Value.ToStr());

                                //   if (ShowPendingJobOnRecentTab)
                                //   General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + Id);

                            }
                            else
                            {

                                new Thread(delegate ()
                                {
                                    ReCallFOJBooking(Id, driverId);

                                }).Start();

                                Thread.Sleep(500);
                                RefreshAllActiveData();
                            }



                        }

                        Thread.Sleep(500);
                    }
                    else
                    {

                        CancelBooking(grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong(), grdAllJobs.CurrentRow.Cells["RefNumber"].Value.ToStr(), grdAllJobs.CurrentRow.Cells["BookingTypeId"].Value.ToInt(), grdAllJobs.CurrentRow.Cells["MobileNo"].Value.ToStr());


                    }
                    //}






                    //if (AppVars.objPolicyConfiguration.EnableWebBooking.ToBool() && bookingTypeId==Enums.BOOKING_TYPES.ONLINE )
                    //{

                    //    string[] arrRef = refNo.Trim().Split('/');

                    //    refNo = arrRef.Count() == 1 ? arrRef[0].ToStr() : arrRef[1].ToStr();

                    //    string newRefNo = string.Empty;
                    //    for (int i = 0; i < refNo.Length; i++)
                    //    {
                    //        if (char.IsLetter(refNo[i]))
                    //            newRefNo += refNo[i];
                    //    }

                    //    if (!string.IsNullOrEmpty(newRefNo) && newRefNo.Length > 0)
                    //    {
                    //        refNo = refNo.Replace(newRefNo, "").Trim();
                    //    }

                    //    if (refNo.IsNumeric())
                    //    {

                    //        new Thread(delegate()
                    //        {

                    //            General.CancelWebBooking(mobileNo, refNo);

                    //        }).Start();
                    //    }
                    //}



                }
            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }


        void CancelJobItem_Click(object sender, EventArgs e)
        {
            CancelOption((sender as RadItem).Text.ToLower(), EditFare.Tag.ToStr().ToLower());
        }


        public static bool CancelCurrentBooking(long jobId, int driverId)
        {

            try
            {

                bool rtn = true;

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.stp_UpdateJob(jobId, driverId, Enums.BOOKINGSTATUS.CANCELLED, Enums.Driver_WORKINGSTATUS.AVAILABLE, AppVars.objPolicyConfiguration.SinBinTimer.ToInt());
                }

                if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                {

                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendMessageToPDA("request pda=" + driverId + "=" + jobId + "=Cancelled Job>>" + jobId + "=2").Result.ToBool();
                    }


                }
                else
                {

                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendMessageToPDA("request pda=" + driverId + "=" + jobId + "=Cancelled Job>>" + jobId + "=2").Result.ToBool();
                    }

                }


                if (AppVars.objPolicyConfiguration.DespatchOfflineJobs.ToBool())
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_SaveOfflineMessage(jobId, driverId, "", AppVars.LoginObj.LoginName.ToStr(), "Cancelled Job>>" + jobId + "=2");
                    }

                }

                return rtn;
            }
            catch
            {

                return false;
                //   ENUtils.ShowMessage(ex.Message);


            }

        }

        public void CancelBookingDirect(long bookingId, string refNo, int bookingTypeId, string mobileNo)
        {

            try
            {



                using (TaxiDataContext db = new TaxiDataContext())
                {
                    try
                    {
                        db.CommandTimeout = 5;

                        db.DeferredLoadingEnabled = false;
                        var details = db.Bookings.FirstOrDefault(c => c.Id == bookingId);

                        refNo = details.BookingNo.ToStr();

                        bookingTypeId = details.BookingTypeId.ToInt();
                        mobileNo = details.CustomerMobileNo.ToStr();
                    }
                    catch
                    {


                    }
                }


                frmCancelReason frm = new frmCancelReason(bookingId, refNo, bookingTypeId, mobileNo);
                frm.ShowDialog();
                frm.Dispose();

                GC.Collect();
                //    RefreshBookingListOnActive();



                //  RefreshActiveData();



            }
            catch
            {


            }


        }



        public bool CancelBooking(long bookingId, string refNo, int bookingTypeId, string mobileNo)
        {

            bool rtn = false;
            try
            {





                frmCancelReason frm = new frmCancelReason(bookingId, refNo, bookingTypeId, mobileNo);
                frm.ShowDialog();
                rtn = frm.IsSaved;
                frm.Dispose();

                GC.Collect();

            }
            catch
            {


            }

            return rtn;

        }






        private void RefreshBookingListOnActive()
        {

            try
            {

                if (HasBookingHistoryTab)
                {
                    RefreshOnActive = true;

                }
                else
                {

                    if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBookingsList") > 0)
                    {
                        (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingsList") as frmBookingsList).SetRefreshWhenActive("");
                    }
                }

            }
            catch
            {


            }




        }





        void FOJJobItem_Click(object sender, EventArgs e)
        {
            try
            {

                if (EditFare.Tag != null)
                {


                    if (EditFare.Tag.ToStr() == "grdPendingJobs")
                    {
                        if (AppVars.IsTelephonist)
                        {
                            ENUtils.ShowMessage("Permission Denied");
                            return;
                        }

                        DespatchFOJJob();

                    }

                }


            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        void SendPreJob_Click(object sender, EventArgs e)
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                long jobId = 0;
                //long groupId = 0;


                RadMenuItem item = (RadMenuItem)sender;



                if (item.Tag.ToStr() == "grdPendingJobs")
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                else if (item.Tag.ToStr() == "grdPreBookings")
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                else
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId != 0)
                {

                    //jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                    //groupId = grdPreBookings.CurrentRow.Cells["GroupId"].Value.ToLong();


                    frmDespatchPreBooking frmPreDespatch = new frmDespatchPreBooking(General.GetObject<Booking>(c => c.Id == jobId));
                    frmPreDespatch.ShowDialog();
                    frmPreDespatch.Dispose();
                }
                // DespatchFOJJob();

                //   }




            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        private void OnDespatchPreJob(long jobId)
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                if (jobId != 0)
                {


                    frmDespatchPreBooking frmPreDespatch = new frmDespatchPreBooking(General.GetObject<Booking>(c => c.Id == jobId));
                    frmPreDespatch.ShowDialog();
                    frmPreDespatch.Dispose();
                }
            }
            catch
            {
            }
        }

        void ResendJob_Click(object sender, EventArgs e)
        {
            try
            {



                long jobId = 0;

                RadMenuItem item = (RadMenuItem)sender;


                if (item.Tag.ToStr() == "grdPendingJobs")
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                else if (item.Tag.ToStr() == "grdPreBookings")
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                else
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                OnDespatchPreJob(jobId);






            }
            catch
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }




        void CopyBooking_Click(object sender, EventArgs e)
        {
            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_AllJobs.Item.IsSelected)
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }




                CopyBooking(jobId);




            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void CopyBooking(long jobId)
        {

            if (jobId > 0)
            {

                AppVars.objCopyBooking = General.GetObject<Booking>(c => c.Id == jobId);


            }

        }



        void OnBiddingJob_Click(object sender, EventArgs e)
        {

            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {


                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }
                else if (Pg_PreBookings.Item.IsSelected && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                {


                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                }




                if (jobId > 0)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        var objBook = db.Bookings.FirstOrDefault(c => c.Id == jobId);

                        if (objBook != null)
                        {
                            objBook.IsBidding = (sender as RadMenuItem).IsChecked;
                            db.SubmitChanges();

                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_TODAY_AND_PREBOOKING_DASHBOARD);
                        }
                    }
                }





            }
            catch (Exception ex)
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }


        void OnAutoDespatchJob_Click(object sender, EventArgs e)
        {

            try
            {

                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {


                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }
                else if (Pg_PreBookings.Item.IsSelected && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                {


                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                }



                if (jobId > 0)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        var objBook = db.Bookings.FirstOrDefault(c => c.Id == jobId);

                        if (objBook != null)
                        {
                            //   DateTime? pickupDateTime = objBook.PickupDateTime;
                            objBook.AutoDespatch = (sender as RadMenuItem).IsChecked;



                            db.SubmitChanges();

                            //if (pickupDateTime != null && pickupDateTime.Value.ToDate() == DateTime.Now.Date)
                            //{

                            //    new BroadcasterData().BroadCastToAll(RefreshTypes.);
                            //}
                            //else
                            //{
                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_TODAY_AND_PREBOOKING_DASHBOARD);
                            //   }
                        }
                    }
                }





            }
            catch
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }



        void ClearJob_Click(object sender, EventArgs e)
        {

            try
            {
                if (grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
                {


                    long jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();

                    if (jobId > 0)
                    {


                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.DISPATCHED);
                        }


                        grdAllJobs.CurrentRow.Delete();



                    }
                }




            }
            catch
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }



        void SMSJob_Click(object sender, EventArgs e)
        {
            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_AllJobs.Item.IsSelected)
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId > 0)
                {
                    Booking objJob = General.GetObject<Booking>(c => c.Id == jobId);
                    if (objJob != null)
                    {
                        frmSMSAll frmSMS = new frmSMSAll("", GetMessage(AppVars.objPolicyConfiguration.DespatchTextForDriver.ToStr(), objJob, jobId), (objJob != null ? objJob.SMSType.ToInt() : Enums.SMSACCOUNT_TYPE.MODEMSMS));

                        frmSMS.StartPosition = FormStartPosition.CenterScreen;
                        frmSMS.ShowDialog();

                        Thread.Sleep(500);
                        frmSMS.Dispose();
                    }
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void RecallPendingJob_Click(object sender, EventArgs e)
        {
            try
            {

                if (grdAllJobs.CurrentRow == null)
                    return;

                //  RadMenuItem item = (RadMenuItem)sender;

                long jobId = 0;


                jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();


                if (jobId != 0)
                {

                    Booking objJob = General.GetObject<Booking>(c => c.Id == jobId);
                    if (objJob != null && objJob.DriverId != null)
                    {
                        int driverId = objJob.DriverId.ToInt();

                        int bookingStatusId = objJob.BookingStatusId.ToInt();

                        if (bookingStatusId == Enums.BOOKINGSTATUS.PENDING && driverId != 0 && objJob.DespatchDateTime != null)
                        {
                            DateTime? newAvailableTime = objJob.DespatchDateTime.Value.AddMinutes(1).AddSeconds(5);


                            if (DateTime.Now < newAvailableTime)
                            {
                                ENUtils.ShowMessage("Job is already Offered to other Driver. " + Environment.NewLine
                                + "You cannot Re-Call this job before " + string.Format("{0:HH:mm:ss}", newAvailableTime));
                                return;

                            }

                        }


                        if (driverId != 0 && (bookingStatusId == Enums.BOOKINGSTATUS.POB || bookingStatusId == Enums.BOOKINGSTATUS.STC))
                        {


                            ENUtils.ShowMessage("Job cannot be Re-Call as driver is on " + objJob.BookingStatus.DefaultIfEmpty().StatusName.ToStr() + " Status.");
                            return;

                        }
                        else if (driverId != 0 &&
                             (bookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED || bookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)
                             )
                        {


                            if (General.GetQueryable<Booking>(null).Count(c => c.Id == jobId && (c.AcceptedDateTime != null || c.Fleet_Driver != null && c.Fleet_Driver.HasPDA == true)) > 0)
                            {
                                ENUtils.ShowMessage("Job cannot be Re-Call as driver is on " + objJob.BookingStatus.DefaultIfEmpty().StatusName.ToStr() + " Status.");
                                return;

                            }

                        }
                        else
                        {

                            //if (objJob.DespatchDateTime != null && objJob.DespatchDateTime.Value.AddMinutes(1) > DateTime.Now)
                            //{
                            //   string time= string.Format("{0:HH:mm:ss}", objPendingBooking.DespatchDateTime.Value.AddSeconds(10).AddMinutes(AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt()))


                            //       ENUtils.ShowMessage("You cannot recall this Job until " + time);
                            //}



                            new Thread(delegate ()
                            {
                                int loopCnt = 1;
                                bool success = false;
                                while (loopCnt < 3)
                                {

                                    if (bookingStatusId == Enums.BOOKINGSTATUS.FOJ)
                                    {
                                        success = ReCallFOJBooking(jobId, driverId);
                                    }
                                    else if (bookingStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                                    {
                                        success = General.ReCallPreBooking(jobId, driverId);

                                    }

                                    else
                                    {

                                        success = General.ReCallBooking(jobId, driverId);
                                    }


                                    if (success)
                                    {
                                        loopCnt++;
                                        using (TaxiDataContext db = new TaxiDataContext())
                                        {
                                            db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Recall Job from Driver (" + objJob.Fleet_Driver.DefaultIfEmpty().DriverNo.ToStr() + ")");
                                        }

                                        break;

                                    }
                                    else
                                        loopCnt++;



                                }
                            }).Start();



                            //new Thread(delegate()
                            //{
                            //    (new TaxiDataContext()).stp_RecallPendingJob(jobId, Enums.BOOKINGSTATUS.WAITING, objJob.DriverId, objJob.Fleet_Driver.DefaultIfEmpty().DriverNo, AppVars.LoginObj.UserName.ToStr());
                            //    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                            //    {

                            //        General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Job>>" + jobId + "=2");
                            //    }

                            //}).Start();

                            Thread.Sleep(500);

                            RefreshAllActiveData();
                        }
                    }
                    else
                    {
                        ENUtils.ShowMessage("You cannot recall this job (Job  not exist)");


                    }
                }




            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }














        void RecoverPreJob_Click(object sender, EventArgs e)
        {
            try
            {

                RadMenuItem item = (RadMenuItem)sender;

                long jobId = 0;

                if (item.Tag.ToStr() == "grdPendingJobs")
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                else if (item.Tag.ToStr() == "grdPreBookings")
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                else
                {
                    jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }

                if (jobId != 0)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        try
                        {
                            if (db.Bookings.Where(c => c.Id == jobId && c.DriverId != null).Count() > 0)
                            {
                                int driverId = 0;
                                if (item.Tag.ToStr() == "grdPendingJobs")
                                    driverId = grdPendingJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                                else if (item.Tag.ToStr() == "grdPreBookings")
                                    driverId = grdPreBookings.CurrentRow.Cells["DriverId"].Value.ToInt();
                                else
                                {
                                    driverId = grdAllJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                                }
                                // Booking objJob = General.GetObject<Booking>(c => c.Id == jobId && c.DriverId != null);

                                // string driverNo = grdAllJobs.CurrentRow.Cells["Driver"].Value.ToStr();



                                new Thread(delegate ()
                                {
                                    try
                                    {
                                        General.ReCallPreBooking(jobId, driverId);
                                    }
                                    catch
                                    {

                                    }
                                }).Start();



                                Thread.Sleep(1000);

                                if (ShowPendingJobOnRecentTab)
                                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + jobId);

                                //   RefreshRequiredData();
                                else
                                    UpdateBookingStatus("**refresh grid" + ">>" + jobId + ">>" + driverId + ">>" + "" + ">>" + Enums.BOOKINGSTATUS.WAITING + ">>" + "pda", null);
                                //   RefreshTodayAndPreData();

                            }

                        }
                        catch
                        {

                        }

                    }
                }




            }
            catch (Exception ex)
            {


            }
        }


        void GroupJobItem_Click(object sender, EventArgs e)
        {
            //try
            //{


            //    long jobId = 0;
            //    long groupId = 0;
            //    if (EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
            //    {
            //        groupId = grdPendingJobs.CurrentRow.Cells["GroupId"].Value.ToLong();
            //        jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
            //    }
            //    else if (EditFare.Tag.ToStr() == "grdPreBookings" && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
            //    {
            //        groupId = grdPreBookings.CurrentRow.Cells["GroupId"].Value.ToLong();
            //        jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
            //    }
            //    else if (EditFare.Tag.ToStr() == "grdAllJobs" && grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
            //    {
            //        groupId = grdAllJobs.CurrentRow.Cells["GroupId"].Value.ToLong();
            //        jobId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong();
            //    }


            //    if (groupId > 0)
            //    {

            //        ViewGroupJobs(groupId, jobId);
            //    }







            //}
            //catch (Exception ex)
            //{
            //    //   ENUtils.ShowMessage(ex.Message);

            //}
        }


        private void ViewGroupJobs(long groupId, long selectedJobId)
        {
            try
            {
                frmViewGroupJobs frmGroupJobs = new frmViewGroupJobs(groupId, selectedJobId);
                frmGroupJobs.StartPosition = FormStartPosition.CenterScreen;
                frmGroupJobs.ShowDialog();


                frmGroupJobs.Dispose();
                frmGroupJobs = null;
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);

            }


        }



        void DespatchSMS_Click(object sender, EventArgs e)
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    long Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();


                    frmDespatchSMS frmDespSMS = new frmDespatchSMS(General.GetObject<Booking>(c => c.Id == Id));
                    frmDespSMS.StartPosition = FormStartPosition.CenterScreen;
                    frmDespSMS.ShowDialog();
                    frmDespSMS.Dispose();

                }





            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }




        void ForceCompleteJob_Click(object sender, EventArgs e)
        {
            CompleteJob();
        }


        private void CompleteJob()
        {
            try
            {
                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }



                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (VerifyCurrentRow())
                    {
                        long Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();


                        frmForceCompleteJob frmComp = new frmForceCompleteJob(General.GetObject<Booking>(c => c.Id == Id));
                        frmComp.StartPosition = FormStartPosition.CenterScreen;
                        frmComp.ShowDialog();
                        frmComp.Dispose();
                    }

                }





            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }



        void AllocateDriverItem_Click(object sender, EventArgs e)
        {
            AllocateDriver();
        }



        private void AllocateDriver()
        {
            try
            {

                if (EditFare.Tag != null)
                {
                    long Id = 0;
                    int openFrom = 1;

                    if (EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                    {
                        if (VerifyCurrentRow())
                        {
                            Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                        }

                    }
                    else if (EditFare.Tag.ToStr() == "grdPreBookings" && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                    {

                        Id = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                        openFrom = 2;
                    }

                    if (Id != 0)
                    {

                        frmAllocateDriver frmAllocate = new frmAllocateDriver(Id, openFrom);
                        frmAllocate.StartPosition = FormStartPosition.CenterScreen;
                        frmAllocate.ShowDialog();
                        frmAllocate.Dispose();
                    }

                }


            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }





        void grdDriver_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                    return;

                driverContextMenu.Tag = cell.GridControl.Name;
                driverContextMenu.Items["RecoverFOJ"].Visibility = ElementVisibility.Collapsed;
                if (cell.GridControl.Name == "grdDriverWaiting")
                {
                    HideDriverMoveContextMenu(true);

                    if (driverContextMenu.Items["CallDriver"] != null)
                    {
                        driverContextMenu.Items["CallDriver"].Tag = cell.GridControl.Name;

                        if (driverContextMenu.Items["CallCustomer"] != null && driverContextMenu.Items["CallCustomer"].Visibility == ElementVisibility.Visible)
                        {
                            driverContextMenu.Items["CallCustomer"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["CallCustomer"].Visibility = ElementVisibility.Hidden;

                        }


                    }
                    if (cell.RowInfo.Cells["HasPDA"].Value.ToBool())
                    {



                        driverContextMenu.Items["ViewJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ShiftJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ClearJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["StreetView"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["Call"].Tag = cell.GridControl.Name;



                        driverContextMenu.Items["CancelJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["ShiftJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["RecoverJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["NoShowJob"].Visibility = ElementVisibility.Collapsed;


                        driverContextMenu.Items["StreetView"].Visibility = AppVars.objPolicyConfiguration.MapType.ToInt() == 2 ? ElementVisibility.Collapsed : ElementVisibility.Visible;

                        //    driverContextMenu.Items["StreetView"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["Call"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["UnBlock"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["TrackEscort"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["TrackEscort"].Tag = cell.GridControl.Name;


                        if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE || cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONBREAK)
                        {

                            driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Collapsed;
                            driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Collapsed;
                        }
                        else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.FOJ)
                        {

                            driverContextMenu.Items["RecoverFOJ"].Visibility = ElementVisibility.Visible;
                            driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Collapsed;
                        }
                        else
                        {
                            driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Visible;
                            driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Visible;

                        }




                        if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() >= 3)
                        {

                            if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONROUTE)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force Arrive Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;

                            }
                            else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ARRIVED)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force POB Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;

                            }
                            else
                            {
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;
                            }


                            driverContextMenu.Items["Logout"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["Logout"].Visibility = ElementVisibility.Visible;
                        }
                        else
                            driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;



                        e.ContextMenu = driverContextMenu;
                        return;
                    }
                    else
                    {
                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["TrackEscort"].Visibility = ElementVisibility.Collapsed;

                    }

                    if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE)
                    {
                        e.ContextMenu = firstContextMenu;
                    }

                    else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONBREAK)
                    {
                        e.ContextMenu = secondContextMenu;
                    }
                }
                else if (cell.GridControl.Name == "grdOnBoardDriver")
                {
                    HideDriverMoveContextMenu(true);

                    if (driverContextMenu.Items["CallCustomer"] != null)
                    {
                        driverContextMenu.Items["CallCustomer"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["CallDriver"].Tag = cell.GridControl.Name;


                        if (driverContextMenu.Items["CallCustomer"] != null && driverContextMenu.Items["CallCustomer"].Visibility == ElementVisibility.Hidden)
                        {
                            driverContextMenu.Items["CallCustomer"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["CallCustomer"].Visibility = ElementVisibility.Visible;

                        }
                    }


                    if (cell.RowInfo.Cells["HasPDA"].Value.ToBool())
                    {
                        driverContextMenu.Items["ViewJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ClearJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ShiftJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["StreetView"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["Call"].Tag = cell.GridControl.Name;



                        driverContextMenu.Items["CancelJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["ShiftJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["RecoverJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["NoShowJob"].Visibility = ElementVisibility.Visible;

                        driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Visible;



                        driverContextMenu.Items["StreetView"].Visibility = AppVars.objPolicyConfiguration.MapType.ToInt() == 2 ? ElementVisibility.Collapsed : ElementVisibility.Visible;
                        driverContextMenu.Items["Call"].Visibility = ElementVisibility.Collapsed;


                        driverContextMenu.Items["UnBlock"].Visibility = ElementVisibility.Collapsed;


                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                        var escortId = db.ExecuteQuery<long?>("Select EscortId From Booking where Id = {0}", grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToInt()).FirstOrDefault().ToLongorNull();
                        if (escortId == null)
                        {
                            driverContextMenu.Items["TrackEscort"].Visibility = ElementVisibility.Hidden;
                        }
                        else
                        {
                            driverContextMenu.Items["TrackEscort"].Visibility = ElementVisibility.Visible;
                            driverContextMenu.Items["TrackEscort"].Tag = cell.GridControl.Name;
                        }
                        driverContextMenu.Items["Logout"].Tag = cell.GridControl.Name;


                        if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() >= 3)
                        {

                            if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ONROUTE)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force Arrive Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;

                            }
                            else if (cell.RowInfo.Cells["WorkStatusId"].Value.ToInt() == Enums.Driver_WORKINGSTATUS.ARRIVED)
                            {
                                driverContextMenu.Items["ArrivedPOB"].Text = "Force POB Request";
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;

                            }
                            else
                            {
                                driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;
                            }

                            driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["TrackEscort"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["Logout"].Tag = cell.GridControl.Name;
                            driverContextMenu.Items["Logout"].Visibility = ElementVisibility.Collapsed;
                        }
                        else
                            driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;



                        e.ContextMenu = driverContextMenu;

                    }
                    else
                    {
                        HideDriverMoveContextMenu(true);


                        driverContextMenu.Items["ViewJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ClearJob"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["StreetView"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["ShiftJob"].Tag = cell.GridControl.Name;

                        driverContextMenu.Items["ShiftJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["NoShowJob"].Visibility = ElementVisibility.Collapsed;

                        driverContextMenu.Items["RecoverJob"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["StreetView"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["Call"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["UnBlock"].Visibility = ElementVisibility.Collapsed;

                        driverContextMenu.Items["ArrivedPOB"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["Logout"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["TrackDriver"].Visibility = ElementVisibility.Collapsed;
                        driverContextMenu.Items["TrackEscort"].Visibility = ElementVisibility.Collapsed;

                        driverContextMenu.Items["ViewJob"].Visibility = ElementVisibility.Visible;
                        driverContextMenu.Items["ClearJob"].Visibility = ElementVisibility.Visible;

                        driverContextMenu.Items["TrackDriver"].Tag = cell.GridControl.Name;
                        driverContextMenu.Items["TrackEscort"].Tag = cell.GridControl.Name;

                        e.ContextMenu = driverContextMenu;
                    }


                }
            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }

        void firstContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {
                if (grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    UpdateDriverStatus(grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToIntorNull(), Enums.Driver_WORKINGSTATUS.ONBREAK);

                }


            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }


        private void UpdateDriverStatus(int? driverId, int statusId)
        {
            using (TaxiDataContext db = new TaxiDataContext())
            {

                db.stp_ChangeDriverStatus(driverId, statusId);
            }

            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DASHBOARD_DRIVER);

        }

        void secondContextMenuItem1_Click(object sender, EventArgs e)
        {

            try
            {
                if (grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {
                    UpdateDriverStatus(grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToIntorNull(), Enums.Driver_WORKINGSTATUS.AVAILABLE);
                }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);
            }
        }



        void grdDriver_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            try
            {
                if (e.Row != null && e.Row is GridViewDataRowInfo)
                {
                    ShowMessageForm(e.Row, e.Row.Cells["DriverId"].Value.ToInt());

                }
            }
            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);
            }
        }


        Font font_pob = new Font("Tahoma", 9, FontStyle.Bold);

        //void grdPendingJobs_ScreenTipNeeded(object sender, ScreenTipNeededEventArgs e)
        //{



        //    GridDataCellElement cell = e.Item as GridDataCellElement;
        //    if (cell != null && cell.ColumnInfo != null)
        //    {
        //        this.ShowScreenTipForCell(cell);
        //    }
        //}



        private void ShowScreenTipForCell(GridDataCellElement cell)
        {
            try
            {



                if (cell.RowInfo is GridViewDataRowInfo == false) return;

                //  AppVars.objPolicyConfiguration.ShowJobDetailScreenPopup

                if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == true && cell.GridControl != null && cell.GridControl.Name == "grdPendingJobs")
                {
                    if (cell.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.ONHOLD)
                    {
                        int id = cell.RowInfo.Cells["Id"].Value.ToInt();

                        Booking obj = General.GetObject<Booking>(c => c.Id == id);

                        if (obj != null && obj.OnHoldReason.ToStr().Trim() != string.Empty)
                        {

                            RadOffice2007ScreenTipElement screenTip = new RadOffice2007ScreenTipElement();

                            //screenTip.CaptionLabel.Margin = new Padding(3);




                            string text = "<html><span><b>  " + obj.OnHoldReason.ToStr().Trim() + "</b></span></html>";


                            screenTip.CaptionLabel.Text = text;
                            screenTip.MainTextLabel.Text = string.Empty;
                            screenTip.EnableCustomSize = false;

                            cell.ScreenTip = screenTip;

                        }
                    }
                    else
                    {
                        return;

                    }


                }


                if (AppVars.objPolicyConfiguration.ShowJobDetailScreenPopup.ToBool() == true)
                {

                    GridViewDataRowInfo row = (GridViewDataRowInfo)cell.RowInfo;

                    int id = cell.RowInfo.Cells["Id"].Value.ToInt();

                    Booking obj = General.GetObject<Booking>(c => c.Id == id);



                    if (obj != null)
                    {





                        RadOffice2007ScreenTipElement screenTip = new RadOffice2007ScreenTipElement();

                        screenTip.CaptionLabel.Margin = new Padding(3);

                        string via = string.Empty;
                        string notes = string.Empty;


                        if (obj.Booking_ViaLocations.Count > 0)
                        {
                            via = "Via Point : " + string.Join(Environment.NewLine + ",", obj.Booking_ViaLocations.Select(c => c.ViaLocValue.ToStr()).ToArray<string>())
                                            + "<br><br>";

                        }

                        if (obj.Booking_Notes.Count > 0)
                        {
                            int notesCnt = 1;
                            notes = "<br>" + string.Join(Environment.NewLine, obj.Booking_Notes.Select(c => "(" + (notesCnt++).ToStr() + "). " + c.notes.ToStr()).ToArray<string>()) + "<br><br>";

                            if (!string.IsNullOrEmpty(notes))
                            {
                                notes = notes.Insert(0, "<u>Notes :</u>");

                            }
                        }


                        string autoDespatchText = obj.AutoDespatch.ToBool() && obj.AutoDespatchTime != null && obj.ZoneId != null ? "(AutoDespatch on : " + string.Format("{0:HH:mm}", obj.AutoDespatchTime) + " = " + ((DateTime.Now > obj.AutoDespatchTime) ? DateTime.Now.Subtract(obj.AutoDespatchTime.Value).TotalMinutes.ToInt() : obj.AutoDespatchTime.Value.Subtract(DateTime.Now).TotalMinutes.ToInt()) + " min(s) remaining)" : "";

                        string journeyType = "One Way Journey";


                        if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                            journeyType = "One Way";
                        else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                            journeyType = "Return Journey";
                        else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            journeyType = "Wait and Return";


                        String text = String.Format("<html><b><span><color=Blue>Ref #  :   {13}<br><b>Vehicle : {0} " + " , Journey Type : " + journeyType + " <br>Pickup Time : {1}  " + autoDespatchText + "<br><br><br>Pickup Point : {2}<br><br>{3}" +
                                               "Destination  :  {4}<br><br>Fare : £ {5}" +
                                           "<br><br>Customer Name : {6}<br>Telephone No : {7}<br>Mobile No : {8}<br><br>Accounts : {9}" +
                                           "<br>Payment Mode : {10}<br><br>Special Requirement : {11}<br><br>Status : {12}<br><br>" +
                                           notes + "Driver : {14}</span></b>",

                             row.Cells["Vehicle"].Value, string.Format("{0:dd/MM/yyyy HH:mm}", obj.PickupDateTime), row.Cells["From"].Value, via, row.Cells["To"].Value, row.Cells["Fare"].Value, row.Cells["Passenger"].Value, obj.CustomerPhoneNo.ToStr(), obj.CustomerMobileNo.ToStr(), row.Cells["Account"].Value,
                             obj.Gen_PaymentType != null ? obj.Gen_PaymentType.PaymentType.ToStr() : "", obj.SpecialRequirements.ToStr(), obj.BookingStatus != null ? obj.BookingStatus.StatusName.ToStr() : "", obj.BookingNo.ToStr(), obj.DriverId == null ? "" : obj.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " + obj.Fleet_Driver.DefaultIfEmpty().DriverName.ToStr());

                        screenTip.CaptionLabel.Text = text;
                        screenTip.MainTextLabel.Text = string.Empty;
                        screenTip.EnableCustomSize = false;



                        cell.ScreenTip = screenTip;

                    }
                }
            }

            catch
            {

            }
        }

        public bool CheckJobIfAlreadyAccepted(long jobId, int driverId)
        {
            bool rtn = false;

            try
            {

                rtn = grdOnBoardDriver.Rows.Count(c => c.Cells["DriverId"].Value.ToInt() == driverId && c.Cells["CurrentJobId"].Value.ToLong() == jobId) > 0;
            }
            catch
            {


            }

            return rtn;

        }
        public bool CheckJobIfAlreadyAcceptedByOtherDriver(long jobId, int driverId)
        {
            bool rtn = false;

            try
            {

                rtn = grdOnBoardDriver.Rows.Count(c => c.Cells["DriverId"].Value.ToInt() != driverId && c.Cells["CurrentJobId"].Value.ToLong() == jobId) > 0;
            }
            catch
            {


            }

            return rtn;

        }

        public void SetFocusOnPendingGrid()
        {

            try
            {
                if (radPageView1.SelectedPage == Pg_PendingJobs)
                {
                    grdPendingJobs.Focus();

                    if (grdPendingJobs.CurrentRow == null && grdPendingJobs.Rows.Count > 0)
                    {
                        grdPendingJobs.CurrentRow = grdPendingJobs.Rows[0];

                    }
                }

            }
            catch (Exception ex)
            {
            }
        }


        public bool SetIfCommand(Keys KeyCode)
        {
            try
            {
                if (txtCommand == null)
                {

                    return false;

                }
                if (txtCommand.Tag == null)
                    return false;

                if (radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false && txtCommand != null)
                {

                    if (txtCommand.FocusedElement != null)
                        txtCommand.FocusedElement.Focus();
                    else
                    {


                        int appendKey = -1;

                        if (KeyCode == Keys.NumPad0 || KeyCode == Keys.D0)
                        {
                            appendKey = 0;
                        }
                        else if (KeyCode == Keys.NumPad1 || KeyCode == Keys.D1)
                        {
                            appendKey = 1;
                        }
                        else if (KeyCode == Keys.NumPad2 || KeyCode == Keys.D2)
                        {
                            appendKey = 2;
                        }
                        else if (KeyCode == Keys.NumPad3 || KeyCode == Keys.D3)
                        {
                            appendKey = 3;
                        }
                        else if (KeyCode == Keys.NumPad4 || KeyCode == Keys.D4)
                        {
                            appendKey = 4;
                        }
                        else if (KeyCode == Keys.NumPad5 || KeyCode == Keys.D5)
                        {
                            appendKey = 5;
                        }
                        else if (KeyCode == Keys.NumPad6 || KeyCode == Keys.D6)
                        {
                            appendKey = 6;
                        }
                        else if (KeyCode == Keys.NumPad7 || KeyCode == Keys.D7)
                        {
                            appendKey = 7;
                        }
                        else if (KeyCode == Keys.NumPad8 || KeyCode == Keys.D8)
                        {
                            appendKey = 8;
                        }
                        else if (KeyCode == Keys.NumPad9 || KeyCode == Keys.D9)
                        {
                            appendKey = 9;
                        }

                        if (appendKey != -1)
                        {
                            txtCommand.Text = txtCommand.Text + appendKey.ToStr();

                            txtCommand.Focus();

                            if (txtCommand.Text.Length > 0)
                                SendKeys.Send("{Right}");

                        }

                    }
                }
                return true;
            }
            catch
            {
                return true;

            }


        }



        void frmBookingDashBoard_KeyDown(object sender, KeyEventArgs e)
        {
            if (e == null)
                return;
            try
            {
                if (e.Control)
                {
                    ShowFormOnKey(e.KeyCode);

                    if (e.KeyCode == Keys.Up && radPageView1.SelectedPage == Pg_AllJobs)
                    {
                        txtSearchRec.Focus();
                    }
                    else if (e.KeyCode == Keys.Down && radPageView1.SelectedPage == Pg_AllJobs)
                    {
                        grdAllJobs.Focus();

                        if (grdAllJobs.CurrentRow == null && grdAllJobs.Rows.Count > 0)
                        {
                            grdAllJobs.CurrentRow = grdAllJobs.Rows[0];

                        }

                    }
                    else if (radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false && grdPendingJobs.Columns["MilesFromBase"].IsVisible == true)
                    {
                        long jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                        int prio = -1;
                        if (e.KeyCode == Keys.NumPad0 || e.KeyCode == Keys.D0)
                        {
                            prio = 0;
                        }
                        else if (e.KeyCode == Keys.NumPad1 || e.KeyCode == Keys.D1)
                        {
                            prio = 1;
                        }
                        else if (e.KeyCode == Keys.NumPad2 || e.KeyCode == Keys.D2)
                        {
                            prio = 2;
                        }
                        else if (e.KeyCode == Keys.NumPad3 || e.KeyCode == Keys.D3)
                        {
                            prio = 3;
                        }
                        else if (e.KeyCode == Keys.NumPad4 || e.KeyCode == Keys.D4)
                        {
                            prio = 4;
                        }
                        else if (e.KeyCode == Keys.NumPad5 || e.KeyCode == Keys.D5)
                        {
                            prio = 5;
                        }
                        else if (e.KeyCode == Keys.NumPad6 || e.KeyCode == Keys.D6)
                        {
                            prio = 6;
                        }
                        else if (e.KeyCode == Keys.NumPad7 || e.KeyCode == Keys.D7)
                        {
                            prio = 7;
                        }
                        else if (e.KeyCode == Keys.NumPad8 || e.KeyCode == Keys.D8)
                        {
                            prio = 8;
                        }
                        else if (e.KeyCode == Keys.NumPad9 || e.KeyCode == Keys.D9)
                        {
                            prio = 9;
                        }



                        if (prio >= 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                db.ExecuteQuery<int>("update booking set extramile=" + prio + ",JourneyTimeInMins=1 where id=" + jobId);

                                grdPendingJobs.CurrentRow.Cells["MilesFromBase"].Value = prio;


                                General.SendMessageToPDA("**updatepriority" + ">>" + jobId.ToStr() + ">>" + prio.ToStr() + ">>" + Environment.MachineName.ToLower());




                            }


                        }


                    }
                }


                else
                {



                    //if (appendKey == -1)
                    //{

                    if ((e.KeyCode == Keys.End || e.KeyCode == Keys.D) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        DespatchJob();
                    }
                    else if ((e.KeyCode == Keys.End) && radPageView1.SelectedPage == Pg_RecentJobs)
                    {
                        ClearSearchFilter();
                    }
                    else if ((e.KeyCode == Keys.F5) && radPageView1.SelectedPage == Pg_RecentJobs)
                    {
                        SearchJobList();
                    }
                    else if ((e.KeyCode == Keys.G) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        CompleteJob();
                    }
                    else if ((e.KeyCode == Keys.F) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        if (VerifyIsNotCommand())
                            DespatchFOJJob();
                    }

                    else if ((e.KeyCode == Keys.C) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        CancelOption("", "grdpendingjobs");
                    }
                    else if ((e.KeyCode == Keys.C) && radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                    {

                        CancelOption("", "grdprebookings");
                    }
                    else if ((e.KeyCode == Keys.P) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        DespatchPreJob(grdPendingJobs);



                    }

                    else if (e.KeyCode == Keys.W)
                    {
                        var row = grdPendingJobs.CurrentRow;
                        if (radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                        {
                            row = grdPendingJobs.CurrentRow;

                        }
                        else if (radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                        {
                            row = grdPreBookings.CurrentRow;
                        }
                        else
                            row = null;


                        if (row != null)
                        {
                            long jobId = row.Cells["Id"].Value.ToLong();


                            if (jobId > 0)
                            {
                                try
                                {

                                    if (DialogResult.Yes == MessageBox.Show("Do you want to change Pickup time to Current time ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                                    {

                                        string res = string.Empty;
                                        using (TaxiDataContext db = new TaxiDataContext())
                                        {
                                            res = db.ExecuteQuery<string>("exec stp_updatepickuptime {0},{1}", jobId, AppVars.LoginObj.UserName.ToStr()).FirstOrDefault();



                                        }

                                        if (res == "success")
                                        {
                                            if (radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                                            {
                                                General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD + "=" + jobId);
                                            }
                                            else
                                                General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_TODAY_AND_PREBOOKING_DASHBOARD + "=" + jobId);
                                        }
                                        else
                                            MessageBox.Show(res);
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                        }
                    }

                    else if ((e.KeyCode == Keys.Z) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        if (VerifyIsNotCommand() || (txtCommand != null && txtCommand.FocusedElement == null))
                        {
                            if (ddlShowDue.SelectedValue.ToInt() == 0)
                                ddlShowDue.SelectedValue = -1;
                            else
                                ddlShowDue.SelectedValue = 0;
                        }


                    }
                    else if ((e.KeyCode == Keys.L) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {

                        if (JobsSortBy == 0)
                            ddlJobsSortBy.SelectedIndex = 1;
                        else
                            ddlJobsSortBy.SelectedIndex = 0;



                    }

                    else if ((e.KeyCode == Keys.P) && radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                    {
                        DespatchPreJob(grdPreBookings);



                    }

                    else if ((e.KeyCode == Keys.A) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {

                        if (VerifyIsNotCommand())
                        {
                            EditFare.Tag = "grdPendingJobs";
                            AllocateDriver();

                        }
                    }
                    else if ((e.KeyCode == Keys.A) && radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                    {
                        if (VerifyIsNotCommand())
                        {
                            EditFare.Tag = "grdPreBookings";
                            AllocateDriver();
                        }
                    }


                    else if ((e.KeyCode == Keys.V) && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                        {
                            if (VerifyIsNotCommand())
                            {
                                if (VerifyCurrentRow())
                                    ShowBookingForm(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt(), true);

                            }

                        }
                    }
                    else if ((e.KeyCode == Keys.V) && radPageView1.SelectedPage == Pg_PreBookings && grdPreBookings.IsInEditMode == false)
                    {
                        if (VerifyIsNotCommand())
                        {
                            if (grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                                ShowBookingForm(grdPreBookings.CurrentRow.Cells["Id"].Value.ToInt(), true);

                        }
                    }


                    else if (e.KeyCode == Keys.U && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        if (VerifyIsNotCommand())
                            ShowSinBinForm();
                    }
                    else if (e.KeyCode == Keys.O && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {

                        ShowPDAInbox();
                    }
                    else if (e.KeyCode == Keys.M && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {
                        if (VerifyIsNotCommand())
                            ShowMapInPopup();
                    }
                    else if (e.KeyCode == Keys.Q)
                    {


                        if (VerifyIsNotCommand() && grdPendingJobs.IsInEditMode == false && grdPreBookings.IsInEditMode == false
                            && grdAllJobs.IsInEditMode == false && grdRecentJobs.IsInEditMode == false && grdQuotations.IsInEditMode == false && grdCancelledJobs.IsInEditMode == false
                            && grdNoShowJobs.IsInEditMode == false)
                        {
                            bool isfocused = false;
                            foreach (var item in radPanel1.Controls)
                            {
                                if (item is RadTextBox)
                                {
                                    if ((item as RadTextBox).FocusedElement != null && (item as RadTextBox).FocusedElement.IsFocused == true)
                                    {
                                        isfocused = true;
                                        break;
                                    }

                                }
                                else if (item is RadDropDownList)
                                {
                                    if ((item as RadDropDownList).FocusedElement != null && (item as RadDropDownList).FocusedElement.IsFocused == true)
                                    {
                                        isfocused = true;
                                        break;
                                    }

                                }
                            }

                            foreach (var item in panel8.Controls)
                            {
                                if (item is RadTextBox)
                                {
                                    if ((item as RadTextBox).FocusedElement != null && (item as RadTextBox).FocusedElement.IsFocused == true)
                                    {
                                        isfocused = true;
                                        break;
                                    }

                                }
                                else if (item is RadDropDownList)
                                {
                                    if ((item as RadDropDownList).FocusedElement != null && (item as RadDropDownList).FocusedElement.IsFocused == true)
                                    {
                                        isfocused = true;
                                        break;
                                    }

                                }
                            }



                            if (isfocused == false)
                            {
                                frmDriverShortcut frm = new frmDriverShortcut();
                                frm.StartPosition = FormStartPosition.CenterScreen;
                                frm.ShowDialog();
                                frm.Dispose();
                                GC.Collect();
                            }
                        }
                    }
                    else if (e.KeyCode == Keys.T && radPageView1.SelectedPage == Pg_PendingJobs && grdPendingJobs.IsInEditMode == false)
                    {



                        if (VerifyIsNotCommand())
                        {


                            frmAttributesFilter frm = new frmAttributesFilter();
                            frm.StartPosition = FormStartPosition.CenterScreen;
                            frm.ShowDialog();
                            frm.Dispose();
                        }
                    }

                    else if (e.KeyCode == Keys.Down && radPageView1.SelectedPage == Pg_PreBookings)
                    {

                        grdPreBookings.Focus();

                        if (grdPreBookings.CurrentRow == null && grdPreBookings.Rows.Count > 0)
                        {
                            grdPreBookings.CurrentRow = grdPreBookings.Rows[0];

                        }
                    }
                    else if (e.KeyCode == Keys.Multiply)
                    {
                        if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool() == false)
                        {

                            if (tableLayoutPanel2.ColumnStyles[1].Width == 0)
                            {

                                tableLayoutPanel2.ColumnStyles[0].Width = 45;
                                tableLayoutPanel2.ColumnStyles[1].Width = 21;


                                if (onboardjobs)
                                {
                                    tableLayoutPanel2.ColumnStyles[2].Width = 18;
                                    tableLayoutPanel2.ColumnStyles[3].Width = 16;
                                }
                                else
                                {
                                    tableLayoutPanel2.ColumnStyles[2].Width = 6;
                                    tableLayoutPanel2.ColumnStyles[3].Width = 16;

                                }
                            }
                            else
                            {

                                if (onboardjobs)
                                {
                                    tableLayoutPanel2.ColumnStyles[0].Width = 66;
                                    tableLayoutPanel2.ColumnStyles[1].Width = 0;
                                }
                                else
                                {
                                    tableLayoutPanel2.ColumnStyles[0].Width = 78;
                                    tableLayoutPanel2.ColumnStyles[1].Width = 0;
                                }
                            }

                        }







                    }

                    // need to recheck
                    else if (e.KeyCode == Keys.Add)
                    {
                        //if (System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width >= 1920)
                        //{

                        //    tableLayoutPanel2.ColumnStyles[0].Width = 0;
                        //    tableLayoutPanel2.ColumnStyles[1].Width = 100;
                        //}
                        //else
                        //{

                        // need to uncomment below 2 lines
                        //tableLayoutPanel2.ColumnStyles[0].Width = 100;
                        //    tableLayoutPanel2.ColumnStyles[1].Width = 0;
                        //  }

                        if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool())
                        {
                            //if (System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width >= 1920)
                            //{

                            //tableLayoutPanel2.ColumnStyles[0].Width = 0;
                            //tableLayoutPanel2.ColumnStyles[1].Width = 66;
                            //}
                            //else
                            //{

                            if (onboardjobs)
                            {
                                tableLayoutPanel2.ColumnStyles[0].Width = 66;
                                tableLayoutPanel2.ColumnStyles[1].Width = 0;
                            }
                            else
                            {
                                tableLayoutPanel2.ColumnStyles[0].Width = 78;
                                tableLayoutPanel2.ColumnStyles[1].Width = 0;
                            }
                            //  }

                        }
                        else
                        {
                            tableLayoutPanel2.ColumnStyles[0].Width = 45;



                            tableLayoutPanel2.ColumnStyles[1].Width = 21;

                        }


                        tableLayoutPanel2.ColumnStyles[2].Width = 0;
                        tableLayoutPanel2.ColumnStyles[3].Width = 0;



                    }
                    else if (e.KeyCode == Keys.Subtract)
                    {


                        if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool())
                        {
                            //if (System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width >= 1920)
                            //{

                            //tableLayoutPanel2.ColumnStyles[0].Width = 0;
                            //tableLayoutPanel2.ColumnStyles[1].Width = 66;
                            //}
                            //else
                            //{
                            if (onboardjobs)
                            {
                                tableLayoutPanel2.ColumnStyles[0].Width = 66;
                                tableLayoutPanel2.ColumnStyles[1].Width = 0;
                            }
                            else
                            {
                                tableLayoutPanel2.ColumnStyles[0].Width = 78;
                                tableLayoutPanel2.ColumnStyles[1].Width = 0;

                            }
                            //}

                        }
                        else
                        {
                            tableLayoutPanel2.ColumnStyles[0].Width = 45;
                            tableLayoutPanel2.ColumnStyles[1].Width = 21;

                        }


                        if (onboardjobs)
                        {

                            tableLayoutPanel2.ColumnStyles[2].Width = 18;
                            tableLayoutPanel2.ColumnStyles[3].Width = 16;
                        }
                        else
                        {
                            tableLayoutPanel2.ColumnStyles[2].Width = 6;
                            tableLayoutPanel2.ColumnStyles[3].Width = 16;

                        }


                        if (DriversGridRefreshRequired)
                        {
                            DriversGridRefreshRequired = false;
                            RefreshDashBoardDrivers();

                        }
                    }
                    else if (e.KeyCode == Keys.F10)
                    {
                        if (lblNotification != null)
                            lblNotification.Text = "";

                    }
                    // }
                }
            }
            catch (Exception ex)
            {


            }
        }

        public bool CheckAnyFocus()
        {

            bool isfocused = false;
            foreach (var item in radPanel1.Controls)
            {
                if (item is RadTextBox)
                {
                    if ((item as RadTextBox).FocusedElement != null && (item as RadTextBox).FocusedElement.IsFocused == true)
                    {
                        isfocused = true;
                        break;
                    }

                }
                else if (item is RadDropDownList)
                {
                    if ((item as RadDropDownList).FocusedElement != null && (item as RadDropDownList).FocusedElement.IsFocused == true)
                    {
                        isfocused = true;
                        break;
                    }

                }
            }

            foreach (var item in panel8.Controls)
            {
                if (item is RadTextBox)
                {
                    if ((item as RadTextBox).FocusedElement != null && (item as RadTextBox).FocusedElement.IsFocused == true)
                    {
                        isfocused = true;
                        break;
                    }

                }
                else if (item is RadDropDownList)
                {
                    if ((item as RadDropDownList).FocusedElement != null && (item as RadDropDownList).FocusedElement.IsFocused == true)
                    {
                        isfocused = true;
                        break;
                    }

                }
            }

            return isfocused;

        }

        public bool VerifyIsNotCommand()
        {


            if (txtCommand == null || txtCommand.Text.Length == 0 || txtCommand.Text.Trim()[0].ToStr().IsNumeric() == false)
            {
                return true;
            }
            else
                return false;


        }


        private void ShowSinBinForm()
        {
            try
            {
                frmSinBin frmSin = new frmSinBin();
                frmSin.StartPosition = FormStartPosition.CenterScreen;
                frmSin.Show();

            }
            catch
            {


            }


        }

        public void ShowFormOnKey(Keys keyCode)
        {
            if (Pg_RecentJobs.Item.IsSelected)
                return;

            try
            {

                if (keyCode == Keys.D)
                {

                    DespatchJob();
                }

                else if (keyCode == Keys.S && radPageView1.SelectedPage != Pg_RecentJobs)
                {
                    radPageView1.SelectedPage = Pg_RecentJobs;
                    txtPickup.Focus();

                }
                else if (keyCode == Keys.B && radPageView1.SelectedPage != Pg_PreBookings)
                {
                    radPageView1.SelectedPage = Pg_PreBookings;
                }
                else if (keyCode == Keys.E && grdPendingJobs.CurrentRow.Cells["Id"].Value != null)
                {
                    int BookingId = 0;

                    if (radPageView1.SelectedPage == Pg_PendingJobs)
                    {
                        if (VerifyCurrentRow())
                        {
                            BookingId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt();
                        }

                    }
                    else if (radPageView1.SelectedPage == Pg_PreBookings)
                    {
                        BookingId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToInt();
                    }
                    else if (radPageView1.SelectedPage == Pg_AllJobs)
                    {
                        BookingId = grdAllJobs.CurrentRow.Cells["Id"].Value.ToInt();
                    }


                    ShowBookingForm(BookingId, true);
                }
            }
            catch (Exception ex)
            {


            }

        }

        void grdDriverWaiting_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                if (name == "btnclearjob")
                {


                    GridViewRowInfo row = gridCell.GridControl.CurrentRow;

                    if (row is GridViewDataRowInfo)
                    {
                        long jobId = row.Cells["Id"].Value.ToLong();

                        new Thread(delegate ()
                        {
                            try
                            {
                                General.UpdateClearManualJob(jobId);
                            }
                            catch
                            {

                            }
                        }).Start();


                    }
                }
            }
            catch (Exception ex)
            {


            }

        }



        public void CloseFormOnLogout()
        {

            this.Close();


        }


        void frmBookingDashBoard_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (AppVars.IsLogout == false)
                e.Cancel = true;
            else
            {

                StopJobDueSound();
                timer1.Stop();
                timer_WebBooking.Stop();
                timer_Lic.Stop();

                if (DisablePopupNotifications == false)
                    tmrAlert.Stop();

            }

        }






        void frmBookingDashBoard_Shown(object sender, EventArgs e)
        {
            try
            {



                if (lblNotification != null)
                    lblNotiX = lblNotification.Location.X;


                timer_WebBooking.Tick += new EventHandler(timer_WebBooking_Tick);


                timer_WebBooking.Interval = (timer_WebBooking.Interval * 60) * 1;


                timer_WebBooking.Start();






                // For Enable PDA
                //if (EnablePDA)
                //{

                btnMessageAllDrivers.Visibility = ElementVisibility.Visible;





                if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool())
                {
                    //if (System.Windows.Forms.Screen.PrimaryScreen.Bounds.Width >= 1920)
                    //{

                    //tableLayoutPanel2.ColumnStyles[0].Width = 0;
                    //tableLayoutPanel2.ColumnStyles[1].Width = 66;
                    //}
                    //else
                    //{
                    if (onboardjobs)
                    {
                        tableLayoutPanel2.ColumnStyles[0].Width = 66;
                        tableLayoutPanel2.ColumnStyles[1].Width = 0;
                    }
                    else
                    {
                        tableLayoutPanel2.ColumnStyles[0].Width = 78;
                        tableLayoutPanel2.ColumnStyles[1].Width = 0;
                    }
                    // }

                }
                else
                {
                    tableLayoutPanel2.ColumnStyles[0].Width = 45;
                    tableLayoutPanel2.ColumnStyles[1].Width = 21;

                }


                //  tableLayoutPanel2.ColumnStyles[0].Width = 0;
                //      tableLayoutPanel2.ColumnStyles[1].Width = 66;

                if (onboardjobs)
                {
                    tableLayoutPanel2.ColumnStyles[2].Width = 18;
                    tableLayoutPanel2.ColumnStyles[3].Width = 16;
                }
                else
                {
                    tableLayoutPanel2.ColumnStyles[2].Width = 6;
                    tableLayoutPanel2.ColumnStyles[3].Width = 16;

                }



                grdOnPlotDrivers.ColumnHeadersDefaultCellStyle.Font = new Font("Tahoma", 9, FontStyle.Bold);




                grdOnPlotDrivers.ColumnHeadersDefaultCellStyle.BackColor = Color.AliceBlue;
                grdOnPlotDrivers.EnableHeadersVisualStyles = false;

                grdOnPlotDrivers.GridColor = Color.Gainsboro;


                if (AppVars.AppTheme != "ControlDefault")
                {
                    grdOnPlotDrivers.GridColor = Color.Black;
                    grdOnPlotDrivers.BackgroundColor = Color.Black;
                }

                grdOnPlotDrivers.BringToFront();
                grdOnPlotDrivers.Font = new Font("Tahoma", 10, FontStyle.Regular);
                grdOnPlotDrivers.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing;
                grdOnPlotDrivers.ColumnHeadersHeight = 38;
                //    grdOnPlotDrivers.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.ColumnHeader;

                EnableOnBoardDriver(true);
                // UIRefresh = new UIDelegate(RefreshAllActiveData);
                // UIRefresh = new UIDelegate(RefreshAll);
                //UIRefreshDrvs = new UIDelegate(RefreshDrivers);


                objPanic = new ConditionalFormattingObject();
                objPanic.ApplyToRow = true;
                objPanic.RowBackColor = Color.Red;
                objPanic.ConditionType = ConditionTypes.Equal;
                objPanic.TValue1 = "Panic";


                grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList.Add(objPanic);


                grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList.Add(objPanic);


                objPanicBlink = new ConditionalFormattingObject();
                objPanicBlink.ApplyToRow = true;
                objPanicBlink.RowBackColor = Color.White;
                objPanicBlink.ConditionType = ConditionTypes.Equal;
                objPanicBlink.TValue1 = "Panic";







                grdDriverPricePlot.CellFormatting += new DataGridViewCellFormattingEventHandler(grdOnPricePlotDrivers_CellFormatting);


                //  }
                //else
                //{
                //    InitializeMaps();

                //    lblOnPlot.Visible = false;
                //    grdOnPlotDrivers.Visible = false;

                //    bool enableOnBoard = AppVars.objPolicyConfiguration.EnableOnBoardDrivers.ToBool();

                //    EnableOnBoardDriver(enableOnBoard);
                //    if (!enableOnBoard)
                //    {
                //        tableLayoutPanel2.ColumnStyles.Remove(tableLayoutPanel2.ColumnStyles[0]);
                //        tableLayoutPanel2.ColumnStyles.Remove(tableLayoutPanel2.ColumnStyles[1]);

                //    }

                //}


                //if (HasWebBookingTab)
                //{

                //    FormatRejectedWebBookingsGrid();
                //}





                if (Screen.PrimaryScreen.WorkingArea.Width <= 1280)
                {
                    chkShowAllocatedTodayJobs.Visible = false;
                    optSortTodayDriver.Visible = false;
                    optSortTodayPickup.Visible = false;


                }

                if (pnlNotification != null)
                    ddlSubCompany.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width - pnlNotification.Location.X - 300, ddlSubCompany.Location.Y);


                CheckAccountJobs();




                //if (AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool())
                //{
                if (AppVars.listUserRights.Count(c => c.functionId == "SHOW RECALL BUTTON") > 0)
                {
                    radPanel9.Visible = false;


                    AddCommandColumn(grdAllJobs, "recall", "RECALL");
                    grdAllJobs.CommandCellClick += new CommandCellClickEventHandler(RecallPendingJob_Click);
                }
                //   }








                if (btnAirportArrivals != null)
                {
                    btnAirportArrivals.Visible = AppVars.listUserRights.Count(c => c.functionId == "AIRPORT ARRIVALS") > 0;

                }

                if (btnAirportArrivals_new != null)
                {
                    btnAirportArrivals_new.Visibility = AppVars.listUserRights.Count(c => c.functionId == "AIRPORT ARRIVALS") > 0 ? ElementVisibility.Visible : ElementVisibility.Collapsed;
                }

                FillDueFilter();







                if (AppVars.listUserRights.Count(c => c.functionId == "DISABLE COMPLETE JOB") > 0)
                {

                    DisableCompleteJOb = ElementVisibility.Collapsed;
                }
                else
                    DisableCompleteJOb = ElementVisibility.Visible;


                grdNoShowJobs.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
                grdCancelledJobs.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
                grdNoShowJobs.ContextMenuOpening += grdOthersJobs_ContextMenuOpening;
                grdCancelledJobs.ContextMenuOpening += grdOthersJobs_ContextMenuOpening;

                UpdateNoPickupAndCancelledCountFromDb();
                try
                {


                    //

                    NewLayoutSettings();


                    Gecko.Xpcom.Initialize("Firefox");




                    if (AppVars.listUserRights.Count(c => c.functionId == "SHOW COMMAND LINE") > 0)
                    {

                        this.txtCommand = new Telerik.WinControls.UI.RadTextBox();
                        this.label21 = new System.Windows.Forms.Label();


                        ((System.ComponentModel.ISupportInitialize)(this.txtCommand)).BeginInit();

                        this.pnlActions.Controls.Add(this.label21);
                        this.pnlActions.Controls.Add(this.txtCommand);


                        // 
                        // txtCommand
                        // 
                        this.txtCommand.Font = new System.Drawing.Font("Tahoma", 14F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.txtCommand.Location = new System.Drawing.Point(1230, 10);
                        this.txtCommand.Name = "txtCommand";
                        this.txtCommand.Size = new System.Drawing.Size(100, 21);
                        this.txtCommand.TabIndex = 217;
                        this.txtCommand.TabStop = false;
                        this.txtCommand.CharacterCasing = CharacterCasing.Upper;
                        this.txtCommand.MaxLength = 5;
                        //   this.txtCommand.KeyDown += new System.Windows.Forms.KeyEventHandler(this.txtCommand_KeyDown);
                        this.txtCommand.KeyPress += TxtCommand_KeyPress;


                        // 
                        // label21
                        // 
                        this.label21.AutoSize = true;
                        this.label21.Font = new System.Drawing.Font("Tahoma", 14F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        this.label21.Location = new System.Drawing.Point(1060, 13);
                        this.label21.Name = "label21";
                        this.label21.Size = new System.Drawing.Size(70, 16);
                        this.label21.TabIndex = 216;
                        this.label21.Text = "Command Line";
                        // 



                        ((System.ComponentModel.ISupportInitialize)(this.txtCommand)).EndInit();



                        this.ddlJobsSortBy = new Telerik.WinControls.UI.RadDropDownList();
                        ((System.ComponentModel.ISupportInitialize)(this.ddlJobsSortBy)).BeginInit();
                        this.pnlActions.Controls.Add(this.ddlJobsSortBy);

                        Telerik.WinControls.UI.RadListDataItem radListDataItem1 = new Telerik.WinControls.UI.RadListDataItem();
                        Telerik.WinControls.UI.RadListDataItem radListDataItem2 = new Telerik.WinControls.UI.RadListDataItem();

                        Telerik.WinControls.UI.RadListDataItem radListDataItem3 = new Telerik.WinControls.UI.RadListDataItem();


                        // 
                        // ddlJobsSortBy
                        // 
                        this.ddlJobsSortBy.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                        this.ddlJobsSortBy.DropDownStyle = Telerik.WinControls.RadDropDownStyle.DropDownList;
                        this.ddlJobsSortBy.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        radListDataItem1.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        radListDataItem1.Selected = true;
                        radListDataItem1.Text = "Lead Time";
                        radListDataItem1.TextWrap = true;
                        radListDataItem2.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        radListDataItem2.Text = "Pickup Time";
                        radListDataItem2.TextWrap = true;


                        radListDataItem3.Font = new System.Drawing.Font("Tahoma", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                        radListDataItem3.Text = "Lead/Plot";
                        radListDataItem3.TextWrap = true;


                        this.ddlJobsSortBy.Items.Add(radListDataItem1);
                        this.ddlJobsSortBy.Items.Add(radListDataItem2);

                        this.ddlJobsSortBy.Items.Add(radListDataItem3);

                        this.ddlJobsSortBy.Location = new System.Drawing.Point(185, 1);
                        this.ddlJobsSortBy.Name = "ddlJobsSortBy";
                        this.ddlJobsSortBy.Size = new System.Drawing.Size(85, 21);
                        this.ddlJobsSortBy.TabIndex = 216;
                        this.ddlJobsSortBy.Text = "Lead Time";
                        this.ddlJobsSortBy.SelectedIndexChanged += DdlJobsSortBy_SelectedIndexChanged;
                        ((System.ComponentModel.ISupportInitialize)(this.ddlJobsSortBy)).EndInit();
                        SetupCommandLoading();
                    }


                    int Id = AppVars.LoginObj.LuserId.ToInt();
                    var itemMsg = General.GetQueryable<InternalMessaging>(c => c.IsRead == false && c.IsWelcomeMsg == true && (c.ReceiveTo == null || c.ReceiveTo == 0 || c.ReceiveTo == Id))
                                         .OrderByDescending(c => c.AddOn).FirstOrDefault();


                    if (itemMsg != null)
                    {
                        frmPopupInternalMessage frmPop = new frmPopupInternalMessage(itemMsg.MessageText.ToStr(), true, itemMsg.Id);
                        frmPop.Show();

                    }


                }
                catch
                {

                    // SetupCommandLoading();
                    //

                }



                var listofDocs = General.GetQueryable<Gen_Syspolicy_DriverDocumentList>(c => c.IsVisible == true);

                foreach (var item in listofDocs)
                {
                    if (item.Id == 1)
                        PHCVehicleDays = item.ExpiryDays.ToInt();

                    else if (item.Id == 2)
                        PHCDriverDays = item.ExpiryDays.ToInt();
                    else if (item.Id == 3)
                        MOTDays = item.ExpiryDays.ToInt();

                    else if (item.Id == 4)
                        InsuranceDays = item.ExpiryDays.ToInt();
                    else if (item.Id == 5)
                        MOT2Days = item.ExpiryDays.ToInt();
                    else if (item.Id == 6)
                        LicenseDays = item.ExpiryDays.ToInt();
                    else if (item.Id == 7)
                        RoadTaxDays = item.ExpiryDays.ToInt();

                }


                if (chkTodayCancelled != null)
                    chkTodayCancelled.Visible = true;

                if (chkTodayCancelled != null)
                    chkTodayCancelled.Visible = AppVars.listUserRights.Count(c => c.functionId == "CANCELLED JOBS FILTER") > 0;



            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        private void SetupCommandLoading()
        {

            if (txtCommand != null)
                txtCommand.Tag = "ready";
        }


        private void NewLayoutSettings()
        {
            if (UseNewLayout == false)
                return;

            if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool() && AppVars.listUserRights.Count(c => c.functionId == "HIDE AUTODESPATCH MODE") == 0)
            {

                chkEnableAutoDespatch.Visibility = ElementVisibility.Visible;
                chkEnableAutoDespatch.IsChecked = AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool();
                chkEnableAutoDespatch.ForeColor = chkEnableAutoDespatch.IsChecked ? Color.Green : Color.Black;
                this.chkEnableAutoDespatch.ToggleStateChanged += ChkEnableAutoDespatch_ToggleStateChanged; //+= new Telerik.WinControls.UI.StateChangedEventHandler(this.chkEnableAutoDespatch_ToggleStateChanged);


                chkEnableBidding.Visibility = ElementVisibility.Hidden;
                chkEnableBidding.Visibility = ElementVisibility.Hidden;
                chkEnableBidding.Visibility = ElementVisibility.Hidden;
                if (AppVars.listUserRights.Count(c => c.functionId == "SHOW BIDDING MODE") > 0)
                {
                    chkEnableBidding.Visibility = ElementVisibility.Visible;

                    chkEnableBidding.Visibility = ElementVisibility.Visible;
                    chkEnableBidding.Visibility = ElementVisibility.Visible;

                    chkEnableBidding.IsChecked = AppVars.objPolicyConfiguration.EnableBidding.ToBool();
                    chkEnableBidding.ForeColor = chkEnableBidding.IsChecked ? Color.Green : Color.Black;
                    chkEnableBidding.ToggleStateChanged += ChkEnableBidding_ToggleStateChanged;
                }

                chkEnableAutoDespatchNormalMode.ToggleStateChanged += chkEnableAutoDespatchMode_ToggleStateChanged; //+= new Telerik.WinControls.UI.StateChangedEventHandler(this.chkEnableAutoDespatch_ToggleStateChanged);
                chkEnableAutoDespatchQuiteMode.ToggleStateChanged += chkEnableAutoDespatchMode_ToggleStateChanged;
                chkEnableAutoDespatchBusyMode.ToggleStateChanged += chkEnableAutoDespatchMode_ToggleStateChanged;

            }
            else
            {
                chkEnableBidding.Visibility = ElementVisibility.Collapsed;
                chkEnableAutoDespatch.Visibility = ElementVisibility.Collapsed;

            }

        }

        private ElementVisibility DisableCompleteJOb;

        private void chkEnableAutoDespatchMode_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {


            if (chkEnableAutoDespatchNormalMode.Tag.ToStr() == "modify")
            {
                return;

            }



            if (chkEnableAutoDespatchNormalMode.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                selectedAutoMode = 1;
                RefreshPlotDrivers();

            }
            else if (chkEnableAutoDespatchQuiteMode.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                selectedAutoMode = 2;
                RefreshPlotDrivers();

            }
            else if (chkEnableAutoDespatchBusyMode.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                selectedAutoMode = 3;
                RefreshPlotDrivers();

            }

            General.UpdateAutoDispatchMode(selectedAutoMode);




        }


        public void UpdateNoPickupAndCancelledCountFromDb()
        {
            try
            {




                List<clsBookingscount> objCnt = null;
                DateTime from = DateTime.Now.ToDate();
                DateTime till = DateTime.Now.AddDays(1).ToDate();
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    objCnt = db.ExecuteQuery<clsBookingscount>
                        ("exec stp_getbookingsdatacountbystatus {0},{1},{2},{3}", from, till, AppVars.DefaultBookingSubCompanyId, 0).ToList();


                }

                if (objCnt != null)
                {
                    Pg_Cancelled.Item.Text = "Cancelled(" + objCnt.Where(c => c.bookingstatusid == Enums.BOOKINGSTATUS.CANCELLED).FirstOrDefault().DefaultIfEmpty().count + ")";
                    Pg_NoShow.Item.Text = "No Show(" + objCnt.Where(c => c.bookingstatusid == Enums.BOOKINGSTATUS.NOPICKUP).FirstOrDefault().DefaultIfEmpty().count + ")";


                }
            }
            catch
            {

            }

        }







        private void UpdateRecentJobsCounter(long jobId, Booking objBook)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(UpdateRecentJobsCounter), jobId, null);

                }
                else
                {

                    var row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                    if (row != null)
                    {
                        grdAllJobs.Rows.Remove(row);
                    }

                    this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";
                }
            }
            catch
            {


            }

        }




        private void UpdateTodaysJobsCounter(long jobId, Booking objBook)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(UpdateTodaysJobsCounter), jobId, objBook);

                }
                else
                {

                    var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                    if (row != null)
                    {

                        var list = (List<stp_GetBookingsDataResult>)grdAllJobs.DataSource;


                        if (objBook != null)
                        {
                            if (objBook.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                            {

                                string driverNo = row.Cells["Driver"].Value.ToStr();

                                if (driverNo.Contains(" - "))
                                {
                                    driverNo = driverNo.Remove(driverNo.IndexOf(" - ")).Trim() + " - " + "Pending Start";
                                }

                                list.Add(new stp_GetBookingsDataResult
                                {
                                    Id = row.Cells["Id"].Value.ToLong(),
                                    Account = row.Cells["Account"].Value.ToStr(),
                                    BabySeats = row.Cells["BabySeats"].Value.ToStr(),
                                    BackgroundColor = row.Cells["BackgroundColor"].Value.ToStr(),
                                    BackgroundColor1 = row.Cells["BackgroundColor1"].Value.ToStr(),
                                    BookingBackgroundColor = row.Cells["BookingBackgroundColor"].Value.ToInt(),
                                    BookingDateTime = row.Cells["BookingDateTime"].Value.ToDateTime(),
                                    BookingTypeId = row.Cells["BookingTypeId"].Value.ToInt(),
                                    DeadMileage = row.Cells["DeadMileage"].Value.ToDecimal(),
                                    DespatchDateTime = row.Cells["DespatchDateTime"].Value.ToDateTimeorNull(),
                                    Driver = driverNo,
                                    VehicleID = row.Cells["VehicleID"].Value.ToStr(),
                                    DriverId = row.Cells["DriverId"].Value.ToInt(),
                                    Due = row.Cells["Due"].Value.ToDateTimeorNull(),
                                    Fare = row.Cells["Fare"].Value.ToDecimal(),
                                    From = row.Cells["From"].Value.ToStr(),
                                    FromLocId = row.Cells["FromLocId"].Value.ToInt(),
                                    FromLocTypeId = row.Cells["FromLocTypeId"].Value.ToInt(),
                                    FromPostCode = row.Cells["FromPostCode"].Value.ToStr(),
                                    GoingTo = row.Cells["GoingTo"].Value.ToStr(),
                                    Pax = row.Cells["Pax"].Value.ToInt(),
                                    Passenger = row.Cells["Passenger"].Value.ToStr(),
                                    NoofLuggages = row.Cells["NoofLuggages"].Value.ToInt(),
                                    MobileNo = row.Cells["MobileNo"].Value.ToStr(),
                                    MilesFromBase = row.Cells["MilesFromBase"].Value.ToDecimal(),
                                    Lead = row.Cells["Lead"].Value.ToDateTimeorNull(),
                                    JourneyTypeId = row.Cells["JourneyTypeId"].Value.ToInt(),
                                    GroupId = row.Cells["GroupId"].Value.ToStr(),
                                    PickupDateTemp = row.Cells["PickupDateTemp"].Value.ToDateTimeorNull(),
                                    HasNotes = row.Cells["HasNotes"].Value.ToInt(),
                                    HasNotesImg = row.Cells["HasNotesImg"].Value.ToStr(),
                                    IsAutoDespatch = row.Cells["IsAutoDespatch"].Value.ToBool(),
                                    IsBidding = row.Cells["IsBidding"].Value.ToBool(),
                                    IsConfirmedDriver = row.Cells["IsConfirmedDriver"].Value.ToBool(),
                                    PaymentMethod = row.Cells["PaymentMethod"].Value.ToStr(),
                                    Pickup = row.Cells["Pickup"].Value.ToStr(),
                                    PickUpDate = row.Cells["PickUpDate"].Value.ToStr(),
                                    Plot = row.Cells["Plot"].Value.ToStr(),
                                    PlotHour = row.Cells["PlotHour"].Value.ToDateTimeorNull(),
                                    PReference = row.Cells["PReference"].Value.ToStr(),
                                    PrePickupDate = row.Cells["PrePickupDate"].Value.ToDateTimeorNull(),
                                    RefNumber = row.Cells["RefNumber"].Value.ToStr(),
                                    SpecialReq = row.Cells["SpecialReq"].Value.ToStr(),
                                    Status = "Pending Start",
                                    StatusColor = "-32640",
                                    StatusId = objBook.BookingStatusId,
                                    SubCompanyBgColor = row.Cells["SubCompanyBgColor"].Value.ToInt(),
                                    TelephoneNo = row.Cells["TelephoneNo"].Value.ToStr(),
                                    TextColor = row.Cells["TextColor"].Value.ToStr(),
                                    TextColor1 = row.Cells["TextColor1"].Value.ToStr(),
                                    Time = row.Cells["Time"].Value.ToStr(),
                                    To = row.Cells["To"].Value.ToStr(),
                                    ToLocTypeId = row.Cells["ToLocTypeId"].Value.ToInt(),
                                    ToPostCode = row.Cells["ToPostCode"].Value.ToStr(),
                                    UpdateBy = row.Cells["UpdateBy"].Value.ToStr(),
                                    Vehicle = row.Cells["Vehicle"].Value.ToStr(),
                                    Vias = row.Cells["Vias"].Value.ToInt(),
                                    Attributes = row.Cells["Attributes"].Value.ToStr(),
                                    VehicleDetails = row.Cells["VehicleDetails"].Value.ToStr(),
                                    DropOffPlot = row.Cells["DropOffPlot"].Value.ToStr(),
                                    Total = row.Cells["Total"].Value.ToDecimal(),
                                    OrderNo = row.Cells["OrderNo"].Value.ToStr()


                                });
                            }

                        }
                        else
                        {




                            list.Add(new stp_GetBookingsDataResult
                            {
                                Id = row.Cells["Id"].Value.ToLong(),
                                Account = row.Cells["Account"].Value.ToStr(),
                                BabySeats = row.Cells["BabySeats"].Value.ToStr(),
                                BackgroundColor = row.Cells["BackgroundColor"].Value.ToStr(),
                                BackgroundColor1 = row.Cells["BackgroundColor1"].Value.ToStr(),
                                BookingBackgroundColor = row.Cells["BookingBackgroundColor"].Value.ToInt(),
                                BookingDateTime = row.Cells["BookingDateTime"].Value.ToDateTime(),
                                BookingTypeId = row.Cells["BookingTypeId"].Value.ToInt(),
                                DeadMileage = row.Cells["DeadMileage"].Value.ToDecimal(),
                                DespatchDateTime = row.Cells["DespatchDateTime"].Value.ToDateTimeorNull(),
                                Driver = row.Cells["Driver"].Value.ToStr(),
                                VehicleID = row.Cells["VehicleID"].Value.ToStr(),
                                DriverId = row.Cells["DriverId"].Value.ToInt(),
                                Due = row.Cells["Due"].Value.ToDateTimeorNull(),
                                Fare = row.Cells["Fare"].Value.ToDecimal(),
                                From = row.Cells["From"].Value.ToStr(),
                                FromLocId = row.Cells["FromLocId"].Value.ToInt(),
                                FromLocTypeId = row.Cells["FromLocTypeId"].Value.ToInt(),
                                FromPostCode = row.Cells["FromPostCode"].Value.ToStr(),
                                GoingTo = row.Cells["GoingTo"].Value.ToStr(),
                                Pax = row.Cells["Pax"].Value.ToInt(),
                                Passenger = row.Cells["Passenger"].Value.ToStr(),
                                NoofLuggages = row.Cells["NoofLuggages"].Value.ToInt(),
                                MobileNo = row.Cells["MobileNo"].Value.ToStr(),
                                MilesFromBase = row.Cells["MilesFromBase"].Value.ToDecimal(),
                                Lead = row.Cells["Lead"].Value.ToDateTimeorNull(),
                                JourneyTypeId = row.Cells["JourneyTypeId"].Value.ToInt(),
                                GroupId = row.Cells["GroupId"].Value.ToStr(),
                                PickupDateTemp = row.Cells["PickupDateTemp"].Value.ToDateTimeorNull(),
                                HasNotes = row.Cells["HasNotes"].Value.ToInt(),
                                HasNotesImg = row.Cells["HasNotesImg"].Value.ToStr(),
                                IsAutoDespatch = row.Cells["IsAutoDespatch"].Value.ToBool(),
                                IsBidding = row.Cells["IsBidding"].Value.ToBool(),
                                IsConfirmedDriver = row.Cells["IsConfirmedDriver"].Value.ToBool(),
                                PaymentMethod = row.Cells["PaymentMethod"].Value.ToStr(),
                                Pickup = row.Cells["Pickup"].Value.ToStr(),
                                PickUpDate = row.Cells["PickUpDate"].Value.ToStr(),
                                Plot = row.Cells["Plot"].Value.ToStr(),
                                PlotHour = row.Cells["PlotHour"].Value.ToDateTimeorNull(),
                                PReference = row.Cells["PReference"].Value.ToStr(),
                                PrePickupDate = row.Cells["PrePickupDate"].Value.ToDateTimeorNull(),
                                RefNumber = row.Cells["RefNumber"].Value.ToStr(),
                                SpecialReq = row.Cells["SpecialReq"].Value.ToStr(),
                                Status = "ONROUTE",
                                StatusColor = "-256",
                                StatusId = Enums.BOOKINGSTATUS.ONROUTE,
                                SubCompanyBgColor = row.Cells["SubCompanyBgColor"].Value.ToInt(),
                                TelephoneNo = row.Cells["TelephoneNo"].Value.ToStr(),
                                TextColor = row.Cells["TextColor"].Value.ToStr(),
                                TextColor1 = row.Cells["TextColor1"].Value.ToStr(),
                                Time = row.Cells["Time"].Value.ToStr(),
                                To = row.Cells["To"].Value.ToStr(),
                                ToLocTypeId = row.Cells["ToLocTypeId"].Value.ToInt(),
                                ToPostCode = row.Cells["ToPostCode"].Value.ToStr(),
                                UpdateBy = row.Cells["UpdateBy"].Value.ToStr(),
                                Vehicle = row.Cells["Vehicle"].Value.ToStr(),
                                Vias = row.Cells["Vias"].Value.ToInt(),
                                Attributes = row.Cells["Attributes"].Value.ToStr(),
                                VehicleDetails = row.Cells["VehicleDetails"].Value.ToStr(),
                                DropOffPlot = row.Cells["DropOffPlot"].Value.ToStr(),
                                Total = row.Cells["Total"].Value.ToDecimal(),
                                OrderNo = row.Cells["OrderNo"].Value.ToStr()

                            });
                        }


                        list = list.OrderBy(c => c.PickupDateTemp).ToList();
                        grdAllJobs.DataSource = list;

                        grdPendingJobs.Rows.Remove(row);


                    }


                    this.Pg_PendingJobs.Text = "Today's Booking(" + grdPendingJobs.Rows.Count + ")";

                    this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";
                }
            }
            catch (Exception ex)
            {

                try
                {
                    try
                    {
                        File.AppendAllText(Application.StartupPath + "\\exception_updatetodaysjobscounter.txt", DateTime.Now.ToStr() + "," + ex.Message + Environment.NewLine);

                    }
                    catch
                    {


                    }
                    RefreshActiveData();
                }
                catch
                {


                }

            }

        }




        private void UpdateTodaysBookingWithStatus(long jobId, Booking objBook)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(UpdateTodaysBookingWithStatus), jobId, objBook);

                }
                else
                {




                    GridViewRowInfo row = null;
                    if (objBook.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOSHOW)
                    {


                        row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);
                    }
                    else
                    {
                        row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);



                    }


                    if (row != null && objBook != null)
                    {



                        if (objBook.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOTACCEPTED)
                        {


                            if (row.Cells["Driver"].Value.ToStr() != "" && row.Cells["Driver"].Value.ToStr().Contains("-"))
                            {
                                try
                                {
                                    row.Cells["Driver"].Value = row.Cells["Driver"].Value.ToStr().Substring(0, row.Cells["Driver"].Value.ToStr().IndexOf("-")).Trim() + " - " + "Not Accepted";
                                }
                                catch
                                {

                                }
                            }
                            row.Cells["Status"].Value = "Not Accepted";
                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.NOTACCEPTED;
                            row.Cells["StatusColor"].Value = "-3552823";

                            if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "ChoT@xi$")
                            {
                                row.Cells["IsBidding"].Value = false;
                                row.Cells["IsAutoDespatch"].Value = false;
                            }







                        }
                        if (objBook.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.REJECTED)
                        {


                            if (row.Cells["Driver"].Value.ToStr() != "" && row.Cells["Driver"].Value.ToStr().Contains("-"))
                            {
                                try
                                {
                                    row.Cells["Driver"].Value = row.Cells["Driver"].Value.ToStr().Substring(0, row.Cells["Driver"].Value.ToStr().IndexOf("-")).Trim() + " - " + "Rejected";
                                }
                                catch
                                {

                                }
                            }
                            row.Cells["Status"].Value = "Rejected";
                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.REJECTED;
                            row.Cells["StatusColor"].Value = "-466540";

                            //if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "ChoT@xi$")
                            //{
                            //    row.Cells["IsBidding"].Value = false;
                            //    row.Cells["IsAutoDespatch"].Value = false;
                            //}





                        }
                        else if (objBook.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.FOJ)
                        {


                            if (row.Cells["Driver"].Value.ToStr() != "" && row.Cells["Driver"].Value.ToStr().Contains("-"))
                            {
                                try
                                {
                                    row.Cells["Driver"].Value = row.Cells["Driver"].Value.ToStr().Substring(0, row.Cells["Driver"].Value.ToStr().IndexOf("-")).Trim() + " - " + "FOJ";
                                }
                                catch
                                {

                                }
                            }
                            row.Cells["DriverId"].Value = objBook.DriverId;
                            row.Cells["Status"].Value = "FOJ";
                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.FOJ;
                            row.Cells["StatusColor"].Value = "-3212322";



                            var list = (List<stp_GetBookingsDataResult>)grdAllJobs.DataSource;


                            list.Add(new stp_GetBookingsDataResult
                            {
                                Id = row.Cells["Id"].Value.ToLong(),
                                Account = row.Cells["Account"].Value.ToStr(),
                                BabySeats = row.Cells["BabySeats"].Value.ToStr(),
                                BackgroundColor = row.Cells["BackgroundColor"].Value.ToStr(),
                                BackgroundColor1 = row.Cells["BackgroundColor1"].Value.ToStr(),
                                BookingBackgroundColor = row.Cells["BookingBackgroundColor"].Value.ToInt(),
                                BookingDateTime = row.Cells["BookingDateTime"].Value.ToDateTime(),
                                BookingTypeId = row.Cells["BookingTypeId"].Value.ToInt(),
                                DeadMileage = row.Cells["DeadMileage"].Value.ToDecimal(),
                                DespatchDateTime = row.Cells["DespatchDateTime"].Value.ToDateTimeorNull(),
                                Driver = row.Cells["Driver"].Value.ToStr(),
                                VehicleID = row.Cells["VehicleID"].Value.ToStr(),
                                DriverId = row.Cells["DriverId"].Value.ToInt(),
                                Due = row.Cells["Due"].Value.ToDateTimeorNull(),
                                Fare = row.Cells["Fare"].Value.ToDecimal(),
                                From = row.Cells["From"].Value.ToStr(),
                                FromLocId = row.Cells["FromLocId"].Value.ToInt(),
                                FromLocTypeId = row.Cells["FromLocTypeId"].Value.ToInt(),
                                FromPostCode = row.Cells["FromPostCode"].Value.ToStr(),
                                GoingTo = row.Cells["GoingTo"].Value.ToStr(),
                                Pax = row.Cells["Pax"].Value.ToInt(),
                                Passenger = row.Cells["Passenger"].Value.ToStr(),
                                NoofLuggages = row.Cells["NoofLuggages"].Value.ToInt(),
                                MobileNo = row.Cells["MobileNo"].Value.ToStr(),
                                MilesFromBase = row.Cells["MilesFromBase"].Value.ToDecimal(),
                                Lead = row.Cells["Lead"].Value.ToDateTimeorNull(),
                                JourneyTypeId = row.Cells["JourneyTypeId"].Value.ToInt(),
                                GroupId = row.Cells["GroupId"].Value.ToStr(),
                                PickupDateTemp = row.Cells["PickupDateTemp"].Value.ToDateTimeorNull(),
                                HasNotes = row.Cells["HasNotes"].Value.ToInt(),
                                HasNotesImg = row.Cells["HasNotesImg"].Value.ToStr(),
                                IsAutoDespatch = row.Cells["IsAutoDespatch"].Value.ToBool(),
                                IsBidding = row.Cells["IsBidding"].Value.ToBool(),
                                IsConfirmedDriver = row.Cells["IsConfirmedDriver"].Value.ToBool(),
                                PaymentMethod = row.Cells["PaymentMethod"].Value.ToStr(),
                                Pickup = row.Cells["Pickup"].Value.ToStr(),
                                PickUpDate = row.Cells["PickUpDate"].Value.ToStr(),
                                Plot = row.Cells["Plot"].Value.ToStr(),
                                PlotHour = row.Cells["PlotHour"].Value.ToDateTimeorNull(),
                                PReference = row.Cells["PReference"].Value.ToStr(),
                                PrePickupDate = row.Cells["PrePickupDate"].Value.ToDateTimeorNull(),
                                RefNumber = row.Cells["RefNumber"].Value.ToStr(),
                                SpecialReq = row.Cells["SpecialReq"].Value.ToStr(),
                                Status = "FOJ",
                                StatusColor = "-3831041",
                                StatusId = Enums.BOOKINGSTATUS.FOJ,
                                SubCompanyBgColor = row.Cells["SubCompanyBgColor"].Value.ToInt(),
                                TelephoneNo = row.Cells["TelephoneNo"].Value.ToStr(),
                                TextColor = row.Cells["TextColor"].Value.ToStr(),
                                TextColor1 = row.Cells["TextColor1"].Value.ToStr(),
                                Time = row.Cells["Time"].Value.ToStr(),
                                To = row.Cells["To"].Value.ToStr(),
                                ToLocTypeId = row.Cells["ToLocTypeId"].Value.ToInt(),
                                ToPostCode = row.Cells["ToPostCode"].Value.ToStr(),
                                UpdateBy = row.Cells["UpdateBy"].Value.ToStr(),
                                Vehicle = row.Cells["Vehicle"].Value.ToStr(),
                                Vias = row.Cells["Vias"].Value.ToInt(),
                                Attributes = row.Cells["Attributes"].Value.ToStr(),
                                VehicleDetails = row.Cells["VehicleDetails"].Value.ToStr(),
                                DropOffPlot = row.Cells["DropOffPlot"].Value.ToStr(),
                                Total = row.Cells["Total"].Value.ToDecimal(),
                                OrderNo = row.Cells["OrderNo"].Value.ToStr()

                            });



                            list = list.OrderBy(c => c.PickupDateTemp).ToList();
                            grdAllJobs.DataSource = list;


                            this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";


                            if (ShowPendingJobOnRecentTab)
                            {
                                row.Delete();
                                this.Pg_PendingJobs.Text = "Today's Booking(" + grdPendingJobs.Rows.Count + ")";
                            }



                        }
                        else if (objBook.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOSHOW)
                        {



                            string driver = string.Empty;
                            if (row.Cells["Driver"].Value.ToStr() != "" && row.Cells["Driver"].Value.ToStr().Contains("-"))
                            {
                                try
                                {
                                    driver = row.Cells["Driver"].Value.ToStr().Substring(0, row.Cells["Driver"].Value.ToStr().IndexOf("-")).Trim() + " - " + "Waiting";
                                }
                                catch
                                {

                                }
                            }




                            var list = (List<stp_GetBookingsDataResult>)grdPendingJobs.DataSource;

                            //Telephone, Lead ,Vias column missing in search recent job



                            list.Add(new stp_GetBookingsDataResult
                            {
                                Id = row.Cells["Id"].Value.ToLong(),
                                Account = row.Cells["Account"].Value.ToStr(),
                                BabySeats = row.Cells["BabySeats"].Value.ToStr(),
                                BackgroundColor = row.Cells["BackgroundColor"].Value.ToStr(),
                                BackgroundColor1 = row.Cells["BackgroundColor1"].Value.ToStr(),
                                BookingBackgroundColor = row.Cells["BookingBackgroundColor"].Value.ToInt(),
                                BookingDateTime = row.Cells["BookingDateTime"].Value.ToDateTime(),
                                BookingTypeId = row.Cells["BookingTypeId"].Value.ToInt(),
                                DeadMileage = row.Cells["DeadMileage"].Value.ToDecimal(),
                                DespatchDateTime = row.Cells["DespatchDateTime"].Value.ToDateTimeorNull(),
                                Driver = driver,
                                VehicleID = row.Cells["VehicleID"].Value.ToStr(),
                                DriverId = row.Cells["DriverId"].Value.ToInt(),
                                Due = row.Cells["Due"].Value.ToDateTimeorNull(),
                                Fare = row.Cells["Fare"].Value.ToDecimal(),
                                From = row.Cells["From"].Value.ToStr(),
                                FromLocId = row.Cells["FromLocId"].Value.ToInt(),
                                FromLocTypeId = row.Cells["FromLocTypeId"].Value.ToInt(),
                                FromPostCode = row.Cells["FromPostCode"].Value.ToStr(),
                                GoingTo = row.Cells["GoingTo"].Value.ToStr(),
                                Pax = row.Cells["Pax"].Value.ToInt(),
                                Passenger = row.Cells["Passenger"].Value.ToStr(),
                                NoofLuggages = row.Cells["NoofLuggages"].Value.ToInt(),
                                MobileNo = row.Cells["MobileNo"].Value.ToStr(),
                                MilesFromBase = row.Cells["MilesFromBase"].Value.ToDecimal(),
                                Lead = row.Cells["Lead"].Value.ToDateTimeorNull(),
                                JourneyTypeId = row.Cells["JourneyTypeId"].Value.ToInt(),
                                GroupId = row.Cells["GroupId"].Value.ToStr(),
                                PickupDateTemp = row.Cells["PickupDateTemp"].Value.ToDateTimeorNull(),
                                HasNotes = row.Cells["HasNotes"].Value.ToInt(),
                                HasNotesImg = row.Cells["HasNotesImg"].Value.ToStr(),
                                IsAutoDespatch = false,
                                IsBidding = false,
                                IsConfirmedDriver = row.Cells["IsConfirmedDriver"].Value.ToBool(),
                                PaymentMethod = row.Cells["PaymentMethod"].Value.ToStr(),
                                Pickup = row.Cells["Pickup"].Value.ToStr(),
                                PickUpDate = row.Cells["PickUpDate"].Value.ToStr(),
                                Plot = row.Cells["Plot"].Value.ToStr(),
                                PlotHour = row.Cells["PlotHour"].Value.ToDateTimeorNull(),
                                PReference = row.Cells["PReference"].Value.ToStr(),
                                PrePickupDate = row.Cells["PrePickupDate"].Value.ToDateTimeorNull(),
                                RefNumber = row.Cells["RefNumber"].Value.ToStr(),
                                SpecialReq = row.Cells["SpecialReq"].Value.ToStr(),
                                Status = "Waiting",
                                StatusColor = "-1",
                                StatusId = Enums.BOOKINGSTATUS.WAITING,
                                SubCompanyBgColor = row.Cells["SubCompanyBgColor"].Value.ToInt(),
                                TelephoneNo = row.Cells["TelephoneNo"].Value.ToStr(),
                                TextColor = row.Cells["TextColor"].Value.ToStr(),
                                TextColor1 = row.Cells["TextColor1"].Value.ToStr(),
                                Time = row.Cells["Time"].Value.ToStr(),
                                To = row.Cells["To"].Value.ToStr(),
                                ToLocTypeId = row.Cells["ToLocTypeId"].Value.ToInt(),
                                ToPostCode = row.Cells["ToPostCode"].Value.ToStr(),
                                UpdateBy = row.Cells["UpdateBy"].Value.ToStr(),
                                Vehicle = row.Cells["Vehicle"].Value.ToStr(),
                                Vias = row.Cells["Vias"].Value.ToInt(),
                                Attributes = row.Cells["Attributes"].Value.ToStr(),
                                VehicleDetails = row.Cells["VehicleDetails"].Value.ToStr(),
                                DropOffPlot = row.Cells["DropOffPlot"].Value.ToStr(),

                                Total = row.Cells["Total"].Value.ToDecimal(),
                                OrderNo = row.Cells["OrderNo"].Value.ToStr()
                            });



                            if (JobsSortBy == 0)
                                list = list.OrderBy(c => c.Lead).ToList();
                            else if (JobsSortBy == 1)
                                list = list.OrderBy(c => c.PickupDateTemp).ToList();
                            else if (JobsSortBy == 2)
                            {
                                var listA = list.OrderBy(c => c.Lead).ToList();


                                List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                                foreach (var item in listA)
                                {
                                    if (listB.Count(c => c.Plot == item.Plot) == 0)
                                        listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());



                                }
                                list = listB;








                            }


                            grdPendingJobs.DataSource = list;

                            grdAllJobs.Rows.Remove(row);



                            this.Pg_PendingJobs.Text = "Today's Booking(" + grdPendingJobs.Rows.Count + ")";
                            this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";

                            //   AddWriteLog("updatetodaysbookingwithstatus_NOSHOW_refreshtodays");


                        }
                    }
                    else
                    {
                        RefreshAllActiveData();

                    }



                }
            }
            catch (Exception ex)
            {

                try
                {
                    try
                    {
                        File.AppendAllText(Application.StartupPath + "\\exception_updatetodaysbookingwithstatus.txt", DateTime.Now.ToStr() + "," + ex.Message + Environment.NewLine);

                    }
                    catch
                    {


                    }
                    RefreshActiveData();
                }
                catch
                {


                }

            }

        }

        private int DefaultFilterValue = 0;
        private void FillDueFilter()
        {
            //  radListDataItem1.Selected = true;
            //radListDataItem1.Text = "No Filter";
            //radListDataItem1.TextWrap = true;
            //radListDataItem2.Text = "5 mins";
            //radListDataItem2.TextWrap = true;
            //radListDataItem3.Text = "10 mins";
            //radListDataItem3.TextWrap = true;
            //radListDataItem4.Text = "15 mins";
            //radListDataItem4.TextWrap = true;
            //radListDataItem5.Text = "30 mins";
            //radListDataItem5.TextWrap = true;
            //radListDataItem6.Text = "45 mins";
            //radListDataItem6.TextWrap = true;
            //radListDataItem7.Text = "1 hour";
            //radListDataItem7.TextWrap = true;
            //radListDataItem8.Text = "2 hours";
            //radListDataItem8.TextWrap = true;
            //radListDataItem9.Text = "5 hours";
            //radListDataItem9.TextWrap = true;
            //radListDataItem10.Text = "10 hours";
            //radListDataItem10.TextWrap = true;


            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "No Filter", Selected = true, Value = 0 });




            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "Due", Value = -1 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "1 min", Value = 1 });

            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "5 mins", Value = 5 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "10 mins", Value = 10 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "15 mins", Value = 15 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "30 mins", Value = 30 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "45 mins", Value = 45 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "1 hour", Value = 60 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "2 hours", Value = 120 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "3 hours", Value = 180 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "5 hours", Value = 300 });
            this.ddlShowDue.Items.Add(new RadListDataItem { Text = "10 hours", Value = 600 });



            try
            {
                if (File.Exists(Application.StartupPath + "\\Configuration.xml"))
                {

                    XmlDocument d = new XmlDocument();
                    d.Load(Application.StartupPath + "\\Configuration.xml");

                    if (d.GetElementsByTagName("DEFAULTBOOKINGFILTER").Count > 0)
                    {

                        DefaultFilterValue = d.GetElementsByTagName("DEFAULTBOOKINGFILTER")[0].InnerText.ToInt();
                    }
                }

                if (DefaultFilterValue > 0 || DefaultFilterValue == -1)
                {
                    var item = this.ddlShowDue.Items.FirstOrDefault(c => c.Value.ToInt() == DefaultFilterValue);
                    if (item != null)
                    {
                        item.Selected = true;

                    }

                }
            }
            catch
            {


            }

        }


        private void CheckAccountJobs()
        {
            AccJobsShowNotifyDay = AppVars.objPolicyConfiguration.AccJobsShowNotificationDay.ToStr().Trim();

            if (!string.IsNullOrEmpty(AccJobsShowNotifyDay))
            {


                if (AccJobsShowNotifyDay.Contains(","))
                {
                    string[] arr = AccJobsShowNotifyDay.Split(new char[] { ',' });

                    if (arr.Count() == 2)
                    {
                        AccJobsShowNotifyDay = arr[0].ToStr();

                        DateTime dt = DateTime.Parse(arr[1].ToStr());

                        if (dt < DateTime.Now.Date)
                        {

                            frmAccJobsReminder frmAcc = new frmAccJobsReminder();
                            frmAcc.Show();
                        }
                    }
                }

                else if (AccJobsShowNotifyDay == DateTime.Now.DayOfWeek.ToStr())
                {

                    frmAccJobsReminder frmAcc = new frmAccJobsReminder();
                    frmAcc.Show();
                }
            }

        }




        private void EnableOnBoardDriver(bool enable)
        {
            if (enable == false)
            {
                return;
            }

            pnlDriverOnBoard.Visible = true;
            AddClearJobColumn(grdOnBoardDriver);
            grdOnBoardDriver.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
            grdOnBoardDriver.AllowAutoSizeColumns = true;

        }












        private void SpeechText(string text)
        {
            if (text.ToStr().Length == 0)
                return;
            try
            {
                new Thread(delegate ()
                {
                    try
                    {
                        using (SpeechSynthesizer speech = new SpeechSynthesizer())
                        {
                            speech.Rate = -5;
                            speech.Speak(text);
                        }
                    }
                    catch
                    {

                    }
                }).Start();
            }
            catch
            {

            }

        }

        private bool driverloginlogoutNotification = false;


        public void ShowAlertMessage(string message)
        {
            try
            {



                string notifyMsg = string.Empty;
                string[] values = message.Split(new string[] { ">>" }, StringSplitOptions.None);

                if (message.StartsWith("message>>"))
                {

                    int senderId = values[1].ToInt();

                    captionText = "Message Received from " + values[2].ToStr();
                    alertSound = System.Media.SystemSounds.Question;
                    contentText = "<html><b><span style=font-size:medium><color=Blue>" + values[3].ToStr() + "</span></b></html>";
                    contentImage = Resources.Resource1.message;


                    if (AppVars.objPolicyConfiguration.PDANotificationSound.ToBool())
                    {
                        PlaySoundNotification("Message2.wav", false);
                    }



                    MethodInvoker mi = new MethodInvoker(delegate ()
                    {

                        this.CreateAndShowMessageAlert(captionText, contentText, contentImage, alertSound
                        , true, values[3], senderId.ToStr(), values[2].ToStr());
                        AddNotifyMessage(values[2].ToStr() + ": " + values[3].ToStr());
                    });
                    this.Invoke(mi);
                    // }

                    SetSMSBlinking(Color.Orange);



                    GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == senderId);


                    if (row != null)
                    {
                        row.Cells["HasNewMsg"].Tag = "1";
                    }
                    else
                    {
                        row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == senderId);
                        if (row != null)
                        {
                            row.Cells["HasNewMsg"].Tag = "1";

                        }
                    }
                    return;
                }
                else if (message.StartsWith("customer message>>"))
                {


                    captionText = "Message Received from Customer (" + values[1].ToStr() + ")";

                    contentText = "<html><b><span><color=Blue>" + values[3].ToStr() + "</span></b></html>";


                    if (values[2].ToStr().ToLower() == "confirmed")
                    {
                        contentImage = Resources.Resource1.acceptJob;
                    }
                    else
                    {
                        contentImage = (Image)Resources.Resource1.rejectJob;

                    }

                    if (AppVars.objPolicyConfiguration.SMSNotificationSound.ToBool())
                    {
                        PlaySoundNotification("Message1.wav", false);
                    }


                    MethodInvoker mi = new MethodInvoker(delegate ()
                    {
                        this.CreateAndShowAlertAlways(captionText, contentText, contentImage, alertSound
                        , true, values[3], values[2].ToStr(), values[2].ToStr());
                        AddNotifyMessage(values[2].ToStr() + ":" + values[3].ToStr().Replace("\r\n", ":"));
                    });
                    this.Invoke(mi);



                    return;
                }
                else if (message.StartsWith("flightalertinfo>>"))
                {


                    string json = values[1].ToStr();

                    ClsBookingsInfo objInfo = Newtonsoft.Json.JsonConvert.DeserializeObject<ClsBookingsInfo>(json);


                    if (objInfo.shownotification)
                    {




                        if (objInfo.soundfilename.ToStr().Trim().Length > 0)
                        {
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\sound\\" + objInfo.soundfilename.ToStr().Trim()))
                                PlaySoundNotification(objInfo.soundfilename.ToStr().Trim(), false);
                        }


                        captionText = objInfo.notificationtitle.ToStr();
                        contentText = objInfo.notificationcontent.ToStr();


                        MethodInvoker mi = new MethodInvoker(delegate ()
                        {


                            if (objInfo.notificationautoclosedelay > 0)
                                desktopAlert.AutoCloseDelay = objInfo.notificationautoclosedelay;
                            else
                                desktopAlert.AutoCloseDelay = 20;

                            desktopAlert.FadeAnimationSpeed = 1;
                            desktopAlert.FadeAnimationType = FadeAnimationType.None;
                            desktopAlert.Popup.AlertElement.Opacity = 100;
                            desktopAlert.PopupAnimation = false;
                            desktopAlert.ButtonItems.Clear();
                            desktopAlert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

                            if (objInfo.shownotificationimage)
                                desktopAlert.ContentImage = Resources.Resource1.AIRPORT3;

                            desktopAlert.ShowOptionsButton = false;
                            desktopAlert.ShowPinButton = false;

                            if (objInfo.JobId > 0)
                            {
                                desktopAlert.FixedSize = new Size(370, 120);

                                RadButtonElement bt = new RadButtonElement();
                                bt.Tag = objInfo.JobId;
                                bt.Name = "View";
                                bt.ToolTipText = "View Job";
                                bt.Click += new EventHandler(notify_viewjob_click);
                                bt.Text = "View Job";
                                desktopAlert.ButtonItems.Add(bt);
                            }


                            desktopAlert.CaptionText = captionText;
                            desktopAlert.ContentText = contentText;


                            //     desktopAlert.ContentImage = contentImg;


                            desktopAlert.Show();

                        });
                        this.Invoke(mi);





                    }


                    RefreshAllRequiredJSONData(objInfo.listofBookings);

                    return;
                }
                else if (message.StartsWith("login>>") || message.StartsWith("logout>>"))
                {
                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                    }
                    else
                    {
                        RefreshDashBoardDrivers();
                    }


                    if (values[0] == "logout" && message.EndsWith("(OverBreak)") == false)
                    {

                        if (driverloginlogoutNotification)
                        {
                            SpeechText(values[1].ToStr());
                        }


                        return;




                    }
                    if (message.StartsWith("login>>"))
                    {


                        notifyMsg = values[2].ToStr() + " LOGIN";

                        captionText = "LOGIN";

                        alertSound = System.Media.SystemSounds.Question;
                        contentText = "<html> <b><span style=font-size:medium><color=Blue>Driver " + values[2].ToStr() + " is Login</span></b></html>";

                        contentImage = Resources.Resource1.login;



                        if (DisablePopupNotifications == false || driverloginlogoutNotification)
                        {

                            SpeechText("Driver " + values[2].ToStr() + " Login");
                            //new Thread(delegate ()
                            //{
                            //    try
                            //    {
                            //        using (SpeechSynthesizer speech = new SpeechSynthesizer())
                            //        {
                            //            speech.Rate = -5;
                            //            speech.Speak("Driver " + values[2].ToStr() + " Login");
                            //        }
                            //    }
                            //    catch
                            //    {

                            //    }
                            //}).Start();


                        }

                    }
                    else if (message.StartsWith("logout>>") && message.EndsWith("(OverBreak)"))
                    {

                        notifyMsg = values[2].ToStr() + " AUTO LOGOUT(OVERBREAK)";

                        captionText = "DRV " + values[2].ToStr() + " AUTO LOGOUT";

                        alertSound = System.Media.SystemSounds.Question;
                        contentText = "<html> <b><span style=font-size:medium><color=Blue>Driver " + values[2].ToStr() + " is Auto Logout (OverTime Break) </span></b></html>";

                        contentImage = null;

                    }

                    MethodInvoker inv = new MethodInvoker(delegate () { this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, "", "", ""); AddNotifyMessage(notifyMsg); });

                    this.Invoke(inv);

                    return;

                }

                else if (message.StartsWith("logout auth>>"))
                {

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(ShowLogoutAuthForm), message, "");


                    }
                    else
                    {
                        ShowLogoutAuthForm(message, "");


                    }


                    return;


                }
                else if (message.StartsWith("changed driver status"))
                {
                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));


                    }
                    else
                    {
                        RefreshDashBoardDrivers();

                    }



                    return;

                }
                else if (message.StartsWith("changed driver break authstatus"))
                {
                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(ShowBreakAuthForm), message, "");


                    }
                    else
                    {
                        ShowBreakAuthForm(message, "");


                    }


                    return;

                }
                else if (message.StartsWith("app verification code"))
                {

                    if (IsServer)
                    {

                        if (!string.IsNullOrEmpty(values[1].ToStr()))
                        {

                            new Thread(delegate ()
                            {
                                SendVerificationCode(values[1].ToStr().Replace("\a", "").Trim(), values[2].ToStr().Trim(), values[3].ToStr().Trim());
                            }).Start();
                        }
                    }

                    return;

                }
                else if (message.StartsWith("prejob action>>"))
                {

                    long jobId = values[1].ToLong();
                    int driverId = values[2].ToInt();
                    int jobStatusId = values[3].ToInt();




                    if (ShowPendingJobOnRecentTab)
                    {
                        if (jobStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                            UpdateTodaysJobsCounter(jobId, new Booking() { BookingStatusId = jobStatusId });
                        else
                        {
                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UIDelegate(RefreshRequiredData));
                            }
                            else
                            {

                                RefreshRequiredData();
                            }
                        }
                    }
                    else
                    {





                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(RefreshTodayAndPreData));
                        }
                        else
                        {

                            RefreshTodayAndPreData();
                        }
                    }

                    if (DisablePopupNotifications == false)
                    {



                        Booking job = General.GetObject<Booking>(c => c.Id == jobId);


                        if (job == null)
                            return;

                        if (jobStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                        {

                            contentImage = (Image)Resources.Resource1.acceptJob;
                            alertSound = System.Media.SystemSounds.Asterisk;

                            notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + "PENDING START";

                            captionText = "Pre-Job # " + job.BookingNo + " is Accepted by Driver '" + job.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " +
                                                     job.Fleet_Driver.DefaultIfEmpty().DriverName + "'";

                            contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                            contentText += "Pickup Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";




                            SendDriverConfirmationEmail();


                        }
                        else if (jobStatusId == Enums.BOOKINGSTATUS.REJECTED)
                        {

                            contentImage = (Image)Resources.Resource1.rejectJob;
                            alertSound = System.Media.SystemSounds.Asterisk;

                            notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + "REJECTED";

                            captionText = "Pre-Job # " + job.BookingNo + " is Rejected by Driver '" + job.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " +
                                                     job.Fleet_Driver.DefaultIfEmpty().DriverName + "'";

                            contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                            contentText += "Pickup Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";

                        }

                        else if (jobStatusId == Enums.BOOKINGSTATUS.NOSHOW)
                        {
                            contentImage = (Image)Resources.Resource1.rejectJob1;

                            alertSound = System.Media.SystemSounds.Asterisk;

                            notifyMsg = job.Fleet_Driver.DefaultIfEmpty().DriverNo + " RECOVER JOB";
                            captionText = "Job # " + job.BookingNo + " is Recovered";
                            contentImage = (Image)Resources.Resource1.rejectJob;

                            contentText = "<html><b><span><color=Blue>Pickup Point : " + job.FromAddress + Environment.NewLine;
                            contentText += "Pickup Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + Environment.NewLine;
                            contentText += "Driver : " + job.Fleet_Driver.DefaultIfEmpty().DriverNo + " - " +
                                                       job.Fleet_Driver.DefaultIfEmpty().DriverName + "'" +
                                                     "</span></b></html>";
                        }



                        MethodInvoker invokerPre = new MethodInvoker(delegate ()
                        {

                            this.CreateAndShowAlertAlways(captionText, contentText, contentImage, alertSound, false, null, null, null);

                            if (DisablePopupNotifications == false)
                                AddNotifyMessage(notifyMsg);

                        });

                        this.Invoke(invokerPre);
                    }
                    return;



                }

                else if (message.StartsWith("action>>"))
                {

                    long jobId = values[1].ToLong();
                    int driverId = values[2].ToInt();
                    int jobStatusId = values[3].ToInt();

                    string bookingNo = string.Empty;
                    string driverNo = string.Empty;
                    string fromAddress = string.Empty;
                    string toAddress = string.Empty;
                    string mobileNo = string.Empty;
                    string pickupTime = string.Empty;
                    int bookingTypeId = 0;


                    try
                    {
                        if (DisablePopupNotifications == false)
                        {

                            GridViewRowInfo row = null;




                            row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);



                            if (row == null)
                            {
                                row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);
                                row.Tag = "grdAllJobs";

                            }

                            if (row != null)
                            {


                                bookingNo = row.Cells["RefNumber"].Value.ToStr();
                                driverNo = row.Cells["Driver"].Value.ToStr();

                                if (driverNo.Contains("-"))
                                {
                                    driverNo = driverNo.Substring(0, driverNo.IndexOf("-"));

                                }

                                fromAddress = row.Cells["From"].Value.ToStr();
                                toAddress = row.Cells["To"].Value.ToStr();
                                mobileNo = row.Cells["MobileNo"].Value.ToStr();
                                pickupTime = row.Cells["Time"].Value.ToStr();
                                bookingTypeId = row.Cells["BookingTypeId"].Value.ToInt();



                            }
                        }
                    }
                    catch
                    {

                    }



                    if ((
                        (jobStatusId == Enums.BOOKINGSTATUS.ARRIVED)
                     || jobStatusId == Enums.BOOKINGSTATUS.ONROUTE || jobStatusId == Enums.BOOKINGSTATUS.POB
                     || jobStatusId == Enums.BOOKINGSTATUS.STC || jobStatusId == Enums.BOOKINGSTATUS.DISPATCHED
                     || jobStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || jobStatusId == Enums.BOOKINGSTATUS.FOJ)
                     && Pg_AllJobs.Item.IsSelected == false)
                    {
                        RecentJobsRefreshRequired = true;

                        if (worker.IsBusy == false)
                        {


                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UISingleParameter(RefreshDashBoardDriversSync), message);
                            }

                            else
                            {
                                RefreshDashBoardDriversSync(message);
                            }



                            if (jobStatusId == Enums.BOOKINGSTATUS.DISPATCHED)
                            {
                                UpdateRecentJobsCounter(jobId, null);
                            }
                            else if (jobStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || jobStatusId == Enums.BOOKINGSTATUS.FOJ)
                            {
                                UpdateTodaysBookingWithStatus(jobId, new Booking { BookingStatusId = jobStatusId, DriverId = driverId });
                            }
                        }
                        else
                        {

                            try
                            {
                                worker.CancelAsync();

                                if (worker.IsBusy)
                                    Thread.Sleep(700);

                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UISingleParameter(RefreshDashBoardDriversSync), message);
                                }
                                else
                                {
                                    RefreshDashBoardDriversSync(message);
                                }

                                if (jobStatusId == Enums.BOOKINGSTATUS.DISPATCHED)
                                {
                                    UpdateRecentJobsCounter(jobId, null);
                                }
                                else if (jobStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || jobStatusId == Enums.BOOKINGSTATUS.FOJ)
                                {
                                    UpdateTodaysBookingWithStatus(jobId, new Booking { BookingStatusId = jobStatusId, DriverId = driverId });
                                }
                            }
                            catch
                            {

                            }

                        }


                        if (jobStatusId == Enums.BOOKINGSTATUS.ONROUTE)
                        {
                            UpdateTodaysJobsCounter(jobId, null);
                        }
                    }
                    //else if(jobStatusId==Enums.BOOKINGSTATUS.REJECTED && ShowPendingJobOnRecentTab==false)
                    //{

                    //    UpdateTodaysBookingWithStatus(jobId, new Booking { BookingStatusId = jobStatusId, DriverId = driverId });


                    //}
                    else
                    {
                        RecentJobsRefreshRequired = false;



                        if (worker.IsBusy == false)
                        {

                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UIDelegate(RefreshAllActiveData));
                            }

                            else
                            {
                                RefreshAllActiveData();
                            }
                        }
                        else
                        {

                            try
                            {
                                worker.CancelAsync();


                                if (worker.IsBusy)
                                    Thread.Sleep(700);


                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIDelegate(RefreshAllActiveData));
                                }

                                else
                                {
                                    RefreshAllActiveData();
                                }



                            }
                            catch
                            {


                            }
                        }
                    }


                    if (jobStatusId == Enums.BOOKINGSTATUS.ONROUTE)
                    {

                        notifyMsg = driverNo + "ONROUTE";

                        captionText = "Job # " + bookingNo + " is Accepted by Driver '" + driverNo;


                        contentImage = (Image)Resources.Resource1.acceptJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";


                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.ARRIVED)
                    {

                        notifyMsg = driverNo + "ARRIVED";

                        captionText = "DRIVER ARRIVED";
                        contentImage = (Image)Resources.Resource1.arrived;

                        contentText = "<html><b><span><color=Blue>Driver '" + driverNo +
                                                   " is Arrived on " + fromAddress + "</span></b></html>";
                        alertSound = System.Media.SystemSounds.Asterisk;



                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.ARRIVED_GHOST)
                    {


                        notifyMsg = driverNo + "STARTING GHOST JOB";

                        captionText = "Driver '" + driverNo + "' is Starting Ghost Job";
                        contentText =
                        contentText = "<html><b><span><color=Blue> Job Ref # " + bookingNo + Environment.NewLine;
                        contentText += "Destination : " + toAddress;
                        contentText += "Driver : " + driverNo +
                                     "</span></b></html>";
                        alertSound = System.Media.SystemSounds.Hand;
                        contentImage = Resources.Resource1.acceptJob;

                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.POB)
                    {


                        if (bookingTypeId == Enums.BOOKING_TYPES.ONROAD)
                        {

                            notifyMsg = driverNo + "FLAG DOWN";

                            captionText = "Driver '" + driverNo + "' Pressed Flag Down";
                            contentText = "Destination : " + toAddress;

                            alertSound = System.Media.SystemSounds.Hand;
                            contentImage = Resources.Resource1.FlagDown;

                        }
                        else
                        {
                            notifyMsg = driverNo + "POB";

                            captionText = "Job # " + bookingNo + " is Passenger On Board";

                            contentImage = (Image)Resources.Resource1.pob;

                            alertSound = System.Media.SystemSounds.Asterisk;
                            contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                            contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                            contentText += "Driver : " + driverNo +
                                         "</span></b></html>";


                        }
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.STC)
                    {
                        notifyMsg = driverNo + "STC";

                        captionText = "Job # " + bookingNo + " is Soon To Clear";
                        contentImage = (Image)Resources.Resource1.stc;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Destination : " + toAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";


                        //if (IsServer)
                        //{
                        //    if (bookingTypeId == Enums.BOOKING_TYPES.THIRDPARTY)
                        //    {
                        //        General.UpdateThirdPartyJobStatus(null, jobId, "pob");
                        //    }
                        //}

                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.DISPATCHED)
                    {

                        notifyMsg = driverNo + "CLEAR";

                        captionText = "Job # " + bookingNo + " is Completed";
                        contentImage = (Image)Resources.Resource1.clear;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Destination : " + toAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";

                    }

                    else if (jobStatusId == Enums.BOOKINGSTATUS.FOJ)
                    {


                        notifyMsg = driverNo + "FOJ ACCEPT";

                        captionText = "Follow-On-Job is Accepted by Driver " + driverNo;


                        contentImage = (Image)Resources.Resource1.acceptJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";



                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.REJECTED)
                    {

                        notifyMsg = driverNo + "REJECTED";

                        captionText = "Job # " + bookingNo + " is Rejected by Driver " + driverNo;

                        contentImage = (Image)Resources.Resource1.rejectJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";

                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOSHOW)
                    {

                        notifyMsg = driverNo + "NO SHOW";
                        captionText = "Job # " + bookingNo + " No Show";
                        contentImage = (Image)Resources.Resource1.rejectJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";
                    }
                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOPICKUP)
                    {


                        notifyMsg = driverNo + "NP";

                        captionText = "Job # " + bookingNo + " No Pickup";
                        contentImage = (Image)Resources.Resource1.rejectJob;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + Environment.NewLine;
                        contentText += "Driver : " + driverNo +
                                                 "</span></b></html>";
                    }

                    else if (jobStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                    {
                        notifyMsg = driverNo + "NOT ACCEPTED";

                        captionText = "Job # " + bookingNo + " is not accepted by Driver " + driverNo;

                        contentImage = (Image)Resources.Resource1.timeout;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Pickup Point : " + fromAddress + Environment.NewLine;
                        contentText += "Pickup Time : " + pickupTime + "</span></b></html>";
                    }
                }
                else if (message.StartsWith("auth>>"))
                {

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(ShowJobAuthForm), message, "");

                    }
                    else
                    {
                        ShowJobAuthForm(message, "");
                    }




                    return;


                }

                //else if (message.StartsWith("broadcast auth job>>"))
                //{

                //    if (values[1].ToStr() != Environment.MachineName)
                //    {
                //        frmAuth = new frmAuthorization(values[2].ToLong(), values[3].ToInt(), values[4].ToInt(), values[5].ToInt());
                //        frmAuth.ShowDialog();

                //        frmAuth.Dispose();
                //        frmAuth = null;

                //        RefreshAllDashBoard();

                //       // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DASHBOARD);

                //        new BroadcasterData().BroadCastToAll("**broadcast close auth job>>" + Environment.MachineName);
                //    }                   

                //    return;                  
                //}

                else if (message.StartsWith("broadcast close auth job>>"))
                {


                    if (values[1].ToStr() != Environment.MachineName)
                    {

                        if (this.InvokeRequired)
                        {
                            if (values.Count() > 2)
                            {
                                this.BeginInvoke(new UIParameterizedDelegate(CloseDesktopAlertJobAuthorizationForm), values[2].ToStr(), values[3].ToStr());

                            }
                            else
                            {
                                this.BeginInvoke(new UIDelegate(CloseJobAuthorizationForm));
                            }
                        }
                        else
                        {
                            if (values.Count() > 2)
                            {
                                CloseDesktopAlertJobAuthorizationForm(values[2].ToStr(), values[3].ToStr());
                            }
                            else
                            {
                                CloseJobAuthorizationForm();
                            }

                        }
                    }

                    return;
                }

                else if (message.StartsWith("authorize app booking>>"))
                {
                    if (values.Count() > 2)
                    {


                        long Ids = values[3].ToLong();

                        if (Ids > 0)
                        {
                            //   int defaultclientid = values[1].ToInt();
                            string via = string.Empty;
                            List<Booking> listofFetch = new List<Booking>();


                            var booking = General.GetObject<Booking>(c => c.Id == Ids);

                            if (booking != null)
                            {


                                via = string.Empty;

                                if (booking.Booking_ViaLocations.Count > 0)
                                {
                                    int cnt = 1;
                                    via = string.Join("\r\n", booking.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue.ToStr()).ToArray<string>());
                                }


                                listofFetch.Add(new Booking

                                {
                                    Id = booking.Id,
                                    BookingNo = booking.BookingNo,
                                    CustomerName = booking.CustomerName,
                                    CustomerPhoneNo = booking.CustomerPhoneNo,
                                    CustomerMobileNo = booking.CustomerMobileNo,
                                    CustomerEmail = booking.CustomerEmail,
                                    FromAddress = booking.FromAddress,

                                    ToAddress = booking.ToAddress,
                                    PickupDateTime = booking.PickupDateTime,
                                    BookingTypeId = booking.BookingTypeId,
                                    AddBy = 0,
                                    FromDoorNo = booking.FromDoorNo,
                                    FromStreet = booking.FromStreet,
                                    DistanceString = via,
                                    FareRate = booking.FareRate,
                                    EditLog = "1",
                                    OnlineBookingId = booking.OnlineBookingId,
                                    CompanyId = booking.CompanyId,
                                    CompanyCreditCardDetails = booking.Gen_Company.DefaultIfEmpty().CompanyName,
                                    IsQuotation = true,
                                    DriverWaitingMins = booking.Gen_Company.DefaultIfEmpty().SysGenId
                                });


                            }


                            if (listofFetch.Count > 0)
                            {

                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), listofFetch);


                                }
                                else
                                {
                                    ShowOnlineBookingsPopup(listofFetch);

                                }
                            }
                        }
                    }

                    return;
                }

                else if (message.StartsWith("cancelled webbooking>>"))
                {

                    long jobId = values[3].ToLong();
                    string cancelReason = values[4].ToStr();



                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(ShowCancelBookingPopup), jobId, null);


                    }
                    else
                    {
                        ShowCancelBookingPopup(jobId, null);

                    }


                    return;

                }

                else if (message.StartsWith("update webbooking>>"))
                {

                    if (values.Count() > 2)
                    {


                        long jobId = values[3].ToLong();

                        if (jobId > 0)
                        {
                            //   int defaultclientid = values[1].ToInt();


                            if (jobId == 0)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegateTab(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));


                                }
                                else
                                {
                                    PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
                                }

                            }
                            else
                            {
                                if (this.InvokeRequired)
                                    this.BeginInvoke(new UIOnlineBookingMultiDelegate(AddNewWebBooking), jobId, null);

                                else
                                    AddNewWebBooking(jobId, null);


                            }
                        }
                    }

                    return;



                }

                else if (message.StartsWith("authorize web>>"))
                {
                    //if (values.Count() > 2)
                    //{


                    if (values.Count() > 2 && values[2] != Environment.MachineName)
                    {

                        if (HasWebBookingTab)
                        {

                            long jobId = values[3].ToLong();
                            if (jobId == 0)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegateTab(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));


                                }
                                else
                                {
                                    PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
                                }

                            }
                            else
                            {
                                if (this.InvokeRequired)
                                    this.BeginInvoke(new UIOnlineBookingMultiDelegate(AddNewWebBooking), jobId, null);

                                else
                                    AddNewWebBooking(jobId, null);


                            }




                        }
                        else
                        {


                            long[] Ids = values.Skip(3).Select(c => c.ToLong()).ToArray<long>();

                            if (Ids.Count() > 0)
                            {




                                try
                                {


                                    int defaultclientid = values[1].ToInt();
                                    string via = string.Empty;
                                    List<Booking> listofFetch = new List<Booking>();

                                    foreach (var a in General.GetQueryable<Booking>(c => Ids.Contains(c.Id)))
                                    {
                                        via = string.Empty;

                                        if (a.Booking_ViaLocations.Count > 0)
                                        {
                                            int cnt = 1;
                                            via = string.Join("\r\n", a.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue.ToStr()).ToArray<string>());


                                        }


                                        listofFetch.Add(new Booking

                                        {
                                            Id = a.Id,
                                            BookingNo = a.BookingNo,
                                            CustomerName = a.CustomerName,
                                            CustomerPhoneNo = a.CustomerPhoneNo,
                                            CustomerMobileNo = a.CustomerMobileNo,
                                            CustomerEmail = a.CustomerEmail,
                                            FromAddress = a.FromAddress,

                                            ToAddress = a.ToAddress,
                                            PickupDateTime = a.PickupDateTime,
                                            BookingTypeId = a.BookingTypeId,
                                            AddBy = defaultclientid,
                                            FromDoorNo = a.FromDoorNo,
                                            FromStreet = a.FromStreet,
                                            DistanceString = via,
                                            FareRate = a.FareRate,
                                            EditLog = "1",


                                            CancelReason = a.Gen_PaymentType.PaymentType.ToStr(),
                                            BoundType = a.Fleet_VehicleType.VehicleType.ToStr().ToProperCase(),

                                            OnlineBookingId = a.OnlineBookingId,
                                            CompanyId = a.CompanyId,
                                            IsCompanyWise = a.IsCompanyWise,
                                            CompanyCreditCardDetails = a.CompanyId != null ? a.Gen_Company.DefaultIfEmpty().CompanyName : "",
                                            IsQuotation = a.CompanyId != null ? true : false,
                                            DriverWaitingMins = a.CompanyId != null ? a.Gen_Company.DefaultIfEmpty().SysGenId : null




                                        });

                                    }



                                    //  File.AppendAllText(Application.StartupPath + "\\webbookinglogs.txt", DateTime.Now + ", ids:" + Ids.ToStr() + Environment.NewLine);




                                    if (listofFetch.Count > 0)
                                    {

                                        if (this.InvokeRequired)
                                        {
                                            this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), listofFetch);
                                        }
                                        else
                                        {
                                            ShowOnlineBookingsPopup(listofFetch);
                                        }
                                    }



                                }
                                catch (Exception ex)
                                {
                                    //  File.AppendAllText(Application.StartupPath + "\\webbookinglogs_exception.txt", DateTime.Now + ", ids:" + Ids.ToStr() + "," + ex.Message + Environment.NewLine);

                                }

                            }
                        }
                    }

                    return;
                }



                else if (message.StartsWith("requestauthorize web>>"))
                {
                    //if (values.Count() > 2)
                    //{


                    if (values.Count() > 2 && values[2] != Environment.MachineName)
                    {

                        if (HasWebBookingTab)
                        {

                            long jobId = values[3].ToLong();
                            if (jobId == 0)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIOnlineBookingDelegateTab(PopulateNewWebBookings), GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));


                                }
                                else
                                {
                                    PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
                                }

                            }
                            else
                            {
                                if (this.InvokeRequired)
                                    this.BeginInvoke(new UIOnlineBookingMultiDelegate(AddNewWebBooking), jobId, null);

                                else
                                    AddNewWebBooking(jobId, null);


                            }




                        }
                        else
                        {


                            string[] Ids = values[3].Split('|');

                            if (Ids.Count() > 0)
                            {




                                try
                                {


                                    //  int defaultclientid = values[1].ToInt();
                                    string via = string.Empty;
                                    List<Booking> listofFetch = new List<Booking>();

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        foreach (var item in Ids)
                                        {



                                            foreach (var a in db.Bookings.Where(c => c.Id == item.ToLong()))
                                            {
                                                via = string.Empty;

                                                if (a.Booking_ViaLocations.Count > 0)
                                                {
                                                    int cnt = 1;
                                                    via = string.Join("\r\n", a.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue.ToStr()).ToArray<string>());


                                                }


                                                listofFetch.Add(new Booking

                                                {
                                                    Id = a.Id,
                                                    BookingNo = a.BookingNo,
                                                    CustomerName = a.CustomerName,
                                                    CustomerPhoneNo = a.CustomerPhoneNo,
                                                    CustomerMobileNo = a.CustomerMobileNo,
                                                    CustomerEmail = a.CustomerEmail,
                                                    FromAddress = a.FromAddress,

                                                    ToAddress = a.ToAddress,
                                                    PickupDateTime = a.PickupDateTime,
                                                    BookingTypeId = a.BookingTypeId,
                                                    AddBy = 1,
                                                    FromDoorNo = a.FromDoorNo,
                                                    FromStreet = a.FromStreet,
                                                    DistanceString = via,
                                                    FareRate = a.FareRate,
                                                    EditLog = "1",


                                                    CancelReason = a.Gen_PaymentType.PaymentType.ToStr(),
                                                    BoundType = a.Fleet_VehicleType.VehicleType.ToStr().ToProperCase(),

                                                    OnlineBookingId = a.OnlineBookingId,
                                                    CompanyId = a.CompanyId,
                                                    IsCompanyWise = a.IsCompanyWise,
                                                    CompanyCreditCardDetails = a.CompanyId != null ? a.Gen_Company.DefaultIfEmpty().CompanyName : "",
                                                    IsQuotation = a.CompanyId != null ? true : false,
                                                    DriverWaitingMins = a.CompanyId != null ? a.Gen_Company.DefaultIfEmpty().SysGenId : null,
                                                    SubcompanyId = a.SubcompanyId



                                                });

                                            }


                                        }
                                    }

                                    //  File.AppendAllText(Application.StartupPath + "\\webbookinglogs.txt", DateTime.Now + ", ids:" + Ids.ToStr() + Environment.NewLine);




                                    if (listofFetch.Count > 0)
                                    {

                                        if (this.InvokeRequired)
                                        {
                                            this.BeginInvoke(new UIOnlineBookingDelegate(ShowOnlineBookingsPopup), listofFetch);
                                        }
                                        else
                                        {
                                            ShowOnlineBookingsPopup(listofFetch);
                                        }
                                    }



                                }
                                catch (Exception ex)
                                {
                                    //  File.AppendAllText(Application.StartupPath + "\\webbookinglogs_exception.txt", DateTime.Now + ", ids:" + Ids.ToStr() + "," + ex.Message + Environment.NewLine);

                                }

                            }
                        }
                    }

                    return;
                }



                else if (message.StartsWith("close authorize web>>"))
                {


                    //if (values.Count() == 2 && values[1] != Environment.MachineName)
                    //{


                    if (HasWebBookingTab)
                    {
                        // if (worker.IsBusy == false)
                        //  {

                        if (values.Count() == 3 && values[1] != Environment.MachineName)
                        {
                            if (values[2].ToStr() == "accept")
                            {

                                if (this.InvokeRequired)
                                {

                                    this.BeginInvoke(new UIDelegate(RefreshTodayAndPreData));

                                }
                                else
                                {
                                    RefreshTodayAndPreData();


                                }

                                InitializeOnlineBookingWorker(values[2].ToStr());
                            }
                            else
                            {
                                //if (this.InvokeRequired)
                                //{
                                //    this.BeginInvoke(new UIDelegate(PopulateDeclinedWebBookings));

                                //}
                                //else
                                //{
                                //    PopulateDeclinedWebBookings();
                                //}

                                InitializeOnlineBookingWorker(values[2].ToStr());

                            }


                            PopulateWebBookingsGrid();

                        }
                        //    }

                    }
                    else
                    {

                        string tag = string.Empty;


                        if (values.Count() > 2)
                        {
                            tag = values[2].ToStr();
                        }

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UISingleParameter(CloseWebAuthorizeForm), tag);
                        }
                        else
                        {
                            CloseWebAuthorizeForm(tag);

                        }
                    }


                    //  }

                    return;


                }

                else if (message.StartsWith("pending accept web>>"))
                {


                    if (values[1] != Environment.MachineName)
                    {


                        if (HasWebBookingTab)
                        {
                            //if (this.InvokeRequired)
                            //{
                            //    this.BeginInvoke(new UIDelegate(PopulateWebBookingsGrid));
                            //}
                            //else
                            //{

                            //    PopulateWebBookingsGrid();

                            //}
                            InitializeOnlineBookingWorker(values[2].ToStr());
                        }
                    }

                    return;

                }



                else if (message.StartsWith("broadcast close logout auth>>"))
                {


                    //if (values[1].ToStr() != Environment.MachineName)
                    //{

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(CloseLogoutAuthorizationForm), values[2].ToStr() + ">>" + values[3].ToStr() + ">>" + values[4].ToStr(), null);
                    }
                    else
                    {
                        CloseLogoutAuthorizationForm(values[2].ToStr() + ">>" + values[3].ToStr() + ">>" + values[4].ToStr(), null);

                    }
                    //   }

                    return;
                }
                else if (message.StartsWith("broadcast close break auth>>"))
                {

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(CloseBreakAuthorizationForm), values[2].ToStr() + ">>" + values[3].ToStr() + ">>" + values[4].ToStr(), null);
                    }
                    else
                    {
                        CloseBreakAuthorizationForm(values[2].ToStr() + ">>" + values[3].ToStr() + ">>" + values[4].ToStr(), null);

                    }
                    //   }

                    return;
                }
                else if (message.StartsWith("booking created from cmac>>"))
                {

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIParameterizedDelegate(CloseCreatedBookingFromCMAC), values[1].ToStr() , null);
                    }
                    else
                    {
                        CloseCreatedBookingFromCMAC(values[1].ToStr(), null);

                    }
                    //   }

                    return;
                }

                else if (message.StartsWith("voice request>>"))
                {


                    if (IsServer)
                    {
                        int driverId = values[1].ToInt();

                        var objDrv = General.GetObject<Fleet_Driver>(c => c.Id == driverId);

                        if (objDrv != null)
                        {


                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UIParameterizedDelegate(ShowVoiceRequest), objDrv.DriverNo, objDrv.PDAMobileNo.ToStr().Trim());
                            }
                            else
                            {

                                ShowVoiceRequest(objDrv.DriverNo, objDrv.PDAMobileNo.ToStr().Trim());
                            }



                            MethodInvoker invokerM = new MethodInvoker(delegate ()
                            {

                                AddNotifyMessage(objDrv.DriverNo + " VR");
                            });

                            this.Invoke(invokerM);
                        }

                    }

                    return;
                }

                else if (message.StartsWith("dropoffzone"))
                {

                    try
                    {
                        long jobId = values[2].ToLong();




                        if (DisablePopupNotifications == false)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                try
                                {

                                    if (jobId > 0)

                                    {

                                        var obj = db.Bookings.Where(c => c.Id == jobId).Select(args => new { args.DropOffZoneId, args.FromAddress, args.PickupDateTime }).FirstOrDefault();



                                        string zoneName = db.Gen_Zones.Where(c => c.Id == obj.DropOffZoneId).Select(c => c.ZoneName).FirstOrDefault().ToStr();

                                        notifyMsg = values[5].ToStr() + " DropOff Plot : " + zoneName;

                                        captionText = values[5].ToStr() + " DropOff Plot : " + zoneName;


                                        contentImage = null;

                                        alertSound = System.Media.SystemSounds.Asterisk;
                                        contentText = "<html><b><span><color=Blue>Pickup Point : " + obj.FromAddress + Environment.NewLine;
                                        contentText += "Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", obj.PickupDateTime) + "</span></b></html>";


                                    }
                                }
                                catch
                                {

                                }
                            }
                        }
                    }
                    catch
                    {

                    }

                    if (this.InvokeRequired)
                    {
                        this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                    }
                    else
                    {
                        RefreshDashBoardDrivers();
                    }


                }
                else if (message.StartsWith("changeaddress"))
                {


                    if (values.Count() == 5)
                    {


                        notifyMsg = "Drv " + values[3].ToStr() + " Change Destination";

                        captionText = notifyMsg;

                        contentImage = (Image)Resources.Resource1.clear;

                        alertSound = System.Media.SystemSounds.Asterisk;
                        contentText = "<html><b><span><color=Blue>Destination : " + values[4].ToStr() + "</span></b></html>";
                        // contentText += "Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", job.PickupDateTime) + "</span></b></html>";

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(RefreshDashBoardDrivers));

                        }
                        else
                        {
                            RefreshDashBoardDrivers();
                        }
                    }
                }

                else if (message.StartsWith("job received>>"))
                {


                    captionText = "Job has been Received to Driver " + values[1].ToStr();
                    alertSound = System.Media.SystemSounds.Question;
                    contentText = "<html><b><span><color=Blue>Pickup Point : " + values[2] + Environment.NewLine;
                    contentText += "Destination : " + values[3] + "</span></b></html>";
                    contentImage = (Image)Resources.Resource1.receive;



                }

                else if (message.StartsWith("driver bid>>"))
                {


                    if (DisablePopupNotifications)
                    {


                        UpdateBidNotification(values[1].ToLong(), null);

                    }
                    else
                    {


                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == values[1].ToLong());

                        if (row != null)
                        {



                            string driverNo = string.Empty;
                            string refNo = row.Cells["RefNumber"].Value.ToStr();

                            var driverRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                            if (driverRow != null)
                            {
                                driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                            }
                            else
                            {
                                driverRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                                if (driverRow != null)
                                {
                                    driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                                }
                            }

                            if (!string.IsNullOrEmpty(driverNo))
                            {

                                RefreshActiveData();

                                captionText = "Driver No '" + driverNo + "' is Bidding on Job " + refNo;
                                alertSound = System.Media.SystemSounds.Beep;
                                contentText = "<html><b><span><color=Blue>Pickup Point : " + row.Cells["From"].Value.ToStr() + Environment.NewLine;
                                contentText += "Pickup Time : " + row.Cells["Time"].Value.ToStr() + "</span></b></html>";

                                contentImage = (Image)Resources.Resource1.bid3;
                            }

                        }

                        else
                        {
                            return;

                        }

                    }




                }

                else if (message.StartsWith("onbid despatch>>"))
                {


                    if (DisablePopupNotifications)
                    {

                        UpdateBidDespatched(values[1].ToLong(), new Booking { DriverId = values[2].ToInt() });

                    }
                    else
                    {

                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == values[1].ToLong());

                        if (row != null)
                        {


                            string driverNo = string.Empty;



                            var driverRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                            if (driverRow != null)
                            {
                                driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                            }
                            else
                            {
                                driverRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == values[2].ToInt());
                                if (driverRow != null)
                                {
                                    driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                                }


                            }

                            if (!string.IsNullOrEmpty(driverNo))
                            {


                                if (DisablePopupNotifications)
                                {

                                    row.Cells["Driver"].Value = driverNo + " - " + "Pending Accept";
                                    row.Cells["Status"].Value = "Pending Accept";
                                    row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.PENDING;
                                    row.Cells["StatusColor"].Value = "-3212322";
                                    row.Cells["HasNotes"].Value = "0";

                                }
                                else
                                {

                                    RefreshActiveData();


                                    string msg = values[3].ToStr() + " " + driverNo;
                                    string refNo = row.Cells["RefNumber"].Value.ToStr() + " at " + row.Cells["Time"].Value.ToStr();


                                    captionText = msg;
                                    alertSound = System.Media.SystemSounds.Beep;
                                    contentText = "<html><b><span><color=Blue>Pickup Point : " + row.Cells["From"].Value.ToStr() + Environment.NewLine;
                                    contentText += "Details : " + refNo + "</span></b></html>";

                                    contentImage = (Image)Resources.Resource1.bid3;
                                }
                            }
                        }

                    }




                }
                else if (message.StartsWith("onbid allocate>>"))
                {




                    UpdateBidAllocate(values[1].ToLong(), new Booking { DriverId = values[2].ToInt(), SpecialRequirements = values[3] });







                }
                else if (message.StartsWith("driver price bid>>"))
                {

                    string driverNo = values[3].ToStr();
                    string refNo = values[4].ToStr();
                    decimal rate = values[5].ToDecimal();



                    notifyMsg = string.Empty;

                    captionText = "Driver " + driverNo + " Bidding";
                    alertSound = System.Media.SystemSounds.Beep;
                    contentText = "<html><b><span><color=Blue>Job Ref # : " + refNo + Environment.NewLine;
                    contentText += "Bid : £" + rate + "</span></b></html>";

                    contentImage = (Image)Resources.Resource1.bid3;

                    //notifyMsg = "Drv " + driverNo + " Bid ";                  

                    RefreshBiddingJobsData();

                }



                if (DisablePopupNotifications)
                {
                    //if (AppVars.objPolicyConfiguration.JobActionsNotification.ToBool())
                    //{

                    if (captionText.StartsWith("Follow-On-Job is Accepted"))
                    {


                        //MethodInvoker invoker = new MethodInvoker(delegate()
                        //{

                        //    this.ShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null);


                        //});

                        //this.Invoke(invoker);

                        //this.Invoke((MethodInvoker)delegate
                        //{
                        //    UpdateNotificationsAlways(notifyMsg, captionText, contentText, contentImage, alertSound, false, null, null, null);

                        //});
                    }
                    // }



                }
                else
                {




                    this.Invoke((MethodInvoker)delegate
                    {
                        UpdateNotifications(notifyMsg, captionText, contentText, contentImage, alertSound, false, null, null, null);

                    });




                    // }
                }

                //  IsUpdating = false;
            }
            catch (Exception ex)
            {

                //  IsUpdating = false;
            }

        }

        private void UpdateBidDespatched(long jobId, Booking book)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(UpdateBidDespatched), jobId, book);

                }
                else
                {



                    string driverNo = string.Empty;



                    var driverRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == book.DriverId);
                    if (driverRow != null)
                    {
                        driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                    }
                    else
                    {
                        driverRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == book.DriverId);
                        if (driverRow != null)
                        {
                            driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                        }
                    }

                    if (!string.IsNullOrEmpty(driverNo))
                    {




                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {

                            row.Cells["Driver"].Value = driverNo + " - " + "Pending Accept";
                            row.Cells["Status"].Value = "Pending Accept";
                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.PENDING;
                            row.Cells["StatusColor"].Value = "-3212322";
                            row.Cells["HasNotes"].Value = 0;
                        }



                    }



                }
            }
            catch
            {


            }

        }



        private void UpdateBidAllocate(long jobId, Booking book)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(UpdateBidAllocate), jobId, book);

                }
                else
                {



                    string driverNo = string.Empty;


                    if (book.SpecialRequirements.ToStr().Trim().Length > 0)
                        driverNo = book.SpecialRequirements.ToStr().Trim();

                    else
                    {
                        var driverRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == book.DriverId);
                        if (driverRow != null)
                        {
                            driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                        }
                        else
                        {
                            driverRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == book.DriverId);
                            if (driverRow != null)
                            {
                                driverNo = driverRow.Cells["DriverNo"].Value.ToStr();

                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(driverNo))
                    {


                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {

                            row.Cells["Driver"].Value = driverNo + " - " + "Waiting";
                            row.Cells["Status"].Value = "Waiting";
                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.WAITING;
                            row.Cells["StatusColor"].Value = "-1";
                            row.Cells["HasNotes"].Value = 0;
                            row.Cells["IsConfirmedDriver"].Value = "true";
                        }



                    }



                }
            }
            catch
            {


            }

        }


        private void UpdateBidNotification(long jobId, Booking book)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIOnlineBookingMultiDelegateBooking(UpdateBidNotification), jobId, null);

                }
                else
                {




                    var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                    if (row != null)
                    {
                        row.Cells["HasNotes"].Value = 1;
                    }





                }
            }
            catch (Exception ex)
            {
                AddWriteLog("crash_UpdateBidNotification:" + ex.Message);

            }

        }
        private void UpdateNotificationsAlways(string msg, string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            this.CreateAndShowAlertAlways(captionText, contentText, contentImage, alertSound, false, null, null, null);
            AddNotifyMessage(msg);

        }

        private void UpdateNotifications(string msg, string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            this.CreateAndShowAlert(captionText, contentText, contentImage, alertSound, false, null, null, null);
            AddNotifyMessage(msg);

        }



        private void SendVerificationCode(string mobileNo, string UDID, string deviceInfo)
        {

            Random c = new Random();
            string code = c.Next(1000, 9999).ToStr();

            if (UDID.Length > 36)
                UDID = UDID.Substring(0, 35);

            using (TaxiDataContext db = new TaxiDataContext())
            {
                db.stp_RegisteringApp(deviceInfo, UDID, code.ToInt(), mobileNo);
            }
            SendSMS(mobileNo, "Your " + AppVars.objSubCompany.CompanyName.ToStr() + " App Verification code is :" + code, Enums.SMSACCOUNT_TYPE.MODEMSMS);
        }


        private void ShowLogoutAuthForm(string msg, string msg2)
        {

            if (chkShowAuthorization.Checked)
            {



                LogoutAuthorizePopup(msg);

            }


        }





        private void LogoutAuthorizePopup(string msg)
        {
            RadDesktopAlert alertAuthorization = new RadDesktopAlert();
            try
            {
                alertAuthorization.Closed += new RadPopupClosedEventHandler(alertLogoutAuthorization_Closed);
                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);



                RadButtonElement btnAllow = new RadButtonElement();
                RadButtonElement btnDeny = new RadButtonElement();



                alertAuthorization.ButtonItems.AddRange(new Telerik.WinControls.RadItem[] {
                btnAllow,
                btnDeny,
                });



                alertAuthorization.PopupAnimation = false;
                alertAuthorization.FadeAnimationType = FadeAnimationType.None;

                alertAuthorization.ContentImage = null;

                alertAuthorization.PlaySound = false;
                alertAuthorization.ShowOptionsButton = false;
                alertAuthorization.ShowPinButton = false;
                alertAuthorization.SoundToPlay = null;
                //  alertAuthorization.
                alertAuthorization.ThemeName = null;

                btnAllow.AutoSize = false;
                btnAllow.Bounds = new System.Drawing.Rectangle(0, 0, 90, 30);
                btnAllow.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                btnAllow.ForeColor = System.Drawing.Color.White;
                btnAllow.Name = "btnAllow";
                btnAllow.Text = "Allow";
                btnAllow.Tag = msg;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor2 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor3 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor4 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BoxStyle = Telerik.WinControls.BorderBoxStyle.SingleBorder;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BottomColor = System.Drawing.Color.DarkSlateBlue;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(127)))), ((int)(((byte)(227)))), ((int)(((byte)(255)))));
                // 
                // btnDeny
                // 
                btnDeny.AutoSize = false;
                btnDeny.Bounds = new System.Drawing.Rectangle(10, 0, 90, 30);
                btnDeny.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                btnDeny.ForeColor = System.Drawing.Color.White;
                btnDeny.Name = "btnDeny";
                btnDeny.Text = "Deny";
                btnDeny.Tag = msg;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor2 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor3 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor4 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnDeny.GetChildAt(2))).BoxStyle = Telerik.WinControls.BorderBoxStyle.SingleBorder;




                alertAuthorization.FixedSize = new Size(360, 120);

                alertAuthorization.AutoCloseDelay = 58;





                alertAuthorization.Popup.BackColor = Color.GhostWhite;
                alertAuthorization.Popup.AlertElement.BackColor = Color.GhostWhite;


                alertAuthorization.Popup.AlertElement.NumberOfColors = 1;
                alertAuthorization.FadeAnimationType = FadeAnimationType.None;

                btnAllow.TextElement.Tag = alertAuthorization;
                btnAllow.Click += new EventHandler(btnAllowLogout_Click);
                btnDeny.Click += new EventHandler(btnDenyLogout_Click);
                btnDeny.TextElement.Tag = alertAuthorization;



                string captionText = "";
                string driverNo = values[2].ToStr();





                string contentText = "<html><b><span style=font-size:large><color=Red>" + driverNo + " Logout Authorization" + "</span></b></html>";
                alertAuthorization.Popup.Tag = msg;
                alertAuthorization.ScreenPosition = AlertScreenPosition.TopRight;
                alertAuthorization.Opacity = 1;

                alertAuthorization.ShowCloseButton = true;
                alertAuthorization.CaptionText = captionText;
                alertAuthorization.ContentText = contentText;
                alertAuthorization.Show();

                listOfLogoutPopups.Add(alertAuthorization);




            }
            catch
            {


            }
        }



        private void ShowJobAuthForm(string msg, string msg2)
        {
            if (chkShowAuthorization.Checked)
            {
                try
                {
                    new Thread(delegate ()
                    {

                        try
                        {
                            if (this.InvokeRequired)
                            {
                                this.BeginInvoke(new UISingleParameter(AuthorizePopup), msg);

                            }
                            else
                                AuthorizePopup(msg);

                        }
                        catch
                        {

                        }

                    }).Start();





                    //string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);

                    //frmAuth = new frmAuthorization(values[1].ToLong(), values[2].ToInt(), values[3].ToInt(), values[4].ToInt());

                    //frmAuth.Show();
                }
                catch (Exception ex)
                {


                }
            }


        }


        private void RefreshAllDashBoard()
        {
            if (this.InvokeRequired)
            {

                this.BeginInvoke(new UIDelegate(RefreshData));
            }
            else
            {

                RefreshData();
            }



        }

        private void CloseDesktopAlertJobAuthorizationForm(string msg, string msg2)
        {

            try
            {



                if (listOfAuthPopups != null)
                {
                    msg = msg.Replace("<<", ">>").Trim();
                    var aler = listOfAuthPopups.FirstOrDefault(c => c.Popup.Tag.ToStr() == msg);

                    if (aler != null)
                    {
                        listOfAuthPopups.Remove(aler);
                        aler.Dispose();
                        aler = null;



                        //if (msg2.ToStr().ToLower() == "allow")
                        //    RefreshActiveDataWithoutWait();
                    }



                }
            }
            catch
            {
                //if (msg2.ToStr().ToLower() == "allow")
                //    RefreshActiveDataWithoutWait();


            }






        }


        private void CloseDesktopAlertBreakAuthorizationForm(string msg, string msg2)
        {

            try
            {



                if (listOfBreakPopups != null)
                {



                    msg = msg.Replace("<<", ">>").Trim();
                    var aler = listOfBreakPopups.FirstOrDefault(c => c.Popup.Tag.ToStr().StartsWith(msg));

                    if (aler != null)
                    {
                        listOfBreakPopups.Remove(aler);
                        aler.Dispose();
                        aler = null;



                        if (msg2.ToStr().ToLower() == "allow")
                            RefreshDashBoardDrivers();
                    }



                }
            }
            catch
            {
                if (msg2.ToStr().ToLower() == "allow")
                    RefreshDashBoardDrivers();


            }






        }



        private void CloseDesktopAlertLogoutAuthorizationForm(string msg, string msg2)
        {

            try
            {



                if (listOfLogoutPopups != null)
                {
                    msg = msg.Replace("<<", ">>").Trim();
                    var aler = listOfLogoutPopups.FirstOrDefault(c => c.Popup.Tag.ToStr() == msg);

                    if (aler != null)
                    {
                        listOfLogoutPopups.Remove(aler);
                        aler.Dispose();
                        aler = null;



                        if (msg2.ToStr().ToLower() == "allow")
                            RefreshDashBoardDrivers();
                    }



                }
            }
            catch
            {
                if (msg2.ToStr().ToLower() == "allow")
                    RefreshDashBoardDrivers();


            }






        }

        private void CloseDesktopAlertCreatedBookingFromCMACForm(string msg, string msg2)
        {
            try
            {
                if (listOfBreakPopups != null)
                {
                    msg = msg.Replace("<<", ">>").Trim();
                    var aler = listOfBreakPopups.FirstOrDefault(c => c.Popup.Tag.ToStr().StartsWith(msg));

                    if (aler != null)
                    {
                        listOfBreakPopups.Remove(aler);
                        aler.Dispose();
                        aler = null;
                    }
                     RefreshDashBoardDrivers();
                }
            }
            catch
            {
                    RefreshDashBoardDrivers();
            }
        }



        private void CloseJobAuthorizationForm()
        {


            if (frmAuth != null)
            {
                frmAuth.Close();
                frmAuth.Dispose();
                frmAuth = null;


                RefreshData();
            }

        }



        //otherlogoutwindows
        private void CloseLogoutAuthorizationForm(string driverId, string other)
        {




            CloseDesktopAlertLogoutAuthorizationForm(driverId, other);



            //frmDriverLogoutAuthorization frmLog = ((frmDriverLogoutAuthorization)System.Windows.Forms.Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmDriverLogoutAuthorization" && c.Tag.ToStr() == driverId));
            //if (frmLog != null)
            //{
            //    frmLog.Close();
            //    RefreshDashBoardDrivers();               

            //}
        }



        private void CloseBreakAuthorizationForm(string driverId, string other)
        {




            CloseDesktopAlertBreakAuthorizationForm(driverId, other);



        }



        private void CloseWebAuthorizeForm(string tag)
        {
            try
            {
                if (tag.ToStr().Trim().Length == 0)
                {
                    frmFetchedOnlineBookingsPopup frmFetchPopup = (frmFetchedOnlineBookingsPopup)Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmFetchedOnlineBookingsPopup");

                    if (frmFetchPopup != null)
                    {

                        frmFetchPopup.IsAttachClosing = false;
                        frmFetchPopup.Close();
                        frmFetchPopup.Dispose();
                        frmFetchPopup = null;


                        RefreshTodayAndPreData();
                    }

                }
                else
                {
                    frmFetchedOnlineBookingsPopup frmFetchPopup = (frmFetchedOnlineBookingsPopup)Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmFetchedOnlineBookingsPopup" && c.Tag.ToStr() == tag);

                    if (frmFetchPopup != null)
                    {

                        frmFetchPopup.IsAttachClosing = false;
                        frmFetchPopup.Close();
                        frmFetchPopup.Dispose();
                        frmFetchPopup = null;


                        RefreshTodayAndPreData();
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void CloseCreatedBookingFromCMAC(string driverId, string other)
        {
            CloseDesktopAlertCreatedBookingFromCMACForm(driverId, other);
        }




        private void ShowVoiceRequest(string name, string phoneNumber)
        {
            try
            {





                frmVoiceRequest frmVoice = new frmVoiceRequest(name, phoneNumber);
                frmVoice.StartPosition = FormStartPosition.CenterScreen;
                frmVoice.Show();
            }
            catch (Exception ex)
            {


            }

        }




        private string GetMessage(string message, Booking objBooking, long jobId)
        {
            try
            {


                string msg = message;

                object propertyValue = string.Empty;
                foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                {


                    switch (tag.TagObjectName)
                    {
                        case "booking":

                            if (objBooking == null)
                                objBooking = General.GetObject<Booking>(c => c.Id == jobId);

                            if (tag.TagPropertyValue.Contains('.'))
                            {

                                string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                object parentObj = objBooking.GetType().GetProperty(val[0]).GetValue(objBooking, null);

                                if (parentObj != null)
                                {
                                    propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                }
                                else
                                    propertyValue = string.Empty;


                                break;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(tag.ConditionNotNull) && objBooking.GetType().GetProperty(tag.ConditionNotNull) != null)
                                {

                                    if (tag.ConditionNotNull.ToStr() == "BabySeats" && tag.TagPropertyValue.ToStr() == "BabySeats")
                                    {
                                        propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking, null);

                                        if (!string.IsNullOrEmpty(propertyValue.ToStr().Trim()) && propertyValue.ToStr().Contains("<<<"))
                                        {
                                            string[] arr = propertyValue.ToStr().Split(new string[] { "<<<" }, StringSplitOptions.None);

                                            propertyValue = "B Seat 1 : " + arr[0].ToStr() + Environment.NewLine + "B Seat 2 : " + arr[1].ToStr();

                                        }

                                    }
                                    else if (objBooking.GetType().GetProperty(tag.ConditionNotNull).GetValue(objBooking, null) != null)
                                    {
                                        propertyValue = tag.ConditionNotNullReplacedValue.ToStr();
                                    }

                                }
                                else
                                {

                                    if (tag.ExpressionValue.ToStr().Trim().Length > 0)
                                    {
                                        try
                                        {
                                            char[] splitArr = new char[] { ',' };
                                            char[] splitArr2 = new char[] { '|' };
                                            string[] val = tag.ExpressionValue.Split(splitArr);

                                            string replaceMessage = val[0].ToStr();
                                            int? expressionApplied = null;
                                            foreach (var item in val.Where(c => c.EndsWith("|replacemessage") == false))
                                            {
                                                var str = item.Split(splitArr2);

                                                if (objBooking.GetType().GetProperty(str[0]) != null)
                                                {
                                                    if (objBooking.GetType().GetProperty(str[0]).GetValue(objBooking, null).ToStr() == str[1])
                                                    {
                                                        if (expressionApplied == null)
                                                            expressionApplied = 1;
                                                    }
                                                    else
                                                        expressionApplied = null;

                                                }
                                            }

                                            if (expressionApplied != null && expressionApplied == 1)
                                            {
                                                var replacearr = replaceMessage.Split(splitArr2);

                                                msg = msg.Replace(replacearr[0], replacearr[1]);
                                            }
                                            else
                                            {
                                                propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking, null);
                                            }
                                        }
                                        catch
                                        {
                                            propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking, null);

                                        }

                                    }
                                    else
                                    {

                                        propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking, null);
                                    }



                                }
                            }


                            if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                propertyValue = objBooking.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking, null);
                            }
                            break;


                        case "Booking_ViaLocations":
                            if (tag.TagPropertyValue == "ViaLocValue")
                            {


                                string[] VilLocs = null;
                                int cnt = 1;
                                VilLocs = objBooking.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                if (VilLocs.Count() > 0)
                                {

                                    string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                    propertyValue = Locations;
                                }
                                else
                                    propertyValue = string.Empty;

                            }
                            break;


                        case "driver":


                            if (tag.TagPropertyValue.Contains('.'))
                            {

                                string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                object parentObj = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(val[0]).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);

                                if (parentObj != null)
                                {
                                    propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                }
                                else
                                    propertyValue = string.Empty;


                                break;
                            }

                            else
                            {
                                propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);
                            }

                            if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);
                            }
                            break;


                        case "Fleet_Driver_Image":






                            if (!string.IsNullOrEmpty(tag.TagPropertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                if (objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Images.Count > 0)
                                {
                                    string linkId = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Images[0].PhotoLinkId.ToStr();

                                    if (linkId.ToStr().Length == 0)
                                        propertyValue = " ";
                                    else
                                    {
                                        // propertyValue = "http://cabtreasure.co.uk/drv.aspx?ref=" + objBooking.BookingNo.ToStr() + ":" + linkId;
                                        if (tag.TagMemberValue.ToStr().Trim().ToLower() == "<trackdrv>")
                                        {
                                            string encrypt = Cryptography.Encrypt(objBooking.BookingNo.ToStr() + ":" + linkId + ":" + AppVars.objPolicyConfiguration.ListenerIP.ToStr().Trim() + ":" + objBooking.Id, "softeuroconnskey", true);
                                            propertyValue = Program.objLic.CabTrackUrl.ToStr() + "/tck.aspx?q=" + encrypt;

                                        }
                                        else
                                        {

                                            propertyValue = Program.objLic.CabTrackUrl.ToStr() + "/drv.aspx?ref=" + objBooking.BookingNo.ToStr() + ":" + linkId;
                                        }
                                    }
                                }
                                else
                                    propertyValue = " ";


                                //      propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBooking.Fleet_Driver.DefaultIfEmpty(), null);
                            }
                            break;


                        case "Fleet_Driver_Documents":



                            if (!string.IsNullOrEmpty(tag.TagPropertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {

                                if (tag.TagPropertyValue.Contains("PHC Vehicle"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.PCOVehicle)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();


                                }
                                else if (tag.TagPropertyValue.Contains("PHC Driver"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.PCODriver)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();


                                }
                                else if (tag.TagPropertyValue.Contains("License"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.LICENSE)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();


                                }
                                else if (tag.TagPropertyValue.Contains("Insurance"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.Insurance)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();

                                }
                                else if (tag.TagPropertyValue.Contains("MOT"))
                                {
                                    propertyValue = objBooking.Fleet_Driver.DefaultIfEmpty().Fleet_Driver_Documents.FirstOrDefault(c => c.DocumentId == Enums.DRIVER_DOCUMENTS.MOT)
                                                        .DefaultIfEmpty().BadgeNumber.ToStr();

                                }



                            }
                            break;



                        default:
                            if (objBooking.SubcompanyId == null)
                                propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);
                            else
                                propertyValue = objBooking.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBooking.Gen_SubCompany, null);

                            break;

                    }




                    msg = msg.Replace(tag.TagMemberValue,
                        tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                }


                return msg.Replace("\n\n", "\n");
            }
            catch (Exception ex)
            {
                // ENUtils.ShowMessage(ex.Message);
                return "";
            }
        }


        private void SendSMS(string mobileNo, string message, int smsType)
        {


            string rtnMsg = string.Empty;
            EuroSMS objSMS = new EuroSMS();
            objSMS.Message = message;
            objSMS.BookingSMSAccountType = smsType;

            string mobNo = mobileNo;


            if (Debugger.IsAttached == false)
            {
                if (mobNo.ToStr().StartsWith("00") == false)
                {

                    int idx = -1;
                    if (mobNo.StartsWith("044") == true)
                    {
                        idx = mobNo.IndexOf("044");
                        mobNo = mobNo.Substring(idx + 3);
                        mobNo = mobNo.Insert(0, "+44");
                    }

                    if (mobNo.StartsWith("07"))
                    {
                        mobNo = mobNo.Substring(1);
                    }

                    if (mobNo.StartsWith("044") == false || mobNo.StartsWith("+44") == false)
                        mobNo = mobNo.Insert(0, "+44");
                }
            }

            objSMS.ToNumber = mobNo.Trim();



            objSMS.Send(ref rtnMsg);




        }


        private void SendSMSDrvAndPassenger(string passengerMobileNo, string Passengermessage, string driverMobileNo, string driverMsg, int smsType)
        {


            string rtnMsg = string.Empty;
            EuroSMS objSMS = new EuroSMS();
            objSMS.Message = Passengermessage;
            objSMS.BookingSMSAccountType = smsType;

            string mobNo = passengerMobileNo;


            if (Debugger.IsAttached == false)
            {
                if (mobNo.ToStr().StartsWith("00") == false)
                {

                    int idx = -1;
                    if (mobNo.StartsWith("044") == true)
                    {
                        idx = mobNo.IndexOf("044");
                        mobNo = mobNo.Substring(idx + 3);
                        mobNo = mobNo.Insert(0, "+44");
                    }

                    if (mobNo.StartsWith("07"))
                    {
                        mobNo = mobNo.Substring(1);
                    }

                    if (mobNo.StartsWith("044") == false || mobNo.StartsWith("+44") == false)
                        mobNo = mobNo.Insert(0, "+44");
                }
            }

            objSMS.ToNumber = mobNo.Trim();
            objSMS.Send(ref rtnMsg);



            if (AppVars.enableSMSService == false)
                System.Threading.Thread.Sleep(5000);


            EuroSMS objSMS2 = new EuroSMS();
            objSMS2.Message = driverMsg;

            mobNo = driverMobileNo;

            if (Debugger.IsAttached == false)
            {
                if (mobNo.ToStr().StartsWith("00") == false)
                {

                    int idx = -1;
                    if (mobNo.StartsWith("044") == true)
                    {
                        idx = mobNo.IndexOf("044");
                        mobNo = mobNo.Substring(idx + 3);
                        mobNo = mobNo.Insert(0, "+44");
                    }

                    if (mobNo.StartsWith("07"))
                    {
                        mobNo = mobNo.Substring(1);
                    }

                    if (mobNo.StartsWith("044") == false || mobNo.StartsWith("+44") == false)
                        mobNo = mobNo.Insert(0, "+44");
                }
            }

            objSMS2.ToNumber = mobNo.Trim();
            objSMS2.Send(ref rtnMsg);

        }



        void muteoptionItem_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                if (item.Text.ToLower() == "mute")
                {
                    item.Text = "Un-mute";
                    sp.Stop();
                }
                else
                {
                    item.Text = "Mute";
                    sp.PlayLooping();
                }
            }
            catch
            {

            }
        }



        void optionItem_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == item.Name.ToInt());
                if (row == null)
                    row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == item.Name.ToInt());

                ShowMessageForm(row, item.Name.ToInt());



                if (item.Tag != null && item.Tag is RadDesktopAlert)
                {
                    (item.Tag as RadDesktopAlert).Popup.Tag = null;
                    (item.Tag as RadDesktopAlert).AutoClose = true;
                    (item.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                    (item.Tag as RadDesktopAlert).Hide();
                    (item.Tag as RadDesktopAlert).Dispose();



                }
            }
            catch
            {

            }
        }


        void notify_viewjob_click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                ShowBookingForm(item.Tag.ToInt(), true);
            }
            catch
            {

            }
        }


        void optionItemClose_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement item = (RadButtonElement)sender;

                if (item.Tag != null && item.Tag is RadDesktopAlert)
                {
                    (item.Tag as RadDesktopAlert).Popup.Tag = null;

                    (item.Tag as RadDesktopAlert).AutoClose = true;
                    (item.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                    (item.Tag as RadDesktopAlert).Hide();
                    (item.Tag as RadDesktopAlert).Dispose();
                }
            }
            catch
            {

            }
        }



        private void ShowMessageForm(GridViewRowInfo row, int driverId)
        {
            try
            {

                if (row != null)
                {
                    row.Cells["HasNewMsg"].Tag = null;
                }

                var list = System.Windows.Forms.Application.OpenForms.OfType<Form>().Where(c => c.Name == "frmMessages").ToList();
                foreach (var form in list)
                {
                    form.Close();

                }

                frmMessages frm = new frmMessages(driverId);
                frm.StartPosition = FormStartPosition.CenterScreen;
                frm.Show();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }




        private bool IsPanicMode = false;
        private void PanicMode()
        {

            try
            {
                if (tableLayoutPanel2.ColumnStyles[2].Width > 0)
                {

                    if (grdDriverWaiting.Rows.Any(c => c.Cells["IsPanic"].Value.ToStr() == "Panic")
                || grdOnBoardDriver.Rows.Any(a => a.Cells["IsPanic"].Value.ToStr() == "Panic"))
                    {


                        GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["IsPanic"].Value.ToStr() == "Panic");

                        int panicDriverId = 0;

                        //  string panicDriverNo = string.Empty;

                        if (row != null)
                        {


                            panicDriverId = row.Cells["DriverId"].Value.ToInt();
                            //   panicDriverNo = row.Cells["DriverNo"].Value.ToStr();

                        }



                        if (panicDriverId == 0)
                        {
                            row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["IsPanic"].Value.ToStr() == "Panic");


                            if (row != null)
                            {
                                panicDriverId = row.Cells["DriverId"].Value.ToInt();

                            }
                        }



                        frmPanicAlert alert = Application.OpenForms["frmPanicAlert"] as frmPanicAlert;
                        if (alert != null)
                        {
                            alert.DriverId = panicDriverId;
                            //  alert.driverNo = panicDriverNo;
                            alert.WindowState = FormWindowState.Normal;
                            //  alert.ShowDriversInfo();
                            alert.BringToFront();
                            //  alert.Activate();
                        }
                        else
                        {
                            alert = new frmPanicAlert();
                            // if (IsAlert == false)
                            // {
                            // IsAlert = true;
                            //   alert.driverNo = panicDriverNo;
                            alert.DriverId = panicDriverId;
                            alert.StartPosition = FormStartPosition.CenterScreen;
                            alert.BringToFront();
                            alert.Show();
                            // }
                        }

                        IsPanicMode = true;

                    }

                    else
                    {
                        frmPanicAlert alert = Application.OpenForms["frmPanicAlert"] as frmPanicAlert;
                        if (alert != null)
                        {
                            alert.Close();


                        }


                        IsPanicMode = false;


                    }
                }
            }
            catch (Exception ex)
            {


            }

        }








        private void AddDeleteColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.BestFit();

            col.Name = "btnDelete";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Delete";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);


        }


        private void AddCommandColumn(RadGridView grid, string colName, string caption)
        {

            if (grid.Columns.Contains(colName))
                return;


            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 60;

            col.Name = colName;
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = caption;
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

        }

        DialogResult result;

        private void grid_CommandCellClick(object sender, EventArgs e)
        {
            try
            {

                GridCommandCellElement gridCell = (GridCommandCellElement)sender;


                if (gridCell.ColumnInfo.Name == "btnDelete")
                {
                    string caption = gridCell.GridControl.Name.ToLower().Contains("quotation") ? "Quotation" : "Booking";

                    if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to delete a " + caption + " ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    {
                        RadGridView grid = gridCell.GridControl;
                        if (grid.CurrentRow != null)
                        {
                            grid.CurrentRow.Delete();
                        }
                    }
                }
                else if (gridCell.ColumnInfo.Name == "ColEdit")
                {
                    ViewDetailForm(gridCell.GridControl.CurrentRow);


                }
                else if (gridCell.ColumnInfo.Name == "btnCancel")
                {
                    //if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to cancel this " + "Quotation" + " ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    //{
                    long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                    if (jobId != 0)
                    {
                        string refNo = gridCell.GridControl.CurrentRow.Cells["RefNumber"].Value.ToStr();
                        int BookingTypeId = gridCell.GridControl.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                        string mobileNo = gridCell.GridControl.CurrentRow.Cells["MobileNo"].Value.ToStr();



                        CancelBooking(jobId, refNo, BookingTypeId, mobileNo);

                    }
                    //    }

                }
                else if (gridCell.ColumnInfo.Name == "btnCancelQuotation")
                {
                    if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to cancel this " + "Quotation" + " ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    {
                        long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                        if (jobId != 0)
                        {
                            //  string refNo = gridCell.GridControl.CurrentRow.Cells["RefNumber"].Value.ToStr();
                            //  int BookingTypeId = gridCell.GridControl.CurrentRow.Cells["BookingTypeId"].Value.ToInt();
                            string mobileNo = gridCell.GridControl.CurrentRow.Cells["MobileNo"].Value.ToStr();



                            if (CancelBooking(jobId, "", Enums.BOOKING_TYPES.LOCAL, mobileNo))
                            {

                                gridCell.GridControl.CurrentRow.Delete();
                            }
                        }
                    }

                }
                else if (gridCell.ColumnInfo.Name == "btnJDespatch")
                {
                    long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                    if (jobId != 0)
                    {
                        if (btnDespatchJob.Tag.ToStr() == "future")
                            OnDespatchPreJob(jobId);
                        else
                            OnDespatch(jobId);

                    }

                }

                else if (gridCell.ColumnInfo.Name == "btnConfirm")
                {

                    long jobId = gridCell.GridControl.CurrentRow.Cells["Id"].Value.ToLong();

                    if (jobId != 0)
                    {

                        General.ConfirmQuotation(jobId);

                        RefreshActiveData();

                        //    grdQuotations.RowsChanging -= new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                        //    grdQuotations.RowsChanged -= new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);

                        gridCell.GridControl.CurrentRow.Delete();


                        //    grdQuotations.RowsChanging += new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                        //   grdQuotations.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);
                    }


                }


            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }


        private void UpdateDriversCounter()
        {
            try
            {
                lblOnPlot.Text = "Drivers OnPlot ( Online Drivers : " + (grdDriverWaiting.Rows.Count.ToInt() + grdOnBoardDriver.Rows.Count.ToInt()) + " , Available : " + grdDriverWaiting.Rows.Count + " , OnJob : " + grdOnBoardDriver.Rows.Count + ")";

                //   label3.Text = "Drivers OnBoard - (" + 50 + ")";
                label3.Text = "Drivers OnBoard - (" + grdOnBoardDriver.Rows.Count + ")";
                lblDriverWaiting.Text = "Drivers Waiting - (" + grdDriverWaiting.Rows.Count + ")";
            }
            catch
            {


            }
        }








        List<UM_Form_UserDefinedSetting> hiddenColumnsList = null;


        private void LoadDriversGrid()
        {
            try
            {

                DateTime nowDate = DateTime.Now;
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var list = db.ExecuteQuery<stp_GetDashboardDriversResultEx>("exec stp_GetDashboardDrivers {0}", (AppVars.DefaultDriverSubCompanyId)).OrderBy(c => c.orderno).ToList();


                    //  var list = db.stp_GetDashboardDrivers(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();
                    //    var list = db.ExecuteQuery<stp_GetDashboardDriversResult>("exec stp_GetDashboardDrivers {0},{1}", AppVars.DefaultDriverSubCompanyId, selectedAutoMode).OrderBy(c => c.orderno).ToList();







                    var query = (from a in list
                                 where (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                        || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONBREAK
                                                        || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.FOJ

                                                        || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SINBIN
                                                        )

                                 orderby a.QueueDateTime

                                 select new
                                 {

                                     Id = a.DriverLoginId,
                                     DriverId = a.driverid,
                                     a.VehicleID,
                                     DriverNo = a.driverno,// b.DriverNo,
                                     Name = a.DriverName,// b.DriverName,
                                     Vehicle = a.VehicleType,
                                     CurrentJobId = a.CurrentJobId,
                                     OnJob = a.OnJob,
                                     LoginDate = a.LoginDateTime,
                                     //  OnJob =  a.CurrentDestinationPostCode ,
                                     WorkStatusId = a.driverworkstatusid,
                                     IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                     PDA = "",
                                     HasPDA = a.HasPDA,
                                     BgColor = a.backgroundcolor,
                                     HasNewMsg = "",
                                     a.LoginFrom,
                                     a.ZoneName,
                                     WaitSinceDate = a.WaitSinceOn,
                                     // WaitSinceOn = a.WaitSinceOn != null ? Convert.ToInt32(nowDate.Subtract(a.WaitSinceOn.Value).TotalMinutes) + " mins" : "0 min",
                                     //    a.ZoneName
                                 }).Distinct().ToList();





                    grdDriverWaiting.DataSource = query;


                    //   grdDriverWaiting.CurrentRow = null;
                    //  grdDriverWaiting.HideSelection = true;


                    var query2 = (from a in list
                                  where (
                                    (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE ||
                                 a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
                                  || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ARRIVED
                                  || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONROUTE))
                                  orderby a.QueueDateTime

                                  select new
                                  {
                                      Id = a.DriverLoginId,
                                      DriverId = a.driverid,
                                      a.VehicleID,
                                      DriverNo = a.driverno,// b.DriverNo,
                                      Name = a.DriverName,// b.DriverName,
                                      Vehicle = a.VehicleType,
                                      CurrentJobId = a.CurrentJobId,
                                      //     Pickup=a.ZoneName
                                      OnJob = a.OnJob,
                                      //  OnJob =  a.CurrentDestinationPostCode ,
                                      WorkStatusId = a.driverworkstatusid,
                                      IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                      PDA = "",
                                      HasPDA = a.HasPDA,
                                      BgColor = a.backgroundcolor,
                                      HasNewMsg = "",
                                      a.LoginFrom,
                                      LoginDate = a.LoginDateTime,
                                      a.VehicleTypeId
                                  }).OrderByDescending(item => item.VehicleTypeId).ToList();
                    //  }).OrderBy(item => item.DriverNo, new NaturalSortComparer<string>()).ToList();


                    grdOnBoardDriver.DataSource = query2;

                    FormatOnBoardGrid();




                    //Plot grid



                    if (ShowAllPlots)
                    {

                        if (grdOnPlotDrivers.Columns.Count == 0)
                        {
                            var colList = db.Gen_Zones.Select(args => new { args.OrderNo, args.ShortName }).OrderBy(c => c.OrderNo).ToList();

                            //    colList = colList.Union(listofDriverPlots.Where(c => c.ShortName != "" && c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

                            DataGridViewTextBoxColumn[] cols = (from a in colList

                                                                select new DataGridViewTextBoxColumn
                                                                {

                                                                    //Name = a.ShortName,
                                                                    //HeaderText = a.ShortName,
                                                                    //SortMode = DataGridViewColumnSortMode.NotSortable,

                                                                    //Width = a.ShortName.Length > 8 ? 100 : 50


                                                                    Name = a.ShortName,
                                                                    HeaderText = a.ShortName,
                                                                    SortMode = DataGridViewColumnSortMode.NotSortable,
                                                                    FillWeight = 100,
                                                                    Resizable = DataGridViewTriState.False,
                                                                    Width = a.ShortName.Length > 7 ? 80 : 60,
                                                                    Tag = a.OrderNo
                                                                }).Distinct().ToArray<DataGridViewTextBoxColumn>();



                            grdOnPlotDrivers.Columns.AddRange(cols);

                            //if (grdOnPlotDrivers.Columns.Count > 0)
                            //{
                            //    if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
                            //    {
                            //        grdOnPlotDrivers.Columns.Clear();
                            //        grdOnPlotDrivers.Columns.AddRange(cols);


                            //    }
                            //}
                            //else
                            //{

                            //    grdOnPlotDrivers.Columns.AddRange(cols);
                            //}



                        }


                    }


                    listofDriverPlots = list;
                    PopulatePlotsDriversGrid();


                    UpdateDriverWaitingSince();



                    if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool() == false)
                    {

                        var listofDriverPricePlot = db.stp_GetPricePlotDrivers(AppVars.DefaultDriverSubCompanyId).ToList();
                        var colList2 = listofDriverPricePlot.Where(c => c.PricePlotId != 0).Select(args => new { args.PricePlot, args.PricePlotId }).Distinct();



                        DataGridViewTextBoxColumn[] cols2 = (from a in colList2

                                                             select new DataGridViewTextBoxColumn
                                                             {

                                                                 Name = a.PricePlot.ToStr().Replace(" ", ""),
                                                                 HeaderText = a.PricePlot,
                                                                 SortMode = DataGridViewColumnSortMode.NotSortable,
                                                                 FillWeight = 100,
                                                                 Resizable = DataGridViewTriState.False,
                                                                 Width = 60,
                                                                 Tag = a.PricePlotId
                                                             }).Distinct().ToArray<DataGridViewTextBoxColumn>();




                        grdDriverPricePlot.Columns.Clear();
                        grdDriverPricePlot.Columns.AddRange(cols2);

                        grdDriverPricePlot.Rows.Clear();
                        for (int i = 0; i < 40; i++)
                        {
                            grdDriverPricePlot.Rows.Add();
                        }

                        int rowCnt = 0;
                        for (int i = 0; i < grdDriverPricePlot.Columns.Count; i++)
                        {
                            rowCnt = 0;
                            foreach (var itemX in listofDriverPricePlot.Where(c => c.DriverId != null
                                                                && c.driverworkstatusid != null &&
                                                                        c.PricePlot == grdDriverPricePlot.Columns[i].HeaderText).OrderBy(c => c.QueueDateTime))
                            {
                                grdDriverPricePlot.Rows[rowCnt].Cells[grdDriverPricePlot.Columns[i].Name.ToStr()].Value = itemX.DriverNo;
                                grdDriverPricePlot.Rows[rowCnt].Cells[grdDriverPricePlot.Columns[i].Name.ToStr()].Tag = itemX.backgroundcolor;
                                grdDriverPricePlot.Rows[rowCnt].Cells[grdDriverPricePlot.Columns[i].Name.ToStr()].ErrorText = itemX.DriverId.ToStr();
                                rowCnt++;
                            }

                        }

                        grdDriverPricePlot.Dock = DockStyle.Fill;
                        grdDriverPricePlot.BringToFront();
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }


        public void ShowBookingAdvanceStats()
        {
            if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
            {

                frmBookingStats frmStats = new frmBookingStats(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());
                frmStats.StartPosition = FormStartPosition.CenterScreen;
                frmStats.ShowDialog();
                frmStats.Dispose();
            }
        }


        List<UM_Form_UserDefinedSetting> listofSearchTabSettings = null;
        private bool ShowPendingJobOnRecentTab = false;

        System.Windows.Forms.Timer tmrAutoRefresh = null;
        List<Gen_Location> listofAirports = null;
        private bool onboardjobs = true;

        int attributesColIndex = 0;

        private void MoveAttributesColumn(int index = 0)
        {

            if (attributesColIndex == 0)
                attributesColIndex = index;


            if (grdPendingJobs.Columns["Attributes"].IsVisible)
            {
                if (attributesColIndex == 0)
                    grdPendingJobs.Columns.Move(grdPendingJobs.Columns["Attributes"].Index, grdPendingJobs.Columns["SpecialReq"].Index + 1);
                else
                    grdPendingJobs.Columns.Move(grdPendingJobs.Columns["Attributes"].Index, grdPendingJobs.Columns["Account"].Index + 1);

                //grdPendingJobs.Columns.Move(grdPendingJobs.Columns["Attributes"].Index, grdPendingJobs.Columns["Account"].Index + 1);


            }
        }


        private bool ShowAllPlots = false;

        void frmBookingsList_Load(object sender, EventArgs e)
        {


            try
            {

                try
                {
                    this.InitializeForm("frmBooking");
                }
                catch
                {


                }




                ShowAllPlots = AppVars.listUserRights.Count(c => c.functionId == "SHOW ALL PLOTS") > 0;


                if (AppVars.listUserRights.Count(c => c.functionId == "REDUCE DRIVER NO FONT AS NORMAL") > 0)
                    bigFont = oldFont;

                LoadDriversGrid();


                GridViewTextBoxColumn colWS = new GridViewTextBoxColumn();
                colWS.HeaderText = "W/S";
                colWS.Width = 35;
                colWS.Name = "WaitSinceOn";
                grdDriverWaiting.Columns.Add(colWS);


                AddClearJobColumn(grdDriverWaiting);
                //}
                grdDriverWaiting.ShowFilteringRow = false;

                chkShowAuthorization.Checked = true;
                grdDriverWaiting.Columns["btnClearJob"].IsVisible = !EnablePDA;

                grdDriverWaiting.Columns["BgColor"].IsVisible = false;
                grdDriverWaiting.Columns["HasPDA"].IsVisible = false;
                grdDriverWaiting.Columns["PDA"].IsVisible = false;
                grdDriverWaiting.Columns["IsPanic"].IsVisible = false;
                grdDriverWaiting.Columns["WorkStatusId"].IsVisible = false;
                grdDriverWaiting.Columns["LoginDate"].IsVisible = false;
                grdDriverWaiting.Columns["DriverId"].IsVisible = false;
                grdDriverWaiting.Columns["Id"].IsVisible = false;
                grdDriverWaiting.Columns["Name"].IsVisible = false;
                grdDriverWaiting.Columns["HasNewMsg"].IsVisible = false;

                grdDriverWaiting.Columns["DriverNo"].HeaderText = "No";
                //   grdDriverWaiting.Columns["PDA"].HeaderText = "";
                grdDriverWaiting.Columns["LoginFrom"].IsVisible = false;
                grdDriverWaiting.Columns["CurrentJobId"].IsVisible = false;
                grdDriverWaiting.Columns["WaitSinceDate"].IsVisible = false;

                grdDriverWaiting.Columns["VehicleID"].IsVisible = false;

                grdDriverWaiting.Columns["WaitSinceOn"].HeaderText = "W/S";
                // }
                grdDriverWaiting.Columns["ZoneName"].HeaderText = "Plot";
                //   grdDriverWaiting.Columns["ZoneName"].Width = 35;
                //  grdDriverWaiting.Columns["ZoneName"].HeaderText = "Plot";
                //      UpdateDriverWaitingSince();


                grdOnBoardDriver.ShowFilteringRow = false;
                grdOnBoardDriver.Columns["CurrentJobId"].IsVisible = false;
                grdOnBoardDriver.Columns["HasNewMsg"].IsVisible = false;
                grdOnBoardDriver.Columns["BgColor"].IsVisible = false;
                grdOnBoardDriver.Columns["IsPanic"].IsVisible = false;
                grdOnBoardDriver.Columns["WorkStatusId"].IsVisible = false;
                grdOnBoardDriver.Columns["DriverId"].IsVisible = false;
                grdOnBoardDriver.Columns["Id"].IsVisible = false;
                grdOnBoardDriver.Columns["Name"].IsVisible = false;
                grdOnBoardDriver.Columns["HasPDA"].IsVisible = false;
                grdOnBoardDriver.Columns["LoginDate"].IsVisible = false;

                grdOnBoardDriver.Columns["VehicleID"].IsVisible = false;

                grdOnBoardDriver.Columns["DriverNo"].HeaderText = "No";
                //   grdOnBoardDriver.Columns["PDA"].HeaderText = "";

                grdOnBoardDriver.Columns["LoginFrom"].IsVisible = false;

                grdOnBoardDriver.Columns["VehicleTypeId"].IsVisible = false;





                FormatOnBoardGrid();

                if (AppVars.listUserRights != null && AppVars.listUserRights.Count(c => c.functionId == "DISABLE ONBOARD DRIVER JOBDETAILS") > 0)
                {
                    onboardjobs = false;
                    grdOnBoardDriver.Columns["OnJob"].IsVisible = false;
                }






                grdDriverWaiting.Columns["Vehicle"].HeaderText = "Veh";
                grdDriverWaiting.Columns["Vehicle"].Width = 50;
                grdDriverWaiting.Columns["DriverNo"].Width = 30;
                grdDriverWaiting.Columns["OnJob"].IsVisible = false;




                grdDriverWaiting.Columns["WaitSinceOn"].Width = 35;
                //  grdDriverWaiting.Columns["ZoneName"].IsVisible = false;


                grdDriverWaiting.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
                grdDriverWaiting.AllowAutoSizeColumns = true;







                if (AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "SHOW PRE-BOOKING REPORT") > 0)
                {
                    if (grdPreBookings.Columns.Contains("Check") == false)
                    {
                        GridViewCheckBoxColumn col = new GridViewCheckBoxColumn();
                        col.Width = 40;
                        col.AutoSizeMode = BestFitColumnMode.None;
                        col.HeaderText = "";
                        col.Name = "Check";
                        // col.IsPinned = true;
                        col.ReadOnly = false;
                        col.IsVisible = false;
                        grdPreBookings.Columns.Add(col);
                    }

                }
                else
                {
                    btnPrintSelected.Visible = false;
                    grdPreBookings.AllowEditRow = false;
                }

                DaysInTodayBooking = AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt();


                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {
                    GridMethods.SetFilter(grdQuotations);
                    grdQuotations.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);

                    grdQuotations.ShowGroupPanel = false;
                    grdQuotations.ShowRowHeaderColumn = false;
                    grdQuotations.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;

                    grdQuotations.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                    // grdQuotations.RowsChanged += new GridViewCollectionChangedEventHandler(GridJobs_RowsChanged);
                    //  grdQuotations.RowsChanging += new GridViewCollectionChangingEventHandler(Grid_RowsChanging);
                    chkQuotation.Visible = true;
                }
                else
                {
                    radPageView1.Pages[5].Item.Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                }




                EnableAutoDespatchMode = AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool();
                EnableBiddingMode = AppVars.objPolicyConfiguration.EnableBidding.ToBool();
                ShowPendingJobOnRecentTab = AppVars.objPolicyConfiguration.ShowPendingJobsOnRecentTab.ToBool();



                if (AppVars.listUserRights.Count(c => c.functionId == "PRE-BOOKING DUE ALERT NOTIFICATION") > 0)
                {
                    checkPreBookingDueAlert = true;

                }

                if (AppVars.listUserRights.Count(c => c.functionId == "RE-SYNC-MIDNIGHT BOOKINGS") > 0)
                {
                    reSyncMidnightBookings = true;

                }



                try
                {

                    AppVars.ShowAllocatedConfirmedDriver = db.ExecuteQuery<string>("select SetVal from appsettings where setkey='ShowAllocatedConfirmedDriverTick'").FirstOrDefault().ToStr().ToBool();
                }
                catch
                {
                    AppVars.ShowAllocatedConfirmedDriver = false;
                }

                PopulateData();

                AddCommandColumn(grdPendingJobs, "btnJDespatch", "Dispatch");

                if (AppVars.IsTelephonist)
                {
                    grdPendingJobs.Columns["btnJDespatch"].IsVisible = false;
                    btnDespatchJob.Visible = false;
                }

                // if (this.CanDelete)
                // {
                //  //   AddDeleteColumn(grdPendingJobs);
                //  //   AddDeleteColumn(grdPreBookings);
                // //    AddDeleteColumn(grdAllJobs);

                ////     grdPendingJobs.Columns["btnDelete"].Width = 60;
                ////     grdPendingJobs.Columns["btnDelete"].IsVisible = false;
                //  //   grdPreBookings.Columns["btnDelete"].IsVisible = false;
                // //    grdAllJobs.Columns["btnDelete"].IsVisible = false;
                // }


                if (AppVars.listUserRights.Count(c => c.formName == "frmBookingDashBoard" && c.functionId == "QUOTATION DELETE") > 0)
                {
                    AddDeleteColumn(grdQuotations);

                }

                //    UI.GridFunctions.SetFilter(grdAllJobs);
                //   UI.GridFunctions.SetFilter(grdPreBookings);              
                //  UI.GridFunctions.SetFilter(grdPendingJobs);


                GridMethods.SetFilter(grdAllJobs);
                GridMethods.SetFilter(grdPreBookings);
                GridMethods.SetFilter(grdPendingJobs);


                grdPendingJobs.CurrentRow = null;
                grdPendingJobs.AllowEditRow = false;
                grdPreBookings.AllowEditRow = false;

                grdPendingJobs.MasterTemplate.Caption = "grdPendingJobs";
                grdPreBookings.MasterTemplate.Caption = "grdPreBookings";
                grdAllJobs.MasterTemplate.Caption = "grdAllJobs";



                hiddenColumnsList = General.GetQueryable<UM_Form_UserDefinedSetting>(c => c.UM_Form.FormName == this.Name && (c.IsVisible == false || c.GridColMoveTo != null)).ToList();

                listofSearchTabSettings = hiddenColumnsList.Where(c => c.FormTab == "search").ToList();

                hiddenColumnsList.RemoveAll(c => c.FormTab == "search");
                // Today's Booking Grid Hide Columns

                grdPendingJobs.Columns["Vias"].IsVisible = false;
                grdPreBookings.Columns["Vias"].IsVisible = false;
                grdAllJobs.Columns["Vias"].IsVisible = false;


                grdPendingJobs.Columns["DropOffPlot"].IsVisible = false;
                grdPreBookings.Columns["DropOffPlot"].IsVisible = false;
                grdAllJobs.Columns["DropOffPlot"].IsVisible = false;


                grdPendingJobs.Columns["VehicleID"].IsVisible = false;
                grdPreBookings.Columns["VehicleID"].IsVisible = false;
                grdAllJobs.Columns["VehicleID"].IsVisible = false;


                //grdPendingJobs.Columns["Total"].IsVisible = false;
                grdPendingJobs.Columns["OrderNo"].IsVisible = false;
               // grdPendingJobs.Columns["Fare"].IsVisible = false;

                hiddenColumnsList = hiddenColumnsList.OrderBy(c => c.GridColMoveTo).ToList();


                int? prioOrder = null;
                int autoDispatchMode = AppVars.objPolicyConfiguration.AutoDespatchType.ToInt();
                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {


                    if (hiddenColumnsList[i].GridColumnName == "DropOffPlot")
                    {

                    }

                    if (grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {

                        if (autoDispatchMode == 5 && hiddenColumnsList[i].GridColumnName == "MilesFromBase")
                        {

                            // grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = true;
                            grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].HeaderText = hiddenColumnsList[i].HeaderText.ToStr();
                            prioOrder = hiddenColumnsList[i].GridColMoveTo;
                        }
                        else
                        {




                            grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                            if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                            {
                                grdPendingJobs.Columns.Move(grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                            }
                        }
                    }

                }



                grdPendingJobs.Columns["Lead"].Width = 40;
                (grdPendingJobs.Columns["Lead"] as GridViewDateTimeColumn).CustomFormat = "HH:mm";
                (grdPendingJobs.Columns["Lead"] as GridViewDateTimeColumn).FormatString = "{0:HH:mm}";


                grdPendingJobs.Columns["NoofLuggages"].IsVisible = false;

                grdPendingJobs.Columns["Vias"].Width = 30;

                grdPendingJobs.Columns["TelephoneNo"].IsVisible = false;
                grdPendingJobs.Columns["Due"].IsVisible = false;
                grdPendingJobs.Columns["JourneyTypeId"].IsVisible = false;
                grdPendingJobs.Columns["VehicleDetails"].IsVisible = false;








                grdPendingJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                grdPendingJobs.Columns["PickUpDate"].HeaderText = "Date";
                grdPendingJobs.Columns["RefNumber"].HeaderText = "Ref #";
                grdPendingJobs.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                grdPendingJobs.Columns["HasNotesImg"].HeaderText = "";
                grdPendingJobs.Columns["Driver"].HeaderText = "Drv";
                grdPendingJobs.Columns["Account"].HeaderText = "A/C";

                grdPendingJobs.Columns["From"].HeaderText = "Pickup Point";
                grdPendingJobs.Columns["FromPostCode"].HeaderText = "Area";
                grdPendingJobs.Columns["ToPostCode"].HeaderText = "Area";

                grdPendingJobs.Columns["To"].HeaderText = "Destination";
                grdPendingJobs.Columns["Pax"].HeaderText = "No of Pas";



                grdPendingJobs.Columns["Vehicle"].HeaderText = "Veh";
                grdPendingJobs.Columns["UpdateBy"].HeaderText = "Update By";
                grdPendingJobs.Columns["Fare"].HeaderText = "Fare(£)";
                grdPendingJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                grdPendingJobs.Columns["PReference"].HeaderText = "Pay Ref";
                grdPendingJobs.Columns["GroupId"].HeaderText = "Token #";


                grdPendingJobs.Columns["DropOffPlot"].HeaderText = "D. Plot";
                grdPendingJobs.Columns["DropOffPlot"].Width = 60;



                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd:MM:yyyy HH:mm";
                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd:MM:yyyy HH:mm}";



                GridViewTextBoxColumn colTimeLeft = new GridViewTextBoxColumn();
                colTimeLeft.HeaderText = "T/L";
                colTimeLeft.Name = "TimeLeft";
                colTimeLeft.Width = 30;
                colTimeLeft.ReadOnly = true;
                colTimeLeft.IsVisible = false;
                //  colTimeLeft.AllowFiltering = false;
                //  colTimeLeft.AllowSort = false;

                //  colTimeLeft.IsVisible = false;
                grdPendingJobs.Columns.Add(colTimeLeft);
                grdPendingJobs.Columns.Move(grdPendingJobs.Columns[colTimeLeft.Name].Index, 0);


                if (prioOrder != null)
                {

                    grdPendingJobs.Columns["MilesFromBase"].IsVisible = true;
                    grdPendingJobs.Columns["MilesFromBase"].HeaderText = "Prio";
                    grdPendingJobs.Columns["MilesFromBase"].Width = 30;
                    (grdPendingJobs.Columns["MilesFromBase"] as GridViewDecimalColumn).DecimalPlaces = 0;
                    (grdPendingJobs.Columns["MilesFromBase"] as GridViewDecimalColumn).FormatString = "{0:f0}";


                    grdPendingJobs.Columns.Move(grdPendingJobs.Columns["MilesFromBase"].Index, prioOrder.ToInt());
                }
                else
                {
                    grdPendingJobs.Columns["MilesFromBase"].IsVisible = false;


                }

                MoveAttributesColumn(hiddenColumnsList.FirstOrDefault(c => c.GridColumnName == "Attributes").DefaultIfEmpty().GridColMoveTo.ToInt());
                //    if(grdPendingJobs.Columns["Attributes"].IsVisible)
                //     grdPendingJobs.Columns.Move(grdPendingJobs.Columns["Attributes"].Index, grdPendingJobs.Columns["SpecialReq"].Index + 1);



                grdPreBookings.Columns["Total"].IsVisible = false;
                grdPreBookings.Columns["OrderNo"].IsVisible = false;




                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {

                    if (grdPreBookings.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {
                        grdPreBookings.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdPreBookings.Columns.Move(grdPreBookings.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }
                }


                //     grdPreBookings.Columns["Lead"].IsVisible = true;
                grdPreBookings.Columns["Lead"].Width = 40;
                (grdPreBookings.Columns["Lead"] as GridViewDateTimeColumn).CustomFormat = "HH:mm";
                (grdPreBookings.Columns["Lead"] as GridViewDateTimeColumn).FormatString = "{0:HH:mm}";

                grdPreBookings.Columns["NoofLuggages"].IsVisible = false;

                grdPreBookings.Columns["Vias"].Width = 30;

                grdPreBookings.Columns["TelephoneNo"].IsVisible = false;
                grdPreBookings.Columns["Due"].IsVisible = false;
                grdPreBookings.Columns["JourneyTypeId"].IsVisible = false;
                grdPreBookings.Columns["VehicleDetails"].IsVisible = false;
                grdPreBookings.Columns["Attributes"].IsVisible = false;
                grdPreBookings.Columns["HasNotesImg"].HeaderText = "";
                grdPreBookings.Columns["BookingDateTime"].HeaderText = "Booking Date";

                grdPreBookings.Columns["PickUpDate"].HeaderText = "Date";
                (grdPreBookings.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdPreBookings.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

                grdPreBookings.Columns["UpdateBy"].HeaderText = "Update By";
                grdPreBookings.Columns["Driver"].HeaderText = "Drv";
                grdPreBookings.Columns["RefNumber"].HeaderText = "Ref #";
                grdPreBookings.Columns["From"].HeaderText = "Pickup Point";
                grdPreBookings.Columns["To"].HeaderText = "Destination";
                grdPreBookings.Columns["Pax"].HeaderText = "No of Pas";


                grdPreBookings.Columns["FromPostCode"].HeaderText = "Area";
                grdPreBookings.Columns["ToPostCode"].HeaderText = "Area";

                grdPreBookings.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                grdPreBookings.Columns["Account"].HeaderText = "A/C";
                grdPreBookings.Columns["Vehicle"].HeaderText = "Veh";
                grdPreBookings.Columns["MobileNo"].HeaderText = "Tel. No";
                grdPreBookings.Columns["PReference"].HeaderText = "Pay Ref";
                grdPreBookings.Columns["GroupId"].HeaderText = "Token #";

                grdPreBookings.Columns["Driver"].Width = 70;
                grdPreBookings.Columns["Time"].Width = 50;
                grdPreBookings.Columns["BookingDateTime"].Width = 120;
                grdPreBookings.Columns["PickUpDate"].Width = 50;
                grdPreBookings.Columns["Plot"].Width = 50;
                grdPreBookings.Columns["UpdateBy"].Width = 50;
                grdPreBookings.Columns["Status"].Width = 40;
                grdPreBookings.Columns["Driver"].Width = 40;
                grdPreBookings.Columns["RefNumber"].Width = 60;
                grdPreBookings.Columns["Fare"].Width = 50;
                grdPreBookings.Columns["SpecialReq"].Width = 80;


                grdPendingJobs.Columns["Vehicle"].Width = 40;

                grdPreBookings.Columns["Passenger"].Width = 60;
                grdPreBookings.Columns["MobileNo"].Width = 90;
                grdPreBookings.Columns["From"].Width = 160;
                grdPreBookings.Columns["To"].Width = 150;
                grdPreBookings.Columns["Pax"].Width = 50;
                grdPreBookings.Columns["PaymentMethod"].Width = 60;
                grdPreBookings.Columns["Account"].Width = 60;

                grdPreBookings.Columns["FromPostCode"].Width = 80;
                grdPreBookings.Columns["ToPostCode"].Width = 80;

                grdPreBookings.Columns["Pickup"].Width = 155;
                grdPreBookings.Columns["GoingTo"].Width = 155;

                grdPreBookings.Columns["PReference"].Width = 70;
                grdPreBookings.Columns["GroupId"].Width = 60;


                grdPreBookings.Columns["DropOffPlot"].HeaderText = "D. Plot";
                grdPreBookings.Columns["DropOffPlot"].Width = 60;

                grdPreBookings.Columns["Total"].Width = 50;
                grdPreBookings.Columns["Total"].HeaderText = "Fares(£)";


                grdPreBookings.Columns["OrderNo"].Width = 50;
                grdPreBookings.Columns["OrderNo"].HeaderText = "Order No";


                //  grdPreBookings.Columns.Move(grdPreBookings.Columns["Passenger"].Index, 16);
                //  grdPreBookings.Columns.Move(grdPreBookings.Columns["MobileNo"].Index, 32);

                //



                // All Jobs Grid Settings
                grdAllJobs.Columns["Total"].IsVisible = false;
                grdAllJobs.Columns["OrderNo"].IsVisible = false;
                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {
                    if (grdAllJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {

                        grdAllJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdAllJobs.Columns.Move(grdAllJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }
                }


                grdAllJobs.Columns["Lead"].IsVisible = false;

                grdAllJobs.Columns["NoofLuggages"].IsVisible = false;

                grdAllJobs.Columns["Vias"].Width = 30;

                grdAllJobs.Columns["TelephoneNo"].IsVisible = false;
                grdAllJobs.Columns["Due"].IsVisible = false;
                grdAllJobs.Columns["JourneyTypeId"].IsVisible = false;
                grdAllJobs.Columns["Attributes"].IsVisible = false;

                grdAllJobs.Columns["HasNotesImg"].HeaderText = "";
                grdAllJobs.Columns["Driver"].HeaderText = "Drv";
                grdAllJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                grdAllJobs.Columns["PickUpDate"].HeaderText = "Date";
                grdAllJobs.Columns["UpdateBy"].HeaderText = "Update By";
                grdAllJobs.Columns["RefNumber"].HeaderText = "Ref #";
                grdAllJobs.Columns["From"].HeaderText = "Pickup Point";
                grdAllJobs.Columns["To"].HeaderText = "Destination";
                grdAllJobs.Columns["Pax"].HeaderText = "No of Pas";
                grdAllJobs.Columns["Vehicle"].HeaderText = "Veh";
                grdAllJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                grdAllJobs.Columns["FromPostCode"].HeaderText = "Area";
                grdAllJobs.Columns["ToPostCode"].HeaderText = "Area";
                grdAllJobs.Columns["PReference"].HeaderText = "Pay Ref";
                grdAllJobs.Columns["GroupId"].HeaderText = "Token #";


                (grdAllJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdAllJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

                if (grdAllJobs.Columns["VehicleDetails"].IsVisible)
                {
                    grdAllJobs.Columns["VehicleDetails"].HeaderText = "Vehicle Details";
                    grdAllJobs.Columns.Move(grdAllJobs.Columns["VehicleDetails"].Index, grdAllJobs.Columns["Driver"].Index + 1);


                }



                grdAllJobs.Columns["DropOffPlot"].HeaderText = "D. Plot";


                //  grdAllJobs.Columns.Move(grdAllJobs.Columns["Passenger"].Index, 16);
                //  grdAllJobs.Columns.Move(grdAllJobs.Columns["MobileNo"].Index, 32);

                FormatRecentJobsGrid();

                ClearSearchByDateFilter();

                grdRecentJobs.ShowRowHeaderColumn = false;

                UI.GridFunctions.SetFilter(grdRecentJobs);
                //
                grdRecentJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdRecentJobs_ContextMenuOpening);




                timer1.Start();
                timer1.Tick += new EventHandler(timer1_Tick);


                ddlColumns.Items.Add("Reference");
                ddlColumns.Items.Add("Passenger");
                ddlColumns.Items.Add("Telephone No");
                ddlColumns.Items.Add("Mobile No");

                ddlColumns.SelectedIndex = 0;

                InitializeWorker();






                if (desktopAlert != null)
                    desktopAlert.Popup.Click += new EventHandler(Popup_Click);


                //if (AppVars.ShowAllBookings.ToBool())
                //{
                //    ddlSubCompany.Visible = true;
                //    foreach (var item in General.GetQueryable<Gen_SubCompany>(null).Select(args => new { args.BackgroundColor, args.CompanyName }).ToList())
                //    {
                //        ddlSubCompany.Items.Add(new RadListDataItem { Text = item.CompanyName, Value = item.BackgroundColor });
                //    }

                //    if (ddlSubCompany.Items.Count == 1)
                //        ddlSubCompany.Visible = false;
                //    else
                //    {
                //        ddlSubCompany.Items.Insert(0, new RadListDataItem { Text = "Show All Subcompanies", Value = 0, Font = new Font("Tahoma", 10, FontStyle.Bold), ForeColor = Color.Black });
                //        ddlSubCompany.SelectedIndex = 0;

                //        ddlSubCompany.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlSubCompany_SelectedIndexChanged);
                //    }
                //}

                if (AppVars.ShowAllBookings.ToBool())
                {
                    ddlSubCompany.Visible = true;
                    foreach (var item in General.GetQueryable<Gen_SubCompany>(null).Select(args => new { args.BackgroundColor, args.CompanyName, args.Id }).ToList())
                    {
                        ddlSubCompany.Items.Add(new RadCustomListDataItem { Text = item.CompanyName, Value = item.BackgroundColor, Tag = item.Id });
                    }

                    if (ddlSubCompany.Items.Count == 1)
                    {
                        ddlSubCompany.Visible = false;
                    }
                    else
                    {
                        ddlSubCompany.Items.Insert(0, new RadCustomListDataItem { Text = "Show All Data", Value = 0, Font = new Font("Tahoma", 10, FontStyle.Bold), ForeColor = Color.Black });
                        ddlSubCompany.SelectedIndex = 0;
                        //  ddlSubCompany.DropDownStyle = RadDropDownStyle.DropDownList;
                        ddlSubCompany.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlSubCompany_SelectedIndexChanged);
                    }

                }
                else
                {
                    if (AppVars.DefaultBookingSubCompanyId > 0)
                    {
                        foreach (var item in General.GetQueryable<Gen_SubCompany>(null).Select(args => new { args.BackgroundColor, args.CompanyName, args.Id }).ToList())
                        {
                            ddlSubCompany.Items.Add(new RadCustomListDataItem { Text = item.CompanyName, Value = item.BackgroundColor, Tag = item.Id });
                        }


                        ddlSubCompany.Items.Insert(0, new RadCustomListDataItem { Text = "Show All Data", Value = 0, Font = new Font("Tahoma", 10, FontStyle.Bold), ForeColor = Color.Black });

                        //  ddlSubCompany.DropDownStyle = RadDropDownStyle.DropDownList;
                        ddlSubCompany.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlSubCompany_SelectedIndexChanged);
                        ddlSubCompany.SelectedItem = ddlSubCompany.Items.OfType<RadCustomListDataItem>().FirstOrDefault(c => c.Tag.ToInt() == AppVars.DefaultBookingSubCompanyId);

                        ddlSubCompany.Visible = false;
                    }
                }




                if (AppVars.listUserRights != null && AppVars.listUserRights.Count(c => c.functionId == "DISABLE BOOKING STATS") > 0)
                {
                    Pg_DrvBookingStats.Item.Visibility = ElementVisibility.Collapsed;

                }



                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool() == false)
                {

                    Pg_Quotations.Item.Visibility = ElementVisibility.Collapsed;

                }


                    ((GridTableElement)this.grdPendingJobs.TableElement).CurrentRowHeaderImage = null;


                driverloginlogoutNotification = (AppVars.listUserRights.Count(c => c.functionId == "DRIVER LOGIN/LOGOUT NOTIFICATION") > 0);



                if (AppVars.listUserRights.Count(c => c.functionId == "FUTURE JOB AS DEFAULT DESPATCH BUTTON") > 0)
                {
                    btnDespatchJob.Text = "Despatch PreJob";
                    btnDespatchJob.Tag = "future";
                    btnDespatchJob.Location = new Point(btnDespatchJob.Location.X + 30, btnDespatchJob.Location.Y);
                    btnDespatchJob.Size = new Size(btnDespatchJob.Size.Width + 50, btnDespatchJob.Size.Height);
                    btnShowMap.Visible = false;
                }




                this.grdPendingJobs.EnableHotTracking = false;
                this.grdPreBookings.EnableHotTracking = false;
                this.grdAllJobs.EnableHotTracking = false;
                this.grdRecentJobs.EnableHotTracking = false;
                this.grdNoShowJobs.EnableHotTracking = false;
                this.grdCancelledJobs.EnableHotTracking = false;
                this.grdQuotations.EnableHotTracking = false;
                this.grdStats.EnableHotTracking = false;

                InitializeShuttle();



                grdDriverWaiting.Columns["DriverNo"].IsVisible = AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool() == false;

                if (grdDriverWaiting.Columns["DriverNo"].IsVisible == false)
                {
                    grdOnBoardDriver.Columns["DriverNo"].IsVisible = false;

                    grdDriverWaiting.Columns["VehicleID"].IsVisible = true;
                    grdOnBoardDriver.Columns["VehicleID"].IsVisible = true;
                    grdDriverWaiting.Columns["VehicleID"].Width = 40;
                    grdOnBoardDriver.Columns["VehicleID"].Width = 40;


                    grdDriverWaiting.Columns["VehicleID"].HeaderText = "Veh";
                    grdDriverWaiting.Columns["Vehicle"].HeaderText = "";

                    grdOnBoardDriver.Columns["VehicleID"].HeaderText = "Veh";
                    grdOnBoardDriver.Columns["Vehicle"].HeaderText = "";


                    grdDriverWaiting.Columns["ZoneName"].Width = 35;


                    grdPendingJobs.Columns["Driver"].IsVisible = false;
                    grdPreBookings.Columns["Driver"].IsVisible = false;
                    grdAllJobs.Columns["Driver"].IsVisible = false;


                    grdPendingJobs.Columns["VehicleID"].IsVisible = true;
                    grdPreBookings.Columns["VehicleID"].IsVisible = true;
                    grdAllJobs.Columns["VehicleID"].IsVisible = true;

                    grdPendingJobs.Columns["VehicleID"].Width = grdPendingJobs.Columns["Driver"].Width;
                    grdPreBookings.Columns["VehicleID"].Width = grdPendingJobs.Columns["Driver"].Width;
                    grdAllJobs.Columns["VehicleID"].Width = grdPendingJobs.Columns["Driver"].Width;
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void DdlJobsSortBy_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            if (ddlJobsSortBy.SelectedIndex == 0)
                JobsSortBy = 0;
            else if (ddlJobsSortBy.SelectedIndex == 1)
                JobsSortBy = 1;
            else if (ddlJobsSortBy.SelectedIndex == 2)
                JobsSortBy = 2;


            var list = (List<stp_GetBookingsDataResult>)grdPendingJobs.DataSource;

            if (JobsSortBy == 0)
            {
                listofTodaysBooking = list.OrderBy(c => c.Lead).ToList();
            }
            else if (JobsSortBy == 1)
            {
                listofTodaysBooking = list.OrderBy(c => c.PickupDateTemp).ToList();
            }
            else if (JobsSortBy == 2)
            {
                var listA = list.OrderBy(c => c.Lead).ToList();


                List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                foreach (var item in listA)
                {
                    if (listB.Count(c => c.Plot == item.Plot) == 0)
                        listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());



                }
                listofTodaysBooking = listB;

            }

            PopulateSerTodayJobsGrids("");


        }

        private void InitializeShuttle()
        {

            if (AppVars.listUserRights.Count(c => c.formName == "frmTrip") > 0)
            {
                this.btnShuttle = new RadButton();

                ((System.ComponentModel.ISupportInitialize)(this.btnShuttle)).BeginInit();
                this.pnlActions.Controls.Add(this.btnShuttle);
                //    this.btnShuttle.Image = global::Taxi_AppMain.Properties.Resources.icon_email_png;
                this.btnShuttle.Location = new System.Drawing.Point(btnOption.Location.X + 160, 5);
                this.btnShuttle.Name = "btnShuttle";
                this.btnShuttle.Size = new System.Drawing.Size(110, 30);
                this.btnShuttle.TabIndex = 14;
                this.btnShuttle.Tag = "";
                this.btnShuttle.Text = "Shuttle";
                this.btnShuttle.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                this.btnShuttle.Click += new System.EventHandler(this.btnShuttle_Click);
                //  ((Telerik.WinControls.UI.RadButtonElement)(this.btnEmail.GetChildAt(0))).Image = global::Taxi_AppMain.Properties.Resources.icon_email_png;
                ((Telerik.WinControls.UI.RadButtonElement)(this.btnShuttle.GetChildAt(0))).TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;
                ((Telerik.WinControls.UI.RadButtonElement)(this.btnShuttle.GetChildAt(0))).Text = "Shuttle";
                ((Telerik.WinControls.UI.RadButtonElement)(this.btnShuttle.GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShuttle.GetChildAt(0).GetChildAt(1).GetChildAt(1))).TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                ((Telerik.WinControls.Primitives.TextPrimitive)(this.btnShuttle.GetChildAt(0).GetChildAt(1).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                ((Telerik.WinControls.Primitives.BorderPrimitive)(this.btnShuttle.GetChildAt(0).GetChildAt(2))).Width = 1F;


                ((System.ComponentModel.ISupportInitialize)(this.btnShuttle)).EndInit();
            }
        }

        //string filterExpression = string.Empty;
        //void grdPendingJobs_FilterChanged(object sender, GridViewCollectionChangedEventArgs e)
        //{
        //    if (e.Action != NotifyCollectionChangedAction.Remove)
        //    {
        //        foreach (FilterDescriptor fd in e.NewItems)
        //        {

        //            if (fd != null)
        //            {
        //                filterExpression = BuildFilterExpression(fd);
        //                Console.WriteLine(filterExpression);
        //            }
        //        }
        //    }
        //}

        //private string BuildFilterExpression(FilterDescriptor fd)
        //{
        //    StringBuilder sb = new StringBuilder();
        //    string dateBegin = null;
        //    string dateEnd = null;
        //    if (fd.Value != null)
        //    {
        //        dateBegin = String.Format(CultureInfo.InvariantCulture, "'{0}'", fd.Value.ToDateTime());
        //        dateEnd = String.Format(CultureInfo.InvariantCulture, "'{0}'", fd.Value.ToDateTime());
        //    }
        //    switch (fd.Operator)
        //    {
        //        case FilterOperator.None:
        //            return String.Empty;

        //        case FilterOperator.IsNull:
        //            sb.Append(string.Format("{0} IS NULL", fd.PropertyName));
        //            break;
        //        case FilterOperator.IsNotNull:
        //            sb.Append(string.Format("NOT ({0} IS NULL)", fd.PropertyName));
        //            break;
        //        case FilterOperator.IsLessThan:
        //            sb.Append(string.Format("{0} < {1}", fd.PropertyName, dateBegin));
        //            break;
        //        case FilterOperator.IsLessThanOrEqualTo:
        //            sb.Append(string.Format("{0} < {1}", fd.PropertyName, dateEnd));
        //            break;
        //        case FilterOperator.IsLike:
        //        case FilterOperator.IsEqualTo:
        //            sb.Append(string.Format("{0} = {1}", fd.PropertyName, dateBegin));
        //            break;
        //        case FilterOperator.IsNotLike:
        //        case FilterOperator.IsNotEqualTo:
        //            sb.Append(string.Format("{0} < {1} OR {0} >= {2}", fd.PropertyName, dateBegin, dateEnd));
        //            break;
        //        case FilterOperator.IsGreaterThanOrEqualTo:
        //            sb.Append(string.Format("{0} >= {1}", fd.PropertyName, dateBegin));
        //            break;
        //        case FilterOperator.IsGreaterThan:
        //            sb.Append(string.Format("{0} >= {1}", fd.PropertyName, dateEnd));
        //            break;
        //        case FilterOperator.StartsWith:
        //        case FilterOperator.EndsWith:
        //        case FilterOperator.Contains:
        //        case FilterOperator.NotContains:
        //        case FilterOperator.IsContainedIn:
        //        case FilterOperator.IsNotContainedIn:
        //        default:
        //            return String.Empty;
        //    }
        //    return sb.ToString();
        //}


        //void ddlSubCompany_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        //{
        //    if (grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor == null)
        //    {
        //        grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();
        //        //   grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.v
        //    }

        //    int index = ddlSubCompany.SelectedIndex;

        //    if (index == -1 || index==0)
        //    {
        //        grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;

        //        grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Value = null;
        //    }
        //    else
        //    {
        //        if (ddlSubCompany.Items[index].Value != null && ddlSubCompany.Items[index].Value.ToInt()!=0)
        //        {


        //            grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsEqualTo;

        //            grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Value = ddlSubCompany.Items[index].Value.ToInt();
        //        }
        //    }
        //}

        void ddlSubCompany_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            try
            {
                if (grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor == null)
                {
                    grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();
                    //   grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.v
                }

                int index = ddlSubCompany.SelectedIndex;

                if (index == -1 || index == 0)
                {
                    grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;

                    grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Value = null;


                    AppVars.DefaultDriverSubCompanyId = 0;
                    RefreshDashBoardDrivers();

                }
                else
                {
                    //if (ddlSubCompany.Items[index].Value != null && ddlSubCompany.Items[index].Value.ToInt() != 0)
                    if (ddlSubCompany.Items[index].Value != null)
                    {


                        grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsEqualTo;

                        grdPendingJobs.Columns["SubCompanyBgColor"].FilterDescriptor.Value = ddlSubCompany.Items[index].Value.ToInt();


                        AppVars.DefaultDriverSubCompanyId = (ddlSubCompany.Items[index] as RadCustomListDataItem).Tag.ToInt();

                        RefreshDashBoardDrivers();


                    }
                }
            }
            catch
            {


            }
        }

        void ddlSubCompanyPreBooking_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            try
            {
                if (grdPreBookings.Columns["SubCompanyBgColor"].FilterDescriptor == null)
                {
                    grdPreBookings.Columns["SubCompanyBgColor"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();
                    //   grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.v
                }

                int index = ddlSubCompanyPreBooking.SelectedIndex;

                if (index == -1 || index == 0)
                {
                    grdPreBookings.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;

                    grdPreBookings.Columns["SubCompanyBgColor"].FilterDescriptor.Value = null;


                    AppVars.DefaultDriverSubCompanyId = 0;
                    //RefreshDashBoardDrivers();
                    RefreshTodayAndPreData();
                }
                else
                {
                    //if (ddlSubCompany.Items[index].Value != null && ddlSubCompany.Items[index].Value.ToInt() != 0)
                    if (ddlSubCompanyPreBooking.Items[index].Value != null)
                    {


                        grdPreBookings.Columns["SubCompanyBgColor"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsEqualTo;

                        grdPreBookings.Columns["SubCompanyBgColor"].FilterDescriptor.Value = ddlSubCompanyPreBooking.Items[index].Value.ToInt();


                        AppVars.DefaultDriverSubCompanyId = (ddlSubCompanyPreBooking.Items[index] as RadCustomListDataItem).Tag.ToInt();

                        //RefreshDashBoardDrivers();
                        RefreshTodayAndPreData();


                    }
                }
            }
            catch
            {


            }
        }



        void grdRecentJobs_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            if (searchJobContextMenu == null)
            {
                searchJobContextMenu = new RadDropDownMenu();


                RadMenuItem item = new RadMenuItem("Copy Booking");
                item.ForeColor = Color.Black;
                item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                item.Click += new EventHandler(CopySearchBooking_Click);
                searchJobContextMenu.Items.Add(item);



                item = new RadMenuItem("View Booking");
                item.ForeColor = Color.Black;
                item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                item.Click += new EventHandler(ViewSearchBooking_Click);
                searchJobContextMenu.Items.Add(item);


                item = new RadMenuItem("Complete Job");
                item.ForeColor = Color.Black;
                item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                item.Click += new EventHandler(ForceCompleteSearchJob_Click);
                searchJobContextMenu.Items.Add(item);


                if (AppVars.AppTheme != "ControlDefault")
                {
                    foreach (var itemX in searchJobContextMenu.Items)
                    {

                        itemX.ForeColor = Color.White;
                    }

                }

            }

            if (grdRecentJobs.CurrentRow != null && grdRecentJobs.CurrentRow is GridViewDataRowInfo)
            {

                if (grdRecentJobs.CurrentRow.Cells["Status"].Value.ToStr().ToLower() == "no pickup"
                    || grdRecentJobs.CurrentRow.Cells["Status"].Value.ToStr().ToLower() == "no fare")
                {

                    searchJobContextMenu.Items[2].Visibility = ElementVisibility.Visible;
                }
                else
                {
                    searchJobContextMenu.Items[2].Visibility = ElementVisibility.Collapsed;


                }

            }


            e.ContextMenu = searchJobContextMenu;
        }

        string pwd = string.Empty;
        void ForceCompleteSearchJob_Click(object sender, EventArgs e)
        {
            try
            {



                if (grdRecentJobs.CurrentRow != null && grdRecentJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (DialogResult.Yes == MessageBox.Show("Are you sure ?", "", MessageBoxButtons.YesNo))
                    {

                        if (pwd != "euro1234euro")
                        {

                            frmLockingPwd frmUnLock = new frmLockingPwd();
                            frmUnLock.ShowDialog();

                            if (string.IsNullOrEmpty(frmUnLock.ReturnValue1))
                                return;
                            else
                                pwd = frmUnLock.ReturnValue1;


                            frmUnLock.Dispose();
                        }

                        if (pwd.ToStr().Trim().ToLower() == "euro1234euro")
                        {


                            long Id = grdRecentJobs.CurrentRow.Cells["Id"].Value.ToLong();


                            frmForceCompleteJob frmComp = new frmForceCompleteJob(General.GetObject<Booking>(c => c.Id == Id));
                            frmComp.StartPosition = FormStartPosition.CenterScreen;
                            frmComp.ShowDialog();
                            frmComp.Dispose();
                        }
                    }

                }

            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }
        }

        void CopySearchBooking_Click(object sender, EventArgs e)
        {

            try
            {

                if (grdRecentJobs.CurrentRow != null && grdRecentJobs.CurrentRow is GridViewDataRowInfo)
                {

                    CopyBooking(grdRecentJobs.CurrentRow.Cells["Id"].Value.ToLong());
                }
            }
            catch (Exception ex)
            {



            }
        }




        void ViewSearchBooking_Click(object sender, EventArgs e)
        {
            ViewDetailForm(grdRecentJobs.CurrentRow);

        }






        void btnRentPay_Click(object sender, EventArgs e)
        {
            try
            {
                frmDriverRentPay frmRentpay = new frmDriverRentPay();
                frmRentpay.StartPosition = FormStartPosition.CenterScreen;
                frmRentpay.ShowDialog();




            }
            catch
            {


            }
        }



        private void FormatOnBoardGrid()
        {

            try
            {
                if (grdOnBoardDriver.Columns.Count > 0)
                {
                    grdOnBoardDriver.Columns["Vehicle"].IsVisible = false;
                    grdOnBoardDriver.Columns["PDA"].IsVisible = false;





                    grdOnBoardDriver.Columns["DriverNo"].Width = 40;
                    grdOnBoardDriver.Columns["OnJob"].Width = 150;

                    if (grdOnBoardDriver.Columns.Contains("btnClearJob"))
                        grdOnBoardDriver.Columns["btnClearJob"].Width = 20;



                    grdOnBoardDriver.Columns["VehicleTypeId"].IsVisible = false;
                    if (grdOnBoardDriver.Columns["DriverNo"].IsVisible == false)
                    {



                        //  grdDriverWaiting.Columns["VehicleID"].HeaderText = "Veh";
                        //  grdDriverWaiting.Columns["Vehicle"].HeaderText = "";

                        grdOnBoardDriver.Columns["VehicleID"].HeaderText = "Veh";
                        grdOnBoardDriver.Columns["Vehicle"].HeaderText = "";


                        // grdDriverWaiting.Columns["VehicleID"].Width = 40;
                        grdOnBoardDriver.Columns["VehicleID"].Width = 40;

                        //  grdDriverWaiting.Columns["ZoneName"].Width = 25;





                        grdDriverWaiting.Columns["VehicleID"].IsVisible = true;

                        grdDriverWaiting.Columns["VehicleID"].Width = 40;

                        grdDriverWaiting.Columns["ZoneName"].Width = 40;
                        grdDriverWaiting.Columns["VehicleID"].HeaderText = "Veh";
                        grdDriverWaiting.Columns["Vehicle"].Width = 40;
                        grdDriverWaiting.Columns["WaitSinceOn"].Width = 35;





                    }
                }
            }
            catch
            {


            }
        }


        private void FormatRecentJobsGrid()
        {

            grdAllJobs.Columns["HasNotesImg"].Width = 30;

            grdAllJobs.Columns["Driver"].Width = 70;

            //    grdAllJobs.Columns["BookingDateTime"].Width = 120;
            grdAllJobs.Columns["PickUpDate"].Width = 50;
            grdAllJobs.Columns["Time"].Width = 50;
            grdAllJobs.Columns["UpdateBy"].Width = 50;


            grdAllJobs.Columns["FromPostCode"].Width = 80;
            grdAllJobs.Columns["ToPostCode"].Width = 80;

            grdAllJobs.Columns["Status"].Width = 60;

            grdAllJobs.Columns["RefNumber"].Width = 60;
            grdAllJobs.Columns["Fare"].Width = 50;
            grdAllJobs.Columns["Vehicle"].Width = 50;

            grdAllJobs.Columns["Passenger"].Width = 60;
            grdAllJobs.Columns["MobileNo"].Width = 90;
            grdAllJobs.Columns["From"].Width = 170;
            grdAllJobs.Columns["To"].Width = 150;
            grdAllJobs.Columns["Pax"].Width = 50;

            grdAllJobs.Columns["Pickup"].Width = 155;
            grdAllJobs.Columns["GoingTo"].Width = 155;

            grdAllJobs.Columns["PReference"].Width = 50;

            grdAllJobs.Columns["Account"].HeaderText = "A/C";
            grdAllJobs.Columns["Account"].Width = 50;

            grdAllJobs.Columns["GroupId"].Width = 60;

            grdAllJobs.Columns["SpecialReq"].Width = 60;

            grdAllJobs.Columns["VehicleDetails"].Width = 110;


            grdAllJobs.Columns["DropOffPlot"].Width = 60;





            grdAllJobs.Columns["Total"].Width = 50;
            grdAllJobs.Columns["Total"].HeaderText = "Fares(£)";


            grdAllJobs.Columns["OrderNo"].Width = 50;
            grdAllJobs.Columns["OrderNo"].HeaderText = "Order No";

            //
        }


        private void dragDropService_PreviewDragStart(object sender, PreviewDragStartEventArgs e)
        {

            e.CanStart = true;
        }
        void dragDropService_PreviewDragHint(object sender, PreviewDragHintEventArgs e)
        {
            try
            {
                GridDataRowElement dataRowElement = e.DragInstance as GridDataRowElement;
                if (dataRowElement != null && dataRowElement.ViewTemplate.MasterTemplate.SelectedRows.Count > 1)
                {
                    //  e = new Bitmap(this.imageList1.Images[6]);
                    e.UseDefaultHint = true;


                }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage("Error in Drag Preview Hint ");

            }

        }

        private int GetTargetRowIndex(GridDataRowElement row, Point dropLocation)
        {
            // row.BackColor = Color.LightBlue;
            int halfHeight = row.Size.Height / 2;
            int index = row.RowInfo.Index;
            if (dropLocation.Y > halfHeight)
            {
                index++;
            }
            return index;
        }

        private void MoveRows(RadGridView targetGrid, RadGridView dragGrid, GridViewRowInfo dragRow, int index)
        {

            if (index < 0)
                return;

            try
            {
                if (index > targetGrid.RowCount - 1)
                    index = targetGrid.RowCount - 1;

                if (dragRow != null)
                {

                    if (index >= 0)
                    {

                        //if (dragGrid.Name == "grdOnBoardDriver")
                        //{

                        //    General.ShowDespatchFOJForm(grdPendingJobs.Rows[index].Cells["Id"].Value.ToLong(), dragRow.Cells["DriverId"].Value.ToIntorNull());

                        //}
                        //else
                        //{

                        General.ShowDespatchForm(grdPendingJobs.Rows[index].Cells["Id"].Value.ToLong(), dragRow.Cells["DriverId"].Value.ToIntorNull());
                        //   }
                    }

                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage("Error on Moving Rows");

            }

        }


        void dragDropService_PreviewDragDrop(object sender, RadDropEventArgs e)
        {
            try
            {
                GridDataRowElement rowElement = e.DragInstance as GridDataRowElement;
                if (rowElement == null && e.HitTarget != null && e.HitTarget is GridDataRowElement)
                {
                    return;
                }
                RadItem dropTarget = e.HitTarget as RadItem;
                RadGridView targetGrid = dropTarget.ElementTree.Control as RadGridView;
                if (targetGrid == null || targetGrid.Name != "grdPendingJobs")
                {
                    e.Handled = true;
                    return;

                }

                RadGridView dragGrid = rowElement.ElementTree.Control as RadGridView;
                if (targetGrid != dragGrid && dragGrid.SelectedRows.Count > 0)
                {
                    e.Handled = true;

                    GridDataRowElement dropTargetRow = dropTarget as GridDataRowElement;

                    int index = dropTargetRow != null ? this.GetTargetRowIndex(dropTargetRow, e.DropLocation) : targetGrid.RowCount;
                    this.MoveRows(targetGrid, dragGrid, dragGrid.SelectedRows[0], index);
                }
            }
            catch (Exception ex)
            {
                e.Handled = true;
            }
        }

        void dragDropService_PreviewDragOver(object sender, RadDragOverEventArgs e)
        {
            try
            {
                if (e.DragInstance is GridDataRowElement)
                {
                    if ((e.HitTarget is GridDataRowElement || e.HitTarget is GridTableElement || e.HitTarget is GridSummaryRowElement))
                    {


                        if ((e.HitTarget is GridDataRowElement && (e.HitTarget as GridDataRowElement).GridControl.Name != "grdDriverWaiting" && (e.HitTarget as GridDataRowElement).GridControl.Name != "grdOnBoardDriver")
                            || (e.HitTarget is GridTableElement && (e.HitTarget as GridTableElement).GridViewElement.Name != "grdDriverWaiting" && (e.HitTarget as GridTableElement).GridViewElement.Name != "grdOnBoardDriver")
                              || (e.HitTarget is GridSummaryRowElement && (e.HitTarget as GridSummaryRowElement).GridControl.Name != "grdDriverWaiting" && (e.HitTarget as GridSummaryRowElement).GridControl.Name != "grdOnBoardDriver"))
                        {



                            e.CanDrop = (e.HitTarget is GridDataRowElement || e.HitTarget is GridTableElement || e.HitTarget is GridSummaryRowElement);

                            if (e.CanDrop && e.HitTarget is GridDataRowElement)
                            {
                                grdPendingJobs.CurrentRow = (e.HitTarget as GridDataRowElement).RowInfo;
                                grdPendingJobs.Focus();
                                //if(grdPendingJobs.TableElement.VScrollBar.Value>0 && grdPendingJobs.TableElement.VScrollBar.Value<grdPendingJobs.VerticalScroll.Maximum)
                                //    grdPendingJobs.TableElement.VScrollBar.Value += 1;
                                //   grdPendingJobs.VerticalScroll.Value =
                                //   grdPendingJobs.TableElement.VScrollBar.Value = grdPendingJobs.VerticalScroll.Maximum;
                                //    grdPendingJobs.=grdPendingJobs.VerticalScroll.Value
                            }


                        }

                    }
                }
            }
            catch (Exception ex)
            {

            }
        }



        private void FormatQuotationsGrid()
        {
            try
            {


                if (grdQuotations.Columns.Contains("btnDelete"))
                    grdQuotations.Columns["btnDelete"].Width = 60;


                grdQuotations.Columns["PickUpDate"].Width = 70;
                grdQuotations.Columns["PickUpDate"].HeaderText = "Pickup Date";
                grdQuotations.Columns["Time"].Width = 45;



                grdQuotations.Columns["PickupDateTemp"].IsVisible = false;
                (grdQuotations.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdQuotations.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";


                grdQuotations.Columns["FromLocTypeId"].IsVisible = false;
                grdQuotations.Columns["ToLocTypeId"].IsVisible = false;


                grdQuotations.Columns["Id"].IsVisible = false;

                if (grdQuotations.Columns.Contains("btnConfirm"))
                {
                    grdQuotations.Columns["btnConfirm"].Width = 60;
                }
                else
                {

                    AddCommandColumn(grdQuotations, "btnConfirm", "Confirm");

                }


                if (grdQuotations.Columns.Contains("btnCancelQuotation"))
                {
                    grdQuotations.Columns["btnCancelQuotation"].Width = 60;
                }
                else
                {

                    AddCommandColumn(grdQuotations, "btnCancelQuotation", "Cancel");

                }

                grdQuotations.Columns["RefNumber"].HeaderText = "Ref #";
                grdQuotations.Columns["RefNumber"].Width = 45;

                grdQuotations.Columns["UpdateBy"].Width = 60;
                grdQuotations.Columns["UpdateBy"].HeaderText = "Update By";

                grdQuotations.Columns["Fare"].HeaderText = "Fare(£)";
                grdQuotations.Columns["Fare"].Width = 50;
                grdQuotations.Columns["Vehicle"].Width = 60;

                grdQuotations.Columns["Passenger"].Width = 60;
                grdQuotations.Columns["From"].Width = 150;
                grdQuotations.Columns["To"].Width = 150;

                grdQuotations.Columns["Account"].Width = 60;
                grdQuotations.Columns["Account"].HeaderText = "A/C";

                grdQuotations.Columns["From"].HeaderText = "Pickup Point";
                grdQuotations.Columns["To"].HeaderText = "Destination";


                grdQuotations.Columns["BackgroundColor"].IsVisible = false;
                grdQuotations.Columns["TextColor"].IsVisible = false;


                grdQuotations.AllowEditRow = true;


            }
            catch
            {


            }

        }



        private void FormatTodaysBookingGrid()
        {
            try
            {




                //if (grdPendingJobs.Columns.Contains("Check"))
                //{
                //    (grdPendingJobs.Columns["Check"] as GridViewCheckBoxColumn).Width = 35;

                //    if (grdPendingJobs.Columns.Contains("btnDelete"))
                //        grdPendingJobs.Columns["btnDelete"].Width = 60;
                //}


                //      if (!grdPendingJobs.Enabled)
                //          grdPendingJobs.Enabled = true;


                //if (grdPendingJobs.Columns.Contains("btnJDespatch"))
                //{
                //    grdPendingJobs.Columns["btnJDespatch"].Width = 60;
                //}

                grdPendingJobs.Columns["Lead"].Width = 40;

                grdPendingJobs.Columns["BookingDateTime"].Width = 110;
                grdPendingJobs.Columns["PickUpDate"].Width = 45;
                grdPendingJobs.Columns["Time"].Width = 45;

                //if (grdPendingJobs.Columns.Contains("TimeLeft"))
                //{
                //    grdPendingJobs.Columns["TimeLeft"].Width = 30;
                //}

                grdPendingJobs.Columns["Status"].Width = 50;

                grdPendingJobs.Columns["RefNumber"].Width = 60;
                grdPendingJobs.Columns["Plot"].Width = 45;

                grdPendingJobs.Columns["PaymentMethod"].Width = 60;
                grdPendingJobs.Columns["UpdateBy"].Width = 50;

                grdPendingJobs.Columns["Fare"].Width = 50;
                grdPendingJobs.Columns["Vehicle"].Width = 40;

                grdPendingJobs.Columns["Passenger"].Width = 60;
                grdPendingJobs.Columns["MobileNo"].Width = 95;

                grdPendingJobs.Columns["Pickup"].Width = 150;
                grdPendingJobs.Columns["GoingTo"].Width = 150;

                grdPendingJobs.Columns["FromPostCode"].Width = 80;
                grdPendingJobs.Columns["ToPostCode"].Width = 80;

                grdPendingJobs.Columns["From"].Width = 180;
                grdPendingJobs.Columns["To"].Width = 150;
                grdPendingJobs.Columns["Pax"].Width = 50;

                grdPendingJobs.Columns["Account"].Width = 60;


                grdPendingJobs.Columns["Driver"].Width = 60;


                grdPendingJobs.Columns["HasNotesImg"].Width = 35;

                grdPendingJobs.Columns["GroupId"].Width = 60;





                if (grdPendingJobs.Columns.Contains("btnJDespatch"))
                {
                    grdPendingJobs.Columns["btnJDespatch"].Width = 50;
                }


                grdPendingJobs.Columns["PReference"].Width = 70;
                grdPendingJobs.Columns["SpecialReq"].Width = 80;
                Pg_PendingJobs.Text = "Today\'s Booking(" + grdPendingJobs.Rows.Count + ")";


                grdPendingJobs.Tag = null;


                grdPendingJobs.Columns["Vias"].Width = 30;

                grdPendingJobs.Columns["MilesFromBase"].Width = 30;

                grdPendingJobs.Columns["Attributes"].Width = 50;

                grdPendingJobs.Columns["DropOffPlot"].Width = 60;


                grdPendingJobs.Columns["Total"].Width = 50;
                grdPendingJobs.Columns["Total"].HeaderText = "Total";
                //grdPendingJobs.Columns["Total"].HeaderText = "Fares(£)";

                grdPendingJobs.Columns["OrderNo"].Width = 50;
                grdPendingJobs.Columns["OrderNo"].HeaderText = "Order No";


                if (AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool())
                {


                    grdPendingJobs.Columns["Driver"].IsVisible = false;
                    grdPendingJobs.Columns["VehicleID"].Width = grdPendingJobs.Columns["Driver"].Width;

                }

            }
            catch
            {


            }

        }

        RadDesktopAlert desktopAlert = new Telerik.WinControls.UI.RadDesktopAlert();

        private void CreateAndShowAlertAlways(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {



            desktopAlert.AutoCloseDelay = 5;


            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;
            desktopAlert.Popup.AnimationType = PopupAnimationTypes.None;

            desktopAlert.ButtonItems.Clear();
            desktopAlert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

            // desktopAlert.roo



            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;

            if (HasOptionButton)
            {
                desktopAlert.FixedSize = new Size(300, 100);

                RadButtonElement bt = new RadButtonElement();
                bt.Tag = body;
                bt.Name = senderId;
                bt.ToolTipText = senderName;

                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";

                desktopAlert.ButtonItems.Add(bt);
            }
            else
            {

                desktopAlert.FixedSize = new Size(370, 120);

            }

            desktopAlert.Show();

            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;


        }


        private void CreateAndShowAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {



            if (DisablePopupNotifications)
            {
                if (driverloginlogoutNotification == false || caption.ToStr().ToLower() != "login")
                    return;



            }

            desktopAlert.AutoCloseDelay = 5;
            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;


            desktopAlert.Popup.AnimationType = PopupAnimationTypes.None;

            desktopAlert.ButtonItems.Clear();
            desktopAlert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

            // desktopAlert.roo



            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;

            if (HasOptionButton)
            {
                desktopAlert.FixedSize = new Size(300, 100);

                RadButtonElement bt = new RadButtonElement();
                bt.Tag = body;
                bt.Name = senderId;
                bt.ToolTipText = senderName;

                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";

                desktopAlert.ButtonItems.Add(bt);
            }
            else
            {

                desktopAlert.FixedSize = new Size(370, 120);

            }

            desktopAlert.Show();



            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;


            desktopAlert.ContentImage = contentImg;


        }


        private void CreateAndShowMessageAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            //if (DisablePopupNotifications)
            //    return;


            RadDesktopAlert alert = new Telerik.WinControls.UI.RadDesktopAlert();
            alert.AutoCloseDelay = 300;
            alert.AutoClose = true;
            alert.FadeAnimationSpeed = 1;
            alert.FadeAnimationType = FadeAnimationType.None;
            alert.Popup.AlertElement.Opacity = 100;
            alert.PopupAnimation = false;
            alert.ShowCloseButton = true;
            alert.Popup.AnimationType = PopupAnimationTypes.None;
            //  alert.Popup.EnableKeyMap = true;
            //    alert.Popup.PreviewKeyDown += Popup_PreviewKeyDown;

            //   alert.Closing += Alert_Closing;
            alert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;
            alert.Popup.Tag = DateTime.Now;


            alert.ShowOptionsButton = false;
            alert.ShowPinButton = false;

            if (HasOptionButton)
            {
                alert.FixedSize = new Size(360, 100);

                RadButtonElement bt = new RadButtonElement();

                bt.Tag = alert;
                bt.Name = senderId;
                bt.ToolTipText = senderName;
                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";
                alert.ButtonItems.Add(bt);


                RadButtonElement bt2 = new RadButtonElement();
                bt2.Tag = alert;
                bt2.Name = senderId;
                bt2.ToolTipText = senderName;
                bt2.Click += new EventHandler(optionItemClose_Click);
                bt2.Text = "Close";
                alert.ButtonItems.Add(bt2);

            }
            else
            {

                alert.FixedSize = new Size(370, 120);

            }

            alert.Show();

            alert.CaptionText = caption;
            alert.ContentText = content;
            alert.ContentImage = contentImg;


        }

        private void Popup_PreviewKeyDown(object sender, PreviewKeyDownEventArgs e)
        {

        }

        private void Alert_Closing(object sender, RadPopupClosingEventArgs args)
        {
            //if((sender as RadDesktopAlert).Popup.prev.Tag!=null || ((sender as RadDesktopAlert).Popup.Tag is DateTime && DateTime.Now.Subtract((sender as RadDesktopAlert).Popup.Tag.ToDateTime()).TotalMinutes<5))
            //args.Cancel = true;
        }

        private void AlertElement_KeyPress(object sender, KeyPressEventArgs e)
        {

        }

        private void ShowAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {
            if (DisablePopupNotifications)
                return;


            desktopAlert.AutoCloseDelay = 5;
            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;

            desktopAlert.ButtonItems.Clear();
            desktopAlert.Popup.AlertElement.CaptionElement.TextAndButtonsElement.NumberOfColors = 1;

            // desktopAlert.roo



            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;

            if (HasOptionButton)
            {
                desktopAlert.FixedSize = new Size(300, 100);

                RadButtonElement bt = new RadButtonElement();
                bt.Tag = body;
                bt.Name = senderId;
                bt.ToolTipText = senderName;

                bt.Click += new EventHandler(optionItem_Click);
                bt.Text = "Reply? ";

                desktopAlert.ButtonItems.Add(bt);
            }
            else
            {

                desktopAlert.FixedSize = new Size(370, 120);

            }

            desktopAlert.Show();

            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;


        }

        void Popup_Click(object sender, EventArgs e)
        {
            desktopAlert.Popup.ClosePopup(RadPopupCloseReason.Mouse);
        }


        private void RingBackCallNotification(string caption, string content)
        {
            try
            {
                if (DisablePopupNotifications)
                    return;

                RadDesktopAlert ringAlert = new Telerik.WinControls.UI.RadDesktopAlert();


                ringAlert.AutoCloseDelay = 8;
                ringAlert.FadeAnimationSpeed = 1;
                ringAlert.FadeAnimationType = FadeAnimationType.None;


                ringAlert.Popup.AlertElement.Opacity = 100;
                ringAlert.PopupAnimation = false;


                ringAlert.ShowOptionsButton = false;
                ringAlert.ShowPinButton = false;

                ringAlert.FixedSize = new Size(300, 100);

                ringAlert.CaptionText = caption;
                ringAlert.ContentText = content;
                //  ringAlert.ContentImage = contentImg;



                ringAlert.Show();


            }
            catch (Exception ex)
            {


            }

        }





        private void SetSMSBlinking(Color clr)
        {

            try
            {
                var child = btnSMS.RootElement.Children[0];
                ActionButtonElement elem = (ActionButtonElement)child.Children[1].Children[1];
                FillPrimitive fill = (FillPrimitive)elem.Children[0];
                fill.BackColor = clr;
                fill.BackColor2 = clr;
                fill.BackColor3 = clr;
                fill.BackColor3 = clr;

                btnSMS.BackColor = clr;
            }
            catch
            {

            }
        }

        void btShowInbox_Click(object sender, EventArgs e)
        {

            ShowInboxMessages("Inbox");

        }


        public void ShowInboxMessages(string messageType)
        {

            try
            {

                if (frmInbox == null || frmInbox.IsDisposed)
                    frmInbox = new frmSMSReply();

                frmInbox.StartPosition = FormStartPosition.CenterScreen;
                frmInbox.MessageType = messageType;
                frmInbox.Show();
                frmInbox.BringToFront();




                if (messageType.ToStr().ToLower() == "pda")

                {


                    if (btnSMS.BackColor == Color.Orange)
                    {
                        General.SendMessageToPDA("**resetpdablinking>>true>>" + Environment.MachineName.ToLower());

                    }
                }

                ResetSMSBlinking();

            }
            catch (Exception ex)
            {


            }
        }




        public void ResetSMSBlinking()
        {

            var child = btnSMS.RootElement.Children[0];
            ActionButtonElement elem = (ActionButtonElement)child.Children[1].Children[1];
            FillPrimitive fill = (FillPrimitive)elem.Children[0];
            fill.BackColor = Color.FromArgb(232, 241, 252);
            fill.BackColor2 = Color.FromArgb(233, 241, 252);
            fill.BackColor3 = Color.FromArgb(211, 226, 244);
            fill.BackColor3 = Color.FromArgb(231, 240, 251);

            btnSMS.BackColor = Color.White;



        }


        private void CreateAndShowCustomerMsgAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, bool HasOptionButton, string body, string senderId, string senderName)
        {


            desktopAlert.AutoCloseDelay = 60;


            desktopAlert.ButtonItems.Clear();

            desktopAlert.FadeAnimationSpeed = 1;
            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            //     desktopAlert.Popup.Opacity = 10;
            desktopAlert.Popup.AlertElement.Opacity = 100;
            desktopAlert.PopupAnimation = false;

            desktopAlert.ShowOptionsButton = false;
            desktopAlert.ShowPinButton = false;


            desktopAlert.FixedSize = new Size(300, 110);

            RadButtonElement bt = new RadButtonElement();
            bt.Tag = body;
            bt.Name = senderId;
            bt.ToolTipText = senderName;


            bt.Click += new EventHandler(btShowInbox_Click);
            bt.Text = "View Details";
            bt.Font = new Font("Arial", 10, FontStyle.Bold);

            desktopAlert.ButtonItems.Add(bt);



            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;
            desktopAlert.Show();

            SetSMSBlinking(Color.Orange);


        }

        void desktopAlert_Closed(object sender, RadPopupClosedEventArgs args)
        {

        }

        void desktopAlert_Disposing(object sender, EventArgs e)
        {

        }


        private void ShowBiddingAlert(string caption, string content, Image contentImg, System.Media.SystemSound sound, long jobId, int? driverId)
        {

            if (DisablePopupNotifications)
                return;

            RadDesktopAlert desktopAlert = new Telerik.WinControls.UI.RadDesktopAlert();
            desktopAlert.CaptionText = caption;
            desktopAlert.ContentText = content;
            desktopAlert.ContentImage = contentImg;
            //   desktopAlert.SoundToPlay = sound;
            //  desktopAlert.PlaySound = true;
            desktopAlert.FixedSize = new Size(370, 160);

            desktopAlert.FadeAnimationType = FadeAnimationType.None;
            desktopAlert.Popup.AlertElement.Opacity = 100;


            RadButtonElement biddingAccept = new RadButtonElement();
            biddingAccept.Tag = jobId;
            biddingAccept.Name = driverId.ToStr();
            biddingAccept.BorderElement.Width = 2;
            biddingAccept.BorderElement.BottomColor = Color.Black;
            biddingAccept.BorderElement.BoxStyle = BorderBoxStyle.SingleBorder;
            biddingAccept.Click += new EventHandler(biddingAccept_Click);
            biddingAccept.Text = "Accept and Despatch";
            desktopAlert.ButtonItems.Add(biddingAccept);


            RadButtonElement biddingReject = new RadButtonElement();
            biddingReject.Tag = jobId;
            biddingReject.Name = driverId.ToStr();

            biddingReject.BorderElement.Width = 2;
            biddingReject.BorderElement.BottomColor = Color.Black;
            biddingReject.BorderElement.BoxStyle = BorderBoxStyle.SingleBorder;
            biddingReject.Click += new EventHandler(biddingReject_Click);
            biddingReject.Text = "Reject";
            desktopAlert.ButtonItems.Add(biddingReject);


            desktopAlert.Show();
        }

        void biddingAccept_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement obj = (RadButtonElement)sender;

                if (obj != null && obj.Tag != null)
                {
                    General.SP_SaveBid(obj.Tag.ToLong(), obj.Name.ToIntorNull(), 0, 2);

                    General.ShowDespatchForm(obj.Tag.ToLong(), obj.Name.ToIntorNull());

                    //  PDAClass.UpdateBiddingStatus(obj.Tag.ToLong(), obj.Name.ToInt(), true);
                }
            }
            catch
            {


            }

        }


        void biddingReject_Click(object sender, EventArgs e)
        {
            try
            {
                RadButtonElement obj = (RadButtonElement)sender;

                if (obj != null && obj.Tag != null)
                {
                    General.SP_SaveBid(obj.Tag.ToLong(), obj.Name.ToIntorNull(), 0, 3);
                    //  PDAClass.UpdateBiddingStatus(obj.Tag.ToLong(), obj.Name.ToInt(), true);

                }
            }
            catch
            {


            }

        }




        //private void LoadDriverBookingStats()
        //{

        //    try
        //    {
        //        if (DriverChart == null)
        //        {
        //            this.DriverChart = new System.Windows.Forms.DataVisualization.Charting.Chart();
        //            ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).BeginInit();
        //            this.splitContainer1.Panel2.Controls.Add(this.DriverChart);

        //            // 
        //            // DriverChart
        //            // 
        //            this.DriverChart.Location = new System.Drawing.Point(0, 0);
        //            this.DriverChart.Name = "DriverChart";
        //            this.DriverChart.Size = new System.Drawing.Size(300, 300);
        //            this.DriverChart.TabIndex = 0;

        //            ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).EndInit();
        //        }
        //        if (DriverChart.ChartAreas.Count == 0)
        //        {

        //            System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
        //            System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend();
        //            System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series();
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint1 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 20);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint2 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 50);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint3 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint4 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint5 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint6 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint7 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint8 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint9 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint10 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint11 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);
        //            System.Windows.Forms.DataVisualization.Charting.DataPoint dataPoint12 = new System.Windows.Forms.DataVisualization.Charting.DataPoint(0, 0);


        //            // 
        //            // DriverChart
        //            // 
        //            this.DriverChart.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkUpwardDiagonal;
        //            this.DriverChart.BorderlineDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid;
        //            this.DriverChart.BorderlineWidth = 5;
        //            this.DriverChart.BorderSkin.BackColor = System.Drawing.Color.SteelBlue;
        //            this.DriverChart.BorderSkin.SkinStyle = System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin4;
        //            chartArea1.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Shingle;
        //            chartArea1.Name = "ChartArea1";
        //            this.DriverChart.ChartAreas.Add(chartArea1);
        //            this.DriverChart.Dock = System.Windows.Forms.DockStyle.Fill;
        //            legend1.Name = "Legend1";
        //            this.DriverChart.Legends.Add(legend1);
        //            this.DriverChart.Location = new System.Drawing.Point(0, 0);
        //            this.DriverChart.Name = "DriverChart";
        //            series1.ChartArea = "ChartArea1";
        //            series1.ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedBar;
        //            series1.CustomProperties = "BarLabelStyle=Left";
        //            series1.Font = new System.Drawing.Font("Tahoma", 6.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
        //            series1.IsXValueIndexed = true;
        //            series1.Legend = "Legend1";
        //            series1.Name = "Series1";
        //            dataPoint1.AxisLabel = "Danish";
        //            dataPoint1.CustomProperties = "DrawingStyle=Emboss, BarLabelStyle=Outside";
        //            dataPoint1.Font = new System.Drawing.Font("Tahoma", 7F);
        //            dataPoint1.IsValueShownAsLabel = false;
        //            dataPoint1.IsVisibleInLegend = true;
        //            dataPoint1.Label = "danish";
        //            dataPoint1.LabelAngle = 0;
        //            dataPoint1.LabelBorderDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Dash;
        //            dataPoint1.LabelBorderWidth = 1;
        //            dataPoint1.LabelFormat = "";
        //            dataPoint1.LegendText = "ali";
        //            dataPoint2.AxisLabel = "Naveed";
        //            dataPoint2.Label = "";
        //            dataPoint2.LabelFormat = "";
        //            dataPoint2.LegendText = "ali";
        //            series1.Points.Add(dataPoint1);
        //            series1.Points.Add(dataPoint2);
        //            series1.Points.Add(dataPoint3);
        //            series1.Points.Add(dataPoint4);
        //            series1.Points.Add(dataPoint5);
        //            series1.Points.Add(dataPoint6);
        //            series1.Points.Add(dataPoint7);
        //            series1.Points.Add(dataPoint8);
        //            series1.Points.Add(dataPoint9);
        //            series1.Points.Add(dataPoint10);
        //            series1.Points.Add(dataPoint11);
        //            series1.Points.Add(dataPoint12);
        //            this.DriverChart.Series.Add(series1);
        //            this.DriverChart.Size = new System.Drawing.Size(711, 656);
        //            this.DriverChart.TabIndex = 0;
        //            this.DriverChart.Text = "chart1";
        //        }

        //        bool loginWise = false;

        //        if (optDriverWise.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
        //        {
        //            fromDate = null;
        //            tillDate = null;
        //            loginWise = true;
        //        }

        //        var resultList = new TaxiDataContext().stp_DriverStats(fromDate, tillDate, loginWise).ToList();

        //        grdStats.DataSource = resultList;

        //        DriverChart.Series[0].Points.Clear();

        //        foreach (var obj in resultList.Where(c => c.Earned > 0))
        //        {

        //            System.Windows.Forms.DataVisualization.Charting.DataPoint point = new System.Windows.Forms.DataVisualization.Charting.DataPoint();
        //            point.Label = obj.DriverNo;
        //            point.AxisLabel = obj.DriverNo;
        //            point.LabelForeColor = Color.Navy;
        //            point.LabelToolTip = obj.DriverName;
        //            point.YValues[0] = (double)obj.Earned;
        //            point.SetCustomProperty("BarLabelStyle", "Outside");


        //            if ((obj.DriverNo.IsNumeric()))
        //            {
        //                point.XValue = Convert.ToDouble(obj.DriverNo);
        //            }
        //            DriverChart.Series[0].Points.Add(point);

        //        }


        //        grdStats.Columns["DriverId"].IsVisible = false;
        //        grdStats.Columns["DriverNo"].HeaderText = "No";

        //        grdStats.Columns["DriverName"].Width = 130;
        //        grdStats.Columns["DriverName"].HeaderText = "Driver Name";

        //        grdStats.Columns["JobsDone"].HeaderText = "Jobs Done";

        //        grdStats.Columns["JobsDone"].Width = 80;
        //        grdStats.Columns["Earned"].Width = 80;
        //        grdStats.Columns["Earned"].HeaderText = "Earned (£)";

        //        grdStats.Columns["WaitingSince"].Width = 150;
        //        grdStats.Columns["WaitingSince"].HeaderText = "Waiting Since";


        //        grdStats.ReadOnly = true;

        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}


        private void LoadDriverBookingStats()
        {

            try
            {




                if (IsLoadingStats == false)
                {
                    this.Pg_DrvBookingStats.Text = "Loading Stats...";

                    new Thread(delegate ()
                    {


                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new BookingStats(ShowStats), fromDate, tillDate);

                        }
                        else
                            ShowStats(fromDate, tillDate);




                    }).Start();
                }

            }
            catch (Exception ex)
            {

            }
        }

        delegate void BookingStats(DateTime? from, DateTime? till);

        private bool IsLoadingStats = false;

        private void ShowStats(DateTime? fromDate, DateTime? tillDate)
        {
            try
            {

                IsLoadingStats = true;




                if (DriverChart == null)
                {

                    this.DriverChart = new System.Windows.Forms.DataVisualization.Charting.Chart();
                    // ((System.ComponentModel.ISupportInitialize)(this.DriverChart)).BeginInit();
                    this.splitContainer1.Panel2.Controls.Add(this.DriverChart);

                    this.DriverChart.Location = new System.Drawing.Point(0, 0);
                    this.DriverChart.Name = "DriverChart";
                    this.DriverChart.Size = new System.Drawing.Size(300, 300);
                    this.DriverChart.TabIndex = 0;


                }





                if (DriverChart.ChartAreas.Count == 0)
                {

                    System.Windows.Forms.DataVisualization.Charting.ChartArea chartArea1 = new System.Windows.Forms.DataVisualization.Charting.ChartArea();
                    System.Windows.Forms.DataVisualization.Charting.Legend legend1 = new System.Windows.Forms.DataVisualization.Charting.Legend();
                    System.Windows.Forms.DataVisualization.Charting.Series series1 = new System.Windows.Forms.DataVisualization.Charting.Series();

                    this.DriverChart.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.DarkUpwardDiagonal;
                    this.DriverChart.BorderlineDashStyle = System.Windows.Forms.DataVisualization.Charting.ChartDashStyle.Solid;
                    this.DriverChart.BorderlineWidth = 2;
                    this.DriverChart.BorderSkin.BackColor = System.Drawing.Color.SteelBlue;
                    this.DriverChart.BorderSkin.SkinStyle = System.Windows.Forms.DataVisualization.Charting.BorderSkinStyle.FrameThin4;
                    chartArea1.BackHatchStyle = System.Windows.Forms.DataVisualization.Charting.ChartHatchStyle.Shingle;
                    chartArea1.Name = "ChartArea1";
                    this.DriverChart.ChartAreas.Add(chartArea1);
                    this.DriverChart.Dock = System.Windows.Forms.DockStyle.Fill;
                    legend1.Name = "Legend1";
                    this.DriverChart.Legends.Add(legend1);
                    this.DriverChart.Location = new System.Drawing.Point(0, 0);
                    this.DriverChart.Name = "DriverChart";
                    series1.ChartArea = "ChartArea1";
                    series1.ChartType = System.Windows.Forms.DataVisualization.Charting.SeriesChartType.StackedBar;
                    series1.CustomProperties = "BarLabelStyle=Left";
                    series1.Font = new System.Drawing.Font("Tahoma", 3F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    series1.IsXValueIndexed = true;
                    series1.Legend = "Legend1";
                    series1.IsVisibleInLegend = false;


                    this.DriverChart.Series.Add(series1);
                    this.DriverChart.Size = new System.Drawing.Size(711, 656);
                    this.DriverChart.TabIndex = 0;
                    this.DriverChart.Text = "chart1";
                    this.DriverChart.ChartAreas["ChartArea1"].AxisX.Title = "Driver";
                    this.DriverChart.ChartAreas["ChartArea1"].AxisX.TitleFont = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                    this.DriverChart.ChartAreas["ChartArea1"].AxisY.Title = "Earned";
                    this.DriverChart.ChartAreas["ChartArea1"].AxisY.TitleFont = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                    this.DriverChart.ChartAreas["ChartArea1"].AxisX.LabelStyle.Enabled = false;
                    DriverChart.ChartAreas["ChartArea1"].AxisX.MajorGrid.LineWidth = 0;
                    DriverChart.ChartAreas["ChartArea1"].AxisX.MajorGrid.Enabled = false;


                }

                bool loginWise = false;

                if (optDriverWise.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
                {
                    fromDate = null;
                    tillDate = null;
                    loginWise = true;
                }






                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if (loginWise)
                    {
                        fromDate = DateTime.Now.ToDate();
                        tillDate = DateTime.Now;


                    }
                    List<stp_DriverStatsData> resultList = null;

                    try
                    {
                        resultList = db.ExecuteQuery<stp_DriverStatsData>("exec stp_DriverStats {0},{1},{2},{3} ", fromDate, tillDate, loginWise, AppVars.DefaultDriverSubCompanyId).ToList().OrderBy(item => item.DriverNo, new NaturalSortComparer<string>()).ToList();
                    }
                    catch
                    {
                        resultList = db.ExecuteQuery<stp_DriverStatsData>("exec stp_DriverStats {0},{1},{2} ", fromDate, tillDate, loginWise).ToList().OrderBy(item => item.DriverNo, new NaturalSortComparer<string>()).ToList();

                    }
                    grdStats.DataSource = resultList;

                    DriverChart.Series[0].Points.Clear();

                    foreach (var obj in resultList.Where(c => c.Earned > 0))
                    {

                        System.Windows.Forms.DataVisualization.Charting.DataPoint point = new System.Windows.Forms.DataVisualization.Charting.DataPoint();
                        point.Label = obj.DriverNo;

                        point.AxisLabel = obj.DriverNo;
                        point.LabelForeColor = Color.Black;

                        point.LabelToolTip = obj.DriverName;
                        point.Font = new System.Drawing.Font("Tahoma", 12F);
                        point.SetCustomProperty("BarLabelStyle", "Outside");
                        point.YValues[0] = (double)obj.Earned;

                        if ((obj.DriverNo.IsNumeric()))
                        {

                            point.XValue = Convert.ToDouble(obj.DriverNo);
                            DriverChart.Series[0].Points.Add(point);
                        }

                    }




                    grdStats.Columns["DriverId"].IsVisible = false;
                    grdStats.Columns["DriverNo"].HeaderText = "No";

                    grdStats.Columns["DriverName"].Width = 100;
                    grdStats.Columns["DriverName"].HeaderText = "Driver Name";


                    grdStats.Columns["LoginTime"].Width = 70;
                    grdStats.Columns["LoginTime"].IsVisible = loginWise;


                    grdStats.Columns["JobsDone"].HeaderText = "Jobs Done";

                    grdStats.Columns["JobsDone"].Width = 80;
                    grdStats.Columns["Earned"].Width = 80;
                    grdStats.Columns["Earned"].HeaderText = "Earned (£)";

                    grdStats.Columns["WaitingSince"].Width = 130;
                    grdStats.Columns["WaitingSince"].HeaderText = "Waiting Since";


                    grdStats.ReadOnly = true;


                }

                IsLoadingStats = false;

                this.Pg_DrvBookingStats.Text = "Driver Booking Stats";
            }
            catch (Exception ex)
            {
                IsLoadingStats = false;
                this.Pg_DrvBookingStats.Text = "Driver Booking Stats";

            }
        }

        private DateTime? GetLoginDate(ref DateTime? loginDate, int? driverId)
        {
            DateTime? rtn = null;
            GridViewRowInfo row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToInt() == driverId);
            if (row != null)
                rtn = row.Cells["LoginDate"].Value.ToDateTime();

            return rtn;
        }

        private void AddAssignJobColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 60;

            col.Name = "btnAssignJob";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Assign Job";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

        }

        private void AddClearJobColumn(RadGridView grid)
        {



            GridViewCommandColumn col = new GridViewCommandColumn();

            col.AutoSizeMode = BestFitColumnMode.DisplayedDataCells;
            col.Name = "btnClearJob";
            col.UseDefaultText = true;
            //  col.ImageLayout = System.Windows.Forms.ImageLayout.Center;

            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;


            if (grid.Name == "grdOnBoardDriver")
            {
                col.IsVisible = false;
                col.DefaultText = "C";
                col.Width = 20;
            }
            else
            {

                col.DefaultText = "Clear";
                col.Width = 50;

            }


            grid.Columns.Add(col);

        }

        //    bool IsAlert = false;
        bool IsExpiring = false;
        int cnt = 0;


        frmJobDueAlert frmJobDue = null;
        private bool ZeroTimeRefresh = false;



        //  int dueCnt = 0;
        //   int prevDueCnt = 0;
        void timer1_Tick(object sender, EventArgs e)
        {


            if (AppVars.IsLogout || (worker != null && worker.IsBusy))
                return;



            try
            {




                now = DateTime.Now;

                IsExpiring = false;
                preBookingExpired = false;
                cnt = 0;


                foreach (var item in grdPendingJobs.Rows)
                {





                    if (!grdPendingJobs.Enabled || (worker != null && worker.IsBusy))
                        break;





                    if (grdPendingJobs.Columns["Lead"] != null && grdPendingJobs.Columns["Lead"].IsVisible)
                    {

                        if (item.Cells["Lead"].Tag == null)
                        {
                            item.Cells["Lead"].Tag = 1;

                            if (item.Cells["PickupDateTemp"].Value.ToDateTime().Subtract(item.Cells["BookingDateTime"].Value.ToDateTime()).TotalMinutes <= 10)
                            {
                                item.Cells["Lead"].Style.BackColor = GridBackColor;
                                item.Cells["Lead"].Style.ForeColor = Color.Red;
                                item.Cells["Lead"].Style.CustomizeFill = true;

                            }
                        }
                    }


                    if (item.Cells["PickupDateTemp"].Value.ToDateTime() > now)
                    {



                        cnt = 0;

                        if (cnt == 0)
                        {

                            if (item.Cells["Due"].Value != null)
                            {
                                if (now > item.Cells["Lead"].Value.ToDateTime())
                                    cnt = 1;



                            }
                            else if (now > item.Cells["Lead"].Value.ToDateTime())
                                cnt = 1;

                        }

                        if (cnt > 0)
                        {
                            IsExpiring = true;


                            if (checkPreBookingDueAlert && item.Cells["Lead"].Style.ForeColor != Color.Red && item.Cells["StatusId"].Value.ToInt() != Enums.BOOKINGSTATUS.PENDING)
                            {
                                preBookingExpired = true;
                            }

                        }





                        if (cnt > 0)
                        {



                            item.Cells["Plot"].Style.BackColor = Color.Yellow;
                            item.Cells["Plot"].Style.CustomizeFill = true;

                            item.Cells["PickUpDate"].Style.BackColor = Color.Yellow;
                            item.Cells["PickUpDate"].Style.CustomizeFill = true;


                            item.Cells["Time"].Style.BackColor = Color.Yellow;
                            item.Cells["Time"].Style.CustomizeFill = true;


                            //item.Cells["Passenger"].Style.BackColor = Color.Yellow;
                            //item.Cells["Passenger"].Style.CustomizeFill = true;



                            //if (item.Cells["ToLocTypeId"].Value.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                            //{

                            //    item.Cells["To"].Style.BackColor = Color.Yellow;
                            //    item.Cells["To"].Style.CustomizeFill = true;

                            //}
                            //if (item.Cells["FromLocTypeId"].Value.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                            //{
                            //    item.Cells["From"].Style.BackColor = Color.Yellow;
                            //    item.Cells["From"].Style.CustomizeFill = true;
                            //}

                            //item.Cells["MobileNo"].Style.BackColor = Color.Yellow;
                            //item.Cells["MobileNo"].Style.CustomizeFill = true;


                            //item.Cells["FromPostCode"].Style.BackColor = Color.Yellow;
                            //item.Cells["FromPostCode"].Style.CustomizeFill = true;

                            //item.Cells["ToPostCode"].Style.BackColor = Color.Yellow;
                            //item.Cells["ToPostCode"].Style.CustomizeFill = true;




                            //item.Cells["Driver"].Style.BackColor = Color.Yellow;
                            //item.Cells["Driver"].Style.CustomizeFill = true;


                            //item.Cells["UpdateBy"].Style.BackColor = Color.Yellow;
                            //item.Cells["UpdateBy"].Style.CustomizeFill = true;




                            //item.Cells["Fare"].Style.BackColor = Color.Yellow;
                            //item.Cells["Fare"].Style.CustomizeFill = true;


                        }
                    }
                    else
                    {


                        //if (grdPendingJobs.Columns["TimeLeft"].IsVisible)
                        //{

                        //    item.Cells["TimeLeft"].Style.ForeColor = Color.Red;
                        //    item.Cells["TimeLeft"].Style.CustomizeFill = true;
                        //}


                        if (item.Cells["StatusId"].Value.ToInt() != Enums.BOOKINGSTATUS.BID)
                        {
                            //item.Cells["Time"].Style.BackColor = Color.LightPink;
                            //item.Cells["Time"].Style.CustomizeFill = true;




                            //item.Cells["UpdateBy"].Style.BackColor = Color.LightPink;
                            //item.Cells["UpdateBy"].Style.CustomizeFill = true;

                            //item.Cells["Driver"].Style.BackColor = Color.LightPink;
                            //item.Cells["Driver"].Style.CustomizeFill = true;

                            //item.Cells["To"].Style.BackColor = Color.LightPink;
                            //item.Cells["To"].Style.CustomizeFill = true;

                            //item.Cells["From"].Style.BackColor = Color.LightPink;
                            //item.Cells["From"].Style.CustomizeFill = true;

                            //item.Cells["MobileNo"].Style.BackColor = Color.LightPink;
                            //item.Cells["MobileNo"].Style.CustomizeFill = true;


                            //item.Cells["FromPostCode"].Style.BackColor = Color.LightPink;
                            //item.Cells["FromPostCode"].Style.CustomizeFill = true;

                            //item.Cells["ToPostCode"].Style.BackColor = Color.LightPink;
                            //item.Cells["ToPostCode"].Style.CustomizeFill = true;

                            item.Cells["PickUpDate"].Style.BackColor = Color.LightPink;
                            item.Cells["PickUpDate"].Style.CustomizeFill = true;

                            item.Cells["Time"].Style.BackColor = Color.LightPink;
                            item.Cells["Time"].Style.CustomizeFill = true;

                            item.Cells["Plot"].Style.BackColor = Color.LightPink;
                            item.Cells["Plot"].Style.CustomizeFill = true;


                            //item.Cells["Fare"].Style.BackColor = Color.LightPink;
                            //item.Cells["Fare"].Style.CustomizeFill = true;

                        }

                        IsExpiring = true;


                        if (checkPreBookingDueAlert && item.Cells["PickupDateTemp"].Value.ToDateTime().Subtract(item.Cells["BookingDateTime"].Value.ToDateTime()).TotalMinutes > 10 && item.Cells["StatusId"].Value.ToInt() != Enums.BOOKINGSTATUS.PENDING)
                        {
                            preBookingExpired = true;
                        }
                    }
                }




                //



                if (BookingAlertMins > 0 || preBookingExpired)
                {

                    if (preBookingExpired)
                    {
                        if (AppVars.JobDueAlertLastStopped == null || DateTime.Now > AppVars.JobDueAlertLastStopped)
                        {
                            if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\sound\\Startup.wav"))
                            {
                                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\sound\\PreBookAlert.wav"))
                                {
                                    sp.SoundLocation = System.Windows.Forms.Application.StartupPath + "\\sound\\PreBookAlert.wav";
                                }

                                sp.Play();


                                if (sp.SoundLocation.ToStr().Contains("Startup.wav") == false)
                                    sp.SoundLocation = System.Windows.Forms.Application.StartupPath + "\\sound\\Startup.wav";


                                AppVars.JobDueAlertLastStopped = DateTime.Now.AddMinutes(5);
                            }
                        }
                    }

                    else if (
                         //preBookingExpired ||





                         (IsExpiring && grdPendingJobs.Rows.Count(c => c.Cells["StatusId"].Value.ToInt() != Enums.BOOKINGSTATUS.PENDING
                              && c.Cells["BookingDateTime"].Value.ToDateTime().AddMinutes(5) < DateTime.Now) > 0))
                    {



                        if ((frmJobDue == null || frmJobDue.IsDisposed))
                        {
                            if (frmJobDue == null || frmJobDue.IsDisposed)
                            {

                                if (AppVars.JobDueAlertLastStopped == null || DateTime.Now > AppVars.JobDueAlertLastStopped)
                                {
                                    AppVars.JobDueAlertLastStopped = null;



                                    frmJobDue = new frmJobDueAlert(preBookingExpired);
                                    frmJobDue.Show();



                                }
                            }
                        }

                    }
                    else
                    {

                        StopJobDueSound();
                    }

                }
                else if (preBookingExpired == false)
                {
                    AppVars.JobDueAlertLastStopped = null;
                    StopJobDueSound();
                }


                if (ZeroTimeRefresh == false && string.Format("{0:hh:mm tt}", DateTime.Now) == "12:00 AM" && grdPreBookings.Rows.Count > 0)
                {

                    ZeroTimeRefresh = true;

                    ReSyncOfflineBookings();
                }

                if (this.IsLicenseExpired)
                {


                    this.IsLicenseExpired = false;

                    frmLicenseKey frmLicense = new frmLicenseKey();
                    frmLicense.ShowDialog();

                    AppVars.frmMDI.CloseApplication();
                }


                if (CanReadSMS)
                {

                    if (btnSMS.BackColor == Color.Orange)
                    {

                        SetSMSBlinking(Color.AliceBlue);
                    }
                    else if (btnSMS.BackColor == Color.AliceBlue)
                    {

                        SetSMSBlinking(Color.Orange);
                    }





                }





                if (EnablePDA)
                {


                    if (tableLayoutPanel2.ColumnStyles[2].Width > 0)
                    {


                        if (IsPanicMode)
                        {
                            if (grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] == objPanic)
                            {
                                grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;


                                grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;
                            }
                            else
                            {
                                grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanic;
                                grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanic;

                            }
                        }
                        else
                        {
                            if (grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] == objPanic)
                            {
                                grdDriverWaiting.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;

                                grdOnBoardDriver.Columns["IsPanic"].ConditionalFormattingObjectList[0] = objPanicBlink;

                            }

                        }
                    }
                    //  }






                }






                if (HasWebBookingTab)
                {


                    if (Pg_NewWebBookings.Tag != null)
                    {

                        if (Pg_NewWebBookings.Item.BackColor == Color.Orange)
                        {
                            Pg_NewWebBookings.Item.NumberOfColors = 1;
                            Pg_NewWebBookings.Item.BackColor = Color.FromName("ffe9f0f9");

                            Pg_NewWebBookings.Item.DrawFill = true;

                        }
                        else if (Pg_NewWebBookings.Item.BackColor == Color.FromName("ffe9f0f9"))
                        {


                            Pg_NewWebBookings.Item.NumberOfColors = 1;
                            Pg_NewWebBookings.Item.BackColor = Color.Orange;
                            Pg_NewWebBookings.Item.DrawFill = true;
                        }
                    }
                    else
                    {
                        Pg_NewWebBookings.Item.BackColor = Color.FromName("ffbfdbff");
                        Pg_NewWebBookings.Item.DrawFill = false;
                    }


                }




                if (lblNotification != null)
                {

                    if (!string.IsNullOrEmpty(updatemessage) || lblNotification.Text.Length > 0)
                    {





                        if (lblNotification.Text.Equals(">>"))
                            lblNotification.Text = string.Empty;


                        if (updatemessage.Length > 0)
                        {

                            IsNotification = true;
                            lblNotification.Visible = true;

                            radLabel1.Text = "";
                            radLabel1.BackColor = Color.Red;

                            lblNotification.Location = new System.Drawing.Point(pnlNotification.Width, 4);
                            xpos = 0;


                            if (string.IsNullOrEmpty(lblNotification.Text))
                                lblNotification.Text = updatemessage;

                            else
                                lblNotification.Text = updatemessage + " >> " + lblNotification.Text;


                            updatemessage = string.Empty;

                        }

                        foreach (Match m in new Regex(@"[0-9]{1,2}:[0-9]{1,2}").Matches(lblNotification.Text))
                        {
                            if (m.Success)
                            {



                                notificationHideMins = DateTime.Now.TimeOfDay.Subtract(TimeSpan.Parse(m.Value)).TotalMinutes;


                                if (notificationHideMins < 0 || notificationHideMins >= 3)
                                {
                                    int idx = lblNotification.Text.Substring(0, m.Index + m.Length).LastIndexOf(">>");

                                    if (idx == -1)
                                        idx = 0;
                                    else if (idx > 0)
                                        idx--;

                                    lblNotification.Text = lblNotification.Text.Remove(idx, (m.Index + m.Length) - idx).Trim();
                                    break;
                                }

                            }
                        }

                    }
                    else
                    {
                        IsNotification = false;
                        radLabel1.BackColor = Color.Coral;
                        radLabel1.Text = "Today's Booking";

                    }

                }




            }
            catch
            {

            }

        }





        double notificationHideMins = 0;
        bool preBookingExpired = false;
        bool checkPreBookingDueAlert = false;
        bool reSyncMidnightBookings = false;
        public void PopulateSearchJobsList()
        {

            try
            {
                grdRecentJobs.AllowAutoSizeColumns = true;
                grdRecentJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
                string email = "";

                DateTime? startDate = dtp_recentJob_StartDate.Value;
                DateTime? endDate = dtp_RecentJobs_EndDate.Value;

                if (endDate != null && endDate.Value.Minute == 0 && endDate.Value.Hour == 0)
                {
                    dtp_RecentJobs_EndDate.Value = dtp_RecentJobs_EndDate.Value.ToDate() + new TimeSpan(23, 59, 59);
                    endDate = dtp_RecentJobs_EndDate.Value;
                }

                string orderNo = txtOrderNo.Text.Trim();
                string refNo = txtRefNumber.Text.Trim();
                string phoneNo = txtPhoneNo.Text.Trim();
                string mobNo = txtMobileNo.Text.Trim();
                if (txtEmail != null)
                {
                    email = txtEmail.Text.Trim();

                }

                string customerName = ddlCust.Text.Trim();
                string pickUp = txtPickup.Text.Trim().ToLower();
                string via = txtVia.Text.Trim().ToLower();
                string destination = txtDestination.Text.Trim();
                string paymentRef = txtPaymentRef.Text.ToStr().Trim();

                int companyId = ddlCompany.SelectedValue.ToInt();
                int paymentTypeId = ddlPaymentType.SelectedValue.ToInt();
                int statusId = ddlStatus.SelectedValue.ToInt();
                int BookingTypeId = ddlBookingType.SelectedValue.ToInt();
                int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();
                int driverId = ddlDriver.SelectedValue.ToInt();
                int companyVehId = ddlCompanyVehicle.SelectedValue.ToInt();
                bool withQuotation = chkQuotation.Checked;

                int searchDateTypeId = ddlSearchDateType.SelectedIndex;
                string tokenNo = txtTokenNo.Text.Trim();

                bool withRecording = chkAvailableRecordings.Checked;

                long ID = 0;

                if (refNo.Length > 0)
                {

                    startDate = null;
                    endDate = null;

                    if (refNo.ToStr().Trim().IsNumeric())
                        ID = refNo.ToStr().Trim().ToLong();
                    else
                    {
                        try
                        {

                            string dummyID = string.Empty;

                            for (int i = 0; i <= refNo.Length; i++)
                            {
                                if (char.IsNumber(refNo[i]))
                                    dummyID += refNo[i];
                                else
                                    continue;
                            }

                            if (dummyID.ToStr().Trim().IsNumeric())
                                ID = dummyID.ToStr().Trim().ToLong();
                        }
                        catch
                        {

                        }
                    }
                }
                int journeytypeid = 0;
                if (ddlJourneyType != null)
                {
                    journeytypeid = ddlJourneyType.SelectedValue.ToInt();

                }




                var data1 = AppVars.BLData.GetAll<Booking>(null).OrderByDescending(c => c.PickupDateTime);

                var query = from a in data1
                            where

                            (
                                (searchDateTypeId == 0 && (startDate == null || a.BookingDate.Value >= startDate) && (endDate == null || a.BookingDate.Value <= endDate))

                                || (searchDateTypeId == 1 && (startDate == null || a.PickupDateTime.Value >= startDate) && (endDate == null || a.PickupDateTime.Value <= endDate))
                             )
                              && (journeytypeid == 0 || a.JourneyTypeId == journeytypeid)
                              && (companyId == 0 || a.CompanyId == companyId)
                                && (companyVehId == 0 || a.FleetMasterId == companyVehId)
                              && (driverId == 0 || a.DriverId == driverId)
                              && (vehicleTypeId == 0 || a.VehicleTypeId == vehicleTypeId)
                              && (paymentTypeId == 0 || a.PaymentTypeId == paymentTypeId)
                              && (statusId == 0 || a.BookingStatusId == statusId)
                              && (BookingTypeId == 0 || a.BookingTypeId == BookingTypeId)
                              && (customerName == string.Empty || a.CustomerName.Contains(customerName))
                              && (phoneNo == string.Empty || a.CustomerPhoneNo.Contains(phoneNo))
                              && (mobNo == string.Empty || a.CustomerMobileNo.Contains(mobNo))
                              && (pickUp == string.Empty || a.FromAddress.Contains(pickUp))
                                && (email == string.Empty || a.CustomerEmail.Contains(email))
                              && (via == string.Empty || a.Booking_ViaLocations.Select(c => c.ViaLocValue).Contains(via))
                              && (destination == string.Empty || a.ToAddress.Contains(destination))
                              && (refNo == string.Empty || a.BookingNo.Contains(refNo) || (ID != 0 && a.Id == ID && (a.BookingTypeId == Enums.BOOKING_TYPES.ONLINE || a.BookingTypeId == Enums.BOOKING_TYPES.WEB)))
                              && (orderNo == string.Empty || a.OrderNo == orderNo)
                              && (paymentRef == string.Empty || a.PaymentComments.Contains(paymentRef))
                              && ((withQuotation == false && a.IsQuotation == false) || (withQuotation == true))
                               && ((withRecording && a.CallRefNo != null && a.CallRefNo != "") || (withRecording == false))

                              && (a.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0)
                              && (tokenNo == string.Empty || a.JobCode == tokenNo)
                            //         && (subcompany == string.Empty || (a.SubcompanyId!=null && a.Gen_SubCompany.CompanyName.Contains(subcompany)))

                            select new
                            {
                                Id = a.Id,
                                RefNumber = a.BookingNo,
                                BookingDate = a.BookingDate,
                                PickupDate = a.PickupDateTime,
                                Passenger = a.CustomerName,
                                //From = a.FromLocTypeId == Enums.LOCATION_TYPES.ADDRESS || a.FromLocTypeId == Enums.LOCATION_TYPES.BASE ? a.FromAddress : a.FromLocTypeId == Enums.LOCATION_TYPES.POSTCODE ? a.FromPostCode : a.Gen_Location.LocationName,
                                //To = a.ToLocTypeId == Enums.LOCATION_TYPES.ADDRESS || a.ToLocTypeId == Enums.LOCATION_TYPES.BASE ? a.ToAddress : a.ToLocTypeId == Enums.LOCATION_TYPES.POSTCODE ? a.ToPostCode : a.Gen_Location1.LocationName,
                                Acc = a.CompanyId != null ? a.Gen_Company.CompanyName : "",
                                OrderNo = a.OrderNo,
                                From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                Fare = a.TotalCharges,
                                DrvFare = default(decimal),
                                Driver = a.Fleet_Driver.DriverNo,
                                Vehicle = a.Fleet_VehicleType.VehicleType,
                                MobileNo = a.CustomerMobileNo,
                                Status = a.BookingStatus.StatusName,
                                StatusTextColor = a.BookingStatus.TextColor,
                                PaymentRef = a.PaymentComments,
                                a.FareRate,
                                ServiceCharges = a.ServiceCharges != null ? a.ServiceCharges : 0.00m,
                                DrvWaiting = a.MeetAndGreetCharges != null ? a.MeetAndGreetCharges : 0.00m,
                                DrvParking = a.CongtionCharges != null ? a.CongtionCharges : 0.00m,
                                ExtraDropCharges = a.ExtraDropCharges != null ? a.ExtraDropCharges : 0.00m
                            };





                grdRecentJobs.DataSource = query;


                grdRecentJobs.Columns["Id"].IsVisible = false;
                grdRecentJobs.Columns["RefNumber"].Width = 60;
                grdRecentJobs.Columns["Fare"].Width = 70;
                grdRecentJobs.Columns["Vehicle"].Width = 70;

                grdRecentJobs.Columns["Status"].Width = 70;
                grdRecentJobs.Columns["MobileNo"].Width = 100;
                grdRecentJobs.Columns["OrderNo"].Width = 80;
                grdRecentJobs.Columns["Driver"].Width = 60;
                grdRecentJobs.Columns["Acc"].Width = 90;
                grdRecentJobs.Columns["PaymentRef"].Width = 100;
                grdRecentJobs.Columns["PaymentRef"].HeaderText = "Payment Ref";
                grdRecentJobs.Columns["Acc"].HeaderText = "A/C";


                if (AppVars.listUserRights.Count(c => c.functionId == "HIDE ACCOUNT FARES") > 0)
                {

                    grdRecentJobs.Columns["Fare"].IsVisible = false;
                    grdRecentJobs.Columns["DrvFare"].HeaderText = "Fare";


                    grdRecentJobs.Columns["DrvFare"].IsVisible = true;

                    grdRecentJobs.Columns["DrvFare"].Width = 70;


                    grdRecentJobs.Columns["DrvFare"].Expression = "FareRate+DrvParking+DrvWaiting+ExtraDropCharges+ServiceCharges";

                }
                else
                    grdRecentJobs.Columns["DrvFare"].IsVisible = false;

                grdRecentJobs.Columns["FareRate"].IsVisible = false;
                grdRecentJobs.Columns["DrvParking"].IsVisible = false;
                grdRecentJobs.Columns["DrvWaiting"].IsVisible = false;
                grdRecentJobs.Columns["ExtraDropCharges"].IsVisible = false;
                grdRecentJobs.Columns["ServiceCharges"].IsVisible = false;

            }
            catch (Exception ex)
            {
                //                ENUtils.ShowMessage(ex.Message);

            }
        }






        void grdLister_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {

            ViewDetailForm(e.Row);


        }

        private void ViewDetailForm(GridViewRowInfo row)
        {
            try
            {

                if (row != null && row is GridViewDataRowInfo)
                {
                    ShowBookingForm(row.Cells["Id"].Value.ToInt(), true);
                }
                else
                {
                    ENUtils.ShowMessage("Please select a record");
                }
            }
            catch (Exception ex)
            {


            }
        }























        public string GetCurrentBookingByCustomer(string contactNo)
        {
            string rtn = string.Empty;
            try
            {


                if (contactNo.ToStr().Trim().StartsWith("07") && grdAllJobs.Columns.Contains("MobileNo"))
                {

                    var row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["MobileNo"].Value.ToStr() == contactNo);

                    if (row != null)
                    {
                        string driverNo = row.Cells["Driver"].Value.ToStr();

                        if (driverNo.Contains("-"))
                            driverNo = driverNo.Substring(0, driverNo.IndexOf("-"));


                        string vehicleDetails = string.Empty;

                        try
                        {
                            vehicleDetails = " - " + row.Cells["VehicleDetails"].Value.ToStr();
                        }
                        catch
                        {

                        }

                        rtn = "Ref # : " + row.Cells["RefNumber"].Value.ToStr() + " @ " + row.Cells["Time"].Value.ToStr() +
                                       "\r\n\r\n" + "Pickup : " + row.Cells["From"].Value.ToStr() +
                                       "\r\n\r\n" + "Destination : " + row.Cells["To"].Value.ToStr() +
                                       "\r\n\r\n" + "Driver : " + driverNo + vehicleDetails + ">>>>" + driverNo
                                       + ">>>>" + row.Cells["Id"].Value.ToLong();


                    }
                }
                else if (grdAllJobs.Columns.Contains("TelephoneNo"))
                {

                    var row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["TelephoneNo"].Value.ToStr() == contactNo);

                    if (row != null)
                    {
                        string driverNo = row.Cells["Driver"].Value.ToStr();

                        if (driverNo.Contains("-"))
                            driverNo = driverNo.Substring(0, driverNo.IndexOf("-"));



                        rtn = "Ref # : " + row.Cells["RefNumber"].Value.ToStr() + " @ " + row.Cells["Time"].Value.ToStr() +
                                       "\r\n\r\n" + "Pickup : " + row.Cells["From"].Value.ToStr() +
                                       "\r\n\r\n" + "Destination : " + row.Cells["To"].Value.ToStr() +
                                       "\r\n\r\n" + "Driver : " + driverNo + ">>>>" + driverNo
                                       + ">>>>" + row.Cells["Id"].Value.ToLong();


                    }
                }
            }
            catch (Exception ex)
            {


            }

            return rtn;



        }

        public List<string> GetFOJPickups(int driverId)
        {
            List<string> fojlist = new List<string>();
            try
            {




                foreach (var item in grdAllJobs.Rows.Where(c => c.Cells["DriverId"].Value.ToInt() == driverId && c.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ))
                {
                    fojlist.Add(string.Format("{0:HH:mm}", item.Cells["PickupDateTemp"].Value) + "|" + item.Cells["From"].Value.ToStr().ToUpper());
                }


                foreach (var item in grdPendingJobs.Rows.Where(c => c.Cells["DriverId"].Value.ToInt() == driverId && c.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.FOJ))
                {
                    fojlist.Add(string.Format("{0:HH:mm}", item.Cells["PickupDateTemp"].Value) + "|" + item.Cells["From"].Value.ToStr().ToUpper());
                }



                fojlist.Distinct().ToList();



            }
            catch (Exception ex)
            {


            }

            return fojlist;



        }



        public List<Booking> GetWaitingBookingsOfCustomer(string contactNo)
        {
            string rtn = string.Empty;
            List<Booking> listofBookings = new List<Booking>();
            try
            {
                if (grdAllJobs.Columns.Contains("MobileNo"))
                {
                    var rows = grdPendingJobs.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                    if (rows.Count > 0)
                    {



                        foreach (var item in rows)
                        {
                            listofBookings.Add(new
                            Booking
                            {
                                Id = item.Cells["Id"].Value.ToLong(),
                                BookingNo = item.Cells["RefNumber"].Value.ToStr(),
                                PickupDateTime = item.Cells["PickupDateTemp"].Value.ToDateTime(),
                                FromAddress = item.Cells["From"].Value.ToStr(),
                                ToAddress = item.Cells["To"].Value.ToStr(),
                                BookingTypeId = item.Cells["BookingTypeId"].Value.ToInt()

                            });
                        }

                    }

                    var rowsPre = grdPreBookings.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                    if (rowsPre.Count > 0)
                    {

                        foreach (var item in rowsPre)
                        {
                            listofBookings.Add(new
                            Booking
                            {
                                Id = item.Cells["Id"].Value.ToLong(),
                                BookingNo = item.Cells["RefNumber"].Value.ToStr(),
                                PickupDateTime = item.Cells["PickupDateTemp"].Value.ToDateTime(),
                                FromAddress = item.Cells["From"].Value.ToStr(),
                                ToAddress = item.Cells["To"].Value.ToStr(),
                                BookingTypeId = item.Cells["BookingTypeId"].Value.ToInt()

                            });
                        }
                    }


                    if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                    {
                        try
                        {

                            var rowsQuo = grdQuotations.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                            if (rowsQuo.Count > 0)
                            {

                                foreach (var item in rowsQuo)
                                {
                                    listofBookings.Add(new
                                    Booking
                                    {
                                        Id = item.Cells["Id"].Value.ToLong(),
                                        BookingNo = item.Cells["RefNumber"].Value.ToStr(),
                                        PickupDateTime = item.Cells["PickupDateTemp"].Value.ToDateTime(),
                                        FromAddress = item.Cells["From"].Value.ToStr(),
                                        ToAddress = item.Cells["To"].Value.ToStr(),
                                        IsQuotation = true,
                                        BookingTypeId = item.Cells["BookingTypeId"].Value.ToInt()
                                    });
                                }
                            }
                        }
                        catch
                        {


                        }
                    }


                    listofBookings = listofBookings.OrderBy(c => c.PickupDateTime).ToList();
                }
            }
            catch (Exception ex)
            {


            }

            return listofBookings;
        }


        public bool GetWaitingBookingsCount(string contactNo)
        {
            bool rtn = true;

            try
            {
                if (grdAllJobs.Columns.Contains("MobileNo"))
                {
                    var rows = grdPendingJobs.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                    if (rows.Count > 0)
                    {




                        rtn = false;


                    }

                    var rowsPre = grdPreBookings.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                    if (rowsPre.Count > 0)
                    {

                        rtn = false;
                    }


                    if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                    {
                        try
                        {

                            var rowsQuo = grdQuotations.Rows.Where(c => c.Cells["MobileNo"].Value.ToStr() == contactNo).ToList();

                            if (rowsQuo.Count > 0)
                            {

                                rtn = false;
                            }
                        }
                        catch
                        {


                        }
                    }



                }
            }
            catch (Exception ex)
            {


            }

            return rtn;
        }


        int BookingHours = 0;
        public override void PopulateData()
        {
            try
            {

                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);

                DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();
                DateTime dtNow = DateTime.Now;
                // live




                var query = db.stp_GetBookingsData(recentDays, prebookingdays, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();






                int val = grdPendingJobs.TableElement.VScrollBar.Value;
                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);
                if (BookingHours > 0)
                {

                    if (ShowPendingJobOnRecentTab)
                    {


                        grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                               || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                               || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                               .OrderBy(c => c.Lead).ToList();
                    }
                    else
                    {

                        grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                               || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                               || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                               .OrderBy(c => c.Lead).ToList();
                    }
                }
                else
                {

                    if (ShowPendingJobOnRecentTab)
                    {
                        grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                    || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                             ))
                                    .OrderBy(c => c.Lead).ToList();
                    }
                    else
                    {

                        if (JobsSortBy == 0)
                        {

                            grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                      && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                         || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                          || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                          .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {
                            grdPendingJobs.DataSource = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                     && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                        || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                         || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                         .OrderBy(c => c.PickupDateTemp).ToList();
                        }
                    }

                }





                grdPendingJobs.TableElement.VScrollBar.Value = val;
                //   grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);


                FormatTodaysBookingGrid();


                // PreBooking


                val = grdPreBookings.TableElement.VScrollBar.Value;


                if (BookingHours > 0)
                {

                    grdPreBookings.DataSource = query.Where(a => a.PickupDateTemp > Hours
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                          || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                          || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                          || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                               .OrderBy(c => c.PickupDateTemp).ToList();

                }


                else
                {
                    grdPreBookings.DataSource = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                           || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                .OrderBy(c => c.PickupDateTemp).ToList();
                }


                ReSyncDueBookings();





                grdPreBookings.TableElement.VScrollBar.Value = val;
                this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";


                ClearRecentJobFilter();




                if (ShowPendingJobOnRecentTab)
                {

                    grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                           || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                           || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                           || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                }
                else
                {

                    if (EnableGhostJob)
                    {

                        grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                             || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC

                                                             || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                    }
                    else
                    {






                        grdAllJobs.DataSource = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                               || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                               || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                               || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();

                    }

                }


                this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";


                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {
                    PopulateQuotationsGrid();
                }





                dtpFromDatePreBook.Value = DateTime.Now.AddDays(1).ToDate();
                dtpToDatePreBook.Value = prebookingdays;
            }
            catch (Exception ex)
            {
                //   ENUtils.ShowMessage(ex.Message);

            }

        }

        private int JobsSortBy;


        private void PopulateQuotationsGrid()
        {
            try
            {

                DateTime? nowDate = DateTime.Now.Date;
                DateTime? fromDate = dtpFromQuotation.Value.ToDateorNull();
                DateTime? tillDate = dtpToQuotation.Value.ToDateorNull();

                if (fromDate != null && fromDate < nowDate)
                    fromDate = nowDate;


                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.CommandTimeout = 5;

                    var quotation = (from a in db.Bookings.Where(a => a.IsQuotation == true && a.BookingStatusId != Enums.BOOKINGSTATUS.CANCELLED
                                                && ((fromDate == null || a.PickupDateTime.Value.Date >= fromDate)
                                                 && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate))
                                                 && (AppVars.DefaultBookingSubCompanyId == 0 || a.SubcompanyId == AppVars.DefaultBookingSubCompanyId)

                                                 ).OrderByDescending(c => c.PickupDateTime)

                                     select new
                                     {
                                         Id = a.Id,
                                         RefNumber = a.BookingNo,
                                         PickupDateTemp = a.PickupDateTime,
                                         PickUpDate = string.Format("{0:dd/MMM/yyyy}", a.PickupDateTime),
                                         Time = string.Format("{0:HH:mm}", a.PickupDateTime),
                                         Passenger = a.CustomerName,
                                         MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
                                         From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                         To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                         Fare = a.TotalCharges,
                                         FromLocTypeId = a.FromLocTypeId,
                                         ToLocTypeId = a.ToLocTypeId,
                                         Account = a.Gen_Company != null ? a.Gen_Company.CompanyName : "",
                                         BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                                         TextColor = a.Fleet_VehicleType.TextColor,
                                         Vehicle = a.Fleet_VehicleType.VehicleType,
                                         UpdateBy = a.AddLog,
                                         a.BookingTypeId

                                     }).ToList();


                    //grdQuotations.b();

                    grdQuotations.DataSource = quotation;
                    //grdAllJobs.EndEdit();

                    FormatQuotationsGrid();
                }
            }
            catch (Exception ex)
            {


            }
        }





        private void radPageView1_SelectedPageChanging(object sender, RadPageViewCancelEventArgs e)
        {
            try
            {


                if (e.Page.Name == "Pg_RecentJobs")
                {
                    //if (IsRecentJob_TabbedOpened == false)
                    //{
                    //    if (ddlSearchDateType.Items.Count == 0)
                    //    {

                    Telerik.WinControls.UI.RadListDataItem radListDataItem3 = new Telerik.WinControls.UI.RadListDataItem();
                    Telerik.WinControls.UI.RadListDataItem radListDataItem4 = new Telerik.WinControls.UI.RadListDataItem();

                    ddlSearchDateType.Items.Clear();

                    radListDataItem3.Selected = false;
                    radListDataItem3.Text = "Booking Date";
                    radListDataItem3.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    radListDataItem3.TextWrap = true;
                    radListDataItem4.Text = "Pickup Date";
                    radListDataItem4.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                    radListDataItem4.TextWrap = true;
                    radListDataItem4.Selected = true;
                    this.ddlSearchDateType.Items.Add(radListDataItem3);
                    this.ddlSearchDateType.Items.Add(radListDataItem4);

                    if (ddlJourneyType != null)
                    {
                        ddlJourneyType.Items.Clear();
                        ddlJourneyType.Items.Add(new RadListDataItem { Text = "One Way", Value = 1 });
                        ddlJourneyType.Items.Add(new RadListDataItem { Text = "Return", Value = 2 });
                        ddlJourneyType.Items.Add(new RadListDataItem { Text = "Wait & Return", Value = 3 });
                    }

                    ComboFunctions.FillPaymentTypeCombo(ddlPaymentType);
                    ComboFunctions.FillBookingStatusCombo(ddlStatus);
                    ComboFunctions.FillBookingTypeCombo(ddlBookingType);
                    grdRecentJobs.Rows.Clear(); 
                    lblSearchResults.Visible = false;

                    grdRecentJobs.ViewCellFormatting += new CellFormattingEventHandler(grdRecentJobs_ViewCellFormatting);

                    grdRecentJobs.EnableFiltering = true; ;
                    grdRecentJobs.ShowFilteringRow = true;


                    ddlCust.Enter += new EventHandler(ddlCust_Enter);

                    opt_JOneWay.Visible = false;
                    opt_JReturnWay.Visible = false;
                    //}




                    grdRecentJobs.TableElement.Font = newFont;



                    //IsRecentJob_TabbedOpened = true;

                    //}



                    FullScreenLayout(true);

                }


                else if (e.Page.Name == "Pg_DrvBookingStats")
                {
                    FullScreenLayout(true);
                    grdStats.ShowGroupPanel = false;

                    grdStats.AllowAddNewRow = false;
                    grdStats.ShowRowHeaderColumn = false;

                    LoadDriverBookingStats();


                }

                else if (e.Page.Name == "Pg_AllJobs")
                {
                    FullScreenLayout(false);

                    if (ddlBookingStatus.Items.Count == 0)
                    {


                        //Telerik.WinControls.UI.RadListDataItem radListDataItem5 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem6 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem7 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem8 = new Telerik.WinControls.UI.RadListDataItem();



                        //radListDataItem5.Text = "Waiting & OnGoing";
                        //radListDataItem5.TextWrap = true;
                        //radListDataItem6.Text = "Waiting";
                        //radListDataItem6.TextWrap = true;

                        //radListDataItem7.Text = "Ongoing";
                        //radListDataItem7.TextWrap = true;
                        //radListDataItem8.Text = "All";
                        //radListDataItem8.TextWrap = true;
                        //this.ddlBookingStatus.Items.Add(radListDataItem5);
                        //this.ddlBookingStatus.Items.Add(radListDataItem6);
                        //this.ddlBookingStatus.Items.Add(radListDataItem7);
                        //this.ddlBookingStatus.Items.Add(radListDataItem8);



                        //radListDataItem7.Selected = true;
                        //this.ddlBookingStatus.Tag = 2;


                    }


                    if (ddlRecentColumn.Items.Count == 0)
                    {
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem9 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem10 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem11 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem12 = new Telerik.WinControls.UI.RadListDataItem();
                        //Telerik.WinControls.UI.RadListDataItem radListDataItem16 = new Telerik.WinControls.UI.RadListDataItem();



                        //radListDataItem9.Selected = true;


                        //radListDataItem9.Text = "Refrence No";
                        //radListDataItem9.TextWrap = true;
                        //radListDataItem10.Text = "Driver";
                        //radListDataItem10.TextWrap = true;
                        //radListDataItem11.Text = "PickUp Point";
                        //radListDataItem11.TextWrap = true;
                        //radListDataItem12.Text = "Destination";
                        //radListDataItem12.TextWrap = true;
                        //radListDataItem16.Text = "Passenger";
                        //radListDataItem16.TextWrap = true;
                        //this.ddlRecentColumn.Items.Add(radListDataItem9);
                        //this.ddlRecentColumn.Items.Add(radListDataItem10);
                        //this.ddlRecentColumn.Items.Add(radListDataItem11);
                        //this.ddlRecentColumn.Items.Add(radListDataItem12);
                        //this.ddlRecentColumn.Items.Add(radListDataItem16);
                    }



                    this.Pg_AllJobs.Tag = grdAllJobs.Rows.Count;

                    if (RecentJobsRefreshRequired)
                    {
                        RecentJobsRefreshRequired = false;

                        RefreshActiveDataWithoutWait();

                    }
                }
                else if (e.Page.Name == "Pg_BookingHistory" && Pg_BookingHistory != null)
                {

                    FullScreenLayout(true);
                    if (ddlColumnBookingHistory.Items.Count == 0)
                    {



                        lockCompletedBooking = AppVars.listUserRights.Count(c => c.formName == "frmBooking" && c.functionId == "LOCK COMPLETED BOOKING") > 0;
                        lockCancelledBooking = AppVars.listUserRights.Count(c => c.formName == "frmBooking" && c.functionId == "LOCK CANCELLED BOOKING") > 0;
                        lockNoFareBooking = AppVars.listUserRights.Count(c => c.formName == "frmBooking" && c.functionId == "LOCK NOFARE BOOKING") > 0;


                        ddlColumnBookingHistory.Items.Add("Reference");
                        ddlColumnBookingHistory.Items.Add("Passenger");
                        ddlColumnBookingHistory.Items.Add("Telephone No");
                        ddlColumnBookingHistory.Items.Add("Mobile No");
                        ddlColumnBookingHistory.Items.Add("Pickup Point");
                        ddlColumnBookingHistory.Items.Add("Destination");

                        ddlColumnBookingHistory.Items.Add("Vehicle");
                        ddlColumnBookingHistory.Items.Add("Driver");
                        ddlColumnBookingHistory.Items.Add("Status");
                        ddlColumnBookingHistory.Items.Add("SubCompany");
                        ddlColumnBookingHistory.SelectedIndex = 0;


                        RefreshBookingList();


                    }



                    else
                    {


                        if (this.RefreshOnActive)
                        {
                            this.RefreshOnActive = false;
                            RefreshBookingList();

                        }


                    }


                }


                else if (e.Page.Name == "Pg_PendingJobs")
                {
                    FullScreenLayout(false);


                }
                else if (e.Page.Name == "Pg_PreBookings")
                {
                    if (AppVars.ShowAllBookings.ToBool())
                    {
                        ddlSubCompanyPreBooking.Visible = true;
                        foreach (var item in General.GetQueryable<Gen_SubCompany>(null).Select(args => new { args.BackgroundColor, args.CompanyName, args.Id }).ToList())
                        {
                            ddlSubCompanyPreBooking.Items.Add(new RadCustomListDataItem { Text = item.CompanyName, Value = item.BackgroundColor, Tag = item.Id });
                        }

                        if (ddlSubCompanyPreBooking.Items.Count == 1)
                        {
                            ddlSubCompanyPreBooking.Visible = false;
                        }
                        else
                        {
                            ddlSubCompanyPreBooking.Items.Insert(0, new RadCustomListDataItem { Text = "Show All Data", Value = 0, Font = new Font("Tahoma", 10, FontStyle.Bold), ForeColor = Color.Black });
                            ddlSubCompanyPreBooking.SelectedIndex = 0;
                            //  ddlSubCompany.DropDownStyle = RadDropDownStyle.DropDownList;
                            ddlSubCompanyPreBooking.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlSubCompanyPreBooking_SelectedIndexChanged);
                        }

                    }
                    else
                    {
                        if (AppVars.DefaultBookingSubCompanyId > 0)
                        {
                            foreach (var item in General.GetQueryable<Gen_SubCompany>(null).Select(args => new { args.BackgroundColor, args.CompanyName, args.Id }).ToList())
                            {
                                ddlSubCompanyPreBooking.Items.Add(new RadCustomListDataItem { Text = item.CompanyName, Value = item.BackgroundColor, Tag = item.Id });
                            }


                            ddlSubCompanyPreBooking.Items.Insert(0, new RadCustomListDataItem { Text = "Show All Data", Value = 0, Font = new Font("Tahoma", 10, FontStyle.Bold), ForeColor = Color.Black });

                            ddlSubCompanyPreBooking.SelectedIndexChanged += new Telerik.WinControls.UI.Data.PositionChangedEventHandler(ddlSubCompanyPreBooking_SelectedIndexChanged);
                            ddlSubCompanyPreBooking.SelectedItem = ddlSubCompanyPreBooking.Items.OfType<RadCustomListDataItem>().FirstOrDefault(c => c.Tag.ToInt() == AppVars.DefaultBookingSubCompanyId);

                            ddlSubCompanyPreBooking.Visible = false;
                        }
                    }
                    FullScreenLayout(true);
                    if (UpdateRequiredPreBooking)
                        RefreshUpdatePreBookingGrid("");

                }

                else if (e.Page.Name.ToLower() == "pg_pooljobs")
                {
                    FullScreenLayout(true);
                    PopulateJobsPool();
                }
                else if (e.Page.Name.ToLower() == "pg_quotations")
                {
                    FullScreenLayout(false);
                    if (QuotationsRefreshRequired)
                    {
                        QuotationsRefreshRequired = false;
                        PopulateQuotationsGrid();

                    }
                }
                else if (e.Page.Name == "Pg_Cancelled")
                {
                    FullScreenLayout(false);
                    PopulateCancelledGrid();
                }
                else if (e.Page.Name == "Pg_NoShow")
                {
                    FullScreenLayout(false);
                    PopulateNoPickupGrid();

                }
            }
            catch (Exception ex)
            {


            }
        }

        private void PopulateNoPickupGrid()
        {
            try
            {

                if (grdNoShowJobs.DataSource == null)
                    grdNoShowJobs.ViewCellFormatting += grdOthers_ViewCellFormatting;

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    var list = db.ExecuteQuery<stp_GetBookingsDataResult>("exec stp_GetBookingsDataByStatus {0},{1},{2},{3}", DateTime.Now.ToDate(), DateTime.Now.AddDays(1).ToDate(), AppVars.DefaultBookingSubCompanyId, Enums.BOOKINGSTATUS.NOPICKUP).ToList();


                    grdNoShowJobs.DataSource = list;


                    GridMethods.SetFilter(grdNoShowJobs);

                    grdNoShowJobs.CurrentRow = null;
                    grdNoShowJobs.AllowEditRow = false;
                    grdNoShowJobs.AllowEditRow = false;



                    if (hiddenColumnsList == null)
                        hiddenColumnsList = General.GetQueryable<UM_Form_UserDefinedSetting>(c => c.UM_Form.FormName == this.Name && (c.IsVisible == false || c.GridColMoveTo != null)).ToList();

                    grdNoShowJobs.Columns["Total"].IsVisible = false;
                    grdNoShowJobs.Columns["Total"].HeaderText = "Fare(£)";


                    grdNoShowJobs.Columns["OrderNo"].IsVisible = false;
                    grdNoShowJobs.Columns["OrderNo"].HeaderText = "Order No";

                    for (int i = 0; i < hiddenColumnsList.Count; i++)
                    {



                        if (grdNoShowJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                        {

                            grdNoShowJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                            if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                            {
                                grdNoShowJobs.Columns.Move(grdNoShowJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                            }
                        }

                    }


                    grdNoShowJobs.Columns["Driver"].IsVisible = AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool() ? false : true;

                    grdNoShowJobs.Columns["VehicleID"].IsVisible = AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool() ? true : false;


                    grdNoShowJobs.Columns["DropOffPlot"].IsVisible = false;


                    grdNoShowJobs.Columns["Lead"].IsVisible = false;
                    grdNoShowJobs.Columns["Lead"].Width = 40;

                    grdNoShowJobs.Columns.Move(grdNoShowJobs.Columns["RefNumber"].Index, 0);

                    grdNoShowJobs.Columns["RefNumber"].IsVisible = true;
                    grdNoShowJobs.Columns["NoofLuggages"].IsVisible = false;
                    grdNoShowJobs.Columns["Vias"].IsVisible = false;
                    grdNoShowJobs.Columns["HasNotesImg"].IsVisible = false;

                    grdNoShowJobs.Columns["TelephoneNo"].IsVisible = false;
                    grdNoShowJobs.Columns["Due"].IsVisible = false;
                    grdNoShowJobs.Columns["JourneyTypeId"].IsVisible = false;
                    grdNoShowJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                    grdNoShowJobs.Columns["PickUpDate"].HeaderText = "Date";
                    grdNoShowJobs.Columns["RefNumber"].HeaderText = "Ref #";
                    grdNoShowJobs.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                    grdNoShowJobs.Columns["HasNotesImg"].HeaderText = "";
                    grdNoShowJobs.Columns["Driver"].HeaderText = "Drv";
                    grdNoShowJobs.Columns["Account"].HeaderText = "A/C";

                    grdNoShowJobs.Columns["From"].HeaderText = "Pickup Point";
                    grdNoShowJobs.Columns["FromPostCode"].HeaderText = "Area";
                    grdNoShowJobs.Columns["ToPostCode"].HeaderText = "Area";

                    grdNoShowJobs.Columns["To"].HeaderText = "Destination";
                    grdNoShowJobs.Columns["Pax"].HeaderText = "No of Pas";



                    grdNoShowJobs.Columns["Vehicle"].HeaderText = "Veh";
                    grdNoShowJobs.Columns["UpdateBy"].HeaderText = "Update By";
                    grdNoShowJobs.Columns["Fare"].HeaderText = "Fare(£)";
                    grdNoShowJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                    grdNoShowJobs.Columns["PReference"].HeaderText = "Pay Ref";
                    grdNoShowJobs.Columns["GroupId"].HeaderText = "Token #";



                    (grdNoShowJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd:MM:yyyy HH:mm";
                    (grdNoShowJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd:MM:yyyy HH:mm}";

                    grdNoShowJobs.Columns["Driver"].Width = 40;
                    grdNoShowJobs.Columns["Time"].Width = 60;
                    grdNoShowJobs.Columns["BookingDateTime"].Width = 120;
                    grdNoShowJobs.Columns["PickUpDate"].Width = 60;
                    grdNoShowJobs.Columns["Plot"].Width = 60;
                    grdNoShowJobs.Columns["UpdateBy"].Width = 50;
                    grdNoShowJobs.Columns["Status"].Width = 40;

                    grdNoShowJobs.Columns["RefNumber"].Width = 90;
                    grdNoShowJobs.Columns["Fare"].Width = 60;
                    grdNoShowJobs.Columns["SpecialReq"].Width = 100;


                    grdNoShowJobs.Columns["Vehicle"].Width = 60;

                    grdNoShowJobs.Columns["Passenger"].Width = 80;
                    grdNoShowJobs.Columns["MobileNo"].Width = 90;
                    grdNoShowJobs.Columns["From"].Width = 210;
                    grdNoShowJobs.Columns["To"].Width = 210;
                    grdNoShowJobs.Columns["Pax"].Width = 50;
                    grdNoShowJobs.Columns["PaymentMethod"].Width = 70;
                    grdNoShowJobs.Columns["Account"].Width = 120;

                    grdNoShowJobs.Columns["FromPostCode"].Width = 80;
                    grdNoShowJobs.Columns["ToPostCode"].Width = 80;

                    grdNoShowJobs.Columns["Pickup"].Width = 155;
                    grdNoShowJobs.Columns["GoingTo"].Width = 155;

                    grdNoShowJobs.Columns["PReference"].Width = 70;
                    grdNoShowJobs.Columns["GroupId"].Width = 60;

                    grdNoShowJobs.Columns["Status"].IsVisible = false;


                    // Pg_Cancelled.Item.Text = "Cancelled(" + objCnt.Where(c => c.bookingstatusid == Enums.BOOKINGSTATUS.CANCELLED).FirstOrDefault().DefaultIfEmpty().count + ")";
                    Pg_NoShow.Item.Text = "No Show(" + grdNoShowJobs.Rows.Count + ")";

                    grdNoShowJobs.Columns["Attributes"].IsVisible = false;
                    grdNoShowJobs.Columns["VehicleDetails"].IsVisible = false;
                }
            }
            catch
            {

            }

        }
        private void PopulateCancelledGrid(DateTime? dtToday = null)
        {
            try
            {

                if (dtToday == null)
                    dtToday = DateTime.Now.AddDays(1).ToDate();

                if (grdCancelledJobs.DataSource == null)
                    grdCancelledJobs.ViewCellFormatting += grdOthers_ViewCellFormatting;

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    var list = db.ExecuteQuery<stp_GetBookingsDataResult>("exec stp_GetBookingsDataByStatus {0},{1},{2},{3}", DateTime.Now.ToDate(), dtToday, AppVars.DefaultBookingSubCompanyId, Enums.BOOKINGSTATUS.CANCELLED).ToList();


                    grdCancelledJobs.DataSource = list;


                    GridMethods.SetFilter(grdCancelledJobs);

                    grdCancelledJobs.CurrentRow = null;
                    grdCancelledJobs.AllowEditRow = false;
                    grdCancelledJobs.AllowEditRow = false;



                    if (hiddenColumnsList == null)
                        hiddenColumnsList = General.GetQueryable<UM_Form_UserDefinedSetting>(c => c.UM_Form.FormName == this.Name && (c.IsVisible == false || c.GridColMoveTo != null)).ToList();


                    //   hiddenColumnsList.RemoveAll(c => c.FormTab == "search");
                    // Today's Booking Grid Hide Columns


                    //   hiddenColumnsList = hiddenColumnsList.OrderBy(c => c.GridColMoveTo).ToList();
                    grdCancelledJobs.Columns["Total"].IsVisible = false;
                    grdCancelledJobs.Columns["Total"].HeaderText = "Fare(£)";


                    grdCancelledJobs.Columns["OrderNo"].IsVisible = false;
                    grdCancelledJobs.Columns["OrderNo"].HeaderText = "Order No";

                    for (int i = 0; i < hiddenColumnsList.Count; i++)
                    {



                        if (grdCancelledJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                        {

                            grdCancelledJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                            if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                            {
                                grdCancelledJobs.Columns.Move(grdCancelledJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());

                            }
                        }

                    }

                    grdCancelledJobs.Columns["Driver"].IsVisible = AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool() ? false : true;

                    grdCancelledJobs.Columns["VehicleID"].IsVisible = AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool() ? true : false;


                    grdCancelledJobs.Columns["DropOffPlot"].IsVisible = false;


                    grdCancelledJobs.Columns["Attributes"].IsVisible = false;
                    grdCancelledJobs.Columns["VehicleDetails"].IsVisible = false;
                    grdCancelledJobs.Columns["Status"].IsVisible = false;
                    grdCancelledJobs.Columns["HasNotesImg"].IsVisible = false;

                    grdCancelledJobs.Columns["Lead"].IsVisible = false;
                    grdCancelledJobs.Columns["Lead"].Width = 40;

                    grdCancelledJobs.Columns.Move(grdCancelledJobs.Columns["RefNumber"].Index, 0);

                    grdCancelledJobs.Columns["RefNumber"].IsVisible = true;
                    grdCancelledJobs.Columns["NoofLuggages"].IsVisible = false;
                    grdCancelledJobs.Columns["Vias"].IsVisible = false;

                    grdCancelledJobs.Columns["TelephoneNo"].IsVisible = false;
                    grdCancelledJobs.Columns["Due"].IsVisible = false;
                    grdCancelledJobs.Columns["JourneyTypeId"].IsVisible = false;


                    grdCancelledJobs.Columns["HasNotes"].IsVisible = false;
                    grdCancelledJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                    grdCancelledJobs.Columns["PickUpDate"].HeaderText = "Date";
                    grdCancelledJobs.Columns["RefNumber"].HeaderText = "Ref #";
                    grdCancelledJobs.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                    grdCancelledJobs.Columns["HasNotesImg"].HeaderText = "";

                    grdCancelledJobs.Columns["Driver"].HeaderText = "Drv";
                    grdCancelledJobs.Columns["Account"].HeaderText = "A/C";

                    grdCancelledJobs.Columns["From"].HeaderText = "Pickup Point";
                    grdCancelledJobs.Columns["FromPostCode"].HeaderText = "Area";
                    grdCancelledJobs.Columns["ToPostCode"].HeaderText = "Area";

                    grdCancelledJobs.Columns["To"].HeaderText = "Destination";
                    grdCancelledJobs.Columns["Pax"].HeaderText = "No of Pas";



                    grdCancelledJobs.Columns["Vehicle"].HeaderText = "Veh";
                    grdCancelledJobs.Columns["UpdateBy"].HeaderText = "Update By";
                    grdCancelledJobs.Columns["Fare"].HeaderText = "Fare(£)";
                    grdCancelledJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                    grdCancelledJobs.Columns["PReference"].HeaderText = "Pay Ref";
                    grdCancelledJobs.Columns["GroupId"].HeaderText = "Token #";



                    (grdCancelledJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd:MM:yyyy HH:mm";
                    (grdCancelledJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd:MM:yyyy HH:mm}";

                    grdCancelledJobs.Columns["Driver"].Width = 40;
                    grdCancelledJobs.Columns["Time"].Width = 60;
                    grdCancelledJobs.Columns["BookingDateTime"].Width = 120;
                    grdCancelledJobs.Columns["PickUpDate"].Width = 60;
                    grdCancelledJobs.Columns["Plot"].Width = 60;
                    grdCancelledJobs.Columns["UpdateBy"].Width = 50;
                    grdCancelledJobs.Columns["Status"].Width = 40;

                    grdCancelledJobs.Columns["RefNumber"].Width = 90;
                    grdCancelledJobs.Columns["Fare"].Width = 60;
                    grdCancelledJobs.Columns["SpecialReq"].Width = 100;


                    grdCancelledJobs.Columns["Vehicle"].Width = 60;

                    grdCancelledJobs.Columns["Passenger"].Width = 80;
                    grdCancelledJobs.Columns["MobileNo"].Width = 90;
                    grdCancelledJobs.Columns["From"].Width = 210;
                    grdCancelledJobs.Columns["To"].Width = 210;
                    grdCancelledJobs.Columns["Pax"].Width = 50;
                    grdCancelledJobs.Columns["PaymentMethod"].Width = 70;
                    grdCancelledJobs.Columns["Account"].Width = 120;

                    grdCancelledJobs.Columns["FromPostCode"].Width = 80;
                    grdCancelledJobs.Columns["ToPostCode"].Width = 80;

                    grdCancelledJobs.Columns["Pickup"].Width = 155;
                    grdCancelledJobs.Columns["GoingTo"].Width = 155;

                    grdCancelledJobs.Columns["PReference"].Width = 70;
                    grdCancelledJobs.Columns["GroupId"].Width = 60;



                    Pg_Cancelled.Item.Text = "Cancelled(" + grdCancelledJobs.Rows.Count + ")";


                }
            }
            catch
            {

            }

        }


        void grdOthers_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {





                if (e.CellElement is GridHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        //    e.CellElement
                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = Color.White;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }

                }

                else if (e.CellElement is GridFilterCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        //e.CellElement.Font = oldFont;
                        //e.CellElement.NumberOfColors = 1;
                        //e.CellElement.BackColor = GridBackColor;
                        //e.CellElement.RowElement.BackColor = GridBackColor;
                        //e.CellElement.RowElement.NumberOfColors = 1;

                        //e.CellElement.BorderColor = GridRowBorderColor;


                        //e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                        e.CellElement.Font = oldFont;
                        //e.CellElement.NumberOfColors = 1;
                        //e.CellElement.BackColor = GridBackColor;
                        // e.CellElement.RowElement.BackColor = GridBackColor;
                        // e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.ForeColor = Color.Black;
                        e.CellElement.BorderColor = GridRowBorderColor;


                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                    }
                }


                else if (e.CellElement is GridGroupContentCellElement)
                {




                    e.CellElement.Font = bigFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.BackColor = Color.GhostWhite;
                    e.CellElement.RowElement.NumberOfColors = 1;
                    e.CellElement.ForeColor = Color.Blue;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }

                else if (e.CellElement is GridRowHeaderCellElement)
                {
                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.CellElement is GridTableHeaderCellElement)
                        {

                            e.CellElement.BorderColor = _HeaderRowBorderColor;

                            e.CellElement.BackColor = _HeaderRowBackColor;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.Font = newFont;
                            e.CellElement.ForeColor = Color.White;
                            e.CellElement.DrawFill = true;

                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }
                        else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                        {

                            e.CellElement.Font = oldFont;
                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = GridBackColor;
                            e.CellElement.RowElement.BackColor = GridBackColor;
                            e.CellElement.RowElement.NumberOfColors = 1;



                            e.CellElement.BorderColor = GridRowBorderColor;


                            e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        }

                        else
                        {
                            e.CellElement.DrawFill = false;



                        }
                    }
                }





                else if (e.CellElement is GridDataCellElement)
                {





                    e.CellElement.BackgroundImage = null;
                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;


                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        e.CellElement.ForeColor = Color.Black;
                    }
                    else
                        e.CellElement.ForeColor = Color.White;

                    //   e.CellElement.ForeColor = Color.Black;



                    e.CellElement.Font = oldFont;

                    if (AppVars.AppTheme == "ControlDefault")
                    {
                        if (e.CellElement.RowElement.IsSelected == true)
                        {

                            e.CellElement.RowElement.NumberOfColors = 1;
                            e.CellElement.RowElement.BackColor = this.selectedRowBackColor;

                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = this.selectedRowBackColor;
                            e.CellElement.ForeColor = this.selectedRowForeColor;
                            e.CellElement.Font = newFont;

                        }


                        else
                        {
                            e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                            if (e.CellElement.BackColor == this.selectedRowBackColor)
                                e.CellElement.DrawFill = false;
                        }
                    }



                    if (ApplyAccBgOnRow == false)
                    {








                        if (e.Column.IsVisible &&
                            (e.Column.Name != "Plot"
                            && e.Column.Name != "Time" && e.Column.Name != "Passenger" && e.Column.Name != "Driver"
                            && e.Column.Name != "To" && e.Column.Name != "UpdateBy" && e.Column.Name != "Fare" && e.Column.Name != "MobileNo" && e.Column.Name != "From"
                           && e.Column.Name != "FromPostCode" && e.Column.Name != "ToPostCode"))
                        {
                            e.CellElement.DrawFill = false;
                        }




                        if (e.Column.Name == "RefNumber" || e.Column.Name == "PickUpDate")
                        {





                            if (e.CellElement.RowElement.IsSelected == false)
                            {
                                e.CellElement.BackColor = GridBackColor;
                            }

                            //int bgColor = e.Row.Cells["BookingBackgroundColor"].Value.ToInt();

                            //if (bgColor != 0)
                            //{
                            //    e.CellElement.NumberOfColors = 1;
                            //    e.CellElement.BackColor = Color.FromArgb(bgColor);
                            //    e.CellElement.DrawFill = true;
                            //}


                        }





                        if (e.Column.Name == "Account"

                            )
                        {


                            if (e.CellElement.Value.ToStr() != string.Empty)
                            {

                                e.CellElement.NumberOfColors = 1;



                                string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                                string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                                if (Bgcolor != string.Empty && textColor != string.Empty)
                                {



                                    e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                    e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                                }
                                else
                                {
                                    e.CellElement.ForeColor = GridBackColor;
                                    e.CellElement.BackColor = Color.Crimson;


                                }

                                e.CellElement.DrawFill = true;
                            }
                            else
                            {
                                e.CellElement.DrawFill = false;

                            }
                        }

                        else if (e.Column.Name == "Vehicle")
                        {

                            e.CellElement.NumberOfColors = 1;



                            string Bgcolor = e.Row.Cells["BackgroundColor"].Value.ToStr().Trim();
                            string textColor = e.Row.Cells["TextColor"].Value.ToStr().Trim();

                            if (Bgcolor != string.Empty && textColor != string.Empty)
                            {

                                e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                                e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());
                                e.CellElement.DrawFill = true;
                            }
                        }


                        else if (e.Column.IsVisible && (e.Column.Name == "From" || e.Column.Name == "Pickup"))
                        {





                            if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;


                                e.CellElement.BackColor = Color.FromArgb(-5374161);
                                e.CellElement.ForeColor = Color.Black;

                                //e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["FromLocBgColor"].Value.ToInt());


                                //if (e.Row.Cells["FromLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["FromLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;



                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.IsVisible && (e.Column.Name == "To" || e.Column.Name == "GoingTo"))
                        {

                            if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.DrawFill = true;



                                e.CellElement.BackColor = Color.FromArgb(-5374161);
                                e.CellElement.ForeColor = Color.Black;
                                //e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["ToLocBgColor"].Value.ToInt());


                                //if (e.Row.Cells["ToLocTextColor"].Value != null)
                                //{

                                //    e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["ToLocTextColor"].Value.ToInt());

                                //}
                                //else
                                //    e.CellElement.ForeColor = Color.Black;


                            }
                            else
                                e.CellElement.DrawFill = false;

                        }

                        else if (e.Column.Name == "Status")
                        {


                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                            e.CellElement.ForeColor = Color.Black;

                            e.CellElement.DrawFill = true;





                        }
                        else if (e.Column.Name == "Driver")
                        {

                            if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool() == false && e.Row.Cells["Driver"].Value != null)
                            {

                                e.CellElement.Font = newFont;
                                e.CellElement.NumberOfColors = 1;
                                e.CellElement.BackColor = GridBackColor;
                                e.CellElement.ForeColor = Color.Black;
                                e.CellElement.DrawFill = true;
                            }
                            else
                            {

                                if (e.Row.Cells["IsConfirmedDriver"].Value.ToBool())
                                {
                                    e.CellElement.NumberOfColors = 1;
                                    e.CellElement.BackColor = Color.Aqua;
                                    e.CellElement.ForeColor = Color.Black;
                                    e.CellElement.DrawFill = true;
                                }
                                else
                                {
                                    if (e.CellElement.BackColor == Color.Aqua)
                                    {
                                        e.CellElement.BackColor = GridBackColor;
                                        e.CellElement.ForeColor = Color.Black;
                                    }
                                }





                            }




                        }

                        else if (e.Column.Name == "HasNotesImg")
                        {


                            if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {
                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }

                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }
                    }
                    else
                    {

                        if (e.Column.Name == "HasNotesImg"

                       )
                        {




                            if (e.Row.Cells["JourneyTypeId"].Value.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                            {
                                e.CellElement.BackgroundImage = Resources.Resource1.WaitAndReturn;

                            }


                            else
                            {

                                e.CellElement.BackgroundImage = null;


                            }
                        }

                        if (e.CellElement.IsCurrent)
                        {
                            e.CellElement.DrawFill = false;
                        }


                    }






                }
            }
            catch { }
        }


        private bool QuotationsRefreshRequired = false;

        public void RefreshActiveDataWithoutWait()
        {
            try
            {
                worker.CancelAsync();


                if (worker.IsBusy)
                    Thread.Sleep(500);


                ShowProgress(true);
                worker.RunWorkerAsync("PopulateActiveData");

            }
            catch (Exception ex)
            {


            }
        }

        void ddlCust_Enter(object sender, EventArgs e)
        {
            if (ddlCust.DataSource == null)
            {
                try
                {

                    ddlCust.AutoCompleteMode = AutoCompleteMode.Suggest;
                    ddlCust.DataSource = AppVars.BLData.GetAll<Customer>().Select(c => c.Name).Distinct().OrderBy(c => c).ToArray<string>();
                    ddlCust.SelectedIndex = -1;
                }
                catch
                {


                }
            }
        }






        void grdRecentJobs_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            if (e.CellElement is GridDataCellElement)
            {


                if (e.Column.Name == "Status")
                {


                    if (e.Row.Cells["StatusTextColor"].Value != null)
                    {

                        e.CellElement.Font = newFont;
                        e.CellElement.NumberOfColors = 1;

                        e.CellElement.ForeColor = Color.FromArgb(e.Row.Cells["StatusTextColor"].Value.ToInt());

                        e.CellElement.DrawFill = true;
                    }
                    else
                    {

                        e.CellElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.All);
                        e.CellElement.ResetValue(LightVisualElement.FontProperty, ValueResetFlags.All);
                        e.CellElement.DrawFill = false;

                    }






                }
                else
                {

                    e.CellElement.ResetValue(LightVisualElement.ForeColorProperty, ValueResetFlags.All);
                    e.CellElement.ResetValue(LightVisualElement.FontProperty, ValueResetFlags.All);
                    e.CellElement.DrawFill = false;

                }

            }
        }


        private bool RefreshOnActive = false;


        private void radButton9_Click(object sender, EventArgs e)
        {

            SearchJobList();
        }

        private void SearchJobList()
        {

            PopulateSearchJobsList();

            try
            {

                if (listofSearchTabSettings != null)
                {

                    for (int i = 0; i < listofSearchTabSettings.Count; i++)
                    {
                        if (grdRecentJobs.Columns[listofSearchTabSettings[i].GridColumnName] != null)
                        {
                            grdRecentJobs.Columns[listofSearchTabSettings[i].GridColumnName].IsVisible = listofSearchTabSettings[i].IsVisible.ToBool();


                            if (listofSearchTabSettings[i].GridColMoveTo != null)
                            {
                                grdRecentJobs.Columns.Move(grdRecentJobs.Columns[listofSearchTabSettings[i].GridColumnName].Index, listofSearchTabSettings[i].GridColMoveTo.ToInt());
                            }
                        }

                    }

                    listofSearchTabSettings = null;


                }



                lblSearchResults.Text = "Result(s) Found : " + grdRecentJobs.Rows.Count;
                lblSearchResults.Visible = true;
            }
            catch
            {

            }
        }

        private void btnNewJob_Click(object sender, EventArgs e)
        {
            Process.Start("Notepad.exe");
            //  General.ShowBookingForm(false);
        }








        private void btnEditJob_Click(object sender, EventArgs e)
        {
            if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
            {
                ShowBookingForm(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt(), true);

            }

        }

        private void ShowBookingForm(int id, bool showOnDialog)
        {
            General.ShowBookingForm(id, showOnDialog, "", "", Enums.BOOKING_TYPES.LOCAL);




        }

        private void ShowBookingWebForm(long id)
        {
            // General.ShowBookingForm(id, showOnDialog, "", "", Enums.BOOKING_TYPES.LOCAL);


            try
            {


                frmBooking frm = new frmBooking(1);
                frm.PickBookingTypeId = Enums.BOOKING_TYPES.WEB;
                if (id != 0)
                {
                    frm.OnDisplayRecord(id);
                }
                frm.ControlBox = true;
                frm.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm.MaximizeBox = false;

                //if (showOnDialog)
                //{
                frm.ShowDialog();
                //}
                //else
                //    frm.Show();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void btnDespatchJob_Click(object sender, EventArgs e)
        {

            if (btnDespatchJob.Tag.ToStr() == "future")
                DespatchPreJob(grdPendingJobs);
            else
                DespatchJob();

        }

        private void btnQuickReDespatchJob_Click(object sender, EventArgs e)
        {

            QuickReDespatchJob();

        }

        private void btnDespatchGhostJob_Click(object sender, EventArgs e)
        {

            DespatchGhostJob();

        }


        private void btnCallCustomer_Click(object sender, EventArgs e)
        {
            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int Id = 0;
                if (gridName == "grdPendingJobs" && grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    Id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToInt();

                }
                else if (gridName == "grdPreBookings" && grdPreBookings.CurrentRow != null && grdPreBookings.CurrentRow is GridViewDataRowInfo)
                {

                    Id = grdPreBookings.CurrentRow.Cells["Id"].Value.ToInt();

                }
                else if (gridName == "grdAllJobs" && grdAllJobs.CurrentRow != null && grdAllJobs.CurrentRow is GridViewDataRowInfo)
                {

                    Id = grdAllJobs.CurrentRow.Cells["Id"].Value.ToInt();

                }
                else if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    Id = grdDriverWaiting.CurrentRow.Cells["CurrentJobId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {


                    Id = grdOnBoardDriver.CurrentRow.Cells["CurrentJobId"].Value.ToInt();

                }


                General.ClickACallCustomer(Id);


            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }



        }

        private void btnCallDriver_Click(object sender, EventArgs e)
        {
            try
            {
                string gridName = (sender as RadMenuItem).Tag.ToStr();
                int driverId = 0;
                if (gridName == "grdDriverWaiting" && grdDriverWaiting.CurrentRow != null && grdDriverWaiting.CurrentRow is GridViewDataRowInfo)
                {

                    driverId = grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToInt();

                }
                else if (gridName == "grdOnBoardDriver" && grdOnBoardDriver.CurrentRow != null && grdOnBoardDriver.CurrentRow is GridViewDataRowInfo)
                {
                    driverId = grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToInt();
                }


                General.ClickACallDriver(driverId, "");



            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }



        }



        public void DespatchFOJJob()
        {
            try
            {



                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    //if (grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool() && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //   && !string.IsNullOrEmpty(grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()))
                    //{




                    //if (IsAutoDespatch && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //    && !string.IsNullOrEmpty(dragRow.Cells["Plot"].Value.ToStr()))

                    //if ((grdPendingJobs.CurrentRow.Cells["IsAutoDespatch"].Value.ToBool()
                    //                           && AppVars.objPolicyConfiguration.EnableAutoDespatch.ToBool()
                    //                          && !string.IsNullOrEmpty(grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()))

                    //                          &&
                    //                         (General.GetQueryable<Gen_Zone>(c => c.ZoneName == grdPendingJobs.CurrentRow.Cells["Plot"].Value.ToStr()
                    //                                && (c.EnableAutoDespatch != null && c.EnableAutoDespatch == true)).Count() > 0)
                    //                          )
                    //{

                    //    if (DialogResult.No == MessageBox.Show("This is a AutoDespatch Job" + Environment.NewLine + "Do you want to Despatch it Manually ? ", "AutoDespatch Job", MessageBoxButtons.YesNo))
                    //        return;

                    //}

                    if (VerifyCurrentRow())
                        OnDespatchFOJ(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());

                    // RefreshDriverGrids();

                }
            }
            catch (Exception ex)
            {


            }

        }
        private void DespatchPreJob(RadGridView grid)
        {
            try
            {
                if (grid.CurrentRow != null && grid.CurrentRow is GridViewDataRowInfo)
                {

                    if (grid.Name == "grdPendingJobs" && grid.CurrentView != null && grid.CurrentView.CurrentRow == null)
                    {
                        if (ddlShowDue.SelectedIndex > 0)
                        {
                            grid.CurrentRow = grid.Rows[0];
                        }


                        if (grid.CurrentView != null && grid.CurrentView.CurrentRow == null)
                        {

                            return;
                        }
                    }

                    OnDespatchPreJob(grid.CurrentRow.Cells["Id"].Value.ToLong());



                }
            }
            catch
            {

            }
        }


        public void DespatchJob()
        {
            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    if (grdPendingJobs.CurrentView != null && grdPendingJobs.CurrentView.CurrentRow == null)
                    {
                        if (ddlShowDue.SelectedIndex > 0)
                        {
                            grdPendingJobs.CurrentRow = grdPendingJobs.Rows[0];
                        }


                        if (grdPendingJobs.CurrentView != null && grdPendingJobs.CurrentView.CurrentRow == null)
                        {

                            return;
                        }


                    }

                    OnDespatch(grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong());



                }
            }
            catch (Exception ex)
            {


            }

        }


        public void QuickReDespatchJob()
        {

            try
            {

                if (AppVars.IsTelephonist)
                {
                    ENUtils.ShowMessage("Permission Denied");
                    return;
                }


                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (VerifyCurrentRow())
                    {
                        long jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();


                        if (jobId > 0)
                        {

                            ShowQuickReDespatchForm(General.GetObject<Booking>(c => c.Id == jobId));
                        }
                    }

                }
            }
            catch (Exception ex)
            {


            }


        }







        public void DespatchGhostJob()
        {
            try
            {



                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    long jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();


                    ShowGhostDespatchForm(General.GetObject<Booking>(c => c.Id == jobId));

                    // RefreshDriverGrids();

                }
            }
            catch (Exception ex)
            {


            }

        }


        private void OnDespatch(long jobId)
        {
            ShowDespatchForm(General.GetObject<Booking>(c => c.Id == jobId));


        }


        public void ShowDespatchForm(Booking obj)
        {
            try
            {
                bool rtn = false;

                frmDespatchJob frm = new frmDespatchJob(obj);
                frm.ShowAllLoggedInDrivers = AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") > 0;


                frm.ShowDialog();



                if (frm.SmsThread != null)
                    frm.SmsThread.Start();

                rtn = frm.SuccessDespatched;

                frm.Dispose();

                GC.Collect();

            }
            catch (Exception ex)
            {


            }

        }

        public void ShowQuickReDespatchForm(Booking obj)
        {
            try
            {
                bool rtn = false;

                frmDespatchJob frm = new frmDespatchJob(obj);
                frm.IsQuickReDispatch = true;
                frm.ShowDialog();



                if (frm.SmsThread != null)
                    frm.SmsThread.Start();

                rtn = frm.SuccessDespatched;

                frm.Dispose();

                GC.Collect();

            }
            catch (Exception ex)
            {


            }

        }


        public void ShowGhostDespatchForm(Booking obj)
        {
            try
            {
                bool rtn = false;

                frmDespatchGhostJob frm = new frmDespatchGhostJob(obj);

                frm.ShowDialog();


                rtn = frm.SuccessDespatched;

                frm.Dispose();

                GC.Collect();

            }
            catch (Exception ex)
            {


            }

        }


        private void OnDespatchFOJ(long jobId)
        {
            General.ShowDespatchFOJForm(General.GetObject<Booking>(c => c.Id == jobId));
        }


        private void btnShowMap_Click(object sender, EventArgs e)
        {
            ShowMapInPopup();

        }


        private void ShowMapInPopup()
        {

            try
            {


                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {

                    if (VerifyCurrentRow())
                    {

                        long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                        Booking objBook = General.GetObject<Booking>(c => c.Id == id);

                        bool fromNAT = false, toNAT = false;
                        string origin = objBook.FromAddress.ToStr();
                        string[] via = objBook.Booking_ViaLocations.Select(c => c.ViaLocValue.ToStr()).ToArray<string>();
                        string destination = objBook.ToAddress.ToStr();

                        string routeType = AppVars.routemode.ToStr().Trim();

                        if (routeType.Length > 0)
                            routeType = " " + routeType;




                        stp_getCoordinatesByAddressResult pickupCoord = null;
                        stp_getCoordinatesByAddressResult destCoord = null;

                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            pickupCoord = General.GetCoordinatesByAddress(origin, General.GetPostCodeMatch(origin), db);
                            destCoord = General.GetCoordinatesByAddress(destination, General.GetPostCodeMatch(destination), db);
                        }
                        //try
                        //{

                        //    using (TaxiDataContext db = new TaxiDataContext())
                        //    {

                        //        pickupCoord = db.stp_getCoordinatesByAddress(origin, General.GetPostCodeMatch(origin)).FirstOrDefault();
                        //        destCoord = db.stp_getCoordinatesByAddress(destination, General.GetPostCodeMatch(destination)).FirstOrDefault();

                        //    }

                        //}
                        //catch
                        //{


                        //}


                        string originString = origin;
                        string destString = destination;

                        if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                        {
                            origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                            fromNAT = true;
                            toNAT = true;

                        }

                        if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                        {
                            destination = destCoord.Latitude + "," + destCoord.Longtiude;

                        }




                        string[] viaLocs = via;


                        if (viaLocs.Count() > 0)
                        {





                            List<string> listVia = new List<string>();
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                foreach (var item in viaLocs)
                                {

                                    stp_getCoordinatesByAddressResult viaCoord = null;


                                    if (viaCoord == null)
                                        viaCoord = db.stp_getCoordinatesByAddress(item, General.GetPostCodeMatch(item)).FirstOrDefault();

                                    if (viaCoord != null && viaCoord.Latitude != null && viaCoord.Latitude != 0)
                                    {


                                        listVia.Add((viaCoord.Latitude + "," + viaCoord.Longtiude).Trim());
                                    }
                                    else
                                    {
                                        string postcode = General.GetPostCodeMatch(item);

                                        if (postcode.ToStr().Length == 0)
                                        {
                                            listVia.Add(item);

                                        }
                                        else
                                        {

                                            listVia.Add(postcode);
                                        }

                                    }



                                }

                            }

                            viaLocs = listVia.ToArray<string>();








                        }




                        string viaStr = "**";

                        if (viaLocs != null && viaLocs.Count() > 0)
                        {
                            viaStr = string.Join(">>>", viaLocs);

                            viaStr = viaStr.Replace(" ", "**").Trim();

                        }


                        string connString = Application.StartupPath + "\\TreasureRouteMap.exe";

                        System.Diagnostics.Process proc = System.Diagnostics.Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                        if (proc != null)
                        {
                            proc.Kill();
                            proc.CloseMainWindow();
                            proc.Close();
                        }

                        string conn = System.Configuration.ConfigurationManager.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");

                        string arg = "frmmap" + " " + conn + " " + origin.Replace(" ", "**") + " " + viaStr.Replace(" ", "**") + " " + destination.Replace(" ", "**") + " " + fromNAT + " " + toNAT + " " + originString.Replace(" ", "**") + " " + destString.Replace(" ", "**") + routeType;

                        System.Diagnostics.Process.Start(connString, arg);




                        //string connString = Application.StartupPath + "\\TreasureRouteMap.exe";





                        //if (connString.ToStr().Trim().Length > 0 && File.Exists(connString) == true)
                        //{
                        //    Process proc = Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                        //    if (proc != null)
                        //    {
                        //        proc.Kill();
                        //        proc.CloseMainWindow();
                        //        proc.Close();

                        //        proc.Dispose();

                        //        GC.Collect();

                        //    }

                        //    string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");


                        //    string arg = "frmmap" + " " + conn + " " + pickup.Replace(" ", "**") + " " + viaStr.Replace(" ", "**") + " " + destination.Replace(" ", "**");
                        //    Process.Start(connString, arg);



                        //}

                        //else
                        //{


                        //    frmMap frm = new frmMap(pickup, via, destination);
                        //    frm.ShowDialog();
                        //}

                    }

                }


            }
            catch (Exception ex)
            {


            }
        }



        private void ShowProgressBar()
        {

            frm = new frmLoading();
            frm.ControlBox = false;
            frm.FormBorderStyle = FormBorderStyle.None;
            frm.ShowInTaskbar = false;

            frm.StartPosition = FormStartPosition.CenterScreen;
            frm.Size = new Size(204, 82);
            frm.Show();

        }








        private void btnHideMap_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {
            try
            {
                if (args.NewValue == Telerik.WinControls.Enumerations.ToggleState.Off)
                {
                    tableLayoutPanel1.RowStyles[0].Height = 0;
                    tableLayoutPanel1.RowStyles[1].Height = 100;
                    btnHideMap.Text = "Show Drivers";
                }
                else
                {
                    btnHideMap.Text = "Hide Drivers";

                    tableLayoutPanel1.RowStyles[0].Height = 40;
                    tableLayoutPanel1.RowStyles[1].Height = 60;

                }
            }
            catch (Exception ex)
            {

            }
        }



        bool UpdateRequiredPreBooking = false;



        private void grdDriverWaiting_ToolTipTextNeeded(object sender, ToolTipTextNeededEventArgs e)
        {


            try
            {




                if (sender is GridDataCellElement)
                {
                    GridDataCellElement cell = (GridDataCellElement)sender;


                    GridViewRowInfo row = cell.RowElement.RowInfo;
                    // Fleet_DriverQueueList obj = null;

                    if (row != null && row is GridViewDataRowInfo)
                    {
                        long id = 0;

                        string plot = string.Empty;

                        int driverId = 0;
                        DateTime? loginDateTime = null;
                        if (cell.GridControl.Name.ToLower() == "grdonplotdrivers")
                        {

                            driverId = row.Cells[cell.ColumnIndex].ErrorText.ToInt();

                        }
                        else
                        {
                            driverId = row.Cells["DriverId"].Value.ToInt();
                            id = row.Cells["Id"].Value.ToLong();
                            loginDateTime = row.Cells["LoginDate"].Value.ToDateTime();
                            //  obj = General.GetObject<Fleet_DriverQueueList>(c => c.Id == id);
                        }


                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            var obj = db.stp_GetDriverToolTipData(driverId, id.ToInt(), loginDateTime).FirstOrDefault();


                            string vehicleNo = obj.CompanyVehicle.ToStr();



                            if ((obj.CurrentJobId != null && (obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.ONBREAK)))
                            {


                                loginDateTime = obj.LoginDateTime;



                                DateTime newLoginDateTime = loginDateTime.ToDateTime();

                                if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                                {

                                    newLoginDateTime = loginDateTime.Value.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                                    //   loginDateTime = General.GetObject<Fleet_DriverQueueList>(c => c.LogoutDateTime.Value > newLoginDateTime).DefaultIfEmpty().LoginDateTime;
                                }


                                if (loginDateTime == null)
                                    loginDateTime = obj.LoginDateTime;



                                string waitSince = string.Empty;

                                if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.WaitSinceOn != null)
                                {
                                    try
                                    {
                                        waitSince = GetMinsInWords(DateTime.Now.Subtract(obj.WaitSinceOn.Value).TotalMinutes);


                                        waitSince = Environment.NewLine + "Wait Since : " + waitSince;
                                    }
                                    catch
                                    {


                                    }

                                }






                                int totalMins = DateTime.Now.Subtract(loginDateTime.Value).TotalMinutes.ToInt();
                                decimal AvgEarning = 0.00m;


                                decimal totalEarning = obj.TotalEarning.ToDecimal();
                                string earn = string.Format("{0:c}", totalEarning).Substring(1);
                                string lastGPSContact = string.Empty;


                                if (obj.DriverId != null)
                                {
                                    lastGPSContact = Environment.NewLine + "Last GPS Contact Time : " + string.Format("{0:dd-MMM HH:mm}", obj.LastGpsContact.ToDateTime());




                                }





                                if (totalMins > 0)
                                {
                                    totalMins = Math.Ceiling((totalMins.ToDecimal() * 60) / 3600).ToInt();
                                    AvgEarning = Math.Round((totalEarning / totalMins), 2);



                                }


                                string journeyType = "";


                                if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                    journeyType = "(One Way Journey)";
                                else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                                    journeyType = "(Return Journey)";
                                else if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                                    journeyType = "(Wait and Return Journey)";



                                lastGPSContact = " , Last GPS Contact : " + string.Format("{0:dd-MMM HH:mm}", obj.LastGpsContact.ToDateTime());



                                e.ToolTipText = "Driver : " + obj.DriverNo.ToStr() + " - " + obj.DriverName.ToStr()
                                     + Environment.NewLine



                                                    + "Jobs Done : " + obj.TotalJobs.ToInt()
                                                + Environment.NewLine + "Total Earned : £ " + earn
                                                 + Environment.NewLine + "Avg earning per hour  : £ " + AvgEarning



                                              + Environment.NewLine + "Status : " + obj.Status.ToStr() + lastGPSContact +
                                               (vehicleNo != string.Empty ? Environment.NewLine + "Company Vehicle : " + vehicleNo : "")

                                             + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + Environment.NewLine + "On Job:" + journeyType + Environment.NewLine + " Pickup : "
                                                                 + obj.FromAddress + Environment.NewLine + " Destination : " + obj.ToAddress : "")
                                             + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.DropOffZoneId != null ? Environment.NewLine + "DropOff Plot : " + obj.DropOffZoneName : "")
                                               + (obj.CurrentJobId != null && obj.DriverWorkStatusId.ToInt() != Enums.Driver_WORKINGSTATUS.AVAILABLE ? Environment.NewLine + " Pickup Date/Time : " + string.Format("{0:dd/MM/yyyy HH:mm}", obj.PickupDateTime) : "")

                                             + Environment.NewLine + "Vehicle : " + obj.VehicleType.ToStr() + " - " + obj.VehicleNo.ToStr() + " - " + obj.VehicleColor.ToStr() + " - " + obj.VehicleMake.ToStr();





                            }
                            else
                            {


                                loginDateTime = obj.LoginDateTime;



                                DateTime newLoginDateTime = loginDateTime.ToDateTime();

                                if (AppVars.objPolicyConfiguration.EarningLoginHours.ToInt() > 0)
                                {

                                    newLoginDateTime = loginDateTime.Value.AddMinutes(-AppVars.objPolicyConfiguration.EarningLoginHours.ToInt());

                                    //   loginDateTime = General.GetObject<Fleet_DriverQueueList>(c => c.LogoutDateTime.Value > newLoginDateTime).DefaultIfEmpty().LoginDateTime;
                                }


                                if (loginDateTime == null)
                                    loginDateTime = obj.LoginDateTime;



                                string waitSince = string.Empty;

                                if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.AVAILABLE && obj.WaitSinceOn != null)
                                {
                                    try
                                    {
                                        waitSince = GetMinsInWords(DateTime.Now.Subtract(obj.WaitSinceOn.Value).TotalMinutes);


                                        waitSince = Environment.NewLine + "Wait Since : " + waitSince;
                                    }
                                    catch
                                    {


                                    }

                                }






                                int totalMins = DateTime.Now.Subtract(loginDateTime.Value).TotalMinutes.ToInt();
                                decimal AvgEarning = 0.00m;


                                decimal totalEarning = obj.TotalEarning.ToDecimal();
                                string earn = string.Format("{0:c}", totalEarning).Substring(1);
                                string lastGPSContact = string.Empty;
                                string sinbinTill = string.Empty;

                                if (obj.DriverId != null)
                                {
                                    lastGPSContact = Environment.NewLine + "Last GPS Contact Time : " + string.Format("{0:dd-MMM HH:mm}", obj.LastGpsContact.ToDateTime());


                                    if (obj.DriverWorkStatusId.ToInt() == Enums.Driver_WORKINGSTATUS.SINBIN)
                                    {
                                        sinbinTill = " - till : " + string.Format("{0:HH:mm:ss}", obj.SinBinTillOn.ToDateTime());
                                    }

                                }





                                if (totalMins > 0)
                                {
                                    totalMins = Math.Ceiling((totalMins.ToDecimal() * 60) / 3600).ToInt();
                                    AvgEarning = Math.Round((totalEarning / totalMins), 2);



                                }

                                e.ToolTipText = "Driver : " + obj.DriverNo.ToStr() + " - " + obj.DriverName.ToStr() + Environment.NewLine
                                                 + plot


                                                    + "Jobs Done : " + obj.TotalJobs.ToInt()
                                                + Environment.NewLine + "Total Earned : £ " + earn
                                                 + Environment.NewLine + "Avg earning per hour  : £ " + AvgEarning
                                                + Environment.NewLine + "Status : " + obj.Status.ToStr() + sinbinTill
                                                + lastGPSContact
                                                + (vehicleNo != string.Empty ? Environment.NewLine + "Company Vehicle : " + vehicleNo : "")
                                                + Environment.NewLine + "Login Since : " + loginDateTime + " (" + obj.LoginFrom.ToStr() + ")"

                                                + Environment.NewLine + "Vehicle : " + obj.VehicleType.ToStr() + " - " + obj.VehicleNo.ToStr() + " - " + obj.VehicleColor.ToStr() + " - " + obj.VehicleMake.ToStr()

                                                + waitSince;
                            }

                        }





                    }
                }
            }
            catch (Exception ex)
            {


            }
        }





        private void btnPreview_Click(object sender, EventArgs e)
        {

            this.fromDate = dtpStatsFromDate.Value.ToDateTimeorNull();
            this.tillDate = dtpStatsTillDate.Value.ToDateTimeorNull();
            LoadDriverBookingStats();

        }

        private void optMonthWise_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            if (optMonthWise.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                dtpStatsFromDate.CustomFormat = "dd/MM/yyyy HH:mm";
                dtpStatsTillDate.CustomFormat = "dd/MM/yyyy HH:mm";


                dtpStatsFromDate.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
                dtpStatsTillDate.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.LastDayOfMonthValue());
                pnlMonthWise.Enabled = true;
            }
            else if (optToday.ToggleState == ToggleState.On)
            {
                dtpStatsFromDate.CustomFormat = "HH:mm";
                dtpStatsTillDate.CustomFormat = "HH:mm";

                dtpStatsFromDate.Value = DateTime.Now.Date;

                dtpStatsTillDate.Value = DateTime.Now;
                pnlMonthWise.Enabled = true;


            }
            else
            {
                pnlMonthWise.Enabled = false;

            }

        }





        private void btnShowTodaysBooking_Click(object sender, EventArgs e)
        {
            frmTodaysBooking frm = new frmTodaysBooking();
            frm.StartPosition = FormStartPosition.CenterScreen;
            frm.Show();
        }

        private void btnPrintJob_Click(object sender, EventArgs e)
        {
            Print();
        }

        public override void Print()
        {

            try
            {

                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (VerifyCurrentRow())
                    {

                        long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();



                        List<Vu_BookingDetail> list = null;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            list = db.Vu_BookingDetails.Where(c => c.Id == id || c.MasterJobId == id).ToList();


                        }

                        //   var list = General.GetQueryable<Vu_BookingDetail>(c => c.Id == id || c.MasterJobId == id).ToList();

                        UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);
                        rptfrmJobDetails frm = null;
                        rptfrmJobDetails2 frm2 = null;
                        rptfrmJobDetails3 frm3 = null;
                        rptfrmJobDetails4 frm4 = null;
                        if (objReport != null)
                        {
                            switch (objReport.TemplateValue)
                            {
                                case "rptfrmJobDetails":
                                    frm = new rptfrmJobDetails();
                                    frm.DataSource = list;
                                    frm.GenerateReport();

                                    break;


                                case "rptfrmJobDetails2":
                                    frm2 = new rptfrmJobDetails2();
                                    frm2.DataSource = list;
                                    frm2.GenerateReport();

                                    break;

                                case "rptfrmJobDetails3":
                                    frm3 = new rptfrmJobDetails3();
                                    frm3.DataSource = list;
                                    frm3.GenerateReport();

                                    break;


                                case "rptfrmJobDetails4":
                                    frm4 = new rptfrmJobDetails4();
                                    frm4.DataSource = list;
                                    frm4.GenerateReport();

                                    break;
                            }


                            DockWindow doc = UI.MainMenuForm.MainMenuFrm.GetDockByName(objReport.TemplateValue + "1");

                            if (doc != null)
                            {
                                doc.Close();
                            }


                            if (frm != null)
                            {
                                frm.FormBorderStyle = FormBorderStyle.FixedSingle;
                                frm.Size = new Size(1024, 900);
                                frm.ControlBox = true;
                                frm.MaximizeBox = true;
                                frm.MinimizeBox = true;
                                frm.ShowDialog();

                                frm.Dispose();
                            }
                            else if (frm2 != null)
                            {
                                frm2.FormBorderStyle = FormBorderStyle.FixedSingle;
                                frm2.Size = new Size(1024, 900);
                                frm2.ControlBox = true;
                                frm2.MaximizeBox = true;
                                frm2.MinimizeBox = true;
                                frm2.ShowDialog();

                                frm2.Dispose();


                            }
                            else if (frm3 != null)
                            {
                                frm3.FormBorderStyle = FormBorderStyle.FixedSingle;
                                frm3.Size = new Size(1024, 900);
                                frm3.ControlBox = true;
                                frm3.MaximizeBox = true;
                                frm3.MinimizeBox = true;
                                frm3.ShowDialog();

                                frm3.Dispose();


                            }

                            else if (frm4 != null)
                            {
                                frm4.FormBorderStyle = FormBorderStyle.FixedSingle;
                                frm4.Size = new Size(1024, 900);
                                frm4.ControlBox = true;
                                frm4.MaximizeBox = true;
                                frm4.MinimizeBox = true;
                                frm4.ShowDialog();

                                frm4.Dispose();


                            }


                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }

        }


        private bool VerifyCurrentRow()
        {
            bool rtn = true;

            if (grdPendingJobs.CurrentView != null && grdPendingJobs.CurrentView.CurrentRow == null)
            {
                if (ddlShowDue.SelectedIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows[0];
                }


                if (grdPendingJobs.CurrentView != null && grdPendingJobs.CurrentView.CurrentRow == null)
                {

                    rtn = false;
                }


            }

            return rtn;


        }

        private void btnHideBooking_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {
            HideBookings(args.NewValue);
        }


        private void HideBookings(ToggleState toggle)
        {

            if (toggle == Telerik.WinControls.Enumerations.ToggleState.Off)
            {
                tableLayoutPanel1.RowStyles[0].Height = 100;
                tableLayoutPanel1.RowStyles[1].Height = 0;
                btnHideBooking.Text = "Show Booking";
            }
            else
            {
                btnHideBooking.Text = "Hide Booking";

                tableLayoutPanel1.RowStyles[0].Height = 40;
                tableLayoutPanel1.RowStyles[1].Height = 60;

            }

        }

        public void SetFullScreen()
        {
            tableLayoutPanel1.RowStyles[0].Height = 45;
            tableLayoutPanel1.RowStyles[1].Height = 55;

        }

        public void SetNormalScreen()
        {
            tableLayoutPanel1.RowStyles[0].Height = 40;
            tableLayoutPanel1.RowStyles[1].Height = 60;


        }





        frmWebBookingAlert frmWebAlert = null;
        private bool IsMutedWebPopup = false;
        private void AddWebBookingNotify(RadGridView grid, RadPageViewPage page)
        {
            if (page == null)
                return;

            int rowCnt = grid.Rows.Count;


            if (DisableWebBookingPopup == false && page.Name == "Pg_NewWebBookings")
            {
                if (frmWebAlert != null)
                {
                    IsMutedWebPopup = frmWebAlert.IsMute;

                    frmWebAlert.Close();
                    frmWebAlert = null;
                }
            }

            if (rowCnt == 0)
            {
                page.Image = null;

                if (grid.Name == "grdWebBookingsNew")
                {
                    page.Tag = null;
                }


            }
            else
            {

                if (DisableWebBookingPopup == false)
                {
                    if (page.Name == "Pg_NewWebBookings")
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(ShowWebAlert));


                        }
                        else
                        {
                            ShowWebAlert();

                        }

                    }
                }


                if (rowCnt == 1)
                {

                    page.Image = global::Taxi_AppMain.Properties.Resources.one;
                }
                else if (rowCnt == 2)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.two;

                }
                else if (rowCnt == 3)
                {

                    page.Image = global::Taxi_AppMain.Properties.Resources.three;
                }
                else if (rowCnt == 4)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.four;

                }
                else if (rowCnt == 5)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.five;

                }
                else if (rowCnt > 5)
                {
                    page.Image = global::Taxi_AppMain.Properties.Resources.fiveplus;
                }
            }



        }

        private void ShowWebAlert()
        {
            try
            {
                int rowCnt = grdWebBookingsNew.Rows.Count;


                if (frmWebAlert == null || frmWebAlert.IsDisposed)
                {
                    frmWebAlert = new frmWebBookingAlert(rowCnt.ToStr() + " OnlineBooking(s) are Waiting");
                    frmWebAlert.FormClosed += new FormClosedEventHandler(frmWebAlert_FormClosed);
                    frmWebAlert.SetMuted(IsMutedWebPopup);
                    frmWebAlert.Show();

                }
                else
                {
                    if (frmWebAlert != null && frmWebAlert.IsDisposed == false)
                    {
                        frmWebAlert.SetMessage(rowCnt.ToStr() + " OnlineBooking(s) are Waiting");
                        frmWebAlert.SetMuted(IsMutedWebPopup);
                        frmWebAlert.Visible = true;
                        frmWebAlert.Show();
                    }

                }
            }
            catch (Exception ex)
            {

            }
        }

        void frmWebAlert_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {


                IsMutedWebPopup = ((frmWebBookingAlert)(sender)).IsMuted();

            }
            catch (Exception ex)
            {


            }
        }

        public void RestartProgram()
        {


            int formscnt = 0;
            try
            {

                try
                {
                    formscnt = Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBooking" || c.Name == "frmBooking2");


                    if (formscnt == 0)
                    {

                        formscnt = Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmAddAllDriverCommissionExpenses5");


                    }
                }
                catch (Exception ex)
                {


                }

                if (formscnt == 0)
                {
                    Process.Start(Application.StartupPath + "\\Taxi_AppMain.exe", "onrestart " + AppVars.LoginObj.UserName.ToStr().Replace(" ", "*") + " " + AppVars.LoginObj.Password.ToStr().Trim());
                }
                else
                {

                    try
                    {
                        File.AppendAllText(Application.StartupPath + "\\OnRestartBookingOpened.txt", DateTime.Now.ToStr() + Environment.NewLine);

                        using (TaxiDataContext db = new TaxiDataContext())
                            db.stp_AddLog("On Restart Failed Booking was opened", Environment.MachineName, "");



                    }
                    catch
                    {


                    }

                }
            }
            catch
            {


                try
                {

                    Process.Start(Application.StartupPath + "\\Taxi_AppMain.exe", "onrestart " + AppVars.LoginObj.UserName.ToStr().Replace(" ", "*") + " " + AppVars.LoginObj.Password.ToStr().Trim());
                }
                catch
                {


                }


            }

        }

        private void timer_WebBooking_Tick(object sender, EventArgs e)
        {
            try
            {




                // Free Memory
                if (System.Diagnostics.Process.GetCurrentProcess().WorkingSet64 > 800000000)
                {
                    RestartProgram();


                }






                ReSyncDueBookings();








                if ((ddlShowDue.SelectedValue.ToInt() > 0 || ddlShowDue.SelectedValue.ToInt() == -1) && grdPendingJobs.Columns["Lead"].FilterDescriptor != null)
                {
                    if (ddlShowDue.SelectedValue.ToInt() == -1)
                        grdPendingJobs.Columns["Lead"].FilterDescriptor.Value = DateTime.Now.AddMinutes(0);
                    else
                        grdPendingJobs.Columns["Lead"].FilterDescriptor.Value = DateTime.Now.AddMinutes(ddlShowDue.SelectedValue.ToInt());
                }




                UpdateDriverWaitingSince();
            }
            catch (Exception ex)
            {


            }



        }

        private void UpdateDriverWaitingSince()
        {


            try
            {
                if (tableLayoutPanel2.ColumnStyles[2].Width > 0)
                {





                    if (grdDriverWaiting.Columns["WaitSinceOn"] == null)
                        return;

                    if (now.Year == 0001)
                        now = DateTime.Now;


                    //  grdDriverWaiting.Rows.ToList().ForEach(item => item.Cells["WaitSinceOn"].Value = now.Subtract(item.Cells["WaitSinceDate"].Value.ToDateTime()).TotalMinutes.ToInt() + " mins");
                    grdDriverWaiting.Rows.ToList().ForEach(item => item.Cells["WaitSinceOn"].Value = GetMinsInWords(now.Subtract(item.Cells["WaitSinceDate"].Value.ToDateTime()).TotalMinutes));

                }
            }

            catch
            {

            }
        }

        private string GetMinsInWords(double mins)
        {


            double hr = mins / 60;



            if (hr < 1)
                return mins.ToInt().ToStr() + " mins";
            else
            {
                if (hr.ToStr().Contains("."))
                {

                    var t = TimeSpan.FromMinutes(mins);


                    if (t.TotalHours.ToStr().Contains("."))
                    {
                        return t.TotalHours.ToStr().Substring(0, t.TotalHours.ToStr().IndexOf(".")).ToInt() + "h" + " " + t.Minutes + "m";
                    }
                    else
                        return t.TotalHours.ToInt() + "h" + " " + t.Minutes + "m";
                }
                else
                {
                    if (hr.ToInt() < 2)
                        return "1 hour";
                    else
                        return hr.ToInt() + "hours";


                }
            }





        }


        private void AddNewWebBooking(long jobId, List<ClsOnlineBooking> list)
        {
            if (jobId == 0)
                return;

            try
            {


                bool IsNewObject = false;



                GridViewRowInfo row = grdWebBookingsNew.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                if (row == null)
                {

                    //if (objNewBooking == null)
                    //{
                    var objNewBooking = GetWebBookingList(c => c.Id == jobId).FirstOrDefault();
                    IsNewObject = true;

                    //  }

                    if (objNewBooking != null)
                    {


                        row = grdWebBookingsNew.Rows.AddNew();

                        row.Cells["ID"].Value = objNewBooking.Id;
                        row.Cells["REFNO"].Value = objNewBooking.BookingNo;

                        row.Cells["BOOKEDON"].Value = string.Format("{0:dd/MM/yyyy HH:mm}", objNewBooking.BookingDate.ToDateTime());

                        row.Cells["PASSENGER"].Value = objNewBooking.CustomerName;

                        row.Cells["BOOKINGTYPEID"].Value = objNewBooking.BookingTypeId;
                        //  row.Cells["DEFAULTCLIENTID"].Value = objNewBooking.AddBy;
                        row.Cells["VEHICLETYPE"].Value = objNewBooking.VehicleType.ToStr();


                        if (!string.IsNullOrEmpty(objNewBooking.CustomerPhoneNo) && !string.IsNullOrEmpty(objNewBooking.CustomerMobileNo))
                            row.Cells["CONTACTNO"].Value = objNewBooking.CustomerPhoneNo + "/" + objNewBooking.CustomerMobileNo;

                        else if (!string.IsNullOrEmpty(objNewBooking.CustomerPhoneNo))
                            row.Cells["CONTACTNO"].Value = objNewBooking.CustomerPhoneNo;

                        else if (!string.IsNullOrEmpty(objNewBooking.CustomerMobileNo))
                            row.Cells["CONTACTNO"].Value = objNewBooking.CustomerMobileNo;


                        if (!string.IsNullOrEmpty(objNewBooking.CustomerEmail))
                        {
                            row.Cells["CONTACTNO"].Value += Environment.NewLine + "Email : " + objNewBooking.CustomerEmail;
                            row.Cells["EMAIL"].Value = objNewBooking.CustomerEmail;
                        }

                        row.Cells["PICKUPDATETIME"].Value = objNewBooking.PickupDateTime;
                        row.Cells["PICKUPTIME"].Value = objNewBooking.PickupDateTime;

                        row.Cells["OLDPICKUPDATETIME"].Value = objNewBooking.PickupDateTime;


                        row.Cells["FlightNo"].Value = objNewBooking.FromDoorNo;


                        if (!string.IsNullOrEmpty(objNewBooking.FromStreet.ToStr().Trim()))
                            row.Cells["FlightNo"].Value += " - " + objNewBooking.FromStreet;


                        row.Cells["FROMADDRESS"].Value = objNewBooking.FromAddress;
                        row.Cells["TOADDRESS"].Value = objNewBooking.ToAddress;

                        row.Cells["FARES"].Value = objNewBooking.FareRate.ToDecimal();
                        row.Cells["OLDFARES"].Value = objNewBooking.FareRate.ToDecimal();


                        row.Cells["VIA"].Value = objNewBooking.ViaString.ToStr();
                        row.Cells["PAYMENTTYPE"].Value = objNewBooking.PaymentType.ToStr().Trim();



                        row.Cells["Notes"].Value = objNewBooking.SpecialRequirements.ToStr().Trim();


                        AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);


                        txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                    }
                }
            }
            catch (Exception ex)
            {


            }

        }



        private bool EnableAutoDespatchMode = false;
        private bool EnableBiddingMode = false;



        public int selectedAutoMode = 0;

        private void SetSelectedMode()
        {
            if (chkEnableAutoDespatchNormalMode != null && chkEnableAutoDespatchNormalMode.Visibility == ElementVisibility.Visible)
            {
                if (chkEnableAutoDespatchNormalMode.ToggleState == ToggleState.On)
                    selectedAutoMode = 1;
                if (chkEnableAutoDespatchQuiteMode.ToggleState == ToggleState.On)
                    selectedAutoMode = 2;

                if (chkEnableAutoDespatchBusyMode.ToggleState == ToggleState.On)
                    selectedAutoMode = 3;

            }
        }


        public void ModifySelectedMode(int mode)
        {
            if (chkEnableAutoDespatchNormalMode != null && chkEnableAutoDespatchNormalMode.Visibility == ElementVisibility.Visible)
            {
                chkEnableAutoDespatchNormalMode.Tag = "modify";
                if (mode == 1)
                {
                    selectedAutoMode = 1;
                    chkEnableAutoDespatchNormalMode.ToggleState = ToggleState.On;

                }
                else if (mode == 2)
                {
                    selectedAutoMode = 2;
                    chkEnableAutoDespatchQuiteMode.ToggleState = ToggleState.On;

                }
                else if (mode == 3)
                {
                    selectedAutoMode = 3;
                    chkEnableAutoDespatchBusyMode.ToggleState = ToggleState.On;

                }
                chkEnableAutoDespatchNormalMode.Tag = null;

            }
        }





        private void SendWeeklyControllerReport()
        {
            try
            {

                if (AutoEmailControllerReport == false)
                    return;


                if (AppVars.objSubCompany.EmailCC.ToStr().Trim() == string.Empty)
                    return;


                //if (DateTime.Now.DayOfWeek.ToStr().ToLower() == ControllerReportDay.ToStr().ToLower() &&  DateTime.Now.TimeOfDay.Minutes == 1)
                //{

                //    Thread thEmail = new Thread(new ThreadStart(SendAutoEmailController));
                //    thEmail.Start();

                //}


            }
            catch (Exception ex)
            {


            }

        }






        private void BroastcastWebBooking(string message)
        {

            new BroadcasterData().BroadCastToAll(message);

        }

        public void ShowCancelBookingPopup(long jobId, Booking obj)
        {
            frmBookingCancelledPopup frmOnline = new frmBookingCancelledPopup(jobId);
            frmOnline.StartPosition = FormStartPosition.CenterScreen;
            frmOnline.Show();



        }




        public void ShowOnlineBookingsPopup(List<Booking> listofJobs)
        {
            frmFetchedOnlineBookingsPopup frmOnline = new frmFetchedOnlineBookingsPopup(listofJobs);
            frmOnline.StartPosition = FormStartPosition.CenterScreen;
            frmOnline.Show();



        }








        private void btnWebBooking_Click(object sender, EventArgs e)
        {
            try
            {

                //AddCall("DANISH" + " - " + "03323755646" + "-" + string.Format("{0:HH:mm}", DateTime.Now));

                timer_WebBooking.Stop();
                frmWebBooking frm = new frmWebBooking(HasWebBookingTab);
                frm.ShowDialog();

            }
            catch (Exception ex)
            {


            }
            finally
            {

                timer_WebBooking.Start();
            }

        }







        private void btnFindPreBooking_Click(object sender, EventArgs e)
        {

            RefreshSearchPreBookingData();

        }


        private void PopulateSearchPreBookingData()
        {
            try
            {
                string searchTxt = txtSearch.Text.ToLower().Trim();
                string col = ddlColumns.Text.Trim().ToLower();

                if (searchTxt.Length < 3)
                    searchTxt = string.Empty;

                bool col_name = false;
                bool col_refNo = false;
                bool col_telNo = false;
                bool col_mobNo = false;

                if (col == "passenger")
                {
                    col_name = true;
                }
                else if (col == "reference")
                {
                    col_refNo = true;
                }
                else if (col == "telephone no")
                {
                    col_telNo = true;
                }
                else if (col == "mobile no")
                {
                    col_mobNo = true;
                }

                DateTime? nowDate = DateTime.Now.Date;

                DateTime? fromDate = dtpFromDatePreBook.DateTimePickerElement.Value.ToDateorNull();


                DateTime? tillDate = dtpToDatePreBook.DateTimePickerElement.Value.ToDateorNull();

                if (fromDate != null && fromDate < nowDate)
                    fromDate = nowDate;


                if (fromDate == null)
                    fromDate = DateTime.Now.ToDate().AddDays(1).ToDate();

                if (tillDate == null)
                    tillDate = DateTime.Now.ToDate().AddDays(PreBookingDefaultDays).ToDate();


                tillDate = new DateTime(tillDate.Value.Year, tillDate.Value.Month, tillDate.Value.Day, 23, 59, 59);

                listofPreBooking = db.stp_GetBookingsData(fromDate, tillDate, AppVars.DefaultBookingSubCompanyId, BookingHours)
                    .Where(a =>
                                          (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                           || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW)

                                           &&
                                           (
                                           (col_name && (a.Passenger.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                               || (col_refNo && (a.RefNumber.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                               || (col_telNo && (a.TelephoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                || (col_mobNo && (a.MobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                           )

                                           ).OrderBy(c => c.PickupDateTemp).ToList();



                //    (from a in General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date > nowDate
                //                   && (c.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0))

                //                    where

                //                    (fromDate != null ||


                //               (col_name && (a.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                   || (col_refNo && (a.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                   || (col_telNo && (a.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                    || (col_mobNo && (a.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))

                //                    )
                //                   && ((fromDate == null || a.PickupDateTime.Value.Date >= fromDate) && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate))






                //listofPreBooking = (from a in General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date > nowDate
                //                     &&   (c.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId==0))
                //                    //where (fromDate == null || a.PickupDateTime.Value.Date >= fromDate) && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate)
                //                    where

                //                    (fromDate != null ||


                //               (col_name && (a.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                   || (col_refNo && (a.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                   || (col_telNo && (a.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                    || (col_mobNo && (a.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //               )
                //                   && ((fromDate == null || a.PickupDateTime.Value.Date >= fromDate) && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate))


                //                    select new
                //                    {
                //                        Id = a.Id,
                //                        Plot = a.Gen_Zone1.ShortName,

                //                        PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                //                        ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                //                        : a.PickupDateTime.Value.AddHours(-BookingHours),

                //                        RefNumber = a.BookingNo,
                //                        BookingDateTime = a.BookingDate,
                //                        PickupDateTemp = a.PickupDateTime,
                //                        PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                //                        Time = string.Format("{0:HH:mm}", a.PickupDateTime),


                //                        Account = a.Gen_Company.CompanyName,
                //                        PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                //                        Vehicle = a.Fleet_VehicleType.VehicleType,


                //                        From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                //                        FromPostCode = a.FromPostCode,
                //                        To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                //                        ToPostCode = a.ToPostCode,
                //                        Fare = a.TotalCharges,
                //                        Pax=a.NoofPassengers,
                //                        FromLocTypeId = a.FromLocTypeId,
                //                        ToLocTypeId = a.ToLocTypeId,

                //                        BackgroundColor1 = a.Gen_Company.BackgroundColor,
                //                        TextColor1 = a.Gen_Company.TextColor,

                //                        BackgroundColor = a.Fleet_VehicleType.BackgroundColor,

                //                        TextColor = a.Fleet_VehicleType.TextColor,



                //                        Passenger = a.CustomerName,
                //                        MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,
                //                        SpecialReq = a.SpecialRequirements,
                //                        UpdateBy = a.AddLog,
                //                        StatusId = a.BookingStatusId,
                //                        Status = a.BookingStatus.StatusName,
                //                        StatusColor = a.BookingStatus.BackgroundColor,
                //                        Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                //                        DriverId = a.DriverId,
                //                        IsAutoDespatch = a.AutoDespatch,
                //                        BookingTypeId = a.BookingTypeId,
                //                        HasNotes = a.Booking_Notes.Count,
                //                        HasNotesImg = "",
                //                        SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                //                        BookingBackgroundColor = a.BookingType.BackgroundColor,
                //                        GroupId = a.JobCode,

                //                        //   PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                //                        //  Direction = a.BoundType,
                //                        FromLocId = a.FromLocId,
                //                        //  FromPostCode = a.FromPostCode,
                //                        PrePickupDate = a.PickupDateTime.Value.Date,
                //                        BabySeats = a.BabySeats,
                //                    //    FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                //                     //   ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,
                //                      //  FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                //                      //  ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                //                        IsConfirmedDriver = a.IsConfirmedDriver,
                //                        MilesFromBase = a.ExtraMile,
                //                        IsBidding = a.IsBidding,
                //                        DeadMileage = a.DeadMileage,
                //                        a.DespatchDateTime,
                //                        a.JourneyTypeId,
                //                        Due = a.ZoneId != null ? a.Gen_Zone1.JobDueTime : null
                //                    }).OrderByDescending(c => c.PickupDateTemp).ToList();


                //  grdPreBookings.DataSource = query;


                //NEEDTOCHECK
                //grdPreBookings.MasterTemplate.ExpandAllGroups();

            }
            catch (Exception ex)
            {


            }
        }

        private void btnShowAllPreBooking_Click(object sender, EventArgs e)
        {
            //dtpFromDatePreBook.Value = null;
            //dtpToDatePreBook.Value = null;

            dtpFromDatePreBook.Value = DateTime.Now.AddDays(1).ToDate();
            dtpToDatePreBook.Value = DateTime.Now.AddDays(PreBookingDefaultDays).ToDate();

            txtSearch.Text = string.Empty;


            foreach (var col in grdPreBookings.Columns.Where(c => c is GridViewTextBoxColumn && c.FilterDescriptor != null && c.FilterDescriptor.Value != null && c.Name != "SubCompanyBgColor" && c.Name != "Lead"))
            {


                col.FilterDescriptor.Value = null;



            }

            RefreshTodayAndPreData();

        }





        private void btnShowAllQuotation_Click(object sender, EventArgs e)
        {
            dtpFromQuotation.Value = null;
            dtpToQuotation.Value = null;
            PopulateQuotationsGrid();
        }

        private void btnFindQuotations_Click(object sender, EventArgs e)
        {
            PopulateQuotationsGrid();
        }

        private void btnShuttle_Click(object sender, EventArgs e)
        {
            ShowShuttlePage();

        }

        private void ShowShuttlePage()
        {
            frmTrip frmtrip = new frmTrip();
            frmtrip.FormBorderStyle = FormBorderStyle.FixedSingle;
            frmtrip.StartPosition = FormStartPosition.CenterScreen;
            frmtrip.ShowDialog();
            frmtrip.Dispose();


        }

        private void btnEmail_Click(object sender, EventArgs e)
        {
            try
            {
                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (VerifyCurrentRow())
                    {
                        long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                        Booking obj = General.GetObject<Booking>(c => c.Id == id);

                        if (obj != null)
                        {

                            frmEmailBooking frm = new frmEmailBooking(obj);
                            frm.IsOpenedFromBooking = true;
                            frm.StartPosition = FormStartPosition.CenterScreen;
                            frm.ShowDialog();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }

        private void btnSMS_Click(object sender, EventArgs e)
        {
            try
            {
                frmSMSAll frm = new frmSMSAll();
                frm.ShowDialog();
                frm.Dispose();

            }
            catch
            {



            }
        }

        private void btnComplaints_Click(object sender, EventArgs e)
        {
            try
            {

                frmComplaint frmCom = new frmComplaint();
                frmCom.StartPosition = FormStartPosition.CenterScreen;
                frmCom.MaximizeBox = false;
                frmCom.FormBorderStyle = FormBorderStyle.FixedSingle;
                frmCom.ShowDialog();
                frmCom.Dispose();
            }
            catch
            {


            }
        }





        bool IsNotification = true;
        private int xpos = 0;
        private int lblNotiX;
        private void tmrAlert_Tick(object sender, EventArgs e)
        {


            try
            {

                if (IsNotification == true)
                {

                    //if (lblNotification != null)
                    //{
                    if (lblNotification.Text != string.Empty)
                    {

                        int lbl = lblNotification.Location.X + lblNotification.Width;

                        if (pnlNotification.Location.X >= (pnlNotification.Location.X + lblNotification.Location.X + lblNotification.Width))
                        {
                            lblNotification.Location = new System.Drawing.Point(pnlNotification.Width, 4);
                            xpos = 0;

                        }

                        else if (xpos == 0)
                        {

                            int xval = lblNotification.Location.X;
                            lblNotification.Location = new System.Drawing.Point(xval, 4);
                            xpos = xval;
                        }
                        else
                        {

                            lblNotification.Location = new System.Drawing.Point(xpos, 4);
                            xpos -= 2;
                            if (xpos == 0)
                            {
                                xpos = -1;
                            }
                        }
                        //}
                        //else
                        //{
                        //    lblNotification.Location = new System.Drawing.Point((lblNotification.Location.X + lblNotification.Width) / 2, 4);
                        //    xpos = 0;

                        //}
                    }

                }





            }
            catch
            {


            }

        }




        private void MoveUpCall()
        {
            if (lst_cdr.Items.Count < 2)
            {
                return;
            }
            if (lst_cdr.SelectedItem == null)
            {
                return;
            }
            if (lst_cdr.SelectedIndex == 0)
            {
                return;
            }


            object item = lst_cdr.SelectedItem;
            int index = lst_cdr.SelectedIndex;
            lst_cdr.Items.Remove(item);
            lst_cdr.Items.Insert(index - 1, item);
            lst_cdr.SelectedItem = item;
        }









        public void AddCall(object item)
        {
            try
            {

                if (lst_cdr.Items.OfType<string>().Count(c => c == item.ToString()) == 0)
                {
                    lst_cdr.Items.Insert(0, item);
                    lst_cdr.Visible = true;
                    lst_cdr.BringToFront();
                }
                int x = Screen.PrimaryScreen.WorkingArea.Width - 220;
                int y = 350;

                if (UseNewLayout == false)
                {
                    x = Screen.PrimaryScreen.WorkingArea.Width - 250;
                    y = 320;
                }
                lst_cdr.Location = new Point(x, y);
                lst_cdr.Width = 193;
                if (ControlMoverOrResizer.WorkType == ControlMoverOrResizer.MoveOrResize.Move)
                {

                    ControlMoverOrResizer.Init(lst_cdr);
                    ControlMoverOrResizer.WorkType = ControlMoverOrResizer.MoveOrResize.Resize;
                }

            }
            catch
            {


            }


        }

        private void lst_cdr_DoubleClick(object sender, EventArgs e)
        {
            lst_cdr.Visible = false;
        }

        private void btnInbox_Click(object sender, EventArgs e)
        {
            ShowInboxMessages("Inbox");
        }

        private void btnAddLostProperty_Click(object sender, EventArgs e)
        {
            frmLostProperty frm = new frmLostProperty();
            frm.ShowDialog();
            frm.Dispose();
        }

        private void btnLostPropertyList_Click(object sender, EventArgs e)
        {

            frmLostPropertyList frm = new frmLostPropertyList();
            frm.ShowDialog();
            frm.Dispose();

        }


        public void SetSelectedTabName(string tabName)
        {

            if (VerifyIsNotCommand())
            {

                if ((tabName == "Pg_RecentJobs" || tabName == "Pg_PreBookings" || tabName == "Pg_AllJobs")
                  && (grdPendingJobs.IsInEditMode == false && grdPreBookings.IsInEditMode == false)

                  )
                {

                    RadPageViewPage page = radPageView1.Pages.FirstOrDefault(c => c.Name == tabName);
                    if (page != null)
                    {

                        radPageView1.SelectedPage = page;

                        if (page == Pg_AllJobs)
                        {
                            ClearRecentJobFilter();

                        }

                    }
                }
            }
        }


        public void GetMainDashBoard()
        {
            try
            {


                radPageView1.SelectedPage = Pg_PendingJobs;
                SetCurrentFocus();

                if (grdPendingJobs.Rows.Count > 0)
                {

                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows[0];
                }


                foreach (var col in grdPendingJobs.Columns.Where(c => c is GridViewTextBoxColumn && c.FilterDescriptor != null && c.FilterDescriptor.Value != null && c.Name != "SubCompanyBgColor" && c.Name != "Lead"))
                {


                    col.FilterDescriptor.Value = null;



                }

                foreach (var col in grdPreBookings.Columns.Where(c => c is GridViewTextBoxColumn && c.FilterDescriptor != null && c.FilterDescriptor.Value != null && c.Name != "SubCompanyBgColor" && c.Name != "Lead"))
                {
                    col.FilterDescriptor.Value = null;
                }


                foreach (var col in grdAllJobs.Columns.Where(c => c is GridViewTextBoxColumn && c.FilterDescriptor != null && c.FilterDescriptor.Value != null && c.Name != "SubCompanyBgColor" && c.Name != "Lead"))
                {
                    col.FilterDescriptor.Value = null;
                }


                foreach (var col in grdNoShowJobs.Columns.Where(c => c is GridViewTextBoxColumn && c.FilterDescriptor != null && c.FilterDescriptor.Value != null && c.Name != "SubCompanyBgColor" && c.Name != "Lead"))
                {
                    col.FilterDescriptor.Value = null;
                }


                foreach (var col in grdCancelledJobs.Columns.Where(c => c is GridViewTextBoxColumn && c.FilterDescriptor != null && c.FilterDescriptor.Value != null && c.Name != "SubCompanyBgColor" && c.Name != "Lead"))
                {
                    col.FilterDescriptor.Value = null;
                }


            }
            catch (Exception ex)
            {


            }
        }

        private void SetCurrentFocus()
        {
            Focus();
            grdPendingJobs.Focus();

        }

        public string GetSelectedTabName()
        {


            return radPageView1.SelectedPage.Name;
        }

        public bool IsActiveTodayTabWOFilter()
        {
            bool rtn = false;

            if ((radPageView1.SelectedPage.Name == "Pg_PendingJobs" && grdPendingJobs.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_PreBookings" && grdPreBookings.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_AllJobs" && grdAllJobs.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_Cancelled" && grdCancelledJobs.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_NoShow" && grdNoShowJobs.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_Quotations" && grdQuotations.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_RecentJobs" && grdRecentJobs.IsInEditMode == false))
                rtn = true;
            else if ((radPageView1.SelectedPage.Name == "Pg_Stats" && grdStats != null && grdStats.IsInEditMode == false))
                rtn = true;

            return rtn;
        }



        private void btnRecentFind_Click(object sender, EventArgs e)
        {
            RefreshSearchAllJobsData();
        }

        private void PopulateSearchAllJobGrid()
        {
            try
            {

                grdAllJobs.DataSource = listofAllJobs;

                FormatRecentJobsGrid();
            }
            catch (Exception ex)
            {


            }

        }


        private void PopulateSearchRecentJobs()
        {

            try
            {
                DateTime FromDateRecent = dtpFromDateRecent.Value.ToDate();
                DateTime ToDateRecent = dtpToDateRecent.Value.ToDate();


                if (FromDateRecent != null && ToDateRecent != null)
                {

                    if (ToDateRecent.Subtract(FromDateRecent).TotalDays > 40)
                    {

                        MessageBox.Show("You cannot filter more than 40 days of Data");
                        return;

                    }


                }

                string searchTxt = txtSearchRec.Text.ToStr().ToLower().Trim();

                string col = ddlRecentColumn.Text.ToStr().Trim().ToLower();

                string BookingStatua = ddlBookingStatus.Text.ToStr().Trim().ToLower();

                bool col_ref = false;
                bool col_driver = false;
                bool col_From = false;
                bool col_To = false;
                bool col_Paseenger = false;
                bool col_PaseengerPhone = false;
                bool col_PaseengerMobile = false;

                bool col_Both = false;
                bool col_Waiting = false;
                bool col_ongoing = false;
                bool col_All = false;

                if (col == "refrence no")
                {
                    col_ref = true;
                }

                if (col == "driver")
                {
                    col_driver = true;
                }
                if (col == "pickup point")
                {
                    col_From = true;
                }
                if (col == "destination")
                {
                    col_To = true;
                }
                if (txtPassengerRecent.Text != "")
                {
                    col_Paseenger = true;
                    searchTxt = txtPassengerRecent.Text.ToStr().ToLower().Trim();
                }
                if (txtPhoneRecent.Text != "")
                {
                    col_PaseengerPhone = true;
                    searchTxt = txtPhoneRecent.Text.ToStr().ToLower().Trim();
                }
                if (txtMobileRecent.Text != "")
                {
                    col_PaseengerMobile = true;
                    searchTxt = txtMobileRecent.Text.ToStr().ToLower().Trim();
                }


                if (BookingStatua == "waiting & ongoing")
                {
                    col_Both = true;
                }
                if (BookingStatua == "waiting")
                {
                    col_Waiting = true;
                }
                if (BookingStatua == "ongoing")
                {
                    col_ongoing = true;
                }
                if (BookingStatua == "all")
                {
                    col_All = true;
                }







                listofAllJobs = db.stp_GetBookingsData(FromDateRecent, ToDateRecent, AppVars.DefaultBookingSubCompanyId, BookingHours).Where(c => (
                                                                  (col_All && (c.StatusId != 0))
                                                              || (col_Both && (c.StatusId == Enums.BOOKINGSTATUS.WAITING || c.StatusId == Enums.BOOKINGSTATUS.ONROUTE
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.POB
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.STC))
                                                              || (col_Waiting && (c.StatusId == Enums.BOOKINGSTATUS.WAITING))
                                                              || (col_ongoing && (c.StatusId == Enums.BOOKINGSTATUS.ONROUTE
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.POB
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.STC)))
                                                              && (
                                                             (col_ref && (c.RefNumber.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                || (col_driver && (c.Driver.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                || (col_From && (c.From.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                || (col_To && (c.To.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                || (col_Paseenger && (c.Passenger.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                           || (col_PaseengerPhone && (c.TelephoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                         || (col_PaseengerMobile && (c.MobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                                                         )).OrderBy(c => c.PickupDateTemp).ToList();

                // && ((FromDateRecent == null || c.PickupDateTemp.Value.Date >= FromDateRecent) && (ToDateRecent == null || c.PickupDateTime.Value.Date <= ToDateRecent))



                //listofAllJobs = General.GetQueryable<Booking>(null).Where(c => (
                //                                                   (col_All && (c.BookingStatusId != 0))
                //                                               || (col_Both && (c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE
                //                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                //                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.POB
                //                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.STC))
                //                                               || (col_Waiting && (c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING))
                //                                               || (col_ongoing && (c.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE
                //                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                //                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.POB
                //                                                   || c.BookingStatusId == Enums.BOOKINGSTATUS.STC)))
                //                                               && (
                //                                              (col_ref && (c.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                                                 || (col_driver && (c.Fleet_Driver.DriverNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                                                 || (col_From && (c.FromAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                                                 || (col_To && (c.ToAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                                                 || (col_Paseenger && (c.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                                                            || (col_PaseengerPhone && (c.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                //                                                          || (col_PaseengerMobile && (c.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty)))
                //                                                  && ((FromDateRecent == null || c.PickupDateTime.Value.Date >= FromDateRecent) && (ToDateRecent == null || c.PickupDateTime.Value.Date <= ToDateRecent))

                //                                                 ).Select(a => new
                //                                                 {
                //                                                     Id = a.Id,
                //                                                     Plot = a.Gen_Zone1.ShortName,
                //                                                     //    PlotHour=(a.ZoneId!=null && a.Gen_Zone1.FlashingHour >0) ? a.PickupDateTime.Value.AddHours(Convert.ToDouble(a.Gen_Zone1.FlashingHour)):a.PickupDateTime.Value.AddHours(BookingHours),

                //                                                     PlotHour = (a.ZoneId != null && a.Gen_Zone1.FlashingHour != null)
                //                                                     ? a.PickupDateTime.Value.AddMinutes(-(a.Gen_Zone1.FlashingHour.Value.Minute)).AddHours(-(a.Gen_Zone1.FlashingHour.Value.Hour))
                //                                                     : a.PickupDateTime.Value.AddHours(-BookingHours),

                //                                                     RefNumber = a.BookingNo,
                //                                                     BookingDateTime = a.BookingDate,
                //                                                     PickupDateTemp = a.PickupDateTime,
                //                                                     PickUpDate = string.Format("{0:dd-MM}", a.PickupDateTime),
                //                                                     Time = string.Format("{0:HH:mm}", a.PickupDateTime),

                //                                                     Passenger = a.CustomerName,
                //                                                     MobileNo = a.CustomerMobileNo != null && a.CustomerMobileNo != "" ? a.CustomerMobileNo : a.CustomerPhoneNo,

                //                                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + "-" + a.FromStreet + " " + a.FromAddress : a.FromAddress,
                //                                                     Pickup = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - "  + a.FromOther : a.FromOther,
                //                                                     FromPostCode = a.FromPostCode,
                //                                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                //                                                     GoingTo = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToOther : a.ToOther,
                //                                                     ToPostCode = a.ToPostCode,

                //                                                     Fare = a.TotalCharges,
                //                                                     Pax = a.NoofPassengers,
                //                                                     PaymentMethod = a.Gen_PaymentType.PaymentType,
                //                                                     FromLocTypeId = a.FromLocTypeId,
                //                                                     ToLocTypeId = a.ToLocTypeId,

                //                                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                //                                                     TextColor1 = a.Gen_Company.TextColor,

                //                                                     BackgroundColor = a.Fleet_VehicleType.BackgroundColor,
                //                                                     TextColor = a.Fleet_VehicleType.TextColor,

                //                                                     Account = a.Gen_Company.CompanyName,
                //                                                     PReference = (a.PaymentComments != null && a.PaymentComments != "") ? "YES" : "",
                //                                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                //                                                     UpdateBy = a.AddLog,
                //                                                     SpecialReq = a.SpecialRequirements,
                //                                                     StatusId = a.BookingStatusId,
                //                                                     Status = a.BookingStatus.StatusName,
                //                                                     StatusColor = a.BookingStatus.BackgroundColor,
                //                                                     Driver = a.DriverId != null ? a.Fleet_Driver.DriverNo + "-" + a.BookingStatus.StatusName : "",
                //                                                     DriverId = a.DriverId,
                //                                                     IsAutoDespatch = a.AutoDespatch,
                //                                                     BookingTypeId = a.BookingTypeId,
                //                                                     HasNotes = a.Booking_Notes.Count,
                //                                                     HasNotesImg = "",
                //                                                     SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,

                //                                                     BookingBackgroundColor = a.BookingType.BackgroundColor,
                //                                                     GroupId = a.JobCode,

                //                                                     //  PrePickupDate = string.Format("{0:dddd dd/MM/yyyy}", a.PickupDateTime),
                //                                                     //   Direction = a.BoundType,
                //                                                     FromLocId = a.FromLocId,
                //                                                     //FromPostCode = a.FromPostCode,
                //                                                     PrePickupDate = a.PickupDateTime.Value.Date,
                //                                                     BabySeats = a.BabySeats,
                //                                                   //  FromLocBgColor = a.FromLocId != null ? a.Gen_Location1.BackgroundColor : -1,
                //                                                   //  ToLocBgColor = a.ToLocId != null ? a.Gen_Location2.BackgroundColor : -1,

                //                                                   //  FromLocTextColor = a.FromLocId != null ? a.Gen_Location1.TextColor : -1,
                //                                                   //  ToLocTextColor = a.ToLocId != null ? a.Gen_Location2.TextColor : -1,
                //                                                     IsConfirmedDriver = a.IsConfirmedDriver,
                //                                                     MilesFromBase = a.ExtraMile,
                //                                                     IsBidding = a.IsBidding,
                //                                                     DeadMileage = a.DeadMileage,
                //                                                     a.DespatchDateTime,
                //                                                     a.JourneyTypeId,
                //                                                     Due = a.ZoneId != null ? a.Gen_Zone1.JobDueTime : null

                //                                                 }).OrderBy(c => c.PickupDateTemp).ToList();


            }
            catch (Exception ex)
            {


            }
        }

        private void btnRecentShowAll_Click(object sender, EventArgs e)
        {
            ClearRecentJobFilter();
            txtSearchRec.Focus();
            RefreshSearchAllJobsData();
        }


        private void ClearRecentJobFilter()
        {

            txtSearchRec.Text = string.Empty;


            ddlBookingStatus.SelectedIndex = ddlBookingStatus.Tag.ToInt();
            ddlRecentColumn.SelectedIndex = 0;
            dtpFromDateRecent.Value = DateTime.Now.ToDate().AddDays(-1);
            dtpToDateRecent.Value = DateTime.Now.ToDate();


        }

        private void txtSearchRec_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.Control)
            {
                return;
            }

            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Up)
            {
                dtpFromDateRecent.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtPassengerRecent.Focus();
            }
            else if (e.KeyCode == Keys.Right)
            {
                int Sel = txtSearchRec.SelectionStart;
                int pos = txtSearchRec.Text.Length;


            }
        }


        string updatemessage = string.Empty;
        private void AddNotifyMessage(string message)
        {
            if (DisablePopupNotifications == false)
                updatemessage = message + " " + string.Format("{0:HH:mm}", DateTime.Now);
            //try
            //{


            //    if (message.Length > 0)
            //    {

            //        message = message + " " + string.Format("{0:HH:mm}", DateTime.Now);
            //            updatemessage=message;
            //        //IsNotification = true;
            //        //lblNotification.Visible = true;

            //        //radLabel1.Text = "";
            //        //radLabel1.BackColor = Color.Red;

            //        //lblNotification.Location = new System.Drawing.Point(pnlNotification.Width, 4);
            //        //xpos = 0;
            //        //ypos = 0;

            //        //if (string.IsNullOrEmpty(lblNotification.Text))
            //        //    lblNotification.Text = message;

            //        //else
            //        //    lblNotification.Text = message + " >> " + lblNotification.Text;

            //    }

            //}
            //catch 
            //{
            //  //  ENUtils.ShowErrorMessage(ex.Message);
            //}
        }

        private void dtpFromDateRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                dtpToDateRecent.Focus();
            }
        }

        private void dtpToDateRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ddlBookingStatus.Focus();

            }
        }

        private void ddlBookingStatus_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                btnRecentFind.Focus();
            }
            else if (e.KeyCode == Keys.Left)
            {
                txtSearchRec.Focus();
            }
        }

        private void txtPhoneRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                return;
            }
            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtMobileRecent.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtPassengerRecent.Focus();
            }
        }

        private void txtPassengerRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                return;
            }
            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtPhoneRecent.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtSearchRec.Focus();
            }
        }

        private void txtMobileRecent_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Control)
            {
                return;
            }
            if (e.KeyCode == Keys.Enter)
            {
                RefreshSearchAllJobsData();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtPhoneRecent.Focus();
            }
        }

        private void lblNotification_MouseHover(object sender, EventArgs e)
        {
            IsNotification = false;
        }

        private void lblNotification_MouseLeave(object sender, EventArgs e)
        {
            IsNotification = true;
        }

        private void ddlRecentColumn_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Left)
                {

                    if (ddlRecentColumn.SelectionStart == 0)
                    {

                        txtSearchRec.Focus();
                    }
                }
            }
            catch
            {


            }
        }

        private void btnPDAInbox_Click(object sender, EventArgs e)
        {
            ShowPDAInbox();
        }

        private void ShowPDAInbox()
        {
            ShowInboxMessages("Pda");

        }

        private void btnRecover_Click(object sender, EventArgs e)
        {




            RecoverJob();
        }

        private void RecoverJob()
        {

            try
            {

                frmRecallJob frmRec = new frmRecallJob();
                frmRec.StartPosition = FormStartPosition.CenterScreen;
                frmRec.ShowDialog();
                frmRec.Dispose();
            }
            catch
            {


            }

        }

        private void btnMessageAllDrivers_Click(object sender, EventArgs e)
        {
            MessageAllDrivers();
        }


        private void MessageAllDrivers()
        {
            try
            {
                frmMessageAllDrivers frmMsgDrvs = new frmMessageAllDrivers();
                frmMsgDrvs.StartPosition = FormStartPosition.CenterScreen;
                frmMsgDrvs.Show();

            }
            catch
            {


            }


        }

        private void timer_Lic_Tick(object sender, EventArgs e)
        {
            try
            {
                if (this.IsLicenseExpired == false)
                {

                    if (AppVars.LicenseChecked == false)
                    {

                        if (AppVars.listUserRights.Count(c => c.functionId == "DISABLE LIC CHECK AFTER LOGIN") == 0)
                        {


                            thread_License = new Thread(new ThreadStart(CheckLicense));
                            thread_License.IsBackground = true;
                            thread_License.Priority = ThreadPriority.Lowest;
                            thread_License.Start();

                        }
                    }
                }




                // need to test
                //if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmNotification") > 0)
                //{
                //    Application.OpenForms.OfType<Form>().Where(c => c.Name == "frmNotification").ToList().ForEach(c => c.Close());
                //}



                DateTime dtNow = DateTime.Now.ToDate();

                //    DateTime dateVar = DateTime.Now.AddDays(AppVars.objPolicyConfiguration.DriverExpiryNoticeInDays.ToInt()).Date;
                var ctn = General.GetQueryable<Fleet_Driver>(c => c.IsActive == true &&
                                               (

                                              (c.MOTExpiryDate >= dtNow && c.MOTExpiryDate <= dtNow.AddDays(MOTDays))
                                            || (c.MOT2ExpiryDate >= dtNow && c.MOT2ExpiryDate <= dtNow.AddDays(MOT2Days))
                                            || (c.PCODriverExpiryDate >= dtNow && c.PCODriverExpiryDate <= dtNow.AddDays(PHCDriverDays))
                                            || (c.PCOVehicleExpiryDate >= dtNow && c.PCOVehicleExpiryDate <= dtNow.AddDays(PHCVehicleDays))
                                            || (c.DrivingLicenseExpiryDate >= dtNow && c.DrivingLicenseExpiryDate <= dtNow.AddDays(LicenseDays))
                                            || (c.InsuranceExpiryDate >= dtNow && c.InsuranceExpiryDate <= dtNow.AddDays(InsuranceDays))
                                            || (c.RoadTaxiExpiryDate >= dtNow && c.RoadTaxiExpiryDate <= dtNow.AddDays(RoadTaxDays))
                                               )

                                            //   (c.MOTExpiryDate >= dtNow && c.MOTExpiryDate <= dateVar)
                                            //|| (c.MOT2ExpiryDate >= dtNow && c.MOT2ExpiryDate <= dateVar)
                                            //|| (c.PCODriverExpiryDate >= dtNow && c.PCODriverExpiryDate <= dateVar)
                                            //|| (c.PCOVehicleExpiryDate >= dtNow && c.PCOVehicleExpiryDate <= dateVar)
                                            //|| (c.DrivingLicenseExpiryDate >= dtNow && c.DrivingLicenseExpiryDate <= dateVar)
                                            //|| (c.InsuranceExpiryDate >= dtNow && c.InsuranceExpiryDate <= dateVar)
                                            //|| (c.RoadTaxiExpiryDate >= dtNow && c.RoadTaxiExpiryDate <= dateVar)
                                            //   )

                                            ).Count();

                if (ctn > 0)
                {
                    frmNotification notification = new frmNotification(MOTDays, MOT2Days, PHCDriverDays, PHCVehicleDays, LicenseDays, InsuranceDays, RoadTaxDays, this.IsServer);
                    notification.FormBorderStyle = FormBorderStyle.FixedSingle;
                    notification.StartPosition = FormStartPosition.CenterScreen;
                    notification.Show();
                    this.WindowState = FormWindowState.Normal;
                }



            }
            catch (Exception ex)
            {


            }


        }


        Thread thread_License = null;

        private void CheckLicense()
        {
            try
            {

                bool verify = General.VerifyLicense(AppVars.objPolicyConfiguration.DefaultClientId);

                if (verify)
                {


                    if (Program.objLic.ExpiryDateTime.ToStr().Trim().Length > 0)
                        AppVars.LicenseExpiryDate = "License Expired on " + string.Format("{0:dd/MMM/yyyy HH:mm}", Program.objLic.ExpiryDateTime.ToStr());

                    if (DateTime.Now.AddDays(3) > Program.objLic.ExpiryDateTime.ToDateTime())
                    {

                        if (this.InvokeRequired)
                        {
                            this.BeginInvoke(new UIDelegate(ShowLicenseAlert));
                        }
                        else
                        {
                            ShowLicenseAlert();
                        }
                    }

                }
                else
                {
                    if (Program.objLic.Reason.ToStr().Trim().Length == 0 || Program.objLic.Reason.ToStr().ToLower().StartsWith("a network-related") || Program.objLic.Reason.ToStr().ToLower().Contains("could not be resolved"))
                    {
                        this.IsLicenseExpired = true;

                    }
                }



                //using (LicDataContextDataContext db = new LicDataContextDataContext())
                //{

                //    stp_SysPolicyAuthResult objClient = db.stp_SysPolicyAuth(AppVars.objPolicyConfiguration.DefaultClientId).FirstOrDefault();

                //    if (objClient != null)
                //    {
                //        if (objClient.ScriptType.ToStr().ToLower() == "expired")
                //        {

                //            AppVars.LicenseExpiryDate = "License Expired on " + string.Format("{0:dd/MMM/yyyy HH:mm}", objClient.LastCondition.ToStr());

                //            this.IsLicenseExpired = true;

                //        }
                //        else
                //        {
                //            if (DateTime.Now.AddDays(3) > objClient.LastCondition)
                //            {

                //                if (this.InvokeRequired)
                //                {
                //                    this.BeginInvoke(new UIDelegate(ShowLicenseAlert));
                //                }
                //                else
                //                {
                //                    ShowLicenseAlert();

                //                }
                //            }
                //        }
                //    }
                //    else
                //    {
                //        this.IsLicenseExpired = true;


                //    }
                //}

            }
            catch (Exception ex)
            {

                if (ex.Message.ToLower().StartsWith("a network-related"))
                {
                    this.IsLicenseExpired = true;
                }
            }

        }


        private void ShowLicenseAlert()
        {


            frmLicenseAlert frmLic = new frmLicenseAlert(AppVars.LicenseExpiryDate, new Point((this.Size.Width - 300), 20));
            frmLic.StartPosition = FormStartPosition.CenterScreen;
            frmLic.Show();

        }

        private void VerifySystemLicense()
        {


            try
            {

                Gen_SysPolicy_LCompany objLic = General.GetObject<Gen_SysPolicy_LCompany>(c => c.AddOn != null);

                if (objLic != null)
                {
                    if (objLic.EditOn < objLic.AddOn)
                        this.IsLicenseExpired = true;


                    AppVars.LicenseExpiryDate = "License Expired on " + string.Format("{0:dd/MMM/yyyy HH:mm}", objLic.EditOn.ToStr());
                }
            }
            catch (Exception ex)
            {

            }




        }

        private void btnclearSearchFilter_Click(object sender, EventArgs e)
        {
            ClearSearchFilter();
        }


        private void ClearSearchFilter()
        {
            ClearSearchByDateFilter();
            opt_JOneWay.ToggleState = ToggleState.On;
            ddlVehicleType.SelectedValue = null;
            ddlCust.SelectedValue = null;
            ddlCust.Text = string.Empty;
            ddlPaymentType.SelectedValue = null;
            txtVia.Text = string.Empty;
            txtPickup.Text = string.Empty;
            txtDestination.Text = string.Empty;
            txtMobileNo.Text = string.Empty;
            txtOrderNo.Text = string.Empty;
            txtPhoneNo.Text = string.Empty;
            txtRefNumber.Text = string.Empty;

            txtOrderNo.Text = string.Empty;

            ddlDriver.SelectedValue = null;

            ddlStatus.SelectedValue = null;

            ddlPaymentType.SelectedValue = null;

            ddlBookingType.SelectedValue = null;

        }

        private void ClearSearchByDateFilter()
        {

            dtp_recentJob_StartDate.Value = DateTime.Now.ToDate();
            dtp_RecentJobs_EndDate.Value = DateTime.Now.ToDate();


        }

        public bool ReCallFOJBooking(long jobId, int driverId)
        {

            bool rtn = true;

            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    db.stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING);

                    try
                    {
                        db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Job is Recovered by Controller");
                    }
                    catch
                    {


                    }
                }


                if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                {
                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendMessageToPDA("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2").Result.ToBool();
                    }

                }
                else
                {

                    //For TCP Connection
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {

                        rtn = General.SendMessageToPDA("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2").Result.ToBool();
                    }


                }

            }
            catch (Exception ex)
            {

                //  ENUtils.ShowMessage(ex.Message);


            }


            return rtn;

        }



        private void btnEmailPrint_Click(object sender, EventArgs e)
        {
            EmailPrint();
        }

        public void EmailPrint()
        {

            try
            {

                if (grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo)
                {
                    if (VerifyCurrentRow())
                    {
                        long id = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                        var list = General.GetQueryable<Vu_BookingDetail>(c => c.Id == id || c.MasterJobId == id).ToList();


                        if (list.Count > 0)
                        {

                            UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);
                            rptfrmJobDetails frm = null;
                            rptfrmJobDetails2 frm2 = null;
                            rptfrmJobDetails3 frm3 = null;
                            rptfrmJobDetails4 frm4 = null;
                            if (objReport != null)
                            {

                                switch (objReport.TemplateValue)
                                {
                                    case "rptfrmJobDetails":
                                        frm = new rptfrmJobDetails();
                                        frm.DataSource = list;
                                        frm.GenerateReport();

                                        frm.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());
                                        break;


                                    case "rptfrmJobDetails2":
                                        frm2 = new rptfrmJobDetails2();
                                        frm2.DataSource = list;
                                        frm2.GenerateReport();

                                        frm2.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());
                                        break;

                                    case "rptfrmJobDetails3":
                                        frm3 = new rptfrmJobDetails3();
                                        frm3.DataSource = list;
                                        frm3.GenerateReport();
                                        frm3.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());

                                        break;


                                    case "rptfrmJobDetails4":
                                        frm4 = new rptfrmJobDetails4();
                                        frm4.DataSource = list;
                                        frm4.GenerateReport();

                                        frm4.SendEmail(list[0].BookingNo, list[0].CustomerEmail.ToStr().Trim());
                                        break;
                                }
                            }
                        }
                    }

                }
            }
            catch (Exception ex)
            {


            }

        }



        private void btnFindWaitWebBooking_Click(object sender, EventArgs e)
        {
            PopulateWebBookingsGrid();
        }


        private void btnRefreshPendingWebBooking_Click(object sender, EventArgs e)
        {
            // PopulatePendingWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_WEBBOOKING));

        }

        private void btnRefreshWaitingWebBooking_Click(object sender, EventArgs e)
        {
            PopulateNewWebBookings(GetWebBookingList(c => c.BookingStatusId == Enums.BOOKINGSTATUS.WAITING_WEBBOOKING));
        }




        #region BackgroundWorker code


        BackgroundWorker worker = null;
        delegate void UIProgress(bool show);

        IList listofDriversWaiting = null;
        IList listofDriversOnBoard = null;
        List<stp_GetDashboardDriversResultEx> listofDriverPlots = null;


        IList listofTodaysBooking = null;

        IList listofPreBooking = null;
        IList listofAllJobs = null;
        IList listofQuotations = null;

        List<stp_GetPriceBiddingJobsResult> listofBiddingJobs = null;



        public void RefreshSearchAllJobsData()
        {
            try
            {

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateSearchRecentJobs");
                }
            }
            catch (Exception ex)
            {


            }
        }


        public void RefreshBookingList()
        {
            try
            {


                if (worker.IsBusy == false)
                {
                    ShowProgress2(true);
                    worker.RunWorkerAsync("PopulateBookingHistoryData");

                }
            }
            catch (Exception ex)
            {

            }
        }


        public override void RefreshData()
        {
            try
            {





                if (worker.IsBusy == true)
                {

                    try
                    {

                        worker.CancelAsync();
                    }
                    catch
                    {


                    }
                }




                //if (AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() > 0)
                //{


                //    DateTime? dt = DateTime.Now.ToDateorNull();
                //    DateTime recentDays = dt.Value.AddDays(-1);



                //    int cnt = db.stp_GetAllBookingsDataCount(recentDays, dt.Value.AddDays(PreBookingDefaultDays).ToDate(), AppVars.DefaultBookingSubCompanyId, BookingHours).FirstOrDefault().Column1.ToInt();

                //    if ((grdPendingJobs.Rows.Count + grdPreBookings.Rows.Count + grdAllJobs.Rows.Count) != cnt)
                //    {




                //        ShowProgress(true);
                //        worker.RunWorkerAsync("PopulateAllData");
                //    }
                //    else
                //    {


                //        ReSyncOfflineBookings();
                //        ShowProgress(true);
                //        RecentJobsRefreshRequired = true;
                //        RefreshDashBoardDriversSync("");
                //        RecentJobsRefreshRequired = false;

                //    }
                //}
                //else
                //{
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateAllData");

                // }


                //else
                //{
                //    ShowProgress(true);

                //    worker.RunWorkerAsync("PopulateAllData");

                //}

                //try
                //{

                //    File.AppendAllText(Application.StartupPath + "\\refreshauthdata.txt", DateTime.Now.ToStr());
                //}
                //catch
                //{


                //}

            }
            catch (Exception ex)
            {

            }

        }


        private void ReSyncOfflineBookings()
        {

            try
            {
                if (AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() > 0)
                {
                    DateTime? dtPre = DateTime.Now.AddHours(AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt());


                    List<GridViewRowInfo> row = new List<GridViewRowInfo>();

                    List<stp_GetBookingsDataResult> listToday = null;
                    List<stp_GetBookingsDataResult> listPre = (List<stp_GetBookingsDataResult>)grdPreBookings.DataSource;

                    List<stp_GetBookingsDataResult> listAdd = null;
                    foreach (stp_GetBookingsDataResult item in listPre.Where(c => c.PickupDateTemp <= dtPre))
                    {

                        if (listToday == null)
                            listToday = (List<stp_GetBookingsDataResult>)grdPendingJobs.DataSource;

                        if (listToday.Count(c => c.Id == item.Id) == 0)
                        {

                            if (listAdd == null)
                                listAdd = new List<stp_GetBookingsDataResult>();

                            listAdd.Add(item);
                            cnt++;
                        }

                    }


                    if (listAdd != null && listAdd.Count > 0)
                    {

                        listToday.AddRange(listAdd);

                        if (JobsSortBy == 0)
                            listofTodaysBooking = listToday.OrderBy(c => c.Lead).ToList();
                        else
                            listofTodaysBooking = listToday.OrderBy(c => c.PickupDateTemp).ToList();

                        foreach (var item in listToday)
                        {
                            if (listPre.Count(c => c.Id == item.Id) > 0)
                            {
                                listPre.RemoveAll(c => c.Id == item.Id);


                            }
                        }


                        listofPreBooking = listPre.OrderBy(c => c.PickupDateTemp).ToList();

                        PopulateSerTodayJobsGrids("");
                        RefreshUpdatePreBookingGrid("");
                    }
                }


            }
            catch (Exception ex)
            {

            }


        }

        private void ReSyncDueBookings()
        {
            try
            {
                if (reSyncMidnightBookings == false || now.Hour < 21 || BookingHours > 0)
                    return;



                if (grdPreBookings.Rows.Where(c => c.Cells["Lead"].Value.ToDateTime() < now).Count() > 0)
                {
                    List<stp_GetBookingsDataResult> listToday = (List<stp_GetBookingsDataResult>)grdPendingJobs.DataSource;

                    List<stp_GetBookingsDataResult> listPre = (List<stp_GetBookingsDataResult>)grdPreBookings.DataSource;

                    var todayPreBooks = listPre.Where(c => c.Lead <= now).ToList();

                    listToday.AddRange(todayPreBooks);

                    if (JobsSortBy == 0)
                        listofTodaysBooking = listToday.OrderBy(c => c.Lead).ToList();
                    else if (JobsSortBy == 1)
                        listofTodaysBooking = listToday.OrderBy(c => c.PickupDateTemp).ToList();
                    else if (JobsSortBy == 2)
                    {
                        var listA = listToday.OrderBy(c => c.Lead).ToList();

                        List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                        foreach (var item in listA)
                        {
                            if (listB.Count(c => c.Plot == item.Plot) == 0)
                                listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                        }


                        listofTodaysBooking = listB;


                    }
                    foreach (var item in listToday)
                    {
                        if (listPre.Count(c => c.Id == item.Id) > 0)
                        {
                            listPre.RemoveAll(c => c.Id == item.Id);


                        }
                    }
                    listofPreBooking = listPre.OrderBy(c => c.PickupDateTemp).ToList();

                    PopulateSerTodayJobsGrids("");
                    RefreshUpdatePreBookingGrid("");


                }
            }
            catch
            {

            }

        }

        public void RefreshBookingData()
        {
            try
            {
                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateData");

                }
            }
            catch (Exception ex)
            {

            }
        }

        private bool RecentJobsRefreshRequired;

        public void RefreshOnlyDashBoardDrivers()
        {
            try
            {

                ShowProgress(true);
                worker.RunWorkerAsync("PopulateDriversData");





            }
            catch (Exception ex)
            {

            }
        }

        public void RefreshDashBoardDrivers()
        {
            try
            {


                if (worker.IsBusy == true)
                {

                    try
                    {

                        worker.CancelAsync();
                    }
                    catch
                    {


                    }
                }

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateDriversData");

                }


                RefreshBookingListWhenActive();
            }
            catch (Exception ex)
            {

            }
        }


        public void RefreshDashBoardDriversSync(string msg)
        {
            try
            {
                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateDriversData");

                }


                RefreshBookingListWhenActive();
            }
            catch (Exception ex)
            {

            }
        }

        private void RefreshBookingListWhenActive()
        {
            try
            {
                if (RecentJobsRefreshRequired && Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBookingsList") > 0)
                {
                    (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingsList") as frmBookingsList).SetRefreshWhenActive("");
                }
            }
            catch
            {

            }

        }






        public void RefreshAllRequiredJSONData(List<stp_GetBookingsDataResult> query)
        {


            try
            {

                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIBookingListParameter(RefreshAllRequiredJSONData), query);
                }
                else
                {


                    //   List<stp_GetBookingsDataResult> query = Newtonsoft.Json.JsonConvert.DeserializeObject<List<stp_GetBookingsDataResult>>(data);









                    DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);
                    DateTime? dt = DateTime.Now.ToDateorNull();

                    DateTime recentDays = dt.Value.AddDays(-1);

                    if (BookingHours > 0)
                    {

                        if (ShowPendingJobOnRecentTab)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                                                && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                   || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                    || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                                   .OrderBy(c => c.Lead).ToList();

                        }
                        else
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                                                   && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                      || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                      || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                                      || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                                      || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                                      .OrderBy(c => c.Lead).ToList();

                        }


                    }

                    else
                    {





                        if (selectedduevalue == 1000)
                        {
                            if (ShowPendingJobOnRecentTab)



                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                        && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                            || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           ))
                                            .OrderBy(c => c.Lead).ToList();


                            }
                            else
                            {

                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                .OrderBy(c => c.Lead).ToList();
                            }


                        }
                        else
                        {

                            if (ShowPendingJobOnRecentTab)
                            {

                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                              && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                 || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                  || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                  ))
                                  .OrderBy(c => c.Lead).ToList();

                            }
                            else
                            {

                                if (JobsSortBy == 0)
                                {
                                    listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                              .OrderBy(c => c.Lead).ToList();
                                }
                                else if (JobsSortBy == 1)
                                {
                                    listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                        && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                            || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                            .OrderBy(c => c.PickupDateTemp).ToList();
                                }
                                else if (JobsSortBy == 2)
                                {
                                    var listA = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                         && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                             || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                             .OrderBy(c => c.PickupDateTemp).ToList();



                                    List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();



                                    foreach (var item in listA)
                                    {

                                        if (listB.Count(c => c.Plot == item.Plot) == 0)
                                            listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                                    }

                                    listofTodaysBooking = listB;




                                }

                            }
                        }




                    }


                    // PreBooking

                    if (BookingHours > 0)
                    {

                        listofPreBooking = query.Where(a => a.PickupDateTemp > Hours
                                              && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                              || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                              || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                   .OrderBy(c => c.PickupDateTemp).ToList();

                    }


                    else
                    {
                        listofPreBooking = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                                && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                                || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                     .OrderBy(c => c.PickupDateTemp).ToList();
                    }








                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                           || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                           || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                           || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();








                    PopulateRequiredGrids();

                }

            }
            catch (Exception ex)
            {
                try
                {
                    AddExcepLog("RefreshAllRequiredJSONData :" + ex.Message);
                }
                catch
                {


                }
            }







        }





        private void CancelWorkerIfBusy()
        {

            //new work
            try
            {
                if (worker.IsBusy == true)
                {
                    Thread.Sleep(1500);

                    try
                    {

                        worker.CancelAsync();
                    }
                    catch
                    {


                    }
                }
            }
            catch
            {

            }
            //new work
        }


        public void RefreshAllRequiredData()
        {
            //  CancelWorkerIfBusy();



            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateRequiredDataWithDriver");
            }
        }


        public void RefreshTodayBookingData()
        {
            //  CancelWorkerIfBusy();

            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateTodaysBookingData");
            }
        }

        public void RefreshRequiredData()
        {
            // CancelWorkerIfBusy();


            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateRequiredData");
            }
        }

        public void RefreshTodayAndPreData()
        {
            //  CancelWorkerIfBusy();

            if (worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulateTodayAndPreBookingData");
            }
        }



        private bool HasBookingHistoryTab = false;

        public void RefreshAllActiveData()
        {
            try
            {


                if (worker.IsBusy)
                {
                    Thread.Sleep(500);

                    try
                    {
                        try
                        {

                            worker.CancelAsync();
                        }
                        catch
                        {


                        }

                        //  File.AppendAllText("BackgroundWorkerfixedWithSleep.txt", DateTime.Now.ToStr() + Environment.NewLine);

                    }
                    catch
                    {


                    }
                }


                //if (worker.IsBusy == false)
                //{
                ShowProgress(true);



                if (tableLayoutPanel1.RowStyles[0].Height > 0)
                {
                    worker.RunWorkerAsync("PopulateAllActiveData");

                }
                else
                {
                    worker.RunWorkerAsync("PopulateActiveData");


                }



                //}


                if (HasBookingHistoryTab)
                {
                    RefreshOnActive = true;
                }
                else
                {

                    if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBookingsList") > 0)
                    {
                        (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingsList") as frmBookingsList).SetRefreshWhenActive("");
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }


        public void RefreshAllActiveDataBL(string jobId)
        {
            try
            {


                if (worker.IsBusy)
                {
                    Thread.Sleep(500);

                    try
                    {
                        try
                        {

                            worker.CancelAsync();
                        }
                        catch
                        {


                        }

                        //  File.AppendAllText("BackgroundWorkerfixedWithSleep.txt", DateTime.Now.ToStr() + Environment.NewLine);

                    }
                    catch
                    {


                    }
                }


                //if (worker.IsBusy == false)
                //{
                ShowProgress(true);



                if (tableLayoutPanel1.RowStyles[0].Height > 0)
                {
                    worker.RunWorkerAsync("PopulateAllActiveData");

                }
                else
                {
                    worker.RunWorkerAsync("PopulateActiveData");


                }



                //}


                if (HasBookingHistoryTab)
                {
                    RefreshOnActive = true;
                }
                else
                {

                    if (Application.OpenForms.OfType<Form>().Count(c => c.Name == "frmBookingsList") > 0)
                    {
                        (Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingsList") as frmBookingsList).SetRefreshWhenActive(jobId);
                    }
                }
            }
            catch (Exception ex)
            {


            }
        }

        public void RefreshBiddingJobsData()
        {
            try
            {



            }
            catch (Exception ex)
            {


            }
        }

        public void RefreshActiveData()
        {
            try
            {

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateActiveData");
                }
            }
            catch (Exception ex)
            {


            }
        }


        public void RefreshJSONActiveData(string data)
        {
            try
            {

                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UISingleParameter(RefreshJSONActiveData), data);
                }
                else
                {

                    DateTime? dt = DateTime.Now.ToDateorNull();
                    DateTime recentDays = dt.Value.AddDays(-1);

                    List<stp_GetBookingsDataResult> query = Newtonsoft.Json.JsonConvert.DeserializeObject<List<stp_GetBookingsDataResult>>(data);


                    if (BookingHours > 0)
                    {

                        DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);

                        if (ShowPendingJobOnRecentTab)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                              || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                              || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                              .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {

                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                                 && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                    || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                    || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                    || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                    || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                    .OrderBy(c => c.Lead).ToList();
                        }

                    }
                    else
                    {

                        if (selectedduevalue == 1000)
                        {
                            if (ShowPendingJobOnRecentTab)
                            {
                                listofTodaysBooking = query.Where(a =>
                                   (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                     || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                      || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                    )).OrderBy(c => c.Lead).ToList();


                            }
                            else
                            {


                                listofTodaysBooking = query.Where(a =>
                                       (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                         || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                          || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();

                            }
                        }
                        else
                        {

                            if (ShowPendingJobOnRecentTab)
                            {
                                listofTodaysBooking = query.Where(a =>
                                       (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                         || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                          || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                    )).OrderBy(c => c.Lead).ToList();


                            }
                            else
                            {

                                if (JobsSortBy == 0)
                                {

                                    listofTodaysBooking = query.Where(a =>
                                            (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                                }
                                else if (JobsSortBy == 1)
                                {
                                    listofTodaysBooking = query.Where(a =>
                                          (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                             || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.PickupDateTemp).ToList();


                                }
                                else if (JobsSortBy == 2)
                                {
                                    var listA = query.Where(a =>
                                          (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                             || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.PickupDateTemp).ToList();




                                    List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();



                                    foreach (var item in listA)
                                    {

                                        if (listB.Count(c => c.Plot == item.Plot) == 0)
                                            listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                                    }

                                    listofTodaysBooking = listB;







                                }


                            }

                        }




                    }









                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                              || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                              || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                              || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();




                    PopulateTodayAndAllJobsGrids();
                }

            }
            catch (Exception ex)
            {
                AddExcepLog("RefreshJSONACTIVEDATA :" + ex.Message);



            }
        }




        public void RefreshCancelBookingGrid(string msg)
        {
            try
            {
                msg = msg.Substring(msg.LastIndexOf(">>>") + 3).Trim();
                UpdateCancelBookingGrid(msg);
            }
            catch (Exception ex)
            {


            }
        }

        public void UpdateCancelBookingGrid(string msg)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UISingleParameter(UpdateCancelBookingGrid), msg);

                }
                else
                {
                    foreach (var item in msg.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries))
                    {


                        long jobId = item.ToLong();

                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {
                            row.Delete();
                        }
                        else
                        {
                            row = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                            if (row != null)
                            {
                                row.Delete();
                            }
                            else
                            {
                                row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                                if (row != null)
                                {
                                    row.Delete();
                                }
                            }

                        }

                        RefreshBookingListOnActive();


                        this.Pg_PendingJobs.Text = "Today's Booking(" + grdPendingJobs.Rows.Count + ")";
                        this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";


                        this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";


                        Pg_Cancelled.Item.Text = "Cancelled(" + (Pg_Cancelled.Item.Text.Replace("Cancelled(", "").Replace(")", "").Trim().ToInt() + 1) + ")";
                        Pg_NoShow.Item.Text = "No Show(" + (Pg_NoShow.Item.Text.Replace("No Show(", "").Replace(")", "").Trim().ToInt() + 1) + ")";



                    }



                }
            }
            catch
            {


            }

        }





        public void RefreshSearchPreBookingData()
        {
            try
            {

                if (worker.IsBusy == false)
                {
                    ShowProgress(true);
                    worker.RunWorkerAsync("PopulateSearchPreBookingData");
                }
            }
            catch (Exception ex)
            {


            }
        }




        public void RefreshPlotDrivers()
        {
            if (worker != null && worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulatePlotDrivers");

            }


        }




        private void ShowProgress(bool show)
        {
            // lblProgressBar.Visible = show;
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIProgress(DisplayProgress), show);
            }
            else
            {
                DisplayProgress(show);

            }
        }



        private void DisplayProgress(bool show)
        {
            if (lblProgressBar != null)
                lblProgressBar.Visible = show;

        }


        private void ShowProgress2(bool show)
        {
            // lblProgressBar.Visible = show;
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIProgress(DisplayProgress2), show);
            }
            else
            {
                DisplayProgress2(show);

            }
        }



        private void DisplayProgress2(bool show)
        {
            if (lblProgressBookingHistory != null)
                lblProgressBookingHistory.Visible = show;

        }


        private void InitializeWorker()
        {
            worker = new BackgroundWorker();
            worker.WorkerSupportsCancellation = true;
            worker.DoWork += new DoWorkEventHandler(worker_DoWork);
            worker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_RunWorkerCompleted);

        }

        void worker_DoWork(object sender, DoWorkEventArgs e)
        {
            if (AppVars.IsLogout)
                return;


            if (e.Argument.ToStr() == "PopulateAllData")
            {
                e.Result = e.Argument.ToStr();
                LoadDriversByWorker();
                PopulateAllData();

            }
            else if (e.Argument.ToStr() == "PopulateData")
            {
                e.Result = e.Argument.ToStr();
                PopulateAllData();

            }
            else if (e.Argument.ToStr() == "PopulateRequiredDataWithDriver")
            {
                e.Result = e.Argument.ToStr();

                LoadDriversByWorker();
                PopulateRequiredData();
            }
            else if (e.Argument.ToStr() == "PopulateRequiredData")
            {
                e.Result = e.Argument.ToStr();

                PopulateRequiredData();
            }
            else if (e.Argument.ToStr() == "PopulateTodaysBookingData")
            {
                e.Result = e.Argument.ToStr();

                PopulateTodaysBookingData();
            }



            else if (e.Argument.ToStr() == "PopulateAllActiveData")
            {
                LoadDriversByWorker();
                PopulateActiveData();
                e.Result = e.Argument.ToStr();
            }
            else if (e.Argument.ToStr() == "PopulateActiveData")
            {

                PopulateActiveData();
                e.Result = e.Argument.ToStr();
            }
            //else if (e.Argument.ToStr().StartsWith("PopulateSerActiveData"))
            //{

            //   e.Result= "PopulateSerActiveData="+ PopulateSerActiveData(e.Argument.ToStr());
            //   // e.Result = "PopulateSerActiveData";
            //}
            //else if (e.Argument.ToStr().StartsWith("PopulateSavePreData"))
            //{

            //    e.Result= "PopulateSavePreData="+PopulateSavePreData(e.Argument.ToStr());

            //}


            else if (e.Argument.ToStr() == "PopulateTodayAndPreBookingData")
            {
                e.Result = e.Argument.ToStr();
                PopulateTodayAndPreBookingData();

            }
            else if (e.Argument.ToStr() == "PopulateDriversData")
            {
                e.Result = e.Argument.ToStr();
                LoadDriversByWorker();

            }
            //else if (e.Argument.ToStr() == "PopulateWaitingDrivers")
            //{
            //    e.Result = e.Argument.ToStr();
            //    LoadWaitingDriversByWorker();

            //}
            //else if (e.Argument.ToStr() == "PopulateWaitingAndOnBoardDrivers")
            //{
            //    e.Result = e.Argument.ToStr();
            //    LoadWaitingAndOnBoardDriversByWorker();

            //}
            else if (e.Argument.ToStr() == "PopulatePlotDrivers")
            {
                e.Result = e.Argument.ToStr();
                LoadDriversByWorker();

            }
            else if (e.Argument.ToStr() == "PopulatePricePlotDrivers")
            {
                e.Result = e.Argument.ToStr();
                LoadPricePlotsDriversByWorker();

            }

            else if (e.Argument.ToStr() == "PopulateSearchPreBookingData")
            {
                e.Result = e.Argument.ToStr();
                PopulateSearchPreBookingData();

            }
            else if (e.Argument.ToStr() == "PopulateSearchRecentJobs")
            {
                e.Result = e.Argument.ToStr();
                PopulateSearchRecentJobs();

            }


            else if (e.Argument.ToStr() == "PopulateBookingHistoryData")
            {
                e.Result = e.Argument.ToStr();
                PopulateBookingHistoryData();

            }




        }

        void worker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

            if (AppVars.IsLogout)
                return;





            if (e.Result.ToStr() == "PopulateAllData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));
                    this.BeginInvoke(new UIDelegate(PopulateAllGrids));
                }
                else
                {

                    PopulateAllDriversGrid();
                    PopulateAllGrids();
                }
            }
            else if (e.Result.ToStr() == "PopulateData")
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllGrids));

                }
                else
                {

                    PopulateAllGrids();
                }



            }
            else if (e.Result.ToStr() == "PopulateRequiredDataWithDriver")
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));
                    this.BeginInvoke(new UIDelegate(PopulateRequiredGrids));
                }
                else
                {

                    PopulateAllDriversGrid();
                    PopulateRequiredGrids();
                }

                // PopulateAllDriversGrid();
                // PopulateRequiredGrids();

            }
            else if (e.Result.ToStr() == "PopulateRequiredData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateRequiredGrids));

                }
                else
                {

                    PopulateRequiredGrids();
                }



            }

            else if (e.Result.ToStr() == "PopulateTodaysBookingData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateTodaysBookingGrid));

                }
                else
                {

                    PopulateTodaysBookingGrid();
                }



            }


            else if (e.Result.ToStr() == "PopulateAllActiveData")
            {


                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));
                    this.BeginInvoke(new UIDelegate(PopulateTodayAndAllJobsGrids));
                }
                else
                {

                    //   grdOnBoardDriver.InvokeRequired


                    PopulateAllDriversGrid();
                    PopulateTodayAndAllJobsGrids();
                }
                // PopulateAllDriversGrid();
                // PopulateTodayAndAllJobsGrids();


            }
            else if (e.Result.ToStr() == "PopulateActiveData")
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateTodayAndAllJobsGrids));

                }
                else
                {

                    PopulateTodayAndAllJobsGrids();
                }
                // PopulateTodayAndAllJobsGrids();


            }
            else if (e.Result.ToStr().StartsWith("PopulateSerActiveData"))
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UISingleParameter(PopulateSerTodayJobsGrids), e.Result.ToStr());

                }
                else
                {

                    PopulateSerTodayJobsGrids(e.Result.ToStr());
                }



            }

            else if (e.Result.ToStr().StartsWith("PopulateSavePreData"))
            {

                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UISingleParameter(RefreshUpdatePreBookingGrid), e.Result.ToStr());

                }
                else
                {

                    RefreshUpdatePreBookingGrid(e.Result.ToStr());
                }



            }

            else if (e.Result.ToStr() == "PopulateTodayAndPreBookingData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateTodayAndPreGrids));

                }
                else
                {

                    PopulateTodayAndPreGrids();
                }
                //                 PopulateTodayAndPreGrids();

            }

            else if (e.Result.ToStr() == "PopulateDriversData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateAllDriversGrid));

                }
                else
                {

                    PopulateAllDriversGrid();
                }


            }
            //else if (e.Result.ToStr() == "PopulateWaitingDrivers")
            //{
            //    if (this.InvokeRequired)
            //    {

            //        this.BeginInvoke(new UIDelegate(PopulateWaitingDriversGrid));

            //    }
            //    else
            //    {

            //        PopulateWaitingDriversGrid();
            //    }


            //}
            //else if (e.Result.ToStr() == "PopulateWaitingAndOnBoardDrivers")
            //{
            //    if (this.InvokeRequired)
            //    {

            //        this.BeginInvoke(new UIDelegate(PopulateWaitingOnBoardDriversGrid));

            //    }
            //    else
            //    {

            //        PopulateWaitingOnBoardDriversGrid();
            //    }


            //}
            else if (e.Result.ToStr() == "PopulatePlotDrivers")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulatePlotsDriversGrid));

                }
                else
                {

                    PopulatePlotsDriversGrid();
                }
            }
            else if (e.Result.ToStr() == "PopulatePricePlotDrivers")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulatePriceDriverPlotGrid));

                }
                else
                {

                    PopulatePriceDriverPlotGrid();
                }
            }

            else if (e.Result.ToStr() == "PopulateSearchPreBookingData")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateSearchPreGrids));

                }
                else
                {

                    PopulateSearchPreGrids();
                }
                //                 PopulateTodayAndPreGrids();

            }
            else if (e.Result.ToStr() == "PopulateSearchRecentJobs")
            {
                if (this.InvokeRequired)
                {

                    this.BeginInvoke(new UIDelegate(PopulateSearchAllJobGrid));

                }
                else
                {

                    PopulateSearchAllJobGrid();
                }
                //                 PopulateTodayAndPreGrids();

            }

            else if (e.Result.ToStr() == "PopulateBookingHistoryData")
            {
                if (this.InvokeRequired)
                {


                    this.BeginInvoke(new UIDelegate(PopulateBookingHistoryGrid));

                }
                else
                {

                    PopulateBookingHistoryGrid();
                }

                ShowProgress2(false);

                GC.Collect();

                return;
            }


            ShowProgress(false);
            //   GC.Collect();
        }


        delegate void UISingleParameter(string msg);
        delegate void UIBookingListParameter(List<stp_GetBookingsDataResult> list);
        public void LoadDriversByWorker()
        {
            try
            {
                DateTime nowDate = DateTime.Now;
                //FOJDRIVER STATUS ADDED

                using (TaxiDataContext db = new TaxiDataContext())
                {


                    //   listofDriverPlots = db.stp_GetDashboardDrivers(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();
                    //    listofDriverPlots = db.ExecuteQuery<stp_GetDashboardDriversResult>("exec stp_GetDashboardDrivers_TEST {0}",(AppVars.DefaultDriverSubCompanyId)).OrderBy(c => c.orderno).ToList();
                    // listofDriverPlots = db.ExecuteQuery<stp_GetDashboardDriversResult>("exec stp_GetDashboardDrivers {0},{1}", AppVars.DefaultDriverSubCompanyId, selectedAutoMode).OrderBy(c => c.orderno).ToList();

                    listofDriverPlots = db.ExecuteQuery<stp_GetDashboardDriversResultEx>("exec stp_GetDashboardDrivers {0}", (AppVars.DefaultDriverSubCompanyId)).OrderBy(c => c.orderno).ToList();


                    if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool() == false)
                    {
                        listofDriverPricePlots = db.stp_GetPricePlotDrivers(AppVars.DefaultDriverSubCompanyId).ToList();
                    }
                }


                //var driverDataList = General.GetQueryable<Fleet_DriverQueueList>(a => a.DriverId != null && a.Status == true && a.Fleet_Driver.IsActive == true
                //  && (a.Fleet_Driver.SubcompanyId == AppVars.DefaultDriverSubCompanyId || AppVars.DefaultDriverSubCompanyId == 0)).Distinct().ToList();



                listofDriversWaiting = (from a in listofDriverPlots
                                        where (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.AVAILABLE
                                                               || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONBREAK
                                                               || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.FOJ

                                                                || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SINBIN

                                                               )

                                        orderby a.QueueDateTime

                                        select new
                                        {

                                            Id = a.DriverLoginId,
                                            DriverId = a.driverid,
                                            a.VehicleID,
                                            DriverNo = a.driverno,// b.DriverNo,
                                            Name = a.DriverName,// b.DriverName,
                                            Vehicle = a.VehicleType,
                                            CurrentJobId = a.CurrentJobId,
                                            OnJob = a.OnJob,
                                            //  OnJob =  a.CurrentDestinationPostCode ,
                                            WorkStatusId = a.driverworkstatusid,
                                            IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                            PDA = "",
                                            HasPDA = a.HasPDA,
                                            BgColor = a.backgroundcolor,
                                            HasNewMsg = "",
                                            a.LoginFrom,
                                            a.ZoneName,
                                            WaitSinceDate = a.WaitSinceOn,

                                            LoginDate = a.LoginDateTime,
                                            // WaitSinceOn = a.WaitSinceOn != null ? Convert.ToInt32(nowDate.Subtract(a.WaitSinceOn.Value).TotalMinutes) + " mins" : "0 min",
                                            //  a.ZoneName

                                        }).Distinct().ToList();


                // grdDriverWaiting.DataSource = query;

                //grdDriverWaiting.HideSelection = true;


                listofDriversOnBoard = (from a in listofDriverPlots
                                        where (
                                          (a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE ||
                                       a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR
                                        || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ARRIVED
                                                                || a.driverworkstatusid == Enums.Driver_WORKINGSTATUS.ONROUTE))
                                        orderby a.plotdate

                                        select new
                                        {
                                            Id = a.DriverLoginId,
                                            DriverId = a.driverid,
                                            a.VehicleID,
                                            DriverNo = a.driverno,// b.DriverNo,
                                            Name = a.DriverName,// b.DriverName,
                                            Vehicle = a.VehicleType,
                                            CurrentJobId = a.CurrentJobId,
                                            OnJob = a.OnJob,
                                            //  OnJob =  a.CurrentDestinationPostCode ,
                                            WorkStatusId = a.driverworkstatusid,
                                            IsPanic = a.IsPanic ? "Panic" : "CalmDown",
                                            PDA = "",
                                            HasPDA = a.HasPDA,
                                            BgColor = a.backgroundcolor,
                                            HasNewMsg = "",
                                            a.LoginFrom,
                                            LoginDate = a.LoginDateTime,
                                            a.VehicleTypeId
                                        }).OrderByDescending(item => item.VehicleTypeId).ToList();
                //     }).OrderBy(item => item.DriverNo, new NaturalSortComparer<string>()).ToList();












            }
            catch (Exception ex)
            {

                AddExcepLog("LoadDriversByWorker");
            }
        }


        public void PopulateRequiredData()
        {
            try
            {

                //  DateTime beforeDate = DateTime.Now;
                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);
                DateTime dtNow = DateTime.Now;
                DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();




                var query = db.stp_GetBookingsData(recentDays, prebookingdays, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();



                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);

                //   double time = DateTime.Now.Subtract(beforeDate).TotalMilliseconds;


                if (BookingHours > 0)
                {

                    if (ShowPendingJobOnRecentTab)
                    {

                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                  && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                     || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                     || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                     || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                     || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                     .OrderBy(c => c.Lead).ToList();

                    }
                    else
                    {

                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                    && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                       || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                       || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                       || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                       || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                       .OrderBy(c => c.Lead).ToList();

                    }
                }
                else
                {

                    if (ShowPendingJobOnRecentTab)
                    {

                        if (selectedduevalue == 1000)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                        && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                            || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                           ))
                                            .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {

                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            ))
                                              .OrderBy(c => c.Lead).ToList();





                        }

                    }
                    else
                    {

                        if (selectedduevalue == 1000)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                        && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                           || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                            || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                            .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {

                            if (JobsSortBy == 0)
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                              && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                 || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                  || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                  .OrderBy(c => c.Lead).ToList();


                            }
                            else if (JobsSortBy == 1)
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                               .OrderBy(c => c.PickupDateTemp).ToList();
                            }
                            else if (JobsSortBy == 2)
                            {
                                var listA = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                               .OrderBy(c => c.Lead).ToList();



                                List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();



                                foreach (var item in listA)
                                {

                                    if (listB.Count(c => c.Plot == item.Plot) == 0)
                                        listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                                }

                                listofTodaysBooking = listB;


                            }


                        }

                    }


                }


                // PreBooking

                if (BookingHours > 0)
                {

                    listofPreBooking = query.Where(a => a.PickupDateTemp > Hours
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                          || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                          || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                          || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                               .OrderBy(c => c.PickupDateTemp).ToList();

                }


                else
                {
                    listofPreBooking = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                            && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                            || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                 .OrderBy(c => c.PickupDateTemp).ToList();
                }





                if (ShowPendingJobOnRecentTab)
                {


                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                            || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                            || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                            || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();

                }
                else
                {

                    if (EnableGhostJob)
                    {

                        listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                               || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                               || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                    }
                    else
                    {

                        listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                               || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                               || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                               || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();



                    }
                }







            }
            catch (Exception ex)
            {
                try
                {
                    AddExcepLog("PopulateRequiredData :" + ex.Message);
                }
                catch
                {


                }
            }

        }



        private void PopulateAllData()
        {
            try
            {



                PopulateRequiredData();



                QuotationsRefreshRequired = true;




            }
            catch (Exception ex)
            {


            }


        }

        public void PopulateTodaysBookingData()
        {
            try
            {

                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);
                // DateTime dtNow = DateTime.Now;

                DateTime? tillDate = dt;

                if (BookingHours > 0)
                    tillDate = DateTime.Now.ToDateTime().AddHours(BookingHours);


                var query = db.stp_GetTodaysBookingsData(recentDays, tillDate, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();







                if (BookingHours > 0)
                {

                    // DateTime prevDates = dt.Value.AddDays(-3);
                    DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);


                    if (ShowPendingJobOnRecentTab)
                    {
                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                       && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                          || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                          || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                           || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                          || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                          .OrderBy(c => c.Lead).ToList();

                    }
                    else
                    {

                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                         && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                            || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                            || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                            .OrderBy(c => c.Lead).ToList();

                    }

                }
                else
                {



                    if (ShowPendingJobOnRecentTab)
                    {
                        listofTodaysBooking = query.Where(a =>
                                  (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                    || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                     || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                   )).OrderBy(c => c.Lead).ToList();

                    }
                    else
                    {


                        //listofTodaysBooking = query.Where(a =>
                        //            (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                        //              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                        //               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();


                        if (JobsSortBy == 0)
                        {
                            listofTodaysBooking = query.Where(a =>
                                        (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                          || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                           || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                        }
                        else if (JobsSortBy == 1)
                        {
                            listofTodaysBooking = query.Where(a =>
                                     (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                       || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                        || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.PickupDateTemp).ToList();

                        }
                        else if (JobsSortBy == 2)
                        {
                            var listA = query.Where(a =>
                                     (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                       || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                        || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();




                            List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                            foreach (var item in listA)
                            {
                                if (listB.Count(c => c.Plot == item.Plot) == 0)
                                    listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                            }


                            listofTodaysBooking = listB;

                        }


                    }


                }


            }
            catch (Exception ex)
            {
                AddExcepLog("PopulateTodaysBookingData :" + ex.Message);

            }

        }

        public bool TryCast<T>(object obj, out T result)
        {
            result = default(T);
            if (obj is T)
            {
                result = (T)obj;
                return true;
            }

            // If it's null, we can't get the type.
            if (obj != null)
            {
                var converter = TypeDescriptor.GetConverter(typeof(T));
                if (converter.CanConvertFrom(obj.GetType()))
                    result = (T)converter.ConvertFrom(obj);
                else
                    return false;

                return true;
            }

            //Be permissive if the object was null and the target is a ref-type
            return !typeof(T).IsValueType;
        }

        public void PopulateActiveData()
        {
            try
            {


                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);
                // DateTime dtNow = DateTime.Now;

                DateTime? tillDate = dt;

                if (BookingHours > 0)
                    tillDate = DateTime.Now.ToDateTime().AddHours(BookingHours);



                var query = db.stp_GetBookingsData(recentDays, tillDate, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();



                if (BookingHours > 0)
                {
                    //  DateTime prevDates = dt.Value.AddDays(-3);
                    DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);


                    if (ShowPendingJobOnRecentTab)
                    {
                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                             || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                             || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                             || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                             .OrderBy(c => c.Lead).ToList();


                    }
                    else
                    {

                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                .OrderBy(c => c.Lead).ToList();


                    }



                }
                else
                {




                    if (EnableGhostJob)
                    {
                        if (selectedduevalue == 1000)
                        {

                            listofTodaysBooking = query.Where(a =>
                                             (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {
                            listofTodaysBooking = query.Where(a =>
                                           (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();

                        }
                    }
                    else
                    {
                        if (ShowPendingJobOnRecentTab)
                        {
                            if (selectedduevalue == 1000)
                            {
                                listofTodaysBooking = query.Where(a =>
                                           (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                              )).OrderBy(c => c.Lead).ToList();
                            }
                            else
                            {
                                listofTodaysBooking = query.Where(a =>
                                            (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                             )).OrderBy(c => c.Lead).ToList();
                            }
                        }
                        else
                        {


                            if (selectedduevalue == 1000)
                            {
                                listofTodaysBooking = query.Where(a =>
                                           (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                            }
                            else
                            {
                                if (JobsSortBy == 0)
                                {
                                    listofTodaysBooking = query.Where(a =>
                                                (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                  || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                   || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                                }
                                else if (JobsSortBy == 1)
                                {
                                    listofTodaysBooking = query.Where(a =>
                                             (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.PickupDateTemp).ToList();

                                }
                                else if (JobsSortBy == 2)
                                {
                                    var listA = query.Where(a =>
                                             (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();




                                    List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                                    foreach (var item in listA)
                                    {
                                        if (listB.Count(c => c.Plot == item.Plot) == 0)
                                            listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                                    }


                                    listofTodaysBooking = listB;

                                }
                            }

                        }


                    }


                }

                if (ShowPendingJobOnRecentTab)
                {

                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED

                                                        || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                        || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                        || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                }
                else
                {




                    listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                              || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                              || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                              || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();



                }
            }
            catch (Exception ex)
            {
                AddExcepLog("PopulateActiveData :" + ex.Message);

                try
                {
                    Thread.Sleep(800);
                    DateTime? dt = DateTime.Now.ToDateorNull();
                    DateTime recentDays = dt.Value.AddDays(-1);


                    DateTime? tillDate = dt;

                    if (BookingHours > 0)
                        tillDate = DateTime.Now.ToDateTime().AddHours(BookingHours);

                    var query = db.stp_GetBookingsData(recentDays, tillDate, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();



                    if (BookingHours > 0)
                    {

                        DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);



                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                                .OrderBy(c => c.Lead).ToList();



                    }
                    else
                    {




                        if (EnableGhostJob)
                        {
                            if (selectedduevalue == 1000)
                            {

                                listofTodaysBooking = query.Where(a =>
                                                 (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                    || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                            }
                            else
                            {
                                listofTodaysBooking = query.Where(a =>
                                               (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                                 || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                                  || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();

                            }
                        }
                        else
                        {
                            if (selectedduevalue == 1000)
                            {
                                listofTodaysBooking = query.Where(a =>
                                           (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                             || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                              || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                            }
                            else
                            {
                                listofTodaysBooking = query.Where(a =>
                                            (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                              || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                               || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ)).OrderBy(c => c.Lead).ToList();
                            }

                        }


                    }




                    if (ShowPendingJobOnRecentTab)
                    {

                        listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED

                                                            || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                            || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                            || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();
                    }
                    else
                    {




                        listofAllJobs = query.Where(c => c.StatusId == Enums.BOOKINGSTATUS.ONROUTE || c.StatusId == Enums.BOOKINGSTATUS.ARRIVED
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.POB || c.StatusId == Enums.BOOKINGSTATUS.STC
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.FOJ
                                                                  || c.StatusId == Enums.BOOKINGSTATUS.PENDING_START).OrderBy(c => c.PickupDateTemp).ToList();



                    }

                    AddExcepLog("PopulateActiveData DONE");

                }
                catch (Exception ex2)
                {
                    AddExcepLog("PopulateActiveData NOT DONE :" + ex2.Message);

                }

            }

        }


        public void PopulateTodayAndPreBookingData()
        {
            try
            {

                DateTime? dt = DateTime.Now.ToDateorNull();
                DateTime recentDays = dt.Value.AddDays(-1);
                DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();
                //DateTime dtNow = DateTime.Now;

                var query = db.stp_GetBookingsData(recentDays, prebookingdays, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();






                // DateTime prevDates = dt.Value.AddDays(-3);
                DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);



                if (BookingHours > 0)
                {

                    if (ShowPendingJobOnRecentTab)
                    {

                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                    || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))

                                   .OrderBy(c => c.Lead).ToList();

                    }

                    else
                    {


                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                   || a.StatusId == Enums.BOOKINGSTATUS.FOJ))

                                   .OrderBy(c => c.Lead).ToList();
                    }

                }
                else
                {

                    if (ShowPendingJobOnRecentTab)
                    {
                        if (selectedduevalue == 1000)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                 && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                    || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                     || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                               ))
                                     .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                               && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                  || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                  ))
                                   .OrderBy(c => c.Lead).ToList();
                        }
                    }
                    else
                    {

                        if (selectedduevalue == 1000)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                 && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                    || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                     || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                     .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {
                            //listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                            //   && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                            //      || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                            //       || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                            //       .OrderBy(c => c.Lead).ToList();

                            if (JobsSortBy == 0)
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                               && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                  || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                   .OrderBy(c => c.Lead).ToList();
                            }
                            else if (JobsSortBy == 1)
                            {
                                listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                               && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                  || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                   .OrderBy(c => c.PickupDateTemp).ToList();

                            }
                            else if (JobsSortBy == 2)
                            {
                                var listA = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                               && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                  || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                   .OrderBy(c => c.Lead).ToList();




                                List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                                foreach (var item in listA)
                                {
                                    if (listB.Count(c => c.Plot == item.Plot) == 0)
                                        listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                                }


                                listofTodaysBooking = listB;

                            }







                        }
                    }

                }



                // PreBooking

                if (BookingHours > 0)
                {

                    listofPreBooking = query.Where(a => a.PickupDateTemp > Hours
                                          && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                            || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                            || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                            || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                               .OrderBy(c => c.PickupDateTemp).ToList();

                }


                else
                {
                    listofPreBooking = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                           && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                               || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                               || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                               || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                .OrderBy(c => c.PickupDateTemp).ToList();
                }



            }
            catch (Exception ex)
            {
                AddExcepLog("PopulateTodayAndPreData :" + ex.Message);

                try
                {


                    Thread.Sleep(500);

                    DateTime? dt = DateTime.Now.ToDateorNull();
                    DateTime recentDays = dt.Value.AddDays(-1);
                    DateTime prebookingdays = dt.Value.AddDays(PreBookingDefaultDays).ToDate();
                    //DateTime dtNow = DateTime.Now;

                    var query = db.stp_GetBookingsData(recentDays, prebookingdays, AppVars.DefaultBookingSubCompanyId, BookingHours).ToList();






                    //  DateTime prevDates = dt.Value.AddDays(-3);
                    DateTime Hours = DateTime.Now.ToDateTime().AddHours(BookingHours);



                    if (BookingHours > 0)
                    {





                        listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp <= Hours)
                             && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                   || a.StatusId == Enums.BOOKINGSTATUS.FOJ))

                                   .OrderBy(c => c.Lead).ToList();


                    }
                    else
                    {



                        if (selectedduevalue == 1000)
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                                 && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                    || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                     || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                     .OrderBy(c => c.Lead).ToList();
                        }
                        else
                        {
                            listofTodaysBooking = query.Where(a => (a.PickupDateTemp >= recentDays && a.PickupDateTemp.Value.Date <= dt.Value.AddDays(DaysInTodayBooking))
                               && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || a.StatusId == Enums.BOOKINGSTATUS.REJECTED
                                  || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.BID
                                   || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START || a.StatusId == Enums.BOOKINGSTATUS.FOJ))
                                   .OrderBy(c => c.Lead).ToList();


                        }


                    }



                    // PreBooking

                    if (BookingHours > 0)
                    {

                        listofPreBooking = query.Where(a => a.PickupDateTemp > Hours
                                              && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                                || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                   .OrderBy(c => c.PickupDateTemp).ToList();

                    }


                    else
                    {
                        listofPreBooking = query.Where(a => a.PickupDateTemp.Value.Date > dt
                                               && (a.StatusId == Enums.BOOKINGSTATUS.WAITING || a.StatusId == Enums.BOOKINGSTATUS.PENDING
                                                   || a.StatusId == Enums.BOOKINGSTATUS.ONHOLD || a.StatusId == Enums.BOOKINGSTATUS.PENDING_START
                                                   || a.StatusId == Enums.BOOKINGSTATUS.REJECTED || a.StatusId == Enums.BOOKINGSTATUS.NOTACCEPTED
                                                   || a.StatusId == Enums.BOOKINGSTATUS.NOSHOW))
                                                    .OrderBy(c => c.PickupDateTemp).ToList();
                    }


                    AddExcepLog("PopulateTodayAndPreData DONE :" + ex.Message);
                }
                catch (Exception ex2)
                {
                    AddExcepLog("PopulateTodayAndPreData NOT DONE :" + ex2.Message);


                }
            }

        }

        private bool DriversGridRefreshRequired = false;


        private void PopulateAllDriversGrid()
        {
            try
            {
                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_PopulateAllDriversGrid.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}


                if (tableLayoutPanel2.ColumnStyles[2].Width == 0)
                {
                    DriversGridRefreshRequired = true;


                }
                else
                {

                    long drvIndexWaiting = grdDriverWaiting.CurrentRow != null ? grdDriverWaiting.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;
                    grdDriverWaiting.Tag = driverContextMenu.PopupElement.IsElementVisible;

                    grdDriverWaiting.DataSource = listofDriversWaiting;





                    long drvIndexOnboard = grdOnBoardDriver.CurrentRow != null ? grdOnBoardDriver.CurrentRow.Cells["DriverId"].Value.ToLong() : -1;
                    grdOnBoardDriver.Tag = driverContextMenu.PopupElement.IsElementVisible;



                    grdOnBoardDriver.DataSource = listofDriversOnBoard;


                    try
                    {
                        if (drvIndexWaiting >= 0)
                        {
                            grdDriverWaiting.CurrentRow = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndexWaiting);

                        }

                        if (drvIndexOnboard >= 0)
                        {
                            grdOnBoardDriver.CurrentRow = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverId"].Value.ToLong() == drvIndexOnboard);

                        }
                        if (driverContextMenu.Tag != null && driverContextMenu.Tag.ToStr() == "grdOnBoardDriver" && grdOnBoardDriver.Tag.ToBool())
                        {
                            driverContextMenu.Show();
                        }

                        if (driverContextMenu.Tag != null && driverContextMenu.Tag.ToStr() == "grdDriverWaiting" && grdDriverWaiting.Tag.ToBool())
                        {
                            driverContextMenu.Show();
                        }
                    }
                    catch
                    {

                    }
                    FormatOnBoardGrid();




                    UpdateDriverWaitingSince();
                    PanicMode();


                    PopulatePriceDriverPlotGrid();
                }


                new Thread(delegate ()
                {
                    try
                    {
                        PopulatePlotsDriversGrid();
                    }
                    catch
                    {

                    }
                }).Start();






            }
            catch (Exception ex)
            {
                AddExcepLog("PopulateAllDriversGrid :" + ex.Message);

            }

        }

        private void PopulatePlotsDriversGrid()
        {
            try
            {


                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIDelegate(PopulatePlotsDriversGrid));
                }
                else
                {




                    if (ShowAllPlots)
                    {

                        var colList = listofDriverPlots.Where(c => c.id == 0 && c.ShortName != "").Distinct().ToList();


                        if (colList.Count > 0)
                        {
                            DataGridViewTextBoxColumn[] cols = (from a in colList

                                                                select new DataGridViewTextBoxColumn
                                                                {


                                                                    Name = a.ShortName,
                                                                    HeaderText = a.ShortName,
                                                                    SortMode = DataGridViewColumnSortMode.NotSortable,
                                                                    FillWeight = 100,
                                                                    Resizable = DataGridViewTriState.False,
                                                                    Width = a.ShortName.Length > 7 ? 80 : 60
                                                                }).Distinct().ToArray<DataGridViewTextBoxColumn>();





                            if (grdOnPlotDrivers.Columns.Count > 0)
                            {
                                foreach (var item in grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Where(c => c.Tag == null).ToList())
                                {
                                    grdOnPlotDrivers.Columns.Remove(item);

                                }

                                grdOnPlotDrivers.Columns.AddRange(cols);

                            }
                            else
                            {

                                grdOnPlotDrivers.Columns.AddRange(cols);
                            }


                        }



                        if (grdOnPlotDrivers.RowCount == 0)
                            grdOnPlotDrivers.RowCount = 30;








                    }
                    else
                    {


                        var colList = listofDriverPlots.Where(c => c.ShortName != "" && c.driverworkstatusid != null).Select(args => new { args.ShortName }).Distinct();

                        colList = colList.Union(listofDriverPlots.Where(c => c.ShortName != "" && c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

                        DataGridViewTextBoxColumn[] cols = (from a in colList

                                                            select new DataGridViewTextBoxColumn
                                                            {

                                                                //Name = a.ShortName,
                                                                //HeaderText = a.ShortName,
                                                                //SortMode = DataGridViewColumnSortMode.NotSortable,

                                                                //Width = a.ShortName.Length > 8 ? 100 : 50


                                                                Name = a.ShortName,
                                                                HeaderText = a.ShortName,
                                                                SortMode = DataGridViewColumnSortMode.NotSortable,
                                                                FillWeight = 100,
                                                                Resizable = DataGridViewTriState.False,
                                                                Width = a.ShortName.Length > 7 ? 80 : 60
                                                            }).Distinct().ToArray<DataGridViewTextBoxColumn>();





                        if (grdOnPlotDrivers.Columns.Count > 0)
                        {
                            if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
                            {
                                grdOnPlotDrivers.Columns.Clear();
                                grdOnPlotDrivers.Columns.AddRange(cols);


                            }
                        }
                        else
                        {

                            grdOnPlotDrivers.Columns.AddRange(cols);
                        }




                        if (grdOnPlotDrivers.Columns.Count > 0 && grdOnPlotDrivers.Rows.Count <= 1)
                        {


                            for (int i = 0; i < 40; i++)
                            {
                                grdOnPlotDrivers.Rows.Add();
                            }

                        }



                    }


                    var drvList = (from a in listofDriverPlots
                                   orderby a.orderno, a.driverworkstatusid, a.plotdate
                                   where a.driverworkstatusid != null && a.ShortName != ""
                                   select a).ToList();



                    int cnt = 0;
                    string tempZoneName = string.Empty;





                    foreach (var data in drvList)
                    {

                        try
                        {
                            if (data.ShortName != tempZoneName)
                            {


                                if (data.ShortName.ToStr().Length > 0)
                                {

                                    grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().Where(c => c.Cells[data.ShortName].Value.ToStr() != string.Empty).ToList()
                                   .ForEach(c =>
                                   {

                                       c.Cells[data.ShortName].Value = string.Empty;
                                       c.Cells[data.ShortName].Tag = null;
                                       c.Cells[data.ShortName].ErrorText = string.Empty;

                                   });
                                }

                                cnt = 0;
                            }

                            if (AppVars.objPolicyConfiguration.ShowAllJobsOrderNo.ToBool())
                                grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.VehicleID.ToStr();
                            else
                                grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;

                            //   grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;

                            if (data.LoginFrom.ToStr() == "-14634326")
                                grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = "-14634326";
                            else
                                grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;


                            grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

                            cnt++;

                            tempZoneName = data.ShortName;
                        }
                        catch
                        {

                        }
                    }





                    if (grdOnPlotDrivers.Columns.Contains("SIN BIN"))
                        grdOnPlotDrivers.Columns["SIN BIN"].Width = 60;

                    grdOnPlotDrivers.CurrentCell = null;



                    UpdateDriversCounter();

                }
            }
            catch (Exception ex)
            {
                UpdateDriversCounter();

            }

        }


        private void PopulatePlotsDriversGridSelected()
        {
            try
            {


                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIDelegate(PopulatePlotsDriversGrid));
                }
                else
                {




                    var colList = listofDriverPlots.Where(c => c.ShortName != "" && c.driverworkstatusid != null).Select(args => new { args.ShortName }).Distinct();

                    colList = colList.Union(listofDriverPlots.Where(c => c.ShortName != "" && c.driverworkstatusid == null).Select(args => new { args.ShortName })).Distinct();

                    DataGridViewTextBoxColumn[] cols = (from a in colList

                                                        select new DataGridViewTextBoxColumn
                                                        {

                                                            //Name = a.ShortName,
                                                            //HeaderText = a.ShortName,
                                                            //SortMode = DataGridViewColumnSortMode.NotSortable,

                                                            //Width = a.ShortName.Length > 8 ? 100 : 50


                                                            Name = a.ShortName,
                                                            HeaderText = a.ShortName,
                                                            SortMode = DataGridViewColumnSortMode.NotSortable,
                                                            FillWeight = 100,
                                                            Resizable = DataGridViewTriState.False,
                                                            Width = a.ShortName.Length > 7 ? 80 : 60
                                                        }).Distinct().ToArray<DataGridViewTextBoxColumn>();





                    if (grdOnPlotDrivers.Columns.Count > 0)
                    {
                        if (grdOnPlotDrivers.Columns.OfType<DataGridViewTextBoxColumn>().Select(a => a.Name).SequenceEqual(cols.Select(c => c.Name)) == false)
                        {
                            grdOnPlotDrivers.Columns.Clear();
                            grdOnPlotDrivers.Columns.AddRange(cols);


                        }
                    }
                    else
                    {

                        grdOnPlotDrivers.Columns.AddRange(cols);
                    }




                    if (grdOnPlotDrivers.Columns.Count > 0 && grdOnPlotDrivers.Rows.Count <= 1)
                    {


                        for (int i = 0; i < 40; i++)
                        {
                            grdOnPlotDrivers.Rows.Add();
                        }

                    }




                    //var drvList = (from a in listofDriverPlots
                    //               orderby a.orderno, a.plotdate
                    //               where a.driverworkstatusid != null && a.ShortName != ""
                    //               select a).ToList();
                    var drvList = (from a in listofDriverPlots
                                   orderby a.orderno, a.driverworkstatusid, a.plotdate
                                   where a.driverworkstatusid != null && a.ShortName != ""
                                   select a).ToList();



                    int cnt = 0;
                    string tempZoneName = string.Empty;



                    //foreach (var data in drvList)
                    //{

                    //    if (data.ShortName != tempZoneName)
                    //        cnt = 0;

                    //    if (data.LoginFrom.ToStr() == "-14634326")
                    //        grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = "-14634326";
                    //    else
                    //        grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;

                    //    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;

                    //    grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

                    //    cnt++;

                    //    tempZoneName = data.ShortName;

                    //}

                    foreach (var data in drvList)
                    {

                        try
                        {
                            if (data.ShortName != tempZoneName)
                            {


                                if (data.ShortName.ToStr().Length > 0)
                                {

                                    grdOnPlotDrivers.Rows.OfType<DataGridViewRow>().Where(c => c.Cells[data.ShortName].Value.ToStr() != string.Empty).ToList()
                                   .ForEach(c =>
                                   {

                                       c.Cells[data.ShortName].Value = string.Empty;
                                       c.Cells[data.ShortName].Tag = null;
                                       c.Cells[data.ShortName].ErrorText = string.Empty;

                                   });
                                }

                                cnt = 0;
                            }
                            grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Value = data.driverno;

                            if (data.LoginFrom.ToStr() == "-14634326")
                                grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = "-14634326";
                            else
                                grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].Tag = data.backgroundcolor;


                            grdOnPlotDrivers.Rows[cnt].Cells[data.ShortName].ErrorText = data.driverid.ToStr();

                            cnt++;

                            tempZoneName = data.ShortName;
                        }
                        catch
                        {

                        }

                    }




                    if (grdOnPlotDrivers.Columns.Contains("SIN BIN"))
                        grdOnPlotDrivers.Columns["SIN BIN"].Width = 60;

                    grdOnPlotDrivers.CurrentCell = null;


                    //    if (Debugger.IsAttached == false)
                    //       grdOnPlotDrivers.Refresh();



                    UpdateDriversCounter();

                }
            }
            catch (Exception ex)
            {


            }

        }

        private void PopulateAllGrids()
        {
            try
            {

                //if(this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath+ "\\invokerequired_PopulateAllGrids.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ,"  + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}


                timer1.Stop();


                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                int val = grdPendingJobs.TableElement.VScrollBar.Value;


                //    //grdPendingJobs.TableElement.BeginUpdate();

                if (JobIndex > 0)
                {
                    grdPendingJobs.Tag = EditFare.PopupElement.IsElementVisible;
                }




                grdPendingJobs.DataSource = listofTodaysBooking;





                if (JobIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    if (EditFare.Tag != null && EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.Tag.ToBool())
                    {
                        EditFare.Show();

                    }
                }







                grdPendingJobs.TableElement.VScrollBar.Value = val;


                FormatTodaysBookingGrid();


                //grdPendingJobs.TableElement.EndUpdate();






                RefreshUpdatePreBookingGrid("");
                ReSyncDueBookings();

                ClearRecentJobFilter();

                JobIndex = grdAllJobs.CurrentRow != null ? grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                val = grdAllJobs.TableElement.VScrollBar.Value;



                grdAllJobs.DataSource = listofAllJobs;




                if (JobIndex > 0)
                    grdAllJobs.CurrentRow = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                if (grdAllJobs.TableElement.VScrollBar.Maximum >= val)
                {
                    grdAllJobs.TableElement.VScrollBar.Value = val;
                }




                this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";



                if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                {

                    if (Pg_Quotations.Item.IsSelected && QuotationsRefreshRequired)
                    {
                        if (QuotationsRefreshRequired)
                        {
                            QuotationsRefreshRequired = false;
                            PopulateQuotationsGrid();

                        }


                    }
                }




                timer1.Start();





            }
            catch (Exception ex)
            {

                timer1.Start();
                GridCrashLog("populateallgrids:" + ex.Message.ToStr());
            }
        }

        private void PopulateSearchPreGrids()
        {
            try
            {


                grdPreBookings.DataSource = listofPreBooking;

                UpdateRequiredPreBooking = false;

            }
            catch (Exception ex)
            {


            }
        }



        private void PopulateTodayAndPreGrids()
        {
            try
            {
                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_PopulateTodayAndPreGrids.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}


                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                int val = grdPendingJobs.TableElement.VScrollBar.Value;


                //grdPendingJobs.TableElement.BeginUpdate();

                if (JobIndex > 0)
                {
                    grdPendingJobs.Tag = EditFare.PopupElement.IsElementVisible;
                }



                grdPendingJobs.DataSource = listofTodaysBooking;



                if (JobIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    if (EditFare.Tag != null && EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.Tag.ToBool())
                    {
                        EditFare.Show();

                    }
                }




                grdPendingJobs.TableElement.VScrollBar.Value = val;

                FormatTodaysBookingGrid();

                //grdPendingJobs.TableElement.EndUpdate();





                if (Pg_PreBookings.Item.IsSelected)
                {

                    val = grdPreBookings.TableElement.VScrollBar.Value;
                    JobIndex = grdPreBookings.CurrentRow != null ? grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                    grdPreBookings.DataSource = listofPreBooking;


                    if (JobIndex > 0)
                        grdPreBookings.CurrentRow = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    grdPreBookings.TableElement.VScrollBar.Value = val;


                    UpdateRequiredPreBooking = false;
                }
                else
                {
                    UpdateRequiredPreBooking = true;
                }


                ReSyncDueBookings();


                timer1.Start();


                if (Pg_PoolJobs != null && Pg_PoolJobs.Item.Visibility == ElementVisibility.Visible)
                {
                    PopulateJobsPool();


                }
            }
            catch (Exception ex)
            {
                timer1.Start();
                GridCrashLog("populateTodayandpregrids:" + ex.Message.ToStr());


                if (ex.Message.ToStr().ToLower().Contains("object referen"))
                {
                    if (retryX == 0)
                    {

                        retryX = 1;
                        ReInitializeTodaysAndPreBookingGrid();
                        retryX = 0;
                    }

                }
                else if (ex.Message.ToStr().Contains("System.OutOfMemoryException"))
                {


                    RestartProgram();


                }
            }
        }




        private void PopulateTodaysBookingGrid()
        {
            try
            {
                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_PopulateTodaysBookingGrid.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}

                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                int val = 0;


                try
                {
                    val = grdPendingJobs.TableElement.VScrollBar.Value;
                }
                catch
                {


                }

                //grdPendingJobs.TableElement.BeginUpdate();

                if (JobIndex > 0)
                {
                    grdPendingJobs.Tag = EditFare.PopupElement.IsElementVisible;
                }





                grdPendingJobs.DataSource = listofTodaysBooking;


                if (JobIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    if (EditFare.Tag != null && EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.Tag.ToBool())
                    {
                        EditFare.Show();

                    }
                }



                grdPendingJobs.TableElement.VScrollBar.Value = val;

                FormatTodaysBookingGrid();



                //grdPendingJobs.TableElement.EndUpdate();







                ReSyncDueBookings();


                timer1.Start();
            }
            catch (Exception ex)
            {
                timer1.Start();
                GridCrashLog("populatetodaysbookinggrid:" + ex.Message.ToStr());




                if (ex.Message.ToStr().ToLower().Contains("object referen"))
                {
                    if (retryX == 0)
                    {

                        retryX = 1;
                        ReInitializeTodaysBookingGrid();
                        retryX = 0;
                    }

                }
                else if (ex.Message.ToStr().Contains("System.OutOfMemoryException"))
                {


                    RestartProgram();


                }


            }
        }


        private void PopulateTodayAndAllJobsGrids()
        {
            try
            {



                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                int val = grdPendingJobs.TableElement.VScrollBar.Value;




                //grdPendingJobs.TableElement.BeginUpdate();

                if (JobIndex > 0)
                {
                    grdPendingJobs.Tag = EditFare.PopupElement.IsElementVisible;
                }




                grdPendingJobs.DataSource = listofTodaysBooking;



                if (JobIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    if (EditFare.Tag != null && EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.Tag.ToBool())
                    {
                        EditFare.Show();

                    }
                }





                grdPendingJobs.TableElement.VScrollBar.Value = val;



                FormatTodaysBookingGrid();

                //grdPendingJobs.TableElement.EndUpdate();










                ClearRecentJobFilter();



                JobIndex = grdAllJobs.CurrentRow != null ? grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                val = grdAllJobs.TableElement.VScrollBar.Value;

                grdAllJobs.DataSource = listofAllJobs;




                if (JobIndex > 0)
                    grdAllJobs.CurrentRow = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                if (grdAllJobs.TableElement.VScrollBar.Maximum >= val)
                {
                    grdAllJobs.TableElement.VScrollBar.Value = val;
                }

                // 07-09-2016
                this.Pg_AllJobs.Text = "Recent Jobs(" + grdAllJobs.Rows.Count + ")";

                timer1.Start();





            }
            catch (Exception ex)
            {
                timer1.Start();
                GridCrashLog("PopulateTodayAndAllJobsGrids:" + ex.Message.ToStr());


                if (ex.Message.ToStr().ToLower().Contains("object referen"))
                {
                    if (retryX == 0)
                    {

                        retryX = 1;
                        ReInitializeTodaysBookingGrid();
                        retryX = 0;
                    }

                }
                else if (ex.Message.ToStr().Contains("System.OutOfMemoryException"))
                {


                    RestartProgram();


                }
            }
        }


























        int retryX = 0;


        private void ReInitializeTodaysBookingGrid()
        {
            try
            {
                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_ReInitializeTodaysBookingGrid.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}

                //    this.panel1.Controls.Remove(grdPendingJobs);


                try
                {
                    this.grdPendingJobs.Dispose();
                    this.grdPendingJobs = null;
                }
                catch (Exception ex2)
                {
                    GridCrashLog("ReInitializeTodaysBookingGrid:" + "EXCEPTION ON DISPOSE " + ex2.Message.ToStr());

                }

                this.grdPendingJobs = new RadGridView();
                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs)).BeginInit();
                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs.MasterTemplate)).BeginInit();
                this.grdPendingJobs.SuspendLayout();

                //  this.grdPendingJobs.Controls.Add(this.btnDeleteSelected);
                //   this.grdPendingJobs.Controls.Add(this.lst_cdr);
                this.grdPendingJobs.Dock = System.Windows.Forms.DockStyle.Fill;
                this.grdPendingJobs.EnableHotTracking = false;
                this.grdPendingJobs.Location = new System.Drawing.Point(0, 41);
                this.grdPendingJobs.Name = "grdPendingJobs";
                this.grdPendingJobs.Size = new System.Drawing.Size(1173, 347);
                this.grdPendingJobs.TabIndex = 4;
                this.grdPendingJobs.Text = "myGridView1";
                this.grdPendingJobs.Visible = true;


                this.panel1.Controls.Add(this.grdPendingJobs);


                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs.MasterTemplate)).EndInit();
                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs)).EndInit();
                this.grdPendingJobs.ResumeLayout(false);


                this.grdPendingJobs.BringToFront();


                grdPendingJobs.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);



                RadDragDropService dragDropServicePending = grdPendingJobs.GridViewElement.GetService<RadDragDropService>();
                dragDropServicePending.PreviewDragStart += new EventHandler<PreviewDragStartEventArgs>(dragDropServicePending_PreviewDragStart);
                grdPendingJobs.AllowColumnReorder = false;
                grdPendingJobs.AllowColumnResize = false;
                grdPendingJobs.AllowRowResize = false;
                grdPendingJobs.EnableSorting = false;
                grdPendingJobs.AllowEditRow = false;

                this.grdPendingJobs.AllowAddNewRow = false;
                this.grdPendingJobs.ShowGroupPanel = false;

                grdPendingJobs.AllowAutoSizeColumns = true;
                grdPendingJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;


                if (AppVars.objPolicyConfiguration != null && AppVars.objPolicyConfiguration.GridRowSize.ToInt() > 0)
                {
                    grdPendingJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                    grdPreBookings.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                    grdAllJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                    //  grdPendingJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();



                }




                grdPendingJobs.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                //grdPendingJobs.ViewCellFormatting += new CellFormattingEventHandler(grdPendingJobs_ViewCellFormatting);




                if (ApplyAccBgOnRow)
                {
                    grdPendingJobs.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);


                }


                grdPendingJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);




                grdPendingJobs.CurrentRow = null;

                grdPendingJobs.MasterTemplate.Caption = "grdPendingJobs";



                PopulateTodayAndAllJobsGrids();

                var hiddenColumnsList = General.GetQueryable<UM_Form_UserDefinedSetting>(c => c.UM_Form.FormName == this.Name && (c.IsVisible == false || c.GridColMoveTo != null)).ToList();

                hiddenColumnsList.RemoveAll(c => c.FormTab == "search");

                hiddenColumnsList = hiddenColumnsList.OrderBy(c => c.GridColMoveTo).ToList();


                try
                {
                    grdPendingJobs.Columns["Vias"].IsVisible = true;
                }
                catch
                {

                }
                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {



                    if (grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {

                        grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdPendingJobs.Columns.Move(grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }

                }


                try
                {
                    grdPendingJobs.Columns["NoofLuggages"].IsVisible = false;

                }
                catch
                {


                }


                grdPendingJobs.Columns["Due"].IsVisible = false;
                grdPendingJobs.Columns["JourneyTypeId"].IsVisible = false;
                grdPendingJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                grdPendingJobs.Columns["PickUpDate"].HeaderText = "Date";
                grdPendingJobs.Columns["RefNumber"].HeaderText = "Ref #";
                grdPendingJobs.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                grdPendingJobs.Columns["HasNotesImg"].HeaderText = "";
                grdPendingJobs.Columns["Driver"].HeaderText = "Drv";
                grdPendingJobs.Columns["Account"].HeaderText = "A/C";

                grdPendingJobs.Columns["From"].HeaderText = "Pickup Point";
                grdPendingJobs.Columns["FromPostCode"].HeaderText = "Area";
                grdPendingJobs.Columns["ToPostCode"].HeaderText = "Area";

                grdPendingJobs.Columns["To"].HeaderText = "Destination";
                grdPendingJobs.Columns["Pax"].HeaderText = "No of Pas";



                grdPendingJobs.Columns["Vehicle"].HeaderText = "Veh";
                grdPendingJobs.Columns["UpdateBy"].HeaderText = "Update By";
                grdPendingJobs.Columns["Fare"].HeaderText = "Fare(£)";
                grdPendingJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                grdPendingJobs.Columns["PReference"].HeaderText = "Pay Ref";
                grdPendingJobs.Columns["GroupId"].HeaderText = "Token #";



                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd:MM:yyyy HH:mm";
                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd:MM:yyyy HH:mm}";






                GridViewTextBoxColumn colTimeLeft = new GridViewTextBoxColumn();
                colTimeLeft.HeaderText = "T/L";
                colTimeLeft.Name = "TimeLeft";
                colTimeLeft.Width = 30;
                colTimeLeft.IsVisible = false;
                colTimeLeft.ReadOnly = true;

                grdPendingJobs.Columns.Add(colTimeLeft);
                grdPendingJobs.Columns.Move(grdPendingJobs.Columns[colTimeLeft.Name].Index, 0);



                AddCommandColumn(grdPendingJobs, "btnJDespatch", "Dispatch");


                if (AppVars.IsTelephonist)
                {
                    grdPendingJobs.Columns["btnJDespatch"].IsVisible = false;
                    btnDespatchJob.Visible = false;
                }

                //if (this.CanDelete)
                //{
                //    AddDeleteColumn(grdPendingJobs);


                //    grdPendingJobs.Columns["btnDelete"].Width = 60;
                //    grdPendingJobs.Columns["btnDelete"].IsVisible = false;
                //}

                GridMethods.SetFilter(grdPendingJobs);


                if (grdPendingJobs.Columns["Lead"].FilterDescriptor == null)
                {
                    grdPendingJobs.Columns["Lead"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();


                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;
                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Value = null;
                    ddlShowDue.Items[0].Selected = true;
                }

                try
                {

                    try
                    {
                        grdPendingJobs.Columns["TelephoneNo"].Width = 50;
                        grdPendingJobs.Columns["TelephoneNo"].IsVisible = false;
                    }
                    catch
                    {

                    }


                    grdPendingJobs.Columns["Lead"].Width = 40;
                    (grdPendingJobs.Columns["Lead"] as GridViewDateTimeColumn).CustomFormat = "HH:mm";
                    (grdPendingJobs.Columns["Lead"] as GridViewDateTimeColumn).FormatString = "{0:HH:mm}";


                    grdPendingJobs.Columns["MilesFromBase"].IsVisible = true;
                    grdPendingJobs.Columns["MilesFromBase"].HeaderText = "Prio";
                    grdPendingJobs.Columns["MilesFromBase"].Width = 30;
                    (grdPendingJobs.Columns["MilesFromBase"] as GridViewDecimalColumn).DecimalPlaces = 0;
                    (grdPendingJobs.Columns["MilesFromBase"] as GridViewDecimalColumn).FormatString = "{0:f0}";


                    grdPendingJobs.Columns["Attributes"].Width = 50;

                    MoveAttributesColumn();
                    //    if (grdPendingJobs.Columns["Attributes"].IsVisible)
                    //      grdPendingJobs.Columns.Move(grdPendingJobs.Columns["Attributes"].Index, grdPendingJobs.Columns["SpecialReq"].Index + 1);
                }
                catch
                {


                }



                GridCrashLog("PopulateTodayAndAllJobsGrids:" + "SUCCESS");
            }
            catch (Exception ex)
            {
                GridCrashLog("PopulateTodayAndAllJobsGrids: FAILED :- " + ex.Message.ToStr());

            }
        }



        private void ReInitializeTodaysAndPreBookingGrid()
        {
            try
            {
                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_ReInitializeTodaysAndPreBookingGrid.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}

                // this.panel1.Controls.Remove(grdPendingJobs);


                try
                {
                    this.grdPendingJobs.Dispose();
                    this.grdPendingJobs = null;
                }
                catch (Exception ex2)
                {
                    GridCrashLog("ReInitializeTodaysAndPreBookingGrid:" + "EXCEPTION ON DISPOSE " + ex2.Message.ToStr());

                }

                this.grdPendingJobs = new RadGridView();
                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs)).BeginInit();
                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs.MasterTemplate)).BeginInit();
                this.grdPendingJobs.SuspendLayout();

                //  this.grdPendingJobs.Controls.Add(this.btnDeleteSelected);
                //   this.grdPendingJobs.Controls.Add(this.lst_cdr);
                this.grdPendingJobs.Dock = System.Windows.Forms.DockStyle.Fill;
                this.grdPendingJobs.EnableHotTracking = false;
                this.grdPendingJobs.Location = new System.Drawing.Point(0, 41);
                this.grdPendingJobs.Name = "grdPendingJobs";
                this.grdPendingJobs.Size = new System.Drawing.Size(1173, 347);
                this.grdPendingJobs.TabIndex = 4;
                this.grdPendingJobs.Text = "myGridView1";
                this.grdPendingJobs.Visible = true;


                this.panel1.Controls.Add(this.grdPendingJobs);


                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs.MasterTemplate)).EndInit();
                ((System.ComponentModel.ISupportInitialize)(this.grdPendingJobs)).EndInit();
                this.grdPendingJobs.ResumeLayout(false);


                this.grdPendingJobs.BringToFront();


                grdPendingJobs.CellDoubleClick += new GridViewCellEventHandler(grdLister_CellDoubleClick);



                RadDragDropService dragDropServicePending = grdPendingJobs.GridViewElement.GetService<RadDragDropService>();
                dragDropServicePending.PreviewDragStart += new EventHandler<PreviewDragStartEventArgs>(dragDropServicePending_PreviewDragStart);
                grdPendingJobs.AllowColumnReorder = false;
                grdPendingJobs.AllowColumnResize = false;
                grdPendingJobs.AllowRowResize = false;
                grdPendingJobs.EnableSorting = false;
                grdPendingJobs.AllowEditRow = false;

                this.grdPendingJobs.AllowAddNewRow = false;
                this.grdPendingJobs.ShowGroupPanel = false;

                grdPendingJobs.AllowAutoSizeColumns = true;
                grdPendingJobs.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;


                if (AppVars.objPolicyConfiguration != null && AppVars.objPolicyConfiguration.GridRowSize.ToInt() > 0)
                {
                    grdPendingJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();

                    grdPreBookings.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();
                    grdAllJobs.TableElement.RowHeight = AppVars.objPolicyConfiguration.GridRowSize.ToInt();

                }

                grdPendingJobs.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
                grdPendingJobs.ViewCellFormatting += new CellFormattingEventHandler(grdPendingJobs_ViewCellFormatting);

                //    // grdPendingJobs.ToolTipTextNeeded += new ToolTipTextNeededEventHandler(grdPendingJobs_ToolTipTextNeeded);
                //     grdPendingJobs.ScreenTipNeeded += new ScreenTipNeededEventHandler(grdPendingJobs_ScreenTipNeeded);
                //    ApplyAccBgOnRow = AppVars.objPolicyConfiguration.ApplyAccBgColorOnRow.ToBool();

                if (ApplyAccBgOnRow)
                {
                    grdPendingJobs.ViewRowFormatting += new RowFormattingEventHandler(grdPendingJobs_ViewRowFormatting);


                }


                grdPendingJobs.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdPendingJobs_ContextMenuOpening);




                grdPendingJobs.CurrentRow = null;

                grdPendingJobs.MasterTemplate.Caption = "grdPendingJobs";



                PopulateTodayAndPreGrids();

                try
                {

                    grdPendingJobs.Columns["Vias"].IsVisible = false;
                }
                catch
                {


                }
                var hiddenColumnsList = General.GetQueryable<UM_Form_UserDefinedSetting>(c => c.UM_Form.FormName == this.Name && (c.IsVisible == false || c.GridColMoveTo != null)).ToList();

                hiddenColumnsList.RemoveAll(c => c.FormTab == "search");

                hiddenColumnsList = hiddenColumnsList.OrderBy(c => c.GridColMoveTo).ToList();

                for (int i = 0; i < hiddenColumnsList.Count; i++)
                {



                    if (grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName] != null)
                    {

                        grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].IsVisible = hiddenColumnsList[i].IsVisible.ToBool();


                        if (hiddenColumnsList[i].GridColMoveTo != null && hiddenColumnsList[i].IsVisible.ToBool())
                        {
                            grdPendingJobs.Columns.Move(grdPendingJobs.Columns[hiddenColumnsList[i].GridColumnName].Index, hiddenColumnsList[i].GridColMoveTo.ToInt());
                        }
                    }

                }


                try
                {
                    grdPendingJobs.Columns["NoofLuggages"].IsVisible = false;
                    //  grdPendingJobs.Columns["Vias"].IsVisible = true;
                }
                catch
                {


                }

                grdPendingJobs.Columns["Due"].IsVisible = false;
                grdPendingJobs.Columns["JourneyTypeId"].IsVisible = false;
                grdPendingJobs.Columns["BookingDateTime"].HeaderText = "Booking Date";
                grdPendingJobs.Columns["PickUpDate"].HeaderText = "Date";
                grdPendingJobs.Columns["RefNumber"].HeaderText = "Ref #";
                grdPendingJobs.Columns["PaymentMethod"].HeaderText = "Pay Meth";
                grdPendingJobs.Columns["HasNotesImg"].HeaderText = "";
                grdPendingJobs.Columns["Driver"].HeaderText = "Drv";
                grdPendingJobs.Columns["Account"].HeaderText = "A/C";

                grdPendingJobs.Columns["From"].HeaderText = "Pickup Point";
                grdPendingJobs.Columns["FromPostCode"].HeaderText = "Area";
                grdPendingJobs.Columns["ToPostCode"].HeaderText = "Area";

                grdPendingJobs.Columns["To"].HeaderText = "Destination";
                grdPendingJobs.Columns["Pax"].HeaderText = "No of Pas";



                grdPendingJobs.Columns["Vehicle"].HeaderText = "Veh";
                grdPendingJobs.Columns["UpdateBy"].HeaderText = "Update By";
                grdPendingJobs.Columns["Fare"].HeaderText = "Fare(£)";
                grdPendingJobs.Columns["MobileNo"].HeaderText = "Tel. No";

                grdPendingJobs.Columns["PReference"].HeaderText = "Pay Ref";
                grdPendingJobs.Columns["GroupId"].HeaderText = "Token #";



                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd:MM:yyyy HH:mm";
                (grdPendingJobs.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd:MM:yyyy HH:mm}";






                GridViewTextBoxColumn colTimeLeft = new GridViewTextBoxColumn();
                colTimeLeft.HeaderText = "T/L";
                colTimeLeft.Name = "TimeLeft";
                colTimeLeft.Width = 30;
                colTimeLeft.ReadOnly = true;
                colTimeLeft.IsVisible = false;

                grdPendingJobs.Columns.Add(colTimeLeft);
                grdPendingJobs.Columns.Move(grdPendingJobs.Columns[colTimeLeft.Name].Index, 0);



                AddCommandColumn(grdPendingJobs, "btnJDespatch", "Dispatch");


                if (AppVars.IsTelephonist)
                {
                    grdPendingJobs.Columns["btnJDespatch"].IsVisible = false;
                    btnDespatchJob.Visible = false;
                }

                //if (this.CanDelete)
                //{
                //    AddDeleteColumn(grdPendingJobs);


                //    grdPendingJobs.Columns["btnDelete"].Width = 60;
                //    grdPendingJobs.Columns["btnDelete"].IsVisible = false;
                //}

                GridMethods.SetFilter(grdPendingJobs);


                if (grdPendingJobs.Columns["Lead"].FilterDescriptor == null)
                {
                    grdPendingJobs.Columns["Lead"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();


                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;
                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Value = null;
                    ddlShowDue.Items[0].Selected = true;
                }


                try
                {

                    try
                    {
                        grdPendingJobs.Columns["TelephoneNo"].Width = 50;
                    }
                    catch
                    {


                    }
                    grdPendingJobs.Columns["Lead"].Width = 40;
                    (grdPendingJobs.Columns["Lead"] as GridViewDateTimeColumn).CustomFormat = "HH:mm";
                    (grdPendingJobs.Columns["Lead"] as GridViewDateTimeColumn).FormatString = "{0:HH:mm}";


                    grdPendingJobs.Columns["MilesFromBase"].IsVisible = true;
                    grdPendingJobs.Columns["MilesFromBase"].HeaderText = "Prio";
                    grdPendingJobs.Columns["MilesFromBase"].Width = 30;
                    (grdPendingJobs.Columns["MilesFromBase"] as GridViewDecimalColumn).DecimalPlaces = 0;
                    (grdPendingJobs.Columns["MilesFromBase"] as GridViewDecimalColumn).FormatString = "{0:f0}";


                    grdPendingJobs.Columns["Attributes"].Width = 50;
                    MoveAttributesColumn();
                    //   if (grdPendingJobs.Columns["Attributes"].IsVisible)
                    //     grdPendingJobs.Columns.Move(grdPendingJobs.Columns["Attributes"].Index, grdPendingJobs.Columns["SpecialReq"].Index + 1);
                }
                catch
                {


                }


                GridCrashLog("ReInitializeTodaysAndPreBookingGrid:" + "SUCCESS");
            }
            catch (Exception ex)
            {
                GridCrashLog("ReInitializeTodaysAndPreBookingGrid: FAILED :- " + ex.Message.ToStr());

            }
        }


        private void PopulateRequiredGrids()
        {
            try
            {

                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_PopulateRequiredGrids.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}

                timer1.Stop();


                long JobIndex = grdPendingJobs.CurrentRow != null ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                int val = grdPendingJobs.TableElement.VScrollBar.Value;


                //grdPendingJobs.TableElement.BeginUpdate();


                if (JobIndex > 0)
                {
                    grdPendingJobs.Tag = EditFare.PopupElement.IsElementVisible;
                }


                grdPendingJobs.DataSource = listofTodaysBooking;


                if (JobIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);

                    if (EditFare.Tag != null && EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.Tag.ToBool())
                    {
                        EditFare.Show();

                    }

                }




                grdPendingJobs.TableElement.VScrollBar.Value = val;



                // grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Index == rowIndex);
                FormatTodaysBookingGrid();


                //grdPendingJobs.TableElement.EndUpdate();








                RefreshUpdatePreBookingGrid("");





                ClearRecentJobFilter();


                JobIndex = grdAllJobs.CurrentRow != null ? grdAllJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;
                val = grdAllJobs.TableElement.VScrollBar.Value;

                grdAllJobs.DataSource = listofAllJobs;



                if (JobIndex > 0)
                    grdAllJobs.CurrentRow = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                if (grdAllJobs.TableElement.VScrollBar.Maximum >= val)
                {
                    grdAllJobs.TableElement.VScrollBar.Value = val;
                }

                ReSyncDueBookings();


                try
                {
                    Pg_Cancelled.Item.Text = "Cancelled(" + grdCancelledJobs.Rows.Count + ")";
                    Pg_NoShow.Item.Text = "No Show(" + grdNoShowJobs.Rows.Count + ")";
                }
                catch
                {

                }

                timer1.Start();
            }
            catch (Exception ex)
            {



                timer1.Start();

                GridCrashLog("populaterequiredgrids:" + ex.Message.ToStr());


                if (ex.Message.ToStr().ToLower().Contains("object referen"))
                {
                    if (retryX == 0)
                    {

                        retryX = 1;
                        ReInitializeTodaysBookingGrid();
                        retryX = 0;
                    }

                }
                else if (ex.Message.ToStr().Contains("System.OutOfMemoryException"))
                {


                    RestartProgram();


                }




            }
        }






        #endregion




        private void GridCrashLog(string msg)
        {

            try
            {
                File.AppendAllText(Application.StartupPath + "\\exception_grid.txt", DateTime.Now.ToStr() + "," + msg + Environment.NewLine);

            }
            catch
            {


            }

        }


        private void AddExcepLog(string msg)
        {

            try
            {
                File.AppendAllText(Application.StartupPath + "\\exception_general.txt", DateTime.Now.ToStr() + "," + msg + Environment.NewLine);

            }
            catch
            {


            }

        }



        private void FormatRejectedWebBookingsGrid()
        {

            //grdRejectedWebBookings.Columns["MobileNo"].IsVisible = false;
            //grdRejectedWebBookings.Columns["Id"].IsVisible = false;
            //grdRejectedWebBookings.Columns["DriverId"].IsVisible = false;

            //grdRejectedWebBookings.Columns["VehicleBgColor"].IsVisible = false;
            //grdRejectedWebBookings.Columns["VehicleTextColor"].IsVisible = false;

            //grdRejectedWebBookings.Columns["BackgroundColor1"].IsVisible = false;
            //grdRejectedWebBookings.Columns["TextColor1"].IsVisible = false;


            //grdRejectedWebBookings.Columns["BookingTypeId"].IsVisible = false;


            //grdRejectedWebBookings.Columns["StatusColor"].IsVisible = false;
            //grdRejectedWebBookings.Columns["FromLocTypeId"].IsVisible = false;
            //grdRejectedWebBookings.Columns["ToLocTypeId"].IsVisible = false;






            ////AddCommandColumn("btnReCall", "Re-Call", 70);

            ////if (this.CanDelete)
            ////{
            ////    AddCommandColumn("btnDelete", "Delete", 70);

            ////    //  grdLister.AddDeleteColumn();
            ////   // grdLister.Columns["btnDelete"].Width = 70;
            ////}

            //GridMethods.SetFilter(grdRejectedWebBookings);




            //grdRejectedWebBookings.Columns["RefNumber"].Width = 60;
            //grdRejectedWebBookings.Columns["RefNumber"].HeaderText = "Ref #";
            //grdRejectedWebBookings.Columns["Fare"].Width = 70;
            //grdRejectedWebBookings.Columns["Fare"].HeaderText = "Fare £";
            //grdRejectedWebBookings.Columns["Vehicle"].Width = 70;
            //grdRejectedWebBookings.Columns["Driver"].Width = 50;

            //grdRejectedWebBookings.Columns["Status"].Width = 80;
            //grdRejectedWebBookings.Columns["Passenger"].Width = 120;

            //grdRejectedWebBookings.Columns["From"].Width = 170;
            //grdRejectedWebBookings.Columns["From"].HeaderText = "Pickup Point";

            //grdRejectedWebBookings.Columns["To"].Width = 170;
            //grdRejectedWebBookings.Columns["To"].HeaderText = "Destination";


            //grdRejectedWebBookings.Columns["BookingDate"].Width = 130;
            //grdRejectedWebBookings.Columns["BookingDate"].HeaderText = "Booking Date";


            //(grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
            //(grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

            //(grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).SortOrder = RadSortOrder.Ascending;
            //(grdRejectedWebBookings.Columns["PickupDate"] as GridViewDateTimeColumn).Sort(RadSortOrder.Ascending, true);



            //grdRejectedWebBookings.Columns["PickupDate"].Width = 130;
            //grdRejectedWebBookings.Columns["PickupDate"].HeaderText = "Pickup Date-Time";


            //grdRejectedWebBookings.Columns["Account"].Width = 120;
            //grdRejectedWebBookings.Columns["Account"].HeaderText = "A/C";



            //if (grdRejectedWebBookings.Columns.Contains("RECALL") == false)
            //{

            //    GridViewCommandColumn col = new GridViewCommandColumn();
            //    col.Width = 60;

            //    col.Name = "RECALL";
            //    col.UseDefaultText = true;
            //    col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            //    col.DefaultText = "Re-Call";
            //    col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            //    grdRejectedWebBookings.Columns.Add(col);
            //}




            //grdRejectedWebBookings.CellDoubleClick += new GridViewCellEventHandler(grdWebBookingsNew_CellDoubleClick);
            //grdRejectedWebBookings.CommandCellClick += new CommandCellClickEventHandler(grdRejectedWebBookings_CommandCellClick);
            //// grdRejectedWebBookings.ShowRowHeaderColumn = false;
            //grdRejectedWebBookings.ShowGroupPanel = false;
            //grdRejectedWebBookings.AllowAddNewRow = false;
            //grdRejectedWebBookings.ShowGroupPanel = false;

            //grdRejectedWebBookings.AllowColumnResize = false;
            //grdRejectedWebBookings.AllowColumnReorder = false;
            //grdRejectedWebBookings.AllowDeleteRow = false;
            //grdRejectedWebBookings.AllowMultiColumnSorting = true;
            //grdRejectedWebBookings.AllowEditRow = false;



            //// grdWebBookingsNew.AllowEditRow = false;
            ////    grdWebBookingsNew.AllowDeleteRow = false;
            //grdRejectedWebBookings.Font = new Font("Tahoma", 9, FontStyle.Regular);
            //grdRejectedWebBookings.MasterTemplate.AllowColumnChooser = false;

            //grdRejectedWebBookings.EnableFiltering = true;
            //grdRejectedWebBookings.ShowFilteringRow = true;


        }

        void grdRejectedWebBookings_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                GridViewRowInfo row = gridCell.RowElement.RowInfo;
                long id = row.Cells["Id"].Value.ToLong();


                if (name == "recall")
                {
                    new TaxiDataContext().stp_UpdateOnlineJobStatus(id, Enums.BOOKINGSTATUS.PENDING_WEBBOOKING, "Declined", "Re-call", AppVars.LoginObj.UserName.ToStr());

                    //    new TaxiDataContext().stp_UpdateJobStatus(id, Enums.BOOKINGSTATUS.PENDING_WEBBOOKING);
                    row.Delete();

                    PopulatePendingWebBookings(null);


                    txtDeclinedWebBookingTotal.Text = grdRejectedWebBookings.Rows.Count.ToString();

                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }



        #region Booking History


        private bool IsFind = false;

        bool lockCompletedBooking = false;
        bool lockCancelledBooking = false;
        bool lockNoFareBooking = false;


        private void btnFindBookingHistory_Click(object sender, EventArgs e)
        {
            Find();
        }


        private void Find()
        {

            this.IsFind = true;
            skip = 0;
            RefreshBookingList();
        }


        private void ClearFilter()
        {

            skip = 0;
            this.IsFind = false;
            this.dtpFromDate.Value = null;
            this.dtpToDate.Value = null;
            this.txtsearchBookingHistory.Text = string.Empty;
        }


        int pageSize = 1000;
        IList listofBookingHistoryData = null;
        private void PopulateBookingHistoryData()
        {
            try
            {


                var data1 = General.GetQueryable<Booking>(c => c.BookingStatusId != Enums.BOOKINGSTATUS.PENDING && c.BookingStatusId != Enums.BOOKINGSTATUS.WAITING && c.BookingStatusId != Enums.BOOKINGSTATUS.ONHOLD
                    && (c.SubcompanyId == AppVars.DefaultBookingSubCompanyId || AppVars.DefaultBookingSubCompanyId == 0))
                               .OrderByDescending(c => c.PickupDateTime);


                if (this.IsFind)
                {

                    string searchTxt = txtsearchBookingHistory.Text.ToLower().Trim();
                    string col = ddlColumnBookingHistory.Text.Trim().ToLower();

                    if (searchTxt.Length < 3)
                        searchTxt = string.Empty;


                    DateTime? fromDate = dtpFromDate.Value.ToDateTimeorNull();
                    DateTime? toDate = dtpToDate.Value.ToDateTimeorNull();

                    bool col_name = false;
                    bool col_refNo = false;
                    bool col_telNo = false;
                    bool col_mobileno = false;
                    bool col_driver = false;
                    bool col_vehicle = false;
                    bool col_status = false;
                    bool col_pickupPoint = false;
                    bool col_destination = false;
                    bool col_subcompany = false;

                    if (col == "passenger")
                    {
                        col_name = true;
                    }
                    else if (col == "reference")
                    {
                        col_refNo = true;
                    }
                    else if (col == "telephone no")
                    {
                        col_telNo = true;
                    }

                    else if (col == "mobile no")
                    {
                        col_mobileno = true;
                    }

                    else if (col == "driver")
                    {
                        col_driver = true;
                    }

                    else if (col == "vehicle")
                    {
                        col_vehicle = true;
                    }

                    else if (col == "status")
                    {
                        col_status = true;
                    }

                    else if (col == "pickup point")
                    {
                        col_pickupPoint = true;
                    }

                    else if (col == "destination")
                    {
                        col_destination = true;
                    }
                    else if (col == "subcompany")
                    {
                        col_subcompany = true;
                    }


                    int cnt = data1.Count();
                    if (skip + pageSize > cnt && cnt - pageSize > 0)
                        skip = cnt - pageSize;
                    else if (cnt <= pageSize)
                        skip = 0;



                    var query = (from a in data1

                                 where

                                 (fromDate != null ||


                                 (col_name && (a.CustomerName.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_refNo && (a.BookingNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_telNo && (a.CustomerPhoneNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_mobileno && (a.CustomerMobileNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_driver && (a.Fleet_Driver != null && a.Fleet_Driver.DriverNo.ToLower().Contains(searchTxt) || searchTxt == string.Empty))

                                     || (col_pickupPoint && (a.FromAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_destination && (a.ToAddress.ToLower().Contains(searchTxt) || searchTxt == string.Empty))


                                     || (col_vehicle && (a.Fleet_VehicleType != null && a.Fleet_VehicleType.VehicleType.ToLower().Contains(searchTxt) || searchTxt == string.Empty))
                                     || (col_status && (a.BookingStatus != null && a.BookingStatus.StatusName.ToLower().Contains(searchTxt)))

                                      || (col_subcompany && (a.SubcompanyId != null && a.Gen_SubCompany.CompanyName.ToLower().Contains(searchTxt)))

                                 )
                                     && ((fromDate == null || a.PickupDateTime.Value >= fromDate) && (toDate == null || a.PickupDateTime.Value <= toDate))



                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     BookingDate = a.BookingDate,
                                     PickupDate = a.PickupDateTime,
                                     Passenger = a.CustomerName,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     Account = a.OrderNo != null && a.OrderNo != string.Empty ? a.Gen_Company.CompanyName + " - " + a.OrderNo : a.Gen_Company.CompanyName,
                                     Driver = a.Fleet_Driver.DriverNo,
                                     DriverId = a.DriverId,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     Status = a.BookingStatus.StatusName,
                                     StatusColor = a.BookingStatus.BackgroundColor,
                                     BookingTypeId = a.BookingTypeId,
                                     VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                     VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                     TextColor1 = a.Gen_Company.TextColor,
                                     MobileNo = a.CustomerMobileNo,
                                     FromLocTypeId = a.FromLocTypeId,
                                     ToLocTypeId = a.ToLocTypeId,
                                     SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,
                                     StatusId = a.BookingStatusId,
                                     BookingBackgroundColor = a.BookingType.BackgroundColor
                                 }).Skip(skip).Take(pageSize).ToList();



                    listofBookingHistoryData = query;
                    //  this.grdLister.TableElement.BeginUpdate();
                    //  grdLister.DataSource = query;
                    //  this.grdLister.TableElement.EndUpdate();
                }
                else
                {

                    int cnt = data1.Count();
                    if (skip + pageSize > cnt && cnt - pageSize > 0)
                        skip = cnt - pageSize;
                    else if (cnt <= pageSize)
                        skip = 0;


                    var query = (from a in data1


                                 select new
                                 {
                                     Id = a.Id,
                                     RefNumber = a.BookingNo,
                                     BookingDate = a.BookingDate,
                                     PickupDate = a.PickupDateTime,
                                     Passenger = a.CustomerName,
                                     From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                     To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                     Fare = a.FareRate,
                                     Account = a.OrderNo != null && a.OrderNo != string.Empty ? a.Gen_Company.CompanyName + " - " + a.OrderNo : a.Gen_Company.CompanyName,
                                     Driver = a.Fleet_Driver.DriverNo,
                                     DriverId = a.DriverId,
                                     Vehicle = a.Fleet_VehicleType.VehicleType,
                                     Status = a.BookingStatus.StatusName,
                                     StatusColor = a.BookingStatus.BackgroundColor,
                                     BookingTypeId = a.BookingTypeId,
                                     VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                                     VehicleTextColor = a.Fleet_VehicleType.TextColor,
                                     BackgroundColor1 = a.Gen_Company.BackgroundColor,
                                     TextColor1 = a.Gen_Company.TextColor,
                                     MobileNo = a.CustomerMobileNo,
                                     FromLocTypeId = a.FromLocTypeId,
                                     ToLocTypeId = a.ToLocTypeId,
                                     SubCompanyBgColor = a.SubcompanyId != null ? a.Gen_SubCompany.BackgroundColor : -1,
                                     StatusId = a.BookingStatusId,
                                     BookingBackgroundColor = a.BookingType.BackgroundColor
                                 }).Skip(skip).Take(pageSize).ToList();


                    listofBookingHistoryData = query;
                    //  this.grdLister.TableElement.BeginUpdate();

                    //  grdLister.DataSource = query;
                    // this.grdLister.TableElement.EndUpdate();
                }
            }
            catch (Exception ex)
            {


            }


        }


        private void PopulateBookingHistoryGrid()
        {

            try
            {



                //   grdLister.BeginUpdate();
                grdLister.DataSource = listofBookingHistoryData;
                //   grdLister.EndUpdate();


                FormatBookingHistoryGrid();
            }
            catch (Exception ex)
            {


            }

        }


        private void FormatBookingHistoryGrid()
        {
            if (grdLister.Columns.Count == 0)
                return;

            try
            {
                //if (this.CanDelete)
                //{
                //    grdLister.Columns["Check"].Width = 40;
                //}






                AddCommandColumn(grdLister, "btnRecall", "Re-Call");
                AddCommandColumn(grdLister, "btnReDespatch", "Re-Despatch");

                if (this.CanDelete)
                {
                    AddCommandColumn(grdLister, "btnDelete", "Delete");

                    grdLister.Columns["btnDelete"].Width = 70;



                }


                if (grdLister.EnableFiltering == false)
                {

                    grdLister.ShowFilteringRow = true;
                    GridMethods.SetFilter(grdLister);
                    grdLister.AllowEditRow = true;
                }


                grdLister.Columns["BookingBackgroundColor"].IsVisible = false;

                grdLister.Columns["SubCompanyBgColor"].IsVisible = false;
                grdLister.Columns["MobileNo"].IsVisible = false;
                grdLister.Columns["Id"].IsVisible = false;
                grdLister.Columns["DriverId"].IsVisible = false;

                grdLister.Columns["VehicleBgColor"].IsVisible = false;
                grdLister.Columns["VehicleTextColor"].IsVisible = false;

                grdLister.Columns["BackgroundColor1"].IsVisible = false;
                grdLister.Columns["TextColor1"].IsVisible = false;

                grdLister.Columns["StatusId"].IsVisible = false;
                grdLister.Columns["BookingTypeId"].IsVisible = false;


                grdLister.Columns["StatusColor"].IsVisible = false;
                grdLister.Columns["FromLocTypeId"].IsVisible = false;
                grdLister.Columns["ToLocTypeId"].IsVisible = false;



                grdLister.Columns["RefNumber"].Width = 50;
                grdLister.Columns["RefNumber"].HeaderText = "Ref #";
                grdLister.Columns["Fare"].Width = 70;
                grdLister.Columns["Fare"].HeaderText = "Fare £";
                grdLister.Columns["Vehicle"].Width = 70;
                grdLister.Columns["Driver"].Width = 50;

                grdLister.Columns["Status"].Width = 80;
                grdLister.Columns["Passenger"].Width = 70;

                grdLister.Columns["From"].Width = 110;
                grdLister.Columns["From"].HeaderText = "Pickup Point";

                grdLister.Columns["To"].Width = 110;
                grdLister.Columns["To"].HeaderText = "Destination";


                grdLister.Columns["BookingDate"].Width = 90;
                grdLister.Columns["BookingDate"].HeaderText = "Booking Date";


                (grdLister.Columns["PickupDate"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdLister.Columns["PickupDate"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";


                grdLister.Columns["PickupDate"].Width = 130;
                grdLister.Columns["PickupDate"].HeaderText = "Pickup Date-Time";


                grdLister.Columns["Account"].Width = 120;
                grdLister.Columns["Account"].HeaderText = "A/C";



            }
            catch (Exception ex)
            {


            }

        }

        RadDropDownMenu bookingHistory_Contextmenu = null;

        void grdLister_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                GridDataCellElement cell = e.ContextMenuProvider as GridDataCellElement;
                if (cell == null)
                    return;

                else if (cell.GridControl.Name == "grdLister")
                {

                    if (bookingHistory_Contextmenu == null)
                    {
                        bookingHistory_Contextmenu = new RadDropDownMenu();
                        bookingHistory_Contextmenu.BackColor = Color.Orange;

                        RadMenuItem EditFareItem1 = new RadMenuItem("Edit Fare");
                        EditFareItem1.ForeColor = Color.DarkBlue;
                        EditFareItem1.BackColor = Color.Orange;
                        EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);

                        EditFareItem1.Click += new EventHandler(EditFareItem1_Click);
                        bookingHistory_Contextmenu.Items.Add(EditFareItem1);


                        RadMenuItem EditFareItem2 = new RadMenuItem("Arrival Text");
                        EditFareItem2.ForeColor = Color.DarkBlue;
                        EditFareItem2.BackColor = Color.Orange;
                        EditFareItem2.Font = new Font("Tahoma", 10, FontStyle.Bold);
                        EditFareItem2.Click += new EventHandler(EditFareItem2_Click);
                        bookingHistory_Contextmenu.Items.Add(EditFareItem2);


                    }

                    e.ContextMenu = bookingHistory_Contextmenu;
                    return;
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        void EditFareItem2_Click(object sender, EventArgs e)
        {
            try
            {
                if (grdLister.CurrentRow != null && grdLister.CurrentRow is GridViewDataRowInfo)
                {
                    string message = AppVars.objPolicyConfiguration.ArrivalBookingText.ToStr();
                    frmSMSAll frm = new frmSMSAll(grdLister.CurrentRow.Cells["MobileNo"].Value.ToStr(), message, 0);
                    frm.ShowDialog();
                    frm.Dispose();
                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }

        void grdLister_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {



                if (e.CellElement is GridHeaderCellElement)
                {
                    //    e.CellElement
                    e.CellElement.BorderColor = _HeaderRowBorderColor;
                    e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                    // e.CellElement.DrawBorder = false;
                    e.CellElement.BackColor = _HeaderRowBackColor;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.Font = newFont;
                    e.CellElement.ForeColor = GridBackColor;
                    e.CellElement.DrawFill = true;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                }

                else if (e.CellElement is GridFilterCellElement)
                {



                    e.CellElement.Font = oldFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = GridBackColor;
                    e.CellElement.RowElement.BackColor = GridBackColor;
                    e.CellElement.RowElement.NumberOfColors = 1;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }
                else if (e.CellElement is GridRowHeaderCellElement)
                {

                    if (e.CellElement is GridTableHeaderCellElement)
                    {

                        e.CellElement.BorderColor = _HeaderRowBorderColor;
                        e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                        e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                        // e.CellElement.DrawBorder = false;
                        e.CellElement.BackColor = _HeaderRowBackColor;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.Font = newFont;
                        e.CellElement.ForeColor = GridBackColor;
                        e.CellElement.DrawFill = true;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                    }
                    else if (e.CellElement is GridRowHeaderCellElement && e.Row is GridViewFilteringRowInfo)
                    {

                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = GridBackColor;
                        e.CellElement.RowElement.BackColor = GridBackColor;
                        e.CellElement.RowElement.NumberOfColors = 1;

                        e.CellElement.BorderColor = GridRowBorderColor;
                        e.CellElement.BorderColor2 = GridRowBorderColor;
                        e.CellElement.BorderColor3 = GridRowBorderColor;
                        e.CellElement.BorderColor4 = GridRowBorderColor;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                    }

                    else
                    {

                        e.CellElement.BackColor = Color.FromArgb(e.Row.Cells["SubCompanyBgColor"].Value.ToInt());
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BorderColor = GridRowBorderColor;
                        e.CellElement.BorderColor2 = GridRowBorderColor;
                        e.CellElement.BorderColor3 = GridRowBorderColor;
                        e.CellElement.BorderColor4 = GridRowBorderColor;

                        e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                        e.CellElement.DrawFill = true;

                    }



                }


                else if (e.CellElement is GridDataCellElement)
                {



                    if (e.CellElement.ColumnInfo is GridViewCommandColumn)
                    {


                        if (e.Column.Name == "btnReDespatch" || e.Column.Name == "btnRecall")
                        {

                            if (
                                (lockCompletedBooking && e.CellElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                               || (lockCancelledBooking && e.CellElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.CANCELLED)
                                || (lockNoFareBooking && e.CellElement.RowInfo.Cells["StatusId"].Value.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP))
                            {


                                // ((RadButtonElement)e.CellElement.Children[0]).Text = "Completed";
                                ((RadButtonElement)e.CellElement.Children[0]).Enabled = false;
                            }
                            else
                            {
                                //     ((RadButtonElement)e.CellElement.Children[0]).Text = "Re-Despatched";
                                ((RadButtonElement)e.CellElement.Children[0]).Enabled = true;

                            }

                        }
                        else if (e.Column.Name == "btnDelete")
                        {


                            ((RadButtonElement)e.CellElement.Children[0]).TextImageRelation = TextImageRelation.ImageBeforeText;
                            ((RadButtonElement)e.CellElement.Children[0]).TextAlignment = ContentAlignment.MiddleCenter;
                            ((RadButtonElement)e.CellElement.Children[0]).Image = Resources.Resource1.delete;




                        }


                    }


                    e.CellElement.ToolTipText = e.CellElement.Text;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                    e.CellElement.ForeColor = Color.Black;

                    e.CellElement.Font = oldFont;

                    //if (e.CellElement.RowElement.IsSelected == true)
                    //{

                    //    e.CellElement.RowElement.NumberOfColors = 1;
                    //    e.CellElement.RowElement.BackColor = Color.DeepSkyBlue;

                    //    e.CellElement.NumberOfColors = 1;
                    //    e.CellElement.BackColor = Color.DeepSkyBlue;
                    //    e.CellElement.ForeColor = Color.White;
                    //    e.CellElement.Font = newFont;

                    //}

                    //else
                    //{
                    //    e.CellElement.RowElement.ResetValue(LightVisualElement.BackColorProperty, ValueResetFlags.TwoWayBindingLocal);

                    //}

                    e.CellElement.DrawFill = false;


                    if (e.Column.Name == "RefNumber" || e.Column.Name == "BookingDate")
                    {

                        e.CellElement.BackColor = GridBackColor;
                        e.CellElement.NumberOfColors = 1;

                        //if (e.Row.Cells["BookingBackgroundColor"].Value != null)
                        //{

                        //    e.CellElement.BackColor = Color.FromArgb((e.Row.Cells["BookingBackgroundColor"].Value.ToInt()));
                        //    e.CellElement.DrawFill = true;
                        //}


                    }

                    //if (e.Column.Name == "RefNumber" || e.Column.Name == "PickUpDate" || e.Column.Name == "Time")
                    //{
                    //    if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.VIP)
                    //    {
                    //        e.CellElement.NumberOfColors = 1;
                    //        e.CellElement.DrawFill = true;

                    //        string bgColor = AppVars.objPolicyConfiguration.VIPBookingBackgroundColor.ToStr();

                    //        if (!string.IsNullOrEmpty(bgColor))
                    //        {

                    //            e.CellElement.BackColor = Color.FromArgb(bgColor.ToInt());
                    //        }

                    //    }
                    //    else if (e.Row.Cells["BookingTypeId"].Value.ToInt() == Enums.BOOKING_TYPES.WEB)
                    //    {
                    //        e.CellElement.NumberOfColors = 1;
                    //        e.CellElement.DrawFill = true;

                    //        string bgColor = AppVars.objPolicyConfiguration.WebBookingBackgroundColor.ToStr();

                    //        if (!string.IsNullOrEmpty(bgColor))
                    //        {

                    //            e.CellElement.BackColor = Color.FromArgb(bgColor.ToInt());
                    //        }

                    //    }
                    //}



                    if (e.Column.Name == "Account" && e.CellElement.Value.ToStr() != string.Empty)
                    {


                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;


                        string Bgcolor = e.Row.Cells["BackgroundColor1"].Value.ToStr().Trim();
                        string textColor = e.Row.Cells["TextColor1"].Value.ToStr().Trim();

                        if (Bgcolor != string.Empty && textColor != string.Empty)
                        {

                            Color bgClr = Color.FromArgb(Bgcolor.ToInt());
                            Color txtClr = Color.FromArgb(textColor.ToInt());

                            e.CellElement.BackColor = bgClr;
                            e.CellElement.ForeColor = txtClr;

                        }
                        else
                        {
                            e.CellElement.ForeColor = GridBackColor;
                            e.CellElement.BackColor = Color.Crimson;


                        }
                    }

                    else if (e.Column.Name == "Vehicle")
                    {
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;


                        string Bgcolor = e.Row.Cells["VehicleBgColor"].Value.ToStr().Trim();
                        string textColor = e.Row.Cells["VehicleTextColor"].Value.ToStr().Trim();

                        if (Bgcolor != string.Empty && textColor != string.Empty)
                        {

                            e.CellElement.BackColor = Color.FromArgb(Bgcolor.ToInt());
                            e.CellElement.ForeColor = Color.FromArgb(textColor.ToInt());

                        }
                    }


                    else if (e.Column.Name == "From")
                    {
                        if (e.Row.Cells["FromLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        {

                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.DrawFill = true;


                            e.CellElement.BackColor = Color.GreenYellow;
                            e.CellElement.ForeColor = Color.Black;
                        }
                    }

                    else if (e.Column.Name == "To")
                    {
                        if (e.Row.Cells["ToLocTypeId"].Value.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                        {

                            e.CellElement.NumberOfColors = 1;
                            e.CellElement.DrawFill = true;


                            e.CellElement.BackColor = Color.GreenYellow;
                            e.CellElement.ForeColor = Color.Black;

                        }
                    }

                    else if (e.Column.Name == "Status")
                    {

                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["StatusColor"].Value.ToInt());
                        e.CellElement.ForeColor = Color.Black;

                        e.CellElement.DrawFill = true;
                    }



                }
            }
            catch { }
        }





        //public bool ReCallFOJBooking(long jobId, int driverId)
        //{

        //    try
        //    {
        //        (new TaxiDataContext()).stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING);




        //        if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
        //        {
        //            //For TCP Connection
        //            if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
        //            {

        //                General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2");
        //            }

        //        }
        //        else
        //        {

        //            //For TCP Connection
        //            if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
        //            {

        //                General.SendPDAMessage("request pda=" + driverId + "=" + jobId + "=Cancelled Foj Job>>" + jobId + "=2");
        //            }


        //        }

        //        return true;

        //    }
        //    catch (Exception ex)
        //    {

        //        return true;
        //        //ENUtils.ShowMessage(ex.Message);


        //    }




        //}


        private void txtSearchBookingHistory_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                Find();

            }
        }

        private void btnShowAllBookingHistory_Click(object sender, EventArgs e)
        {
            ClearFilter();
            RefreshBookingList();
        }

        int skip = 0;

        private void btnFirstRecords_Click(object sender, EventArgs e)
        {



            try
            {

                // InitializeBWorker();

                if (worker.IsBusy == false)
                {
                    skip = 0;


                    RefreshBookingList();
                    // bWorker.RunWorkerAsync();
                }


                btnFirstRecords.Enabled = false;

                Thread.Sleep(1000);

                btnFirstRecords.Enabled = true;
                //PopulateData();
            }
            catch (Exception ex)
            {


            }
        }

        private void btnPreviousRecords_Click(object sender, EventArgs e)
        {

            try
            {







                if (worker.IsBusy == false)
                {

                    if (skip - pageSize < 0)
                        skip = 0;
                    else
                        skip = skip - pageSize;

                    RefreshBookingList();
                }


                btnPreviousRecords.Enabled = false;

                Thread.Sleep(1000);

                btnPreviousRecords.Enabled = true;

            }
            catch (Exception ex)
            {


            }
            // PopulateData();
        }

        private void btnNextRecord_Click(object sender, EventArgs e)
        {

            try
            {






                if (worker.IsBusy == false)
                {
                    skip = skip + pageSize;

                    RefreshBookingList();
                    //worker.RunWorkerAsync();
                }

                //  PopulateData();

                btnNextRecord.Enabled = false;

                Thread.Sleep(1000);

                btnNextRecord.Enabled = true;
            }
            catch (Exception ex)
            {


            }
        }

        private void btnLastRecords_Click(object sender, EventArgs e)
        {




            try
            {




                if (worker.IsBusy == false)
                {
                    int cnt = General.GetQueryable<Booking>(c => c.BookingStatusId != Enums.BOOKINGSTATUS.PENDING && c.BookingStatusId != Enums.BOOKINGSTATUS.WAITING).Count();

                    if (cnt <= pageSize)
                    {
                        skip = 0;

                    }
                    else if (cnt > pageSize)
                    {

                        skip = cnt - pageSize;

                    }

                    RefreshBookingList();
                }



                btnLastRecords.Enabled = false;

                Thread.Sleep(1000);

                btnLastRecords.Enabled = true;

            }
            catch (Exception ex)
            {


            }
            //PopulateData();
        }

        void grdBookingHistoryLister_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {

            ViewBookingHistoryDetailForm(e.Row);


        }

        private void ViewBookingHistoryDetailForm(GridViewRowInfo row)
        {
            try
            {

                if (row != null && row is GridViewDataRowInfo)
                {
                    ShowBookingForm(row.Cells["Id"].Value.ToInt(), 2);
                }
                else
                {
                    ENUtils.ShowMessage("Please select a record");
                }
            }
            catch (Exception ex)
            {


            }
        }

        private void ShowBookingForm(long id, int openedFrom)
        {
            // General.ShowBookingForm(id, showOnDialog, "", "", Enums.BOOKING_TYPES.LOCAL);


            try
            {


                frmBooking frm = new frmBooking(openedFrom);
                frm.PickBookingTypeId = Enums.BOOKING_TYPES.WEB;
                if (id != 0)
                {
                    frm.OnDisplayRecord(id);
                }
                frm.ControlBox = true;
                frm.FormBorderStyle = FormBorderStyle.Fixed3D;
                frm.MaximizeBox = false;

                //if (showOnDialog)
                //{
                frm.ShowDialog();
                //}
                //else
                //    frm.Show();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }


        #endregion



        private void chkShowAllocatedJobs_CheckedChanged(object sender, EventArgs e)
        {

            try
            {
                if (grdPreBookings.Columns["DriverId"].FilterDescriptor == null)
                    grdPreBookings.Columns["DriverId"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();

                if (chkShowAllocatedJobs.Checked)
                {
                    //grdPreBookings.EnableSorting = true;



                    grdPreBookings.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNotNull;

                    SortGridAllocatedDriver(optSortPickupDate.ToggleState);

                }
                else
                {



                    //   grdPreBookings.Rows.Where(c => c.Cells["IsConfirmedDriver"].Value.ToBool() == false).ToList().ForEach(c => c.IsVisible = true);
                    grdPreBookings.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.StartsWith;


                    if (grdPreBookings.GroupDescriptors.Count == 0)
                    {

                        grdPreBookings.EnableSorting = false;

                        grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                        grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";

                        (grdPreBookings.Columns["DriverId"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPreBookings.Columns["DriverId"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }

                }

            }
            catch
            {

            }



        }

        private void ChkShowAllJobs_CheckedChanged(object sender, EventArgs e)
        {

            if (ChkShowAllJobs.Checked)
            {
                FilterTodaysbooking(1);
            }
            else
            {
                FilterTodaysbooking(chkShowCashJobs.Checked ? 2 : 3);

            }
        }


        private void FilterTodaysbooking(int filterType)
        {


            if (grdPendingJobs.Columns["Account"].FilterDescriptor == null)
                grdPendingJobs.Columns["Account"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();


            if (filterType == 1)
            {
                grdPendingJobs.Columns["Account"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.Contains;


            }
            else if (filterType == 2)
            {
                grdPendingJobs.Columns["Account"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNull;


            }
            else if (filterType == 3)
            {
                grdPendingJobs.Columns["Account"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNotNull;

            }



        }


        private int selectedduevalue = 0;
        //private void ddlShowDue_SelectedIndexChanging(object sender, Telerik.WinControls.UI.Data.PositionChangingCancelEventArgs e)
        //{

        //    int dueMins = ddlShowDue.Items[e.Position].Value.ToInt();

        //    selectedduevalue = dueMins;


        //    if (grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor == null)
        //    {
        //        grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();

        //    }

        //    if (dueMins == 0 || dueMins==1000)
        //    {
        //        //if (dueMins==1000 || ddlShowDue.SelectedValue.ToInt() == 1000)
        //        //{
        //        //    RefreshTodayBookingData();
        //        //    Thread.Sleep(500);
        //        //}


        //        grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;
        //        grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Value = null;
        //    }
        //    else
        //    {

        //            //if (ddlShowDue.SelectedValue.ToInt() == 1000)
        //            //{
        //            //    RefreshTodayBookingData();
        //            //    Thread.Sleep(500);

        //            //}

        //            grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Value = DateTime.Now.AddMinutes(dueMins);
        //            grdPendingJobs.Columns["PickupDateTemp"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsLessThanOrEqualTo;

        //    }




        //}


        private void ddlShowDue_SelectedIndexChanging(object sender, Telerik.WinControls.UI.Data.PositionChangingCancelEventArgs e)
        {

            try
            {
                int dueMins = ddlShowDue.Items[e.Position].Value.ToInt();

                selectedduevalue = dueMins;


                if (grdPendingJobs.Columns["Lead"].FilterDescriptor == null)
                {
                    grdPendingJobs.Columns["Lead"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();

                }

                if (dueMins == 0 || dueMins == 1000)
                {
                    if (dueMins == 1000 || ddlShowDue.SelectedValue.ToInt() == 1000)
                    {
                        RefreshTodayBookingData();
                        Thread.Sleep(500);
                    }


                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.None;
                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Value = null;
                }
                else
                {

                    if (ddlShowDue.SelectedValue.ToInt() == 1000)
                    {
                        RefreshTodayBookingData();
                        Thread.Sleep(500);

                    }


                    if (dueMins == -1)
                        dueMins = 0;

                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Value = DateTime.Now.AddMinutes(dueMins);
                    grdPendingJobs.Columns["Lead"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsLessThanOrEqualTo;

                }


            }
            catch
            {


            }

        }




        private void chkShowAllocatedTodayJobs_CheckedChanged(object sender, EventArgs e)
        {
            try
            {
                if (grdPendingJobs.Columns["DriverId"].FilterDescriptor == null)
                    grdPendingJobs.Columns["DriverId"].FilterDescriptor = new Telerik.WinControls.Data.FilterDescriptor();

                if (chkShowAllocatedTodayJobs.Checked)
                {
                    //     grdPreBookings.Rows.Where(c => c.Cells["IsConfirmedDriver"].Value.ToBool() == false).ToList().ForEach(c => c.IsVisible = false);


                    //grdPendingJobs.EnableSorting = true;
                    //grdPendingJobs.Columns["Driver"].SortOrder = RadSortOrder.Ascending;
                    //grdPendingJobs.Columns["Driver"].Sort(RadSortOrder.Ascending, true);

                    grdPendingJobs.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.IsNotNull;


                    SortGridAllocatedDriverToday(optSortTodayPickup.ToggleState);


                }
                else
                {
                    //   grdPreBookings.Rows.Where(c => c.Cells["IsConfirmedDriver"].Value.ToBool() == false).ToList().ForEach(c => c.IsVisible = true);
                    grdPendingJobs.Columns["DriverId"].FilterDescriptor.Operator = Telerik.WinControls.Data.FilterOperator.Contains;



                    if (grdPendingJobs.EnableSorting == true)
                    {

                        grdPendingJobs.EnableSorting = false;

                        (grdPendingJobs.Columns["DriverId"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPendingJobs.Columns["DriverId"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }

                    //grdPendingJobs.EnableSorting = false;
                    //grdPendingJobs.Columns["Driver"].SortOrder = RadSortOrder.None;
                    //grdPendingJobs.Columns["Driver"].Sort(RadSortOrder.None, true);
                }
            }
            catch (Exception ex)
            {


            }
        }



        private void optSortPickupDate_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            SortGridAllocatedDriver(args.ToggleState);
        }


        private void SortGridAllocatedDriver(ToggleState toggle)
        {
            try
            {
                if (chkShowAllocatedJobs.Checked)
                {

                    if (toggle == ToggleState.On)
                    {

                        grdPreBookings.EnableSorting = false;

                        grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                        grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";

                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);

                    }
                    else
                    {
                        grdPreBookings.GroupDescriptors.Expression = "";
                        grdPreBookings.EnableSorting = true;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.Ascending;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.Ascending, true);
                    }

                }
                else
                {

                    if (grdPreBookings.GroupDescriptors.Count == 0)
                    {

                        grdPreBookings.EnableSorting = false;

                        grdPreBookings.GroupDescriptors.Expression = "PrePickupDate";
                        grdPreBookings.GroupDescriptors[0].Format = "{1:dddd dd/MM/yyyy}";

                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPreBookings.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }
                }
            }
            catch
            {

            }

        }


        private void SortGridAllocatedDriverToday(ToggleState toggle)
        {
            try
            {
                if (chkShowAllocatedTodayJobs.Checked)
                {

                    if (toggle == ToggleState.On)
                    {

                        grdPendingJobs.EnableSorting = false;

                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);

                    }
                    else
                    {


                        grdPendingJobs.EnableSorting = true;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.Ascending;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.Ascending, true);



                    }
                }
                else
                {
                    if (grdPendingJobs.EnableSorting == true)
                    {

                        grdPendingJobs.EnableSorting = false;

                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).SortOrder = RadSortOrder.None;
                        (grdPendingJobs.Columns["Driver"] as GridViewTextBoxColumn).Sort(RadSortOrder.None, true);
                    }
                }
            }
            catch
            {

            }


        }

        private void optSortTodayPickup_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            SortGridAllocatedDriverToday(optSortTodayPickup.ToggleState);
        }






        void BiddingPriceNotification_Click(object sender, EventArgs e)
        {

            try
            {
                long jobId = 0;

                if (Pg_PendingJobs.Item.IsSelected)
                {
                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();

                }
                else if (Pg_PreBookings.Item.IsSelected)
                {
                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();

                }




                //if (jobId > 0)
                //{

                //    var objBooking = General.GetObject<Booking>(c => c.Id == jobId);

                //    frmBiddingNotifications frmBid = new frmBiddingNotifications(objBooking);
                //    frmBid.StartPosition = FormStartPosition.CenterScreen;
                //    frmBid.ShowDialog();
                //    frmBid.Dispose();


                //}

            }
            catch (Exception ex)
            {
                //    ENUtils.ShowMessage(ex.Message);

            }
        }










        private void SendDriverConfirmationEmail()
        {

            if ((AppVars.listUserRights.Count(c => c.functionId == "EMAIL - PD") > 0))
            {

                new Thread(delegate ()
                {

                    JATEmail.SendDriverConfirmationEmail(General.GetObject<Booking>(c => c.Id == objMaster.PrimaryKeyValue.ToLong()));
                }).Start();

            }
        }

        private void radLabel2_Click(object sender, EventArgs e)
        {

        }




        void grdWebBookingsNew_MouseClick(object sender, MouseEventArgs e)
        {


            //   try
            //   {

            //   //    grdWebBookingsNew.AllowEditRow = true;
            //       grdWebBookingsNew.Columns["Fares"].ReadOnly = false;
            //       grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = false;
            //       grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = false;
            //       if (this.grdWebBookingsNew.BeginEditMode.ToBool())
            //       {
            //           this.grdWebBookingsNew.BeginEdit();
            //       }
            ////       grdWebBookingsNew.AllowEditRow = false;
            //       grdWebBookingsNew.Columns["Fares"].ReadOnly = true;
            //       grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = true;
            //       grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = true;

            //   }
            //   catch (NullReferenceException ex)
            //   {
            //       MessageBox.Show("" + ex);
            //   }
            //   catch (Exception ex)
            //   {
            //       MessageBox.Show("" + ex);
            //   }

        }




        private void grdWebBookingsNew_KeyPress(object sender, KeyPressEventArgs e)
        {

            // try
            // {

            // //    grdWebBookingsNew.AllowEditRow = true;
            //     grdWebBookingsNew.Columns["Fares"].ReadOnly = false;
            //     grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = false;
            //     grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = false;
            //     if (this.grdWebBookingsNew.BeginEditMode.ToBool())
            //     {
            //         this.grdWebBookingsNew.EndEdit();
            //         this.grdWebBookingsNew.Refresh();
            //         this.grdWebBookingsNew.BeginEdit();
            //     }
            ////     grdWebBookingsNew.AllowEditRow = false;
            //     grdWebBookingsNew.Columns["Fares"].ReadOnly = true;
            //     grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = true;
            //     grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = true;

            // }
            // catch (NullReferenceException ex)
            // {
            //     MessageBox.Show("" + ex);
            // }
            // catch (Exception ex)
            // {
            //     MessageBox.Show("" + ex);
            // }

        }


        public void SetOnBreakMode(bool enable, bool refreshOther)
        {




            try
            {

                if (enable)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableOnBreak=1");
                    }

                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableOnBreak=0");


                    }

                }

                AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(v => v.SysPolicyId == 1);




                Thread.Sleep(400);


                if (refreshOther == false)
                {

                    new BroadcasterData().BroadCastToAll("**onbreakmode>>" + enable + ">>" + Environment.MachineName.ToLower());
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }

        }


        public void SetAutoDespatchMode(bool enable, bool refreshFromOther)
        {

            EnableAutoDespatchMode = enable;


            try
            {

                if (enable)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableAutoDespatch=1");
                    }

                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableAutoDespatch=0");


                    }

                }

                AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(v => v.SysPolicyId == 1);


                //if (IsServer)
                //{

                //    GetTripletObject();
                //}


                Thread.Sleep(400);


                if (refreshFromOther == false)
                {
                    General.SendMessageToPDA("**autodespatchmode>>" + enable + ">>" + Environment.MachineName.ToLower());


                }



                try
                {

                    File.AppendAllText("autodespatchlog.txt", DateTime.Now.ToStr() + ":" + "mode -" + EnableAutoDespatchMode.ToStr() + Environment.NewLine);
                }
                catch
                {


                }
            }
            catch (Exception ex)
            {
                //  MessageBox.Show(ex.Message);
                //   IsPerformingAutoDespatchActivity = false;

                try
                {

                    File.AppendAllText("autodespatchlogCatch.txt", DateTime.Now.ToStr() + ":" + "mode -" + EnableAutoDespatchMode.ToStr() + Environment.NewLine);
                }
                catch
                {


                }
            }

        }


        public void SetBiddingMode(bool enable, bool refreshFromOther)
        {

            EnableBiddingMode = enable;


            try
            {

                if (enable)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableBidding=1");
                    }
                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_RunProcedure("update Gen_SysPolicy_Configurations set EnableBidding=0");
                    }

                }

                AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(v => v.SysPolicyId == 1);

                Thread.Sleep(400);


                if (refreshFromOther == false)
                {
                    if (AppVars.listUserRights.Count(c => c.functionId == "ENABLE BIDDING LOGS") > 0)
                        General.SendMessageToPDA("request broadcast=biddingmode>>" + enable + ">>" + Environment.MachineName.ToLower());
                    else
                        new BroadcasterData().BroadCastToAll("**biddingmode>>" + enable + ">>" + Environment.MachineName.ToLower());
                }


            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);

            }

        }



        void AuditReport_Click(object sender, EventArgs e)
        {
            //try
            //{
            //    RadMenuItem item = (RadMenuItem)sender;
            //    GridViewRowInfo row = grdPendingJobs.CurrentRow;

            //    if (row != null && row is GridViewDataRowInfo)
            //    {
            //        int BookingId = row.Cells["Id"].Value.ToInt();

            //        //  Booking_Log obj = General.GetObject<Booking_Log>(c => c.Id == BookingId);


            //        var list = General.GetQueryable<Booking_Log>(c => c.BookingId == BookingId).OrderBy(c => c.UpdateDate).ToList();


            //        if (list != null)
            //        {
            //            if (list.Count > 0)
            //            {

            //                frmBookingAudit frmbookingaudit = new frmBookingAudit(list, row.Cells["Id"].Value.ToStr());
            //                frmbookingaudit.StartPosition = FormStartPosition.CenterScreen;
            //                frmbookingaudit.ShowDialog();
            //                frmbookingaudit.Dispose();
            //            }
            //        }
            //    }


            //}
            //catch (Exception ex)
            //{
            //    ENUtils.ShowMessage(ex.Message);

            //}
        }

        private void VScrollBar_ValueChanged(object sender, EventArgs e)
        {
            try
            {
                grdWebBookingsNew.AllowEditRow = false;
                grdWebBookingsNew.Columns["Fares"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPTIME"].ReadOnly = true;
                grdWebBookingsNew.Columns["PICKUPDATETIME"].ReadOnly = true;

                if (this.grdWebBookingsNew.IsInEditMode)
                {
                    this.grdWebBookingsNew.EndEdit();
                    this.grdWebBookingsNew.Refresh();
                    this.grdWebBookingsNew.BeginEdit();
                    this.grdWebBookingsNew.EndUpdate();
                }
            }
            catch (NullReferenceException ex)
            {
                MessageBox.Show("" + ex);
            }
            catch (Exception ex)
            {
                MessageBox.Show("" + ex);
            }

        }


        private void btnAirportArrivals_Click(object sender, EventArgs e)
        {
            ShowAirportArrivals();
        }


        private void ShowAirportArrivals()
        {

            try
            {
                //frmFlightDetails fm = new frmFlightDetails();
                //  fm.Show();
                string connString = Application.StartupPath + "\\TreasureFlightDetails.exe";
                Process proc = Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureFlightDetails"));

                if (proc != null)
                {
                    proc.Kill();
                    proc.CloseMainWindow();
                    proc.Close();
                }


                if (File.Exists(connString))
                {

                    string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");
                    //  string arg = conn;
                    Process.Start(connString, conn);
                }
                else
                {

                    MessageBox.Show("Process not found");
                }
            }
            catch (Exception ex)
            {


            }
        }



        private void btnPrintSelected_Click(object sender, EventArgs e)
        {
            PrintPreBooking();
        }

        private void PrintPreBooking()
        {
            try
            {
                UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);

                foreach (var item in grdPreBookings.Rows)
                {
                    if (item.Cells["Check"].Value.ToBool() == true)
                    {

                        long Id = item.Cells["Id"].Value.ToLong();
                        if (Id > 0)
                        {
                            var list = General.GetQueryable<Vu_BookingDetail>(c => c.Id == Id || c.MasterJobId == Id).ToList();
                            rptfrmJobDetails frm = null;
                            rptfrmJobDetails2 frm2 = null;
                            rptfrmJobDetails3 frm3 = null;
                            rptfrmJobDetails4 frm4 = null;
                            ReportPrintDocument rpt = null;
                            if (objReport != null)
                            {
                                switch (objReport.TemplateValue)
                                {
                                    case "rptfrmJobDetails":
                                        frm = new rptfrmJobDetails();
                                        frm.DataSource = list;
                                        frm.GenerateReport();
                                        rpt = new ReportPrintDocument(frm.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;


                                    case "rptfrmJobDetails2":
                                        frm2 = new rptfrmJobDetails2();
                                        frm2.DataSource = list;
                                        frm2.GenerateReport();
                                        rpt = new ReportPrintDocument(frm2.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;
                                    case "rptfrmJobDetails3":
                                        frm3 = new rptfrmJobDetails3();
                                        frm3.DataSource = list;
                                        frm3.GenerateReport();
                                        rpt = new ReportPrintDocument(frm3.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;


                                    case "rptfrmJobDetails4":
                                        frm4 = new rptfrmJobDetails4();
                                        frm4.DataSource = list;
                                        frm4.GenerateReport();
                                        rpt = new ReportPrintDocument(frm4.reportViewer1.LocalReport);
                                        rpt.Print();
                                        rpt.Dispose();
                                        break;

                                }
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }


        public void ShowCallRingingAlert(RadDesktopAlert aa, string caption, string content)
        {
            RadDesktopAlert rdAlert = new Telerik.WinControls.UI.RadDesktopAlert();




            rdAlert.FixedSize = new Size(150, 60);
            rdAlert.AutoCloseDelay = 40;
            rdAlert.Popup.Tag = content;
            rdAlert.FadeAnimationType = FadeAnimationType.None;
            rdAlert.Popup.AlertElement.Opacity = 100;
            rdAlert.ScreenPosition = AlertScreenPosition.TopLeft;

            rdAlert.Popup.AlertElement.BackColor = Color.Red;
            rdAlert.Popup.AlertElement.NumberOfColors = 1;
            rdAlert.ButtonItems.Clear();

            rdAlert.ShowOptionsButton = false;
            rdAlert.ShowPinButton = false;
            rdAlert.Popup.BackColor = Color.Yellow;


            rdAlert.CaptionText = "<html> <b><span style=font-size:small><color=White>" + caption + "</span></b></html>"; ;
            rdAlert.ContentText = "<html> <b><span style=font-size:medium><color=White>" + content + "</span></b></html>";

            rdAlert.Show();


        }


        public void ReceivedText(string senderName, string message)
        {

            try
            {
                MethodInvoker mi = new MethodInvoker(delegate ()
                {
                    CreateAndShowCustomerMsgAlert("Message Received : " + senderName, message, null, null, false, null, "", "");
                });
                this.Invoke(mi);




                if (AppVars.objPolicyConfiguration.SMSNotificationSound.ToBool())
                {

                    PlaySoundNotification("Message1.wav", false);
                }
            }
            catch
            {

            }

        }

        public void UpdatePreBookingStatusInGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdatePreBookingStatusInGrid), message, null);

                }
                else
                {
                    try
                    {

                        string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.RemoveEmptyEntries);


                        long jobId = val[1].ToLong();
                        int driverId = val[2].ToInt();
                        int status = val[3].ToInt();
                        string HasPDA = val[4].ToStr();




                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {

                            row.Cells["Driver"].Value = "" + " - " + "Pending Start";
                            row.Cells["Status"].Value = "Pending Start";
                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.PENDING_START;
                            row.Cells["StatusColor"].Value = "-3212322";
                            row.Cells["HasNotes"].Value = 0;
                        }
                        else
                        {
                            RefreshRequiredData();

                        }





                    }
                    catch
                    {
                        RefreshRequiredData();

                    }


                }
            }
            catch
            {


            }

        }




        public void UpdateBookingStatusInGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateBookingStatusInGrid), message, null);

                }
                else
                {
                    try
                    {

                        string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.RemoveEmptyEntries);


                        long jobId = val[1].ToLong();
                        string driverNo = val[2].ToStr();
                        string status = val[3].ToStr();
                        string HasPDA = val[4].ToStr();




                        if (HasPDA == "pda")
                        {



                            var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                            if (row != null)
                            {


                                row.Cells["Driver"].Value = driverNo + " - " + "Pending Accept";
                                row.Cells["Status"].Value = "Pending Accept";
                                row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.PENDING;
                                row.Cells["StatusColor"].Value = "-3212322";
                                row.Cells["HasNotes"].Value = 0;




                                if (val.Count() > 5)
                                    row.Cells["VehicleID"].Value = val[5].ToStr();

                                if (message.ToStr().Contains("||"))
                                {
                                    val = message.Split(new string[] { "||" }, StringSplitOptions.RemoveEmptyEntries);

                                    foreach (var item in val.Skip(1))
                                    {
                                        jobId = item[1].ToLong();
                                        driverNo = item[2].ToStr();
                                        status = item[3].ToStr();
                                        HasPDA = item[4].ToStr();


                                        row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                                        if (row != null)
                                        {


                                            row.Cells["Driver"].Value = driverNo + " - " + "Pending Accept";
                                            row.Cells["Status"].Value = "Pending Accept";
                                            row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.PENDING;
                                            row.Cells["StatusColor"].Value = "-3212322";
                                            row.Cells["HasNotes"].Value = 0;
                                        }


                                    }

                                }


                            }
                            else
                            {
                                RefreshAllActiveData();

                            }



                        }
                        else
                        {
                            RefreshAllActiveData();

                        }


                    }
                    catch
                    {
                        RefreshActiveData();

                    }


                }
            }
            catch
            {


            }

        }



        public void UpdateBookingStatus(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateBookingStatus), message, null);

                }
                else
                {

                    string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.None);


                    string jobIds = val[1].ToStr();
                    string driverId = val[2].ToStr();
                    string driverNo = val[3].ToStr();
                    int status = val[4].ToInt();

                    string HasPDA = val[5].ToStr();
                    try
                    {


                        if (HasPDA == "pda")
                        {
                            int gridType = 0;
                            foreach (var item in jobIds.Split(','))
                            {
                                var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == item.ToLong());
                                gridType = 1;

                                if (row == null)
                                {
                                    row = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == item.ToLong());
                                    gridType = 2;

                                }

                                //if (row == null)
                                //{
                                //    row = grdAllJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == item.ToLong());
                                //    gridType = 3;

                                //}

                                if (row != null)
                                {
                                    //if (gridType == 1)
                                    //{
                                    //    grdPendingJobs.BeginUpdate();
                                    //}
                                    //else if (gridType == 2)
                                    //{
                                    //    grdPreBookings.BeginUpdate();
                                    //}
                                    //else if (gridType == 3)
                                    //{
                                    //    grdAllJobs.BeginUpdate();
                                    //}

                                    if (status == Enums.BOOKINGSTATUS.PENDING_START)
                                    {


                                        row.Cells["Driver"].Value = driverNo + " - " + "Pending Start";
                                        row.Cells["Status"].Value = "Pending Start";
                                        row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.PENDING_START;
                                        row.Cells["StatusColor"].Value = "-32640";



                                    }
                                    else if (status == Enums.BOOKINGSTATUS.WAITING)
                                    {

                                        row.Cells["Driver"].Value = "";
                                        row.Cells["Status"].Value = "Waiting";
                                        row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.WAITING;
                                        row.Cells["StatusColor"].Value = "-1";


                                    }

                                    //if (gridType == 1)
                                    //{
                                    //    grdPendingJobs.EndUpdate();
                                    //}
                                    //else if (gridType == 2)
                                    //{
                                    //    grdPreBookings.EndUpdate();
                                    //}

                                    //    grdPreBookings.CurrentRow = null;
                                    //    grdPreBookings.CurrentRow = row;


                                }
                                else
                                {
                                    if (status == Enums.BOOKINGSTATUS.PENDING_START || status == Enums.BOOKINGSTATUS.WAITING)
                                    {

                                        RefreshTodayAndPreData();
                                        break;

                                    }
                                }

                            }
                        }





                        //  AddWriteLog("UpdateBookingStatus");

                    }
                    catch
                    {
                        if (status == Enums.BOOKINGSTATUS.PENDING_START)
                        {

                            RefreshTodayAndPreData();


                        }

                    }


                }
            }
            catch
            {


            }

        }


        public void UpdateRefreshQuotationGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateRefreshQuotationGrid), message, null);

                }
                else
                {
                    try
                    {
                        if (AppVars.objPolicyConfiguration.EnableQuotation.ToBool())
                        {

                            if (Pg_Quotations.Item.IsSelected)
                            {

                                QuotationsRefreshRequired = false;
                                PopulateQuotationsGrid();




                            }
                            else
                                QuotationsRefreshRequired = true;
                        }




                    }
                    catch
                    {


                    }


                }
            }
            catch
            {


            }

        }



        public void UpdateManualLoginDespatchedBooking(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateManualLoginDespatchedBooking), message, null);

                }
                else
                {
                    try
                    {

                        string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.RemoveEmptyEntries);


                        long jobId = val[1].ToLong();
                        string driverNo = val[2].ToStr();





                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {

                            row.Delete();
                        }


                        RecentJobsRefreshRequired = true;
                        RefreshDashBoardDrivers();
                        RecentJobsRefreshRequired = false;





                    }
                    catch
                    {
                        RefreshActiveData();

                    }


                }
            }
            catch
            {


            }

        }

        public void UpdateHoldAndReleaseBookingInGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateHoldAndReleaseBookingInGrid), message, null);

                }
                else
                {
                    try
                    {

                        string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.RemoveEmptyEntries);


                        long jobId = val[1].ToLong();
                        string action = val[2].ToStr();





                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {
                            if (action == "hold")
                            {

                                row.Cells["IsBidding"].Value = false;
                                row.Cells["IsAutoDespatch"].Value = false;

                                if (row.Cells["Driver"].Value.ToStr() != "" && row.Cells["Driver"].Value.ToStr().Contains("-"))
                                {
                                    try
                                    {
                                        row.Cells["Driver"].Value = row.Cells["Driver"].Value.ToStr().Substring(0, row.Cells["Driver"].Value.ToStr().IndexOf("-")).Trim() + " - " + "Waiting";
                                    }
                                    catch
                                    {

                                    }
                                }

                                row.Cells["Status"].Value = "Waiting";
                                row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.WAITING;
                                row.Cells["StatusColor"].Value = "-1";
                            }
                            else if (action == "release")
                            {
                                row.Cells["IsBidding"].Value = true;
                                row.Cells["IsAutoDespatch"].Value = true;

                            }




                        }
                        else
                        {
                            RefreshActiveData();

                        }

                    }
                    catch
                    {
                        RefreshActiveData();

                    }
                }
            }
            catch
            {


            }

        }



        public void UpdateHoldAndReleasePreBookingInGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateHoldAndReleasePreBookingInGrid), message, null);

                }
                else
                {
                    try
                    {

                        string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.RemoveEmptyEntries);


                        long jobId = val[1].ToLong();
                        string action = val[2].ToStr();





                        var row = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {
                            if (action == "hold")
                            {

                                row.Cells["IsBidding"].Value = false;
                                row.Cells["IsAutoDespatch"].Value = false;

                                if (row.Cells["Driver"].Value.ToStr() != "" && row.Cells["Driver"].Value.ToStr().Contains("-"))
                                {
                                    try
                                    {
                                        row.Cells["Driver"].Value = row.Cells["Driver"].Value.ToStr().Substring(0, row.Cells["Driver"].Value.ToStr().IndexOf("-")).Trim() + " - " + "Waiting";
                                    }
                                    catch
                                    {

                                    }
                                }

                                row.Cells["Status"].Value = "Waiting";
                                row.Cells["StatusId"].Value = Enums.BOOKINGSTATUS.WAITING;
                                row.Cells["StatusColor"].Value = "-1";
                            }
                            else if (action == "release")
                            {
                                row.Cells["IsBidding"].Value = true;
                                row.Cells["IsAutoDespatch"].Value = true;

                            }

                        }
                        else
                        {
                            RefreshTodayAndPreData();

                        }

                    }
                    catch
                    {
                        RefreshTodayAndPreData();

                    }
                }
            }
            catch
            {


            }

        }


        public void UpdateAllocatedBookingInGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdateAllocatedBookingInGrid), message, null);

                }
                else
                {
                    try
                    {

                        string[] val = message.Split(new string[] { ">>" }, StringSplitOptions.RemoveEmptyEntries);


                        long jobId = val[2].ToLong();
                        string driverNo = val[3].ToStr();
                        string driverId = val[4].ToStr();
                        string IsConfirmed = val[5].ToStr();


                        if (driverId != "0")
                        {

                            var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                            if (row != null)
                            {

                                row.Cells["DriverId"].Value = driverId.ToLong();
                                row.Cells["Driver"].Value = driverNo + " - Waiting";
                                row.Cells["IsConfirmedDriver"].Value = IsConfirmed.ToBool();

                                if (grdPendingJobs.Columns["VehicleID"].IsVisible)
                                {
                                    try
                                    {
                                        row.Cells["VehicleID"].Value = val[6].ToStr();
                                    }
                                    catch
                                    {

                                    }
                                }

                            }
                            else
                            {
                                RefreshActiveData();

                            }

                            //    AddWriteLog("UpdateAllocatedBookingInGrid");

                        }
                        else
                        {
                            RefreshActiveData();

                        }


                    }
                    catch
                    {
                        RefreshActiveData();

                    }


                }
            }
            catch
            {


            }

        }
        public void UpdatePriorityInGrid(string message, string obj)
        {
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIParameterizedDelegate(UpdatePriorityInGrid), message, obj);

                }
                else
                {
                    try
                    {

                        long jobId = obj.ToLong();



                        var row = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId);

                        if (row != null)
                        {

                            row.Cells["MilesFromBase"].Value = message.ToInt();


                        }


                    }
                    catch
                    {


                    }
                }
            }
            catch
            {


            }

        }
        frmAuthorizeAutoDespAllocDrvs frmAlloc = null;
        //public void ShowAuthAllocDrv(ref string jobIds)
        //{

        //    if (chkShowAuthorization.Checked)
        //    {

        //        if (frmAlloc != null && frmAlloc.IsDisposed == false)
        //        {
        //            // frmAlloc.jobs = jobIds;
        //            frmAlloc.newjobs = jobIds;
        //            frmAlloc.LoadData();
        //        }
        //        else
        //        {


        //            if (jobIds.ToStr().Trim().Length > 0)
        //            {

        //                frmAlloc = new frmAuthorizeAutoDespAllocDrvs(jobIds);
        //                frmAlloc.StartPosition = FormStartPosition.CenterScreen;
        //                frmAlloc.Show();
        //            }
        //        }
        //    }
        //}


        public void ShowAuthAllocDrv(ref string jobIds)
        {

            if (chkShowAuthorization.Checked)
            {
                bool canShow = true;

                if (frmAlloc != null && frmAlloc.IsDisposed == false)
                {
                    // frmAlloc.jobs = jobIds;
                    frmAlloc.newjobs = jobIds;

                    frmAlloc.LoadData();
                }
                else
                {


                    if (jobIds.ToStr().Trim().Length > 0)
                    {

                        if (jobIds.Contains(",") && AppVars.denyAllocatedBookingIds.ToStr().Length > 0)
                        {

                            string[] arrCnt = jobIds.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                            int cntExist = 0;
                            foreach (var item in arrCnt)
                            {

                                if (AppVars.denyAllocatedBookingIds.ToStr().Contains("," + item.ToStr() + ",") == true)
                                {
                                    cntExist++;
                                }
                            }


                            if (cntExist == arrCnt.Count())
                            {
                                canShow = false;

                            }

                        }
                        else if (AppVars.denyAllocatedBookingIds.ToStr().Trim().Length > 0)
                        {
                            if (AppVars.denyAllocatedBookingIds.ToStr().Trim().Contains("," + jobIds.ToStr() + ",") == true)
                            {
                                canShow = false;
                            }
                        }

                        if (canShow)
                        {

                            frmAlloc = new frmAuthorizeAutoDespAllocDrvs(jobIds);

                            frmAlloc.StartPosition = FormStartPosition.CenterScreen;
                            frmAlloc.Show();
                        }
                    }
                }
            }
        }

        private string GetTimeDifferenceInHourAndMin(DateTime? datetimetoSubtract)
        {
            if (datetimetoSubtract == null)
                return "";

            string waitSince = string.Empty;
            try
            {



                waitSince = string.Format("{0:HH:mm:ss}", DateTime.Now.Subtract(datetimetoSubtract.Value));
                waitSince = waitSince.Remove(waitSince.LastIndexOf(":")).Trim() + " min(s)";


                if (waitSince.StartsWith("00"))
                    waitSince = waitSince.Remove(0, waitSince.IndexOf(":") + 1).Trim();


                else if (waitSince.StartsWith("0"))
                    waitSince = waitSince.Remove(0, 1);

                if (waitSince.Contains(":"))
                    waitSince = waitSince.Replace(":", " hour(s) ").Trim();

            }
            catch
            {


            }

            return waitSince;

        }



        //private string DistanceMatrixKey = string.Empty;
        //private string DistanceMatrixServerKey = string.Empty;
        //private List<clsDriverRadius> listofDrvRadius = new List<clsDriverRadius>();
        public class clsDriverRadius
        {
            public double latitude1;
            public double latitude2;
            public double longitude1;
            public double longitude2;
            public double Miles;

        }








        #region ONLINE BOOKING WORKER


        private BackgroundWorker bg_OnlineBookingWorker = null;
        private void InitializeOnlineBookingWorker(string action)
        {

            if (bg_OnlineBookingWorker == null)
            {

                bg_OnlineBookingWorker = new BackgroundWorker();
                bg_OnlineBookingWorker.DoWork += new DoWorkEventHandler(bg_OnlineBookingWorker_DoWork);
                bg_OnlineBookingWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(bg_OnlineBookingWorker_RunWorkerCompleted);
            }


            if (bg_OnlineBookingWorker != null && bg_OnlineBookingWorker.IsBusy == false)
                bg_OnlineBookingWorker.RunWorkerAsync(action);





        }



        public class clsWebBooker
        {
            public string action;
            public List<ClsOnlineBooking> listofBookings;
            public IList listofRejectedBookings;


        }

        void bg_OnlineBookingWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {
                string arg = e.Argument.ToStr().Trim();

                if (arg.Length == 0)
                    e.Cancel = true;

                if (arg == "accept" || arg == "pending accept")
                {



                    e.Result = new clsWebBooker { action = arg, listofBookings = GetWebBookingList(null) };

                }
                else if (arg == "decline")
                {

                    //DateTime fromdate = DateTime.Now.AddDays(-60).ToDate();

                    //var data1 = General.GetQueryable<Booking>(c => c.PickupDateTime.Value.Date >= fromdate

                    //   && (c.BookingTypeId == Enums.BOOKING_TYPES.WEB || c.BookingTypeId == Enums.BOOKING_TYPES.ONLINE)
                    //   && (c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING || c.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || c.BookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)

                    //  )

                    // .OrderByDescending(c => c.PickupDateTime);
                    //var list = (from a in data1


                    //            select new
                    //            {
                    //                Id = a.Id,
                    //                RefNumber = a.BookingNo,
                    //                BookingDate = a.BookingDate,
                    //                PickupDate = a.PickupDateTime,
                    //                Passenger = a.CustomerName,
                    //                From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                    //                To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                    //                Fare = a.FareRate,
                    //                Account = a.Gen_Company.CompanyName,
                    //                Driver = a.Fleet_Driver.DriverNo,
                    //                DriverId = a.DriverId,
                    //                Vehicle = a.Fleet_VehicleType.VehicleType,
                    //                Status = a.BookingStatus.StatusName,
                    //                StatusColor = a.BookingStatus.BackgroundColor,
                    //                BookingTypeId = a.BookingTypeId,
                    //                VehicleBgColor = a.Fleet_VehicleType.BackgroundColor,
                    //                VehicleTextColor = a.Fleet_VehicleType.TextColor,
                    //                BackgroundColor1 = a.Gen_Company.BackgroundColor,
                    //                TextColor1 = a.Gen_Company.TextColor,
                    //                MobileNo = a.CustomerMobileNo,
                    //                FromLocTypeId = a.FromLocTypeId,
                    //                ToLocTypeId = a.ToLocTypeId,

                    //            }).ToList();


                    //List<Booking> listofAcceptedBookings = General.GetQueryable<Booking>(a => (a.BookingStatusId == 18 || a.BookingStatusId == 19)).ToList();


                    e.Result = new clsWebBooker { action = arg, listofBookings = GetWebBookingList(null), listofRejectedBookings = null };

                }
            }
            catch
            {


            }
        }


        void bg_OnlineBookingWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                if (e.Cancelled == false && e.Result != null)
                {
                    clsWebBooker objWebBooker = (clsWebBooker)e.Result;


                    if (objWebBooker != null)
                    {

                        string action = objWebBooker.action;

                        if (action == "accept")
                        {

                            var list = objWebBooker.listofBookings;
                            PopulateNewWebBookings(list);
                            ///    PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());
                        }
                        else if (action == "decline")
                        {

                            var list = objWebBooker.listofBookings;
                            PopulateNewWebBookings(list);
                            //     PopulatePendingWebBookings(list.Where(c => c.BookingStatusId == 18).ToList());

                            //     PopulateDeclinedWebBookingsGrid(objWebBooker.listofRejectedBookings);

                        }
                    }
                }
            }
            catch
            {


            }

        }




        private string DefaultWebBookingTemplate = string.Empty;
        private string webBookingTemplate = string.Empty;

        void grdWebBookings_CommandCellClick(object sender, EventArgs e)
        {
            try
            {
                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                string name = gridCell.ColumnInfo.Name.ToLower();

                GridViewRowInfo row = gridCell.GridControl.CurrentRow;

                string gridName = gridCell.GridControl.Name;
                if (row is GridViewDataRowInfo)
                {
                    row.Tag = gridName;
                    long jobId = row.Cells["Id"].Value.ToLong();
                    DateTime? pickupDate = row.Cells["PICKUPDATETIME"].Value.ToDateorNull();
                    DateTime? pickupTime = row.Cells["PICKUPTIME"].Value.ToDateTimeorNull();


                    if (pickupDate == null || pickupTime == null)
                    {
                        ENUtils.ShowMessage("Please Enter Pickup Date/Time");
                        return;

                    }



                    string refNo = row.Cells["REFNO"].Value.ToStr();

                    if (name == "pendingaccept")
                    {

                        frmCustomMessageBox frmAsk = new frmCustomMessageBox(refNo, "pendingaccept");
                        if (frmAsk.ShowDialog() == System.Windows.Forms.DialogResult.Yes)
                        {
                            new TaxiDataContext().stp_UpdateOnlineJobStatus(jobId, Enums.BOOKINGSTATUS.PENDING_WEBBOOKING, "New Web-Booking", "Pending Accept", AppVars.LoginObj.UserName.ToStr());

                            // need to uncomment
                            // PopulatePendingWebBookings(GetWebBookingList(a => a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_WEBBOOKING));
                            AddWebBookingRow(grdWebBookingsPending, row);

                            row.Delete();

                            AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);
                            AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);


                            ResetWebBookingBlinking();



                            new BroadcasterData().BroadCastToAll("**pending accept web>>" + Environment.MachineName);


                            txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                            txtPendingWebBookingTotal.Text = grdWebBookingsPending.Rows.Count.ToStr();
                        }

                    }

                    else if (name == "accept")
                    {
                        if (worker.IsBusy == true)
                            return;



                        frmCustomMessageBox frmAsk = new frmCustomMessageBox(refNo, "accept");
                        if (frmAsk.ShowDialog() == System.Windows.Forms.DialogResult.Yes)
                        {

                            try
                            {
                                EmailWebBookingCustomer(row, name);

                                row.Delete();

                            }
                            catch (Exception ex)
                            {

                            }


                            AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);
                            //   AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);

                            if (pickupDate.ToDate() <= DateTime.Now.Date)
                            {
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIDelegate(RefreshTodayBookingData));
                                }
                                else
                                {
                                    RefreshTodayBookingData();
                                }
                            }
                            else
                            {
                                // need invoke required here
                                if (this.InvokeRequired)
                                {
                                    this.BeginInvoke(new UIDelegate(RefreshTodayAndPreData));

                                }
                                else
                                {
                                    RefreshTodayAndPreData();

                                }
                            }


                            General.SendMessageToPDA("**close authorize web>>" + Environment.MachineName + ">>" + name);

                            // RefreshTodayAndPreData();

                            //    new BroadcasterData().BroadCastToAll("**close authorize web>>" + Environment.MachineName + ">>" + name);

                            ResetWebBookingBlinking();

                            //     row.Delete();

                            txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                            //txtPendingWebBookingTotal.Text = grdWebBookingsPending.Rows.Count.ToStr();

                        }
                    }
                    else if (name == "decline")
                    {
                        frmCustomMessageBox frmAsk = new frmCustomMessageBox(refNo, "decline");
                        if (frmAsk.ShowDialog() == System.Windows.Forms.DialogResult.Yes)
                        {
                            try
                            {
                                EmailWebBookingCustomer(row, name, frmAsk.cancelReason);
                            }
                            catch
                            {

                            }

                            //  AddWebBookingRow(grdRejectedWebBookings, row);

                            row.Delete();

                            AddWebBookingNotify(grdWebBookingsNew, Pg_NewWebBookings);
                            //   AddWebBookingNotify(grdWebBookingsPending, Pg_PendingWebBookings);

                            //   new BroadcasterData().BroadCastToAll("**close authorize web>>" + Environment.MachineName + ">>" + name);
                            General.SendMessageToPDA("**close authorize web>>" + Environment.MachineName + ">>" + name);


                            ResetWebBookingBlinking();

                            //    PopulateDeclinedWebBookings();

                            txtNewWebBookingTotal.Text = grdWebBookingsNew.Rows.Count.ToStr();
                            //     txtPendingWebBookingTotal.Text = grdWebBookingsPending.Rows.Count.ToStr();
                            // txtDeclinedWebBookingTotal.Text = grdRejectedWebBookings.Rows.Count.ToStr();
                        }
                    }
                }
            }

            catch (Exception ex)
            {


            }

        }



        private void AddWebBookingRow(RadGridView grid, GridViewRowInfo row)
        {
            try
            {
                GridViewRowInfo newRow = grid.Rows.AddNew();


                newRow.Cells["ID"].Value = row.Cells["ID"].Value;
                newRow.Cells["REFNO"].Value = row.Cells["REFNO"].Value;

                newRow.Cells["BOOKEDON"].Value = row.Cells["BOOKEDON"].Value;
                newRow.Cells["PASSENGER"].Value = row.Cells["PASSENGER"].Value;

                newRow.Cells["BOOKINGTYPEID"].Value = row.Cells["BOOKINGTYPEID"].Value;
                newRow.Cells["DEFAULTCLIENTID"].Value = row.Cells["DEFAULTCLIENTID"].Value;

                newRow.Cells["VEHICLETYPE"].Value = row.Cells["VEHICLETYPE"].Value;
                newRow.Cells["CONTACTNO"].Value = row.Cells["CONTACTNO"].Value;

                newRow.Cells["EMAIL"].Value = row.Cells["EMAIL"].Value;

                newRow.Cells["PICKUPDATETIME"].Value = row.Cells["PICKUPDATETIME"].Value;
                newRow.Cells["PICKUPTIME"].Value = row.Cells["PICKUPTIME"].Value;
                newRow.Cells["OLDPICKUPDATETIME"].Value = row.Cells["OLDPICKUPDATETIME"].Value;

                newRow.Cells["FlightNo"].Value = row.Cells["FlightNo"].Value;




                newRow.Cells["FROMADDRESS"].Value = row.Cells["FROMADDRESS"].Value;
                newRow.Cells["TOADDRESS"].Value = row.Cells["TOADDRESS"].Value;

                newRow.Cells["FARES"].Value = row.Cells["FARES"].Value;
                newRow.Cells["OLDFARES"].Value = row.Cells["OLDFARES"].Value;

                newRow.Cells["VIA"].Value = row.Cells["VIA"].Value;

                newRow.Cells["PAYMENTTYPE"].Value = row.Cells["PAYMENTTYPE"].Value;
                newRow.Cells["Notes"].Value = row.Cells["Notes"].Value;


            }
            catch (Exception ex)
            {



            }



        }


        private void AddWebBookingLog(long bookingId, string before, string after)
        {
            try
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.Booking_Logs.InsertOnSubmit(new Booking_Log { ActionType = "webbooking", BeforeUpdate = before, AfterUpdate = after, BookingId = bookingId, UpdateDate = DateTime.Now });
                    db.SubmitChanges();
                }
            }
            catch
            {


            }

        }





        private void EmailWebBookingCustomer(GridViewRowInfo row, string action, string cancelreason = "")
        {

            string gridName = row.Tag.ToStr();

            decimal fares = row.Cells["Fares"].Value.ToDecimal();
            decimal oldFare = row.Cells["OldFares"].Value.ToDecimal();
            string waitingTime = row.Cells["WaitingTime"].Value.ToStr().Trim();



            DateTime? pickupDate = row.Cells["PICKUPDATETIME"].Value.ToDate();
            TimeSpan pickupTime = row.Cells["PICKUPTIME"].Value.ToDateTime().TimeOfDay;
            DateTime? pickupDateTime = pickupDate + pickupTime;


            string refNo = row.Cells["REFNO"].Value.ToStr().Trim();



            int bookingTypeId = row.Cells["BOOKINGTYPEID"].Value.ToInt();


            if (action != "decline")
                action = "confirmed";



            action = action.ToProperCase();

            long jobId = row.Cells["ID"].Value.ToLong();


            if (row.Cells["PICKUPDATETIME"].Value.ToDateTime() != row.Cells["OLDPICKUPDATETIME"].Value.ToDateTime()
                || row.Cells["PICKUPTIME"].Value.ToDateTime() != row.Cells["PICKUPTIME"].Value.ToDateTime()
                || fares != oldFare)
            {



                BookingBO objBO = new BookingBO();
                objBO.GetByPrimaryKey(jobId);

                if (objBO.Current != null && objBO.PrimaryKeyValue != null)
                {

                    objBO.Current.FareRate = fares;
                    objBO.Current.CustomerPrice = fares;

                    if (objBO.Current.CompanyId != null)
                        objBO.Current.CompanyPrice = fares;


                    objBO.Current.BookingStatusId = action.ToLower() == "confirmed" ? Enums.BOOKINGSTATUS.WAITING : Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING;


                    if (objBO.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING)
                    {
                        objBO.Current.Booking_Logs.Add(new Booking_Log
                        {
                            BookingId = objBO.Current.Id,
                            UpdateDate = DateTime.Now,
                            BeforeUpdate = (gridName == "grdWebBookingsNew" ? "New Web-Booking" : "Pending Accept")
                            ,
                            AfterUpdate = "Accept",
                            User = AppVars.LoginObj.UserName.ToStr(),
                            ActionType = "webbooking"
                        });




                    }
                    else
                    {
                        objBO.Current.Booking_Logs.Add(new Booking_Log
                        {
                            BookingId = objBO.Current.Id,
                            UpdateDate = DateTime.Now,
                            BeforeUpdate = (gridName == "grdWebBookingsNew" ? "New Web-Booking" : "Pending Accept"),
                            AfterUpdate = "Declined",
                            User = AppVars.LoginObj.UserName.ToStr(),
                            ActionType = "webbooking"
                        });


                    }


                    objBO.Current.PickupDateTime = pickupDateTime;

                    objBO.CheckDataValidation = false;
                    objBO.CheckCustomerValidation = false;

                    objBO.Save();
                }
            }
            else
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    if (action.ToLower() == "confirmed")
                    {



                        db.stp_UpdateOnlineJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING, "OnlineBooking Accept", "Accept", AppVars.LoginObj.UserName.ToStr());


                        // new TaxiDataContext().stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.WAITING);
                    }
                    else
                    {


                        db.stp_UpdateOnlineJobStatus(jobId, Enums.BOOKINGSTATUS.CANCELLED, "OnlineBooking Declined:" + cancelreason, "Declined", AppVars.LoginObj.UserName.ToStr());


                        //    new TaxiDataContext().stp_UpdateJobStatus(jobId, Enums.BOOKINGSTATUS.REJECTED_WEBBOOKING);

                    }
                }
            }



            int defaultclientId = row.Cells["DEFAULTCLIENTID"].Value.ToInt();



            if (oldFare != fares || !string.IsNullOrEmpty(waitingTime))
            {
                action = "Waiting";
            }


            if (!string.IsNullOrEmpty(row.Cells["EMAIL"].Value.ToStr()))
            {
                string subject = "";
                string msgBody = string.Empty;


                Booking objBooking = General.GetObject<Booking>(c => c.Id == jobId);

                string email = row.Cells["EMAIL"].Value.ToStr().Trim();
                string customerName = row.Cells["PASSENGER"].Value.ToStr();

                if (action.ToLower() == "decline")
                {
                    if (objBooking.Gen_SubCompany.DefaultIfEmpty().DisableDeclineEmail.ToBool() == false)
                    {


                        string via = row.Cells["VIA"].Value.ToStr();

                        string msg = action.ToLower() == "decline" ? "DECLINED" : "CONFIRMATION";


                        subject = "TAXI " + msg + " - " + string.Format("{0:dd MMMM yyyy}", pickupDate) + ", TIME " + string.Format("{0:HH.mm}", pickupDateTime) + " - BOOKING ID " + refNo;


                        string newLine = "<br>";


                        if (action.ToLower() == "decline")
                            msgBody = "<html><body><div>We have declined your online booking request." + newLine;
                        else
                            msgBody = "<html><body><div>Your online booking request is confirmed." + newLine;


                        msgBody += newLine + AppVars.objPolicyConfiguration.MobileBookingEmailVerification.ToStr().Trim();


                        if (msgBody.Contains("<BookingNo>"))
                        {
                            msgBody = msgBody.Replace("<BookingNo>", refNo);

                        }



                        if (msgBody.Contains("<FromDoorNo>"))
                        {
                            msgBody = msgBody.Replace("<FromDoorNo>", row.Cells["FlightNo"].Value.ToStr().Trim());

                        }


                        if (msgBody.Contains("<PickupPoint>"))
                        {
                            msgBody = msgBody.Replace("<PickupPoint>", row.Cells["FROMADDRESS"].Value.ToStr().Trim());

                        }



                        if (!string.IsNullOrEmpty(via) && msgBody.Contains("<ViaPoint>"))
                        {
                            via = "Via : " + newLine + via.Replace("\r\n", "<br>");
                            msgBody = msgBody.Replace("<ViaPoint>", via);

                        }


                        if (msgBody.Contains("<Fares>"))
                        {
                            msgBody = msgBody.Replace("<Fares>", row.Cells["Fares"].Value.ToStr());

                        }



                        if (msgBody.Contains("<Passenger>"))
                        {
                            msgBody = msgBody.Replace("<Passenger>", row.Cells["Passenger"].Value.ToStr());

                        }



                        if (msgBody.Contains("<Destination>"))
                        {
                            msgBody = msgBody.Replace("<Destination>", row.Cells["TOADDRESS"].Value.ToStr());

                        }


                        if (msgBody.Contains("<PickupDate>"))
                        {
                            msgBody = msgBody.Replace("<PickupDate>", string.Format("{0:dd/MM/yyyy}", row.Cells["PICKUPDATETIME"].Value));

                        }


                        if (msgBody.Contains("<PickupTime>"))
                        {
                            msgBody = msgBody.Replace("<PickupTime>", string.Format("{0:HH:mm}", objBooking.PickupDateTime));

                        }


                        if (msgBody.Contains("<CompanyTelNo>"))
                        {
                            msgBody = msgBody.Replace("<CompanyTelNo>", AppVars.objSubCompany.TelephoneNo);

                        }


                        if (msgBody.Contains("<CompanyName>"))
                        {
                            msgBody = msgBody.Replace("<CompanyName>", AppVars.objSubCompany.CompanyName);

                        }

                        msgBody = msgBody.Replace("\n", newLine);




                        msgBody += newLine + "</div></body></html>";
                    }
                }


                else
                {

                    if (objBooking.Gen_SubCompany.DefaultIfEmpty().DisableAcceptEmail.ToBool() == false)
                    {


                        if (string.IsNullOrEmpty(webBookingTemplate))
                            webBookingTemplate = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "frmWebBookingsList" && (c.IsDefault != null && c.IsDefault == true))
                                                    .DefaultIfEmpty().TemplateName.ToStr().ToLower().Trim();

                        if (webBookingTemplate == "template1")
                        {

                            string newLine = "<br>";
                            string via = row.Cells["VIA"].Value.ToStr();

                            msgBody = "<html><body><div>Your online booking request is confirmed." + newLine;
                            msgBody += newLine + AppVars.objPolicyConfiguration.MobileBookingEmailVerification.ToStr().Trim();

                            if (msgBody.Contains("<BookingNo>"))
                            {
                                msgBody = msgBody.Replace("<BookingNo>", refNo);
                            }

                            if (msgBody.Contains("<FromDoorNo>"))
                            {
                                msgBody = msgBody.Replace("<FromDoorNo>", row.Cells["FlightNo"].Value.ToStr().Trim());
                            }

                            if (msgBody.Contains("<PickupPoint>"))
                            {
                                msgBody = msgBody.Replace("<PickupPoint>", row.Cells["FROMADDRESS"].Value.ToStr().Trim());
                            }

                            if (!string.IsNullOrEmpty(via) && msgBody.Contains("<ViaPoint>"))
                            {
                                via = "Via : " + newLine + via.Replace("\r\n", "<br>");
                                msgBody = msgBody.Replace("<ViaPoint>", via);
                            }


                            if (msgBody.Contains("<Fares>"))
                            {
                                msgBody = msgBody.Replace("<Fares>", row.Cells["Fares"].Value.ToStr());
                            }

                            if (msgBody.Contains("<Passenger>"))
                            {
                                msgBody = msgBody.Replace("<Passenger>", customerName);
                            }

                            if (msgBody.Contains("<Destination>"))
                            {
                                msgBody = msgBody.Replace("<Destination>", row.Cells["TOADDRESS"].Value.ToStr());

                            }

                            if (msgBody.Contains("<PickupDate>"))
                            {
                                msgBody = msgBody.Replace("<PickupDate>", string.Format("{0:dd/MM/yyyy}", pickupDate));

                            }


                            if (msgBody.Contains("<PickupTime>"))
                            {
                                msgBody = msgBody.Replace("<PickupTime>", string.Format("{0:HH:mm}", objBooking.PickupDateTime));

                            }


                            if (msgBody.Contains("<CompanyTelNo>"))
                            {
                                msgBody = msgBody.Replace("<CompanyTelNo>", AppVars.objSubCompany.TelephoneNo);
                            }

                            if (msgBody.Contains("<CompanyName>"))
                            {
                                msgBody = msgBody.Replace("<CompanyName>", AppVars.objSubCompany.CompanyName);
                            }

                            msgBody = msgBody.Replace("\n", newLine);

                            msgBody += newLine + "</div></body></html>";

                        }
                        else if (webBookingTemplate == "template2")
                        {



                            string telephoneNo = objBooking.Gen_SubCompany.DefaultIfEmpty().TelephoneNo.ToStr();

                            subject = "BOOKING CONFIRMATION -  " + string.Format("{0:dd MMMM yyyy}", pickupDate) + ", TIME " + string.Format("{0:HH.mm}", pickupDateTime) + " - BOOKING ID " + refNo;

                            msgBody += "<html xmlns=\"http://www.w3.org/1999/xhtml\">" +
                                                    "<head>" +
                                                    "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" +
                                                    "<title>Untitled Document</title>" +
                                                    "<style>" +
                                                    "body {" +
                                                        "text-align: left;" +
                                                        "letter-spacing: normal;" +
                                                        "word-spacing: normal;" +
                                                        "white-space: normal;" +
                                                        "background:#FFF;" +
                                                    "}" +
                                                    ".body {" +
                                                        "clear: both;" +
                                                        "margin: 0 auto;" +
                                                        "width: 100%;" +
                                                    "}" +
                                                    "p {" +
                                                        "display: block;" +
                                                    "-webkit-margin-before: 0.2em;" +
                                                    "-webkit-margin-after: 0.5em;" +
                                                    "-webkit-margin-start: 0px;" +
                                                    "-webkit-margin-end: 0px;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-size: 13px;" +
                                                        "font-weight: normal;" +
                                                        "color: #333;" +
                                                        "text-decoration: none;" +
                                                    "}" +
                                                    "h1 {font-size: 1.571em}" +	/* 22px */
                                                    "h2 {font-size: 1.571em}" +	/* 22px */
                                                    "h3 {font-size: 1.429em}" +	/* 20px */
                                                    "h4 {font-size: 1.286em}" +	/* 18px */
                                                    "h5 {font-size: 1.143em}" +	/* 16px */
                                                    "h6 {font-size: 1em}	" +	/* 14px */

                                                    "h1, h2, h3, h4, h5, h6 {" +
                                                        "font-weight: 400;" +
                                                        "line-height: 1.1;" +
                                                        "margin-bottom: .8em;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-weight: bold;" +
                                                    "}" +
                                                    ".wrapper {" +
                                                        "width: 1000px;" +
                                                        "margin:0 auto;" +
                                                    "}" +
                                                    "</style>" +
                                                    "</head>" +

                                                    "<body>" +
                                                    "<div class=\"wrapper\">" +
                                                    "<p><strong>Dear " + customerName + ".</strong>&nbsp;<br />" +
                                                      "<br />" +
                                                      "We thank you for booking your airport transfer  with us.&nbsp; We are confirming your booking as it is detailed  below: </p>" +
                                                    "<p>Your  booking reference is:&nbsp;<strong>" + refNo + ";</strong><br />" +
                                                      "<br />" +
                                                      "When you contact us, we advise you to provide us  this reference to enable us to deal with your enquiry.&nbsp;<br />" +
                                                      "<br />" +
                                                      "It is the responsibility of the passenger or the  person who makes this reservation to ensure that they provide us with the  correct information. To do this, we would recommend you to double check the  transfer details below this confirmation. If any of the details are incorrect,  please advise us. </p>" +
                                                    "<p>Please  inform us, if there are any changes or cancellations to your travel plans with  regard to this transfer at your earliest&nbsp;convenience.<br />" +
                                                      "<br />" +
                                                      "If any of the details of the journey are  incorrect, then please advise us as soon as possible. Should the amendments  alter&nbsp;the total mileage, period of time the vehicle is required  or the specification of the vehicle or the price will be adjusted&nbsp;<br />" +
                                                      "accordingly.<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "Below statement is only for the passengers who  will be travelling from the <strong>airport/seaport  / station.</strong> Passengers, who will be travelling from other locations, please  IGNORE the following statement. </p>" +
                                                    "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\" align=\"left\" width=\"100%\">" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Airports</strong></p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Meeting Points</strong></p></td>" +
                                                      "</tr>" +

                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 1</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 2</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Coffee Nero    (coffee shop) </p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 3  </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of WHSmith    (Blue, Stationary shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 4 </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 5</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick North Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick South Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Stansted Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Luton Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>London City     Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>All the other UK airports</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                    "</table>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><strong>Meeting points at the airports:</strong> <br />" +
                                                      "On arrival, our driver will be at the airport  arrival with the <strong>passenger's&nbsp;</strong><strong>name board.</strong> However, if you have any difficulties finding your  driver in the arrival hall, please call us on the contact number provided below.</p>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><strong>Seaport / Cruise pickup - meeting point</strong>:<br />" +
                                                      "On  arrival, our driver will be at the&nbsp;<strong>seaport</strong>&nbsp;arrival hall with passenger name  board. However, if you have any difficulties finding your driver in the arrival  hall, please call us on the contact number provided below.<br />" +
                                                      "<br />" +
                                                      "<strong>Train Station pickup – meeting point</strong>: On all train station pickups including Euston, St  Pancras, Kings Cross, Victoria and Waterloo, our driver will  be waiting at the dedicated minicab pickup point which is situated outside the  station. If you are not sure where this is, you can ask any member of staff,  who works at the train station; they will guide you to the pickup point.  We can also offer a meet and greet service with  an&nbsp;<strong>additional charge</strong>&nbsp;of £7.00, where our driver will wait  at the station arrival hall with the passenger name board.&nbsp;<br />" +
                                                      "<br />" +
                                                      "<strong>What do I do if I cannot find my driver?</strong>&nbsp;Sometimes it can be difficult to find your driver at  the airport, station or hotel, when it is very busy. For any reason, if you are  unable to locate our driver, you&nbsp;<strong>must</strong> contact us on the numbers provided below. In the event of failing to contact us  or failing to meet our driver, this will be considered as &ldquo;no show&rdquo; and you  will be liable to pay the full fare or if the fare is pre- paid the payment  will not be refunded (Please see our terms and conditions on our website for  further details).&nbsp;<br />" +
                                                      "<br />" +
                                                      "<strong>UK</strong><strong> Callers: 0203 3276 606 | International Callers: +44 203 3276 606</strong>&nbsp;<br />" +
                                                      "<strong>UK</strong><strong> Callers: 0208 1234 971 | International Callers: +44 208 1234 971</strong>&nbsp;<br />" +
                                                      "<br />" +
                                                      "Should the amendments alter the total mileage,  period of time the vehicle is required or the specification of the vehicle, the  price will be adjusted accordingly.&nbsp;<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<strong>We also suggest that the passenger keeps our  contact details with their travel documents as a referral.&nbsp;</strong> <strong>Any further details,  please refer  to our website or contact our customer service team.</strong><br />" +
                                                    "</p>" +
                                                    "<h1 align=\"center\">IMPORTANT NOTICE </h1>" +
                                                    "<p align=\"center\"><br />" +
                                                      "Please Note:  If you wish to make further travel arrangements with us, such as returns trips  must be booked through our official website or with our customer service team  via our online, email or phone (not through any&nbsp;other sources). <br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "PLEASE ADD  OUR WEBSITE ON YOUR COMPUTER''S FAVORITE LIST AND YOU WILL NEVER HAVE TO SEARCH  FOR US AGAIN.&nbsp;<br />" +
                                                    "</p>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><br />" +
                                                      "Kind Regards<br />" +
                                                      "Customer Service Team<br />" +
                                                      "<br />" +
                                                    "</p>" +
                                                    "<h2>Visit  us&nbsp;&gt;&gt;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "</a></h2>" +
                                                    "<p><br />" +
                                                    "Email -&nbsp;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr().Trim() + "</a>&nbsp;| UK Callers: " + telephoneNo + " | International Callers:+44" + (telephoneNo.Length > 0 ? telephoneNo.ToStr().Remove(0, 1).ToStr() : "") + "&nbsp;<br />" +
                                                      "<img src=\"" + objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyLogoOnlinePath.ToStr().Trim() + "\"" + "alt=\"\" /></p>" +

                                                    "</div><br/><br/><br/>";




                            StringBuilder StrBld = new StringBuilder();


                            StrBld.Append("<table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid; background-color:White;font-family: verdana, arial;font-size: 11px;font-weight: normal;color: #000;text-decoration: none;'>");
                            StrBld.Append("<tr><td style='text-align: left; padding: 10px 20px 10px 20px; font-size: 16px;font-weight: bold; color: #ef0000; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>Booking Confirmation</td>");

                            string fullCompanyName = objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyName.ToStr();

                            StrBld.Append("<td style='text-align: center; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;color: #640120; font-weight: bold; font-size: 24px' colspan='2'>");

                            StrBld.Append(fullCompanyName + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='1' style='text-align: left; padding: 5px 5px 5px 0px; font-size: 16px;font-weight: bold; color: #000; border-bottom: #d4e0ee 1px solid;'>Dear " + objBooking.CustomerName.ToStr() + "," + "<td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2; border-bottom: #d4e0ee 1px solid;'>");

                            StrBld.Append("Thank You for your Booking. Please check your journey details.</td></tr><tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 16px;font-weight: bold; color: #000;'>" + AppVars.objSubCompany.TelephoneNo + "</td></tr><tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border-top: #d4e0ee 1px solid;'><tr style='background-color: #eff3f9;'>");
                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("ORDER NO:</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid; color: #008000;'>" + objBooking.BookingNo.ToStr() + "</td>");

                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;color: #008000;'>" + "" + "</td></tr></table>");

                            StrBld.Append("</td></tr><tr style='background-color: #eff3f9;'><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;'>");

                            StrBld.Append("Traveller Information</td><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; font-size: 12px;'>Carrier Details</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 25%'>" + objBooking.CustomerName.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;width: 45%'>" + objBooking.NoofPassengers.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Mobile:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerMobileNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Hand Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofHandLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Phone:</td><td style='padding: 5px; bold; border-bottom: #d4e0ee 1px solid;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerPhoneNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Check-in Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Email:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerEmail.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Vehicle:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Fleet_VehicleType.DefaultIfEmpty().VehicleType + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Pickup Date/Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + string.Format("{0:dd-MMM-yyyy HH:mm}", objBooking.PickupDateTime) + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Special Ins:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.SpecialRequirements.ToStr() + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr valign='top'><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Pick-up Information</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress + "</td></tr>");

                            if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Number:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Coming From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");
                                //    StrBld.Append(" <tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Date:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>31 August 2014</td></tr>");
                                //    StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>01 : 00</td></tr>");
                            }
                            else if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");


                            }
                            else
                            {

                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");


                            }
                            StrBld.Append("</table></td><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Drop-off Information</td></tr>");


                            StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>To:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");

                            if (objBooking.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {

                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                                StrBld.Append("To Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToStreet.ToStr() + "</td></tr>");
                            }
                            else
                            {
                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr>");


                            }

                            StrBld.Append("</table></td></tr>");


                            if (objBooking.Booking_ViaLocations.Count > 0)
                            {

                                StrBld.Append("<tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>From</td><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>To</td></tr>");

                                int cnt = objBooking.Booking_ViaLocations.Count;


                                for (int i = 0; i < cnt; i++)
                                {
                                    if (i == 0)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }
                                    else
                                    {
                                        if (i < cnt)
                                        {

                                            StrBld.Append("<tr>");
                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i - 1].ViaLocValue.ToStr() + "</td>");


                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                            StrBld.Append("</tr>");
                                        }
                                    }


                                    if (i + 1 == cnt)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }


                                }

                                StrBld.Append("</table></td></tr>");
                            }


                            StrBld.Append("<tr><td colspan='4'>&nbsp;</td></tr>");


                            //                 <tr><td style='padding: 10px 5px 10px 5px; font-size: 14px; border: #d4e0ee 1px solid;background-color: White; text-decoration: underline; font-weight: bold;'>Meeting Point:</td><td style='padding: 10px 5px 10px 5px; font-size: 11px; border: #d4e0ee 1px solid;background-color: #eff3f9;' colspan='3'>The driver will meet you with a name board displaying the Passenger name at ARRIVALS <span style='color: Green'>05 Minutes</span> after your flight lands (as per your request). You will have a further <span style='color: Green'>35 minutes</span> of Free waiting time, meaning a total Free waiting time allowance of <span style='color: Red'>40 Minutes</span> from the time of landing which also include car park. Please Note thereafter waiting time is chargeable at the rate of <span style='color: Red'>GBP £20p</span> per minute.</td></tr>
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-size: 18px; border-bottom: #d4e0ee 1px solid;background-color: #eff3f9;'>");
                            StrBld.Append("GBP Cost: <span style='color: #008000;'>£ " + String.Format("{0:f2}", objBooking.FareRate.ToDecimal()) + "</span>");
                            StrBld.Append(" <span style='color: #008000;'>" + objBooking.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr() + "</span></td></tr>");
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-weight: bold; font-size: 17px;text-align: center; border-bottom: #d4e0ee 1px solid;'>Thank You & Have A Pleasant Journey from all of us on " + AppVars.objSubCompany.CompanyName + " Team.</td></tr>");

                            StrBld.Append("<tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2;'>Orders are subject to our current terms & conditions. We welcome all comments on the services that we provide.</td></tr>");

                            StrBld.Append("</table>");


                            msgBody += StrBld.ToStr();
                            msgBody += "</body></html>";
                        }
                        else if (webBookingTemplate == "template3" || webBookingTemplate == "template3a")
                        {

                            string skipText = "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 1</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>";



                            string phoneNumbers = "<strong>UK</strong><strong> Callers: 0203 3276 606 | International Callers: +44 203 3276 606</strong>&nbsp;<br />" +
                                                      "<strong>UK</strong><strong> Callers: 0208 1234 971 | International Callers: +44 208 1234 971</strong>&nbsp;<br />";

                            if (webBookingTemplate == "template3a")
                            {

                                skipText = string.Empty;
                            }


                            if (AppVars.objSubCompany.ConnectionString.ToStr().Trim().Length > 0)
                            {

                                phoneNumbers = AppVars.objSubCompany.ConnectionString.ToStr().Trim();
                            }

                            string telephoneNo = objBooking.Gen_SubCompany.DefaultIfEmpty().TelephoneNo.ToStr();

                            subject = "BOOKING CONFIRMATION -  " + string.Format("{0:dd MMMM yyyy}", pickupDate) + ", TIME " + string.Format("{0:HH.mm}", pickupDateTime) + " - BOOKING ID " + refNo;

                            msgBody += "<html xmlns=\"http://www.w3.org/1999/xhtml\">" +
                                                    "<head>" +
                                                    "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />" +
                                                    "<title>Untitled Document</title>" +
                                                    "<style>" +
                                                    "body {" +
                                                        "text-align: left;" +
                                                        "letter-spacing: normal;" +
                                                        "word-spacing: normal;" +
                                                        "white-space: normal;" +
                                                        "background:#FFF;" +
                                                    "}" +
                                                    ".body {" +
                                                        "clear: both;" +
                                                        "margin: 0 auto;" +
                                                        "width: 100%;" +
                                                    "}" +
                                                    "p {" +
                                                        "display: block;" +
                                                    "-webkit-margin-before: 0.2em;" +
                                                    "-webkit-margin-after: 0.5em;" +
                                                    "-webkit-margin-start: 0px;" +
                                                    "-webkit-margin-end: 0px;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-size: 13px;" +
                                                        "font-weight: normal;" +
                                                        "color: #333;" +
                                                        "text-decoration: none;" +
                                                    "}" +
                                                    "h1 {font-size: 1.571em}" +	/* 22px */
                                                    "h2 {font-size: 1.571em}" +	/* 22px */
                                                    "h3 {font-size: 1.429em}" +	/* 20px */
                                                    "h4 {font-size: 1.286em}" +	/* 18px */
                                                    "h5 {font-size: 1.143em}" +	/* 16px */
                                                    "h6 {font-size: 1em}	" +	/* 14px */

                                                    "h1, h2, h3, h4, h5, h6 {" +
                                                        "font-weight: 400;" +
                                                        "line-height: 1.1;" +
                                                        "margin-bottom: .8em;" +
                                                        "font-family:Arial, Helvetica, sans-serif;" +
                                                        "font-weight: bold;" +
                                                    "}" +
                                                    ".wrapper {" +
                                                        "width: 1000px;" +
                                                        "margin:0 auto;" +
                                                    "}" +
                                                    "</style>" +
                                                    "</head>" +

                                                    "<body>" +
                                                    "<div class=\"wrapper\">" +
                                                    "<p><strong>Dear " + customerName + ".</strong>&nbsp;<br />" +
                                                      "<br />" +
                                                      "We thank you for booking your airport transfer  with us.&nbsp; We are confirming your booking as it is detailed  below: </p>" +
                                                    "<p>Your  booking reference is:&nbsp;<strong>" + refNo + ";</strong><br />" +
                                                      "<br />" +
                                                      "When you contact us, we advise you to provide us  this reference to enable us to deal with your enquiry.&nbsp;<br />" +
                                                      "<br />" +
                                                      "It is the responsibility of the passenger or the  person who makes this reservation to ensure that they provide us with the  correct information. To do this, we would recommend you to double check the  transfer details below this confirmation. If any of the details are incorrect,  please advise us. </p>" +
                                                    "<p>Please  inform us, if there are any changes or cancellations to your travel plans with  regard to this transfer at your earliest&nbsp;convenience.<br />" +
                                                      "<br />" +
                                                      "If any of the details of the journey are  incorrect, then please advise us as soon as possible. Should the amendments  alter&nbsp;the total mileage, period of time the vehicle is required  or the specification of the vehicle or the price will be adjusted&nbsp;<br />" +
                                                      "accordingly.<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "Below statement is only for the passengers who  will be travelling from the <strong>airport/seaport  / station.</strong> Passengers, who will be travelling from other locations, please  IGNORE the following statement. </p>" +
                                                    "<table border=\"1\" cellspacing=\"0\" cellpadding=\"3\" align=\"left\" width=\"100%\">" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Airports</strong></p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p><strong>Meeting Points</strong></p></td>" +
                                                      "</tr>" +

                                                     skipText +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 2</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>After the arrival gate we meet at WH Smiths News agents </p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 3  </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>As you come out of the arrivals there is a Marks & Spencer store on the left the driver will meet you there</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 4 </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Heathrow Terminal 5</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of Costa (coffee    shop)</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick North Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Gatwick South Terminal</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Stansted Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>Luton Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>London City     Airport </p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                      "<tr>" +
                                                        "<td width=\"217\" nowrap=\"nowrap\" valign=\"bottom\"><p>All the other UK airports</p></td>" +
                                                        "<td width=\"426\" nowrap=\"nowrap\" valign=\"bottom\"><p>At the arrival gate barrier or in front of airport    information desk</p></td>" +
                                                      "</tr>" +
                                                    "</table>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><strong>Meeting points at the airports:</strong> <br />" +
                                                      "On arrival, our driver will be at the airport  arrival with the <strong>passenger's&nbsp;</strong><strong>name board.</strong> However, if you have any difficulties finding your  driver in the arrival hall, please call us on the contact number provided below.</p>" +
                                                    "<p>&nbsp;</p>" +

                                                      "<br />" +
                                                      "<strong>What do I do if I cannot find my driver?</strong>&nbsp;Sometimes it can be difficult to find your driver at  the airport, station or hotel, when it is very busy. For any reason, if you are  unable to locate our driver, you&nbsp;<strong>must</strong> contact us on the numbers provided below. In the event of failing to contact us  or failing to meet our driver, this will be considered as &ldquo;no show&rdquo; and you  will be liable to pay the full fare or if the fare is pre- paid the payment  will not be refunded (Please see our terms and conditions on our website for  further details).&nbsp;<br />" +
                                                      "<br />" +
                                                      phoneNumbers +

                                                      "<br />" +
                                                      "Should the amendments alter the total mileage,  period of time the vehicle is required or the specification of the vehicle, the  price will be adjusted accordingly.&nbsp;<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<strong>We also suggest that the passenger keeps our  contact details with their travel documents as a referral.&nbsp;</strong> <strong>Any further details,  please refer  to our website or contact our customer service team.</strong><br />" +
                                                    "</p>" +
                                                    "<h1 align=\"center\">IMPORTANT NOTICE </h1>" +
                                                    "<p align=\"center\"><br />" +
                                                      "Please Note:  If you wish to make further travel arrangements with us, such as returns trips  must be booked through our official website or with our customer service team  via our online, email or phone (not through any&nbsp;other sources). <br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "<br />" +
                                                      "PLEASE ADD  OUR WEBSITE ON YOUR COMPUTER''S FAVORITE LIST AND YOU WILL NEVER HAVE TO SEARCH  FOR US AGAIN.&nbsp;<br />" +
                                                    "</p>" +
                                                    "<p>&nbsp;</p>" +
                                                    "<p><br />" +
                                                      "Kind Regards<br />" +
                                                      "Customer Service Team<br />" +
                                                      "<br />" +
                                                    "</p>" +
                                                    "<h2>Visit  us&nbsp;&gt;&gt;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().WebsiteUrl.ToStr().Trim() + "</a></h2>" +
                                                    "<p><br />" +
                                                    "Email -&nbsp;<a href=\"https://" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr() + "\"" + "target=\"_blank\">" + objBooking.Gen_SubCompany.DefaultIfEmpty().EmailAddress.ToStr().Trim() + "</a>&nbsp;| UK Callers: " + telephoneNo + " | International Callers:+44" + (telephoneNo.Length > 0 ? telephoneNo.ToStr().Remove(0, 1).ToStr() : "") + "&nbsp;<br />" +
                                                      "<img src=\"" + objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyLogoOnlinePath.ToStr().Trim() + "\"" + "alt=\"\" /></p>" +

                                                    "</div><br/><br/><br/>";




                            StringBuilder StrBld = new StringBuilder();


                            StrBld.Append("<table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid; background-color:White;font-family: verdana, arial;font-size: 11px;font-weight: normal;color: #000;text-decoration: none;'>");
                            StrBld.Append("<tr><td style='text-align: left; padding: 10px 20px 10px 20px; font-size: 16px;font-weight: bold; color: #ef0000; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>Booking Confirmation</td>");

                            string fullCompanyName = objBooking.Gen_SubCompany.DefaultIfEmpty().CompanyName.ToStr();

                            StrBld.Append("<td style='text-align: center; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;color: #640120; font-weight: bold; font-size: 24px' colspan='2'>");

                            StrBld.Append(fullCompanyName + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='1' style='text-align: left; padding: 5px 5px 5px 0px; font-size: 16px;font-weight: bold; color: #000; border-bottom: #d4e0ee 1px solid;'>Dear " + objBooking.CustomerName.ToStr() + "," + "<td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2; border-bottom: #d4e0ee 1px solid;'>");

                            StrBld.Append("Thank You for your Booking. Please check your journey details.</td></tr><tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 16px;font-weight: bold; color: #000;'>" + AppVars.objSubCompany.TelephoneNo + "</td></tr><tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border-top: #d4e0ee 1px solid;'><tr style='background-color: #eff3f9;'>");
                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("ORDER NO:</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid; color: #008000;'>" + objBooking.BookingNo.ToStr() + "</td>");

                            StrBld.Append("<td width='20%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("</td><td width='30%' style='padding: 10px 5px 10px 5px; font-size: 16px; font-weight: bold;color: #008000;'>" + "" + "</td></tr></table>");

                            StrBld.Append("</td></tr><tr style='background-color: #eff3f9;'><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;'>");

                            StrBld.Append("Traveller Information</td><td colspan='2' style='padding: 5px; text-decoration: underline;border-top: #d4e0ee 1px solid; border-bottom: #d4e0ee 1px solid; font-size: 12px;'>Carrier Details</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 25%'>" + objBooking.CustomerName.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid; width: 15%'>");
                            StrBld.Append("Passenger No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;width: 45%'>" + objBooking.NoofPassengers.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Mobile:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerMobileNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Hand Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofHandLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Phone:</td><td style='padding: 5px; bold; border-bottom: #d4e0ee 1px solid;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerPhoneNo.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Check-in Luggage:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.NoofLuggages.ToInt() + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Email:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.CustomerEmail.ToStr() + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Vehicle:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Fleet_VehicleType.DefaultIfEmpty().VehicleType + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Pickup Date/Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + string.Format("{0:dd-MMM-yyyy HH:mm}", objBooking.PickupDateTime) + "</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                            StrBld.Append("Special Ins:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.SpecialRequirements.ToStr() + "</td></tr><tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr valign='top'><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Pick-up Information</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress + "</td></tr>");

                            if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Number:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Coming From:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");
                                //    StrBld.Append(" <tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Date:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>31 August 2014</td></tr>");
                                //    StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Flight Landing Time:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>01 : 00</td></tr>");
                            }
                            else if (objBooking.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");
                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>From Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromStreet.ToStr() + "</td></tr>");


                            }
                            else
                            {

                                StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>Door #:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>" + objBooking.FromDoorNo.ToStr() + "</td></tr>");


                            }
                            StrBld.Append("</table></td><td colspan='2'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline;border-bottom: #d4e0ee 1px solid; font-size: 12px;' colspan='2'>");
                            StrBld.Append("Drop-off Information</td></tr>");


                            StrBld.Append("<tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>To:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");

                            if (objBooking.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            {

                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr><tr><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;border-right: #d4e0ee 1px solid;'>");
                                StrBld.Append("To Street:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToStreet.ToStr() + "</td></tr>");
                            }
                            else
                            {
                                StrBld.Append("To Door No:</td><td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToDoorNo + "</td></tr>");


                            }

                            StrBld.Append("</table></td></tr>");


                            if (objBooking.Booking_ViaLocations.Count > 0)
                            {

                                StrBld.Append("<tr><td colspan='4'><table width='100%' border='0' cellspacing='0' cellpadding='0' style='border: #d4e0ee 1px solid;background-color: White; font-family: verdana, arial; font-size: 11px; font-weight: normal;color: #000; text-decoration: none;'><tr style='background-color: #eff3f9;'><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>From</td><td style='padding: 5px; text-decoration: underline; border-bottom: #d4e0ee 1px solid;font-size: 12px; width: 50%' align='center'>To</td></tr>");

                                int cnt = objBooking.Booking_ViaLocations.Count;


                                for (int i = 0; i < cnt; i++)
                                {
                                    if (i == 0)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.FromAddress.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }
                                    else
                                    {
                                        if (i < cnt)
                                        {

                                            StrBld.Append("<tr>");
                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i - 1].ViaLocValue.ToStr() + "</td>");


                                            StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");
                                            StrBld.Append("</tr>");
                                        }
                                    }


                                    if (i + 1 == cnt)
                                    {
                                        StrBld.Append("<tr>");
                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid; border-right: #d4e0ee 1px solid;'>" + objBooking.Booking_ViaLocations[i].ViaLocValue.ToStr() + "</td>");

                                        StrBld.Append("<td style='padding: 5px; border-bottom: #d4e0ee 1px solid;'>" + objBooking.ToAddress.ToStr() + "</td>");
                                        StrBld.Append("</tr>");

                                    }


                                }

                                StrBld.Append("</table></td></tr>");
                            }


                            StrBld.Append("<tr><td colspan='4'>&nbsp;</td></tr>");


                            //                 <tr><td style='padding: 10px 5px 10px 5px; font-size: 14px; border: #d4e0ee 1px solid;background-color: White; text-decoration: underline; font-weight: bold;'>Meeting Point:</td><td style='padding: 10px 5px 10px 5px; font-size: 11px; border: #d4e0ee 1px solid;background-color: #eff3f9;' colspan='3'>The driver will meet you with a name board displaying the Passenger name at ARRIVALS <span style='color: Green'>05 Minutes</span> after your flight lands (as per your request). You will have a further <span style='color: Green'>35 minutes</span> of Free waiting time, meaning a total Free waiting time allowance of <span style='color: Red'>40 Minutes</span> from the time of landing which also include car park. Please Note thereafter waiting time is chargeable at the rate of <span style='color: Red'>GBP £20p</span> per minute.</td></tr>
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-size: 18px; border-bottom: #d4e0ee 1px solid;background-color: #eff3f9;'>");
                            StrBld.Append("GBP Cost: <span style='color: #008000;'>£ " + String.Format("{0:f2}", objBooking.FareRate.ToDecimal()) + "</span>");
                            StrBld.Append(" <span style='color: #008000;'>" + objBooking.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr() + "</span></td></tr>");
                            StrBld.Append("<tr><td colspan='4' style='border-bottom: #d4e0ee 1px solid;'>&nbsp;</td></tr><tr><td colspan='4' style='padding: 10px 5px 10px 5px; font-weight: bold; font-size: 17px;text-align: center; border-bottom: #d4e0ee 1px solid;'>Thank You & Have A Pleasant Journey from all of us on " + AppVars.objSubCompany.CompanyName + " Team.</td></tr>");

                            StrBld.Append("<tr><td colspan='4' style='text-align: center; padding: 5px 0px 5px 0px; font-size: 18px;font-weight: normal; color: #6b97c2;'>Orders are subject to our current terms & conditions. We welcome all comments on the services that we provide.</td></tr>");

                            StrBld.Append("</table>");


                            msgBody += StrBld.ToStr();
                            msgBody += "</body></html>";
                        }
                    }

                }

                if (!string.IsNullOrEmpty(msgBody))
                {


                    Gen_SubCompany objSub = objBooking.Gen_SubCompany.DefaultIfEmpty();


                    new Thread(delegate ()
                    {
                        SendEmail(objSub, email, subject, msgBody);

                        try
                        {
                            if (refNo.ToStr().EndsWith("/1"))
                                refNo = refNo.ToStr().Replace("/1", "").Trim();

                            if (refNo.ToStr().EndsWith("/2"))
                                refNo = refNo.ToStr().Replace("/2", "").Trim();


                            if (refNo.ToStr().Length > 0 && refNo[1].ToStr().IsAlpha())
                            {
                                string newRefNo = string.Empty;
                                for (int i = 0; i < refNo.Length; i++)
                                {
                                    if (refNo[i].ToStr().IsAlpha())
                                        newRefNo += refNo[i].ToStr();

                                }


                                if (!string.IsNullOrEmpty(newRefNo))
                                {
                                    refNo = refNo.Replace(newRefNo, "").Trim();

                                }

                            }



                        }
                        catch (Exception ex)
                        {


                        }
                    }).Start();

                }




            }




        }



        #endregion



        private void ddlCompanyVehicle_Enter(object sender, EventArgs e)
        {
            if (ddlCompanyVehicle.DataSource == null)
            {
                ComboFunctions.FillVehicleCombo(ddlCompanyVehicle);

            }
        }





        #region Price Plot



        List<stp_GetPricePlotDriversResult> listofDriverPricePlots = null;
        ContextMenu ContextMenuPriceplots = null;



        public void LoadPricePlotsDriversByWorker()
        {
            try
            {
                if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool() == false)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {




                        listofDriverPricePlots = db.stp_GetPricePlotDrivers(AppVars.DefaultDriverSubCompanyId).ToList();
                    }
                }

                // listofDriverPlots = new TaxiDataContext().stp_GetDriverPlots(AppVars.DefaultDriverSubCompanyId).OrderBy(c => c.orderno).ToList();
            }
            catch (Exception ex)
            {


            }
        }

        private void PopulatePriceDriverPlotGrid()
        {
            try
            {
                if (AppVars.objPolicyConfiguration.DisablePricePlots.ToBool())
                {
                    return;

                }

                if (grdDriverPricePlot.Columns.Count == 0)
                {

                    var colList2 = listofDriverPricePlots.Where(c => c.PricePlotId != 0).Select(args => new { args.PricePlot, args.PricePlotId }).Distinct();



                    DataGridViewTextBoxColumn[] cols2 = (from a in colList2

                                                         select new DataGridViewTextBoxColumn
                                                         {

                                                             Name = a.PricePlot.ToStr().Replace(" ", ""),
                                                             HeaderText = a.PricePlot,
                                                             SortMode = DataGridViewColumnSortMode.NotSortable,
                                                             FillWeight = 100,
                                                             Resizable = DataGridViewTriState.False,
                                                             Width = 60,
                                                             Tag = a.PricePlotId
                                                         }).Distinct().ToArray<DataGridViewTextBoxColumn>();




                    grdDriverPricePlot.Columns.Clear();
                    grdDriverPricePlot.Columns.AddRange(cols2);
                }



                grdDriverPricePlot.Rows.Clear();
                for (int i = 0; i < 40; i++)
                {
                    grdDriverPricePlot.Rows.Add();
                }


                int rowCnt = 0;
                for (int i = 0; i < grdDriverPricePlot.Columns.Count; i++)
                {
                    rowCnt = 0;
                    foreach (var itemX in listofDriverPricePlots.Where(c => c.DriverId != null
                                                       && c.driverworkstatusid != null &&
                                                               c.PricePlot == grdDriverPricePlot.Columns[i].HeaderText).OrderBy(c => c.QueueDateTime))
                    {
                        grdDriverPricePlot.Rows[rowCnt].Cells[grdDriverPricePlot.Columns[i].Name.ToStr()].Value = itemX.DriverNo;
                        grdDriverPricePlot.Rows[rowCnt].Cells[grdDriverPricePlot.Columns[i].Name.ToStr()].Tag = itemX.backgroundcolor;
                        grdDriverPricePlot.Rows[rowCnt].Cells[grdDriverPricePlot.Columns[i].Name.ToStr()].ErrorText = itemX.DriverId.ToStr();
                        rowCnt++;
                    }

                }
            }
            catch
            {


            }

        }


        public void RefreshPricePlotDrivers()
        {
            if (worker != null && worker.IsBusy == false)
            {
                ShowProgress(true);
                worker.RunWorkerAsync("PopulatePricePlotDrivers");

            }


        }

        void grdDriverPricePlot_CellMouseDown(object sender, DataGridViewCellMouseEventArgs e)
        {
            try
            {
                if (e.Button == MouseButtons.Right)
                {

                    if (e.RowIndex != -1 && e.ColumnIndex != -1 && grdDriverPricePlot.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
                    {





                        if (ContextMenuPriceplots == null)
                        {

                            ContextMenuPriceplots = new ContextMenu();


                            MenuItem mItem = new MenuItem();
                            mItem.Text = "Move Up";
                            mItem.Name = "moveupitem";
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPricePositionMoveContextMenuItem1_Click);
                            ContextMenuPriceplots.MenuItems.Add(mItem);



                            mItem = new MenuItem();
                            mItem.Text = "Move Down";
                            mItem.Name = "movedownitem";
                            mItem.Visible = true;

                            mItem.Click += new EventHandler(DriverPricePositionMoveContextMenuItem1_Click);
                            ContextMenuPriceplots.MenuItems.Add(mItem);




                            mItem = new MenuItem();
                            mItem.Text = "Move to Top";
                            mItem.Name = "movetop";
                            mItem.Visible = true;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPricePositionMoveContextMenuItem1_Click);
                            ContextMenuPriceplots.MenuItems.Add(mItem);


                            mItem = new MenuItem();
                            mItem.Text = "Move to Bottom";
                            mItem.Name = "movebottom";
                            mItem.Visible = true;
                            mItem.Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                            mItem.Click += new EventHandler(DriverPricePositionMoveContextMenuItem1_Click);
                            ContextMenuPriceplots.MenuItems.Add(mItem);



                            //mItem = new MenuItem("UnBlock");
                            //mItem.ForeColor = Color.Black;
                            //unBlockViewItem.BackColor = Color.Red;
                            //unBlockViewItem.Click += new EventHandler(unBlockViewItem_Click);
                            //unBlockViewItem.Font = new Font("Tahoma", 10, FontStyle.Bold);
                            //driverContextMenu.Items.Add(unBlockViewItem);

                        }





                        ContextMenuPriceplots.MenuItems[0].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                        ContextMenuPriceplots.MenuItems[1].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();

                        ContextMenuPriceplots.MenuItems[2].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();
                        ContextMenuPriceplots.MenuItems[3].Tag = e.RowIndex.ToStr() + "," + e.ColumnIndex.ToStr();







                        ContextMenuPriceplots.Show(grdDriverPricePlot, new Point(e.X, e.Y));
                    }

                }
            }
            catch (Exception ex)
            {


            }
        }


        void DriverPricePositionMoveContextMenuItem1_Click(object sender, EventArgs e)
        {
            try
            {

                MenuItem item = (MenuItem)sender;

                if (item != null && item.Tag.ToStr().Contains(","))
                {
                    string[] arr = item.Tag.ToStr().Split(new char[] { ',' });


                    int rowsCount = grdDriverPricePlot.Rows.Count;
                    int columnIndex = arr[1].ToInt();
                    int rowIndex = arr[0].ToInt();
                    int driverId = grdDriverPricePlot.Rows[rowIndex].Cells[columnIndex].ErrorText.ToInt();
                    int pricePlotId = grdDriverPricePlot.Columns[columnIndex].Tag.ToInt();
                    int MoveToDriverId = 0;

                    if (item.Text.ToLower() == "move up")
                    {
                        if (rowIndex > 0 && grdDriverPricePlot.Rows[rowIndex - 1].Cells[columnIndex].ErrorText.ToStr().Trim() != string.Empty)
                        {
                            MoveToDriverId = grdDriverPricePlot.Rows[rowIndex - 1].Cells[columnIndex].ErrorText.ToInt();
                        }
                    }
                    else if (item.Text.ToLower() == "move down")
                    {
                        if (rowIndex >= 0 && (rowIndex + 1) <= (rowsCount - 1)
                            && grdDriverPricePlot.Rows[rowIndex + 1].Cells[columnIndex].ErrorText.ToStr().Trim() != string.Empty)
                        {
                            MoveToDriverId = grdDriverPricePlot.Rows[rowIndex + 1].Cells[columnIndex].ErrorText.ToInt();

                        }
                    }

                    else if (item.Text.ToLower() == "move to top")
                    {
                        MoveToDriverId = grdDriverPricePlot.Rows[0].Cells[columnIndex].ErrorText.ToInt();
                    }

                    else if (item.Text.ToLower() == "move to bottom")
                    {
                        MoveToDriverId = grdDriverPricePlot.Rows[0].Cells[columnIndex].ErrorText.ToInt();
                    }





                    // HideDriverMoveContextMenu(true);



                    if (driverId > 0 && MoveToDriverId > 0 && pricePlotId > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            var obj = db.Fleet_Driver_PricePlots.FirstOrDefault(c => c.DriverId == driverId && c.PricePlotId == pricePlotId);


                            if (obj != null)
                            {


                                if (item.Text.ToLower() == "move up")
                                {
                                    var queuedatetime = db.Fleet_Driver_PricePlots.FirstOrDefault(c => c.DriverId == MoveToDriverId && c.PricePlotId == pricePlotId).DefaultIfEmpty().QueueDateTime;

                                    obj.QueueDateTime = queuedatetime.Value.AddSeconds(-1);


                                }
                                if (item.Text.ToLower() == "move down")
                                {
                                    var queuedatetime = db.Fleet_Driver_PricePlots.FirstOrDefault(c => c.DriverId == MoveToDriverId && c.PricePlotId == pricePlotId).DefaultIfEmpty().QueueDateTime;

                                    obj.QueueDateTime = queuedatetime.Value.AddSeconds(1);


                                }
                                if (item.Text.ToLower() == "move to top")
                                {

                                    var queuedatetime = db.Fleet_Driver_PricePlots.Where(c => c.PricePlotId == pricePlotId).OrderBy(c => c.QueueDateTime).FirstOrDefault().DefaultIfEmpty().QueueDateTime;


                                    obj.QueueDateTime = queuedatetime.Value.AddSeconds(-1);


                                }

                                if (item.Text.ToLower() == "move to bottom")
                                {

                                    var queuedatetime = db.Fleet_Driver_PricePlots.Where(c => c.PricePlotId == pricePlotId).OrderByDescending(c => c.QueueDateTime).FirstOrDefault().DefaultIfEmpty().QueueDateTime;


                                    obj.QueueDateTime = queuedatetime.Value.AddSeconds(1);


                                }
                                db.SubmitChanges();

                            }
                        }



                        // LoadPlotsGrid();
                        RefreshPricePlotDrivers();
                    }



                }




            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }

        void grdOnPricePlotDrivers_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {




                //         e.CellStyle.BackColor = Color.Yellow;




                //   e.CellElement.DrawFill = false;
                //  e.CellElement.BorderColor = Color.Black;

                if (e.ColumnIndex != -1)
                {


                    if (grdDriverPricePlot.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null && grdDriverPricePlot.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag != null)
                    {
                        if (grdDriverPricePlot.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt() == -6632142)
                        {
                            e.CellStyle.ForeColor = Color.FromArgb(-16744448);
                        }
                        else
                            e.CellStyle.ForeColor = Color.FromArgb(grdDriverPricePlot.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt());


                        e.CellStyle.Font = newFont;
                        e.FormattingApplied = true;


                        //if (e.CellStyle.BackColor.ToArgb() == -65536)
                        //{

                        //    e.CellStyle.ForeColor = Color.White;
                        //    e.CellStyle.Font = newFont;
                        //    e.FormattingApplied = true;
                        //}
                        //else
                        //{
                        //    e.CellStyle.ForeColor = Color.Black;
                        //    e.CellStyle.Font = regularFont;
                        //    e.FormattingApplied = true;

                        //}
                    }








                }

            }
            catch
            {


            }
        }



        #endregion



        #region Offline Sync Method

        public void RefreshSerActiveData(string msg)
        {
            try
            {








                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UISingleParameter(RefreshSerActiveData), msg);
                }
                else
                {
                    var res = PopulateSerActiveData(msg);
                    PopulateSerTodayJobsGrids(res);

                }
            }
            catch (Exception ex)
            {
                //

            }
        }


        private void AddWriteLog(string msg)
        {

            try
            {

                File.AppendAllText(Application.StartupPath + "\\AddWriteLog.txt", DateTime.Now + " :" + msg + Environment.NewLine);

            }
            catch
            {

            }
        }

        public string PopulateSerActiveData(string booking)
        {
            string ID = "0";
            string originalBooking = booking;
            try
            {




                booking = booking.Substring(booking.LastIndexOf(">>>") + 3).Trim();


                var list = (List<stp_GetBookingsDataResult>)grdPendingJobs.DataSource;

                List<stp_GetBookingsDataResult> data = null;


                try
                {

                    if (booking.ToStr().EndsWith("}]"))
                    {
                        data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<stp_GetBookingsDataResult>>(booking);
                    }
                    else
                    {
                        data = new List<stp_GetBookingsDataResult>();
                        data.Add(Newtonsoft.Json.JsonConvert.DeserializeObject<stp_GetBookingsDataResult>(booking));

                    }
                }
                catch (Exception ex2)
                {
                    File.AppendAllText(Application.StartupPath + "\\exception_step1.txt", DateTime.Now + " :" + ex2.Message + Environment.NewLine);


                }



                try
                {

                    if (data == null)
                    {
                        File.AppendAllText(Application.StartupPath + "\\exception_step1x.txt", DateTime.Now + " :" + booking + Environment.NewLine);

                    }

                }
                catch (Exception ex1)
                {
                    File.AppendAllText(Application.StartupPath + "\\exception_step1x_catch.txt", DateTime.Now + " :" + ex1.Message + Environment.NewLine);


                }



                if (list != null)
                {
                    try
                    {
                        foreach (var item in data)
                        {

                            if (list.Count(c => c.Id == item.Id) > 0)
                            {
                                list.RemoveAll(c => c.Id == item.Id);
                            }

                            ID += item.Id.ToStr() + ",";

                        }

                    }
                    catch (Exception ex3)
                    {
                        File.AppendAllText(Application.StartupPath + "\\exception_step2.txt", DateTime.Now + " :" + ex3.Message + " ,orignal: " + originalBooking + Environment.NewLine);


                    }


                    try
                    {

                        list.AddRange(data);

                        if (JobsSortBy == 0)
                            listofTodaysBooking = list.OrderBy(c => c.Lead).ToList();
                        else if (JobsSortBy == 1)
                            listofTodaysBooking = list.OrderBy(c => c.PickupDateTemp).ToList();
                        else if (JobsSortBy == 2)
                        {
                            var listA = list.OrderBy(c => c.Lead).ToList();




                            List<stp_GetBookingsDataResult> listB = new List<stp_GetBookingsDataResult>();

                            foreach (var item in listA)
                            {
                                if (listB.Count(c => c.Plot == item.Plot) == 0)
                                    listB.AddRange(listA.Where(c => c.Plot == item.Plot).OrderBy(c => c.Lead).ToList());

                            }


                            listofTodaysBooking = listB;

                        }
                    }
                    catch (Exception ex4)
                    {
                        File.AppendAllText(Application.StartupPath + "\\exception_step3.txt", DateTime.Now + " :" + ex4.Message + Environment.NewLine);


                    }



                }

                try
                {

                    if (ID.EndsWith(","))
                    {
                        ID = ID.Remove(ID.Length - 1).Trim();
                    }


                }
                catch (Exception ex5)
                {
                    File.AppendAllText(Application.StartupPath + "\\exception_step4.txt", DateTime.Now + " :" + ex5.Message + Environment.NewLine);


                }





            }
            catch (Exception ex)
            {
                try
                {


                    File.AppendAllText(Application.StartupPath + "\\exception_PopulateSerActiveData.txt", DateTime.Now + " :" + ex.Message + Environment.NewLine);
                }
                catch (Exception ex2)
                {


                }


            }

            return ID;

        }

        private void PopulateSerTodayJobsGrids(string msg)
        {
            try
            {



                timer1.Stop();

                long JobIndex = grdPendingJobs.CurrentRow != null && grdPendingJobs.CurrentRow is GridViewDataRowInfo ? grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong() : -1;


                int val = grdPendingJobs.TableElement.VScrollBar.Value;

                //grdPendingJobs.TableElement.BeginUpdate();

                if (JobIndex > 0)
                {
                    grdPendingJobs.Tag = EditFare.PopupElement.IsElementVisible;
                }




                grdPendingJobs.DataSource = listofTodaysBooking;



                if (JobIndex > 0)
                {
                    grdPendingJobs.CurrentRow = grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);


                    if (EditFare.Tag != null && EditFare.Tag.ToStr() == "grdPendingJobs" && grdPendingJobs.Tag.ToBool())
                    {
                        EditFare.Show();

                    }
                }




                grdPendingJobs.TableElement.VScrollBar.Value = val;


                FormatTodaysBookingGrid();


                //grdPendingJobs.TableElement.EndUpdate();






                timer1.Start();




                if (msg.ToStr().Length > 0)
                {
                    msg = msg.Replace("PopulateSerActiveData=", "").Trim();

                    if (msg.Contains(",") == false)
                    {
                        if (msg.ToStr().IsNumeric())
                        {
                            if (grdPreBookings.Rows.Count(c => c.Cells["Id"].Value.ToLong() == msg.ToLong()) > 0)
                            {
                                grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == msg.ToLong()).Delete();

                                this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";
                            }
                        }
                    }
                    else
                    {
                        foreach (var item in msg.Split(','))
                        {
                            if (item.ToStr().IsNumeric())
                            {
                                if (grdPreBookings.Rows.Count(c => c.Cells["Id"].Value.ToLong() == item.ToLong()) > 0)
                                {
                                    grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == item.ToLong()).Delete();

                                    this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";
                                }
                            }

                        }


                    }
                }


            }
            catch (Exception ex)
            {
                timer1.Start();
                GridCrashLog("PopulateSerTodayJobsGrids:" + ex.Message.ToStr());


                if (ex.Message.ToStr().ToLower().Contains("object referen"))
                {
                    if (retryX == 0)
                    {

                        retryX = 1;
                        ReInitializeTodaysBookingGrid();
                        retryX = 0;
                    }

                }
                else if (ex.Message.ToStr().Contains("System.OutOfMemoryException"))
                {


                    RestartProgram();


                }

            }
        }



        public void RefreshSavePreBookingData(string msg)
        {
            try
            {
                //   e.Result = "PopulateSavePreData=" + PopulateSavePreData(e.Argument.ToStr());

                //if (worker.IsBusy == false)
                //{
                //    ShowProgress(true);
                //    worker.RunWorkerAsync("PopulateSavePreData=" + msg);
                //}


                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UISingleParameter(RefreshSavePreBookingData), msg);
                }
                else
                {
                    var res = PopulateSavePreData(msg);
                    RefreshUpdatePreBookingGrid(res);

                }
            }
            catch (Exception ex)
            {


            }
        }
        public string PopulateSavePreData(string booking)
        {
            string ID = "0";
            try
            {



                booking = booking.Substring(booking.LastIndexOf(">>>") + 3).ToStr().Trim();













                //





                var list = (List<stp_GetBookingsDataResult>)grdPreBookings.DataSource;



                List<stp_GetBookingsDataResult> data = null;

                if (booking.ToStr().EndsWith("}]"))
                {
                    data = Newtonsoft.Json.JsonConvert.DeserializeObject<List<stp_GetBookingsDataResult>>(booking);
                }
                else
                {
                    data = new List<stp_GetBookingsDataResult>();
                    data.Add(Newtonsoft.Json.JsonConvert.DeserializeObject<stp_GetBookingsDataResult>(booking));

                }


                foreach (var item in data)
                {

                    if (list.Count(c => c.Id == item.Id) > 0)
                    {
                        list.RemoveAll(c => c.Id == item.Id);
                    }

                    ID += item.Id.ToStr() + ",";

                }


                //  stp_GetBookingsDataResult data = Newtonsoft.Json.JsonConvert.DeserializeObject<stp_GetBookingsDataResult>(booking);


                list.AddRange(data);
                listofPreBooking = list.OrderBy(c => c.PickupDateTemp).ToList();



                if (ID.EndsWith(","))
                {
                    ID = ID.Remove(ID.Length - 1).Trim();
                }

            }
            catch (Exception ex)
            {


            }

            return ID;
        }

        private void RefreshUpdatePreBookingGrid(string msg)
        {
            try
            {

                //if (this.InvokeRequired)
                //{

                //    try
                //    {

                //        System.IO.File.AppendAllText(Application.StartupPath + "\\invokerequired_RefreshUpdatePreBookingGrid.txt", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss tt") + ":" + " ," + Environment.NewLine);
                //    }
                //    catch
                //    {


                //    }
                //}


                int val = grdPreBookings.TableElement.VScrollBar.Value;
                //    this.grdPreBookings.MasterTemplate.BeginUpdate();
                long JobIndex = grdPreBookings.CurrentRow != null ? grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong() : -1;

                grdPreBookings.DataSource = listofPreBooking;


                if (JobIndex > 0)
                {
                    grdPreBookings.CurrentRow = grdPreBookings.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex);
                }

                grdPreBookings.TableElement.VScrollBar.Value = val;

                // grdPreBookings.Text = "Today\'s Booking(" + grdPendingJobs.Rows.Count + ")";

                this.Pg_PreBookings.Text = "Pre Bookings(" + grdPreBookings.Rows.Count + ")";


                UpdateRequiredPreBooking = false;



                if (msg.ToStr().Length > 0)
                {

                    msg = msg.Replace("PopulateSavePreData=", "").Trim();

                    if (msg.Contains(",") == false && msg.ToStr().IsNumeric())
                    {
                        if (grdPendingJobs.Rows.Count(c => c.Cells["Id"].Value.ToLong() == msg.ToLong()) > 0)
                        {
                            grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == msg.ToLong()).Delete();

                            this.Pg_PendingJobs.Text = "Today's Booking(" + grdPendingJobs.Rows.Count + ")";
                        }
                    }
                    else
                    {
                        foreach (var item in msg.Split(','))
                        {
                            if (item.ToStr().IsNumeric())
                            {
                                if (grdPendingJobs.Rows.Count(c => c.Cells["Id"].Value.ToLong() == item.ToLong()) > 0)
                                {
                                    grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == item.ToLong()).Delete();

                                    this.Pg_PendingJobs.Text = "Today's Booking(" + grdPendingJobs.Rows.Count + ")";
                                }
                            }

                        }


                    }
                }

                //if(grdPendingJobs.Rows.Count(c=>c.Cells["Id"].Value.ToLong()== JobIndex)>0)
                //{

                //    grdPendingJobs.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == JobIndex).Delete();

                //}
            }
            catch
            {

            }
        }







        #endregion

        RadDropDownMenu CMenu_PoolJobs = null;


        #region Authorization Popups




        List<RadDesktopAlert> listOfAuthPopups = new List<RadDesktopAlert>();


        List<RadDesktopAlert> listOfLogoutPopups = new List<RadDesktopAlert>();

        List<RadDesktopAlert> listOfBreakPopups = new List<RadDesktopAlert>();




        #region BreakAuth

        private void ShowBreakAuthForm(string msg, string msg2)
        {

            if (chkShowAuthorization.Checked)
            {



                BreakAuthorizePopup(msg);

            }


        }


        private void BreakAuthorizePopup(string msg)
        {
            RadDesktopAlert alertAuthorization = new RadDesktopAlert();
            try
            {
                //   alertAuthorization.Closed += new RadPopupClosedEventHandler(alertBreakAuthorization_Closed);
                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);



                RadButtonElement btnAllow = new RadButtonElement();
                RadButtonElement btnDeny = new RadButtonElement();



                alertAuthorization.ButtonItems.AddRange(new Telerik.WinControls.RadItem[] {
                btnAllow,
                btnDeny,
                });





                alertAuthorization.ContentImage = null;

                alertAuthorization.PlaySound = false;
                alertAuthorization.ShowOptionsButton = false;
                alertAuthorization.ShowPinButton = false;
                alertAuthorization.SoundToPlay = null;
                //  alertAuthorization.
                alertAuthorization.ThemeName = null;

                btnAllow.AutoSize = false;
                btnAllow.Bounds = new System.Drawing.Rectangle(0, 0, 90, 30);
                btnAllow.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                btnAllow.ForeColor = System.Drawing.Color.White;
                btnAllow.Name = "btnAllow";
                btnAllow.Text = "Allow";
                btnAllow.Tag = msg;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor2 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor3 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor4 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BoxStyle = Telerik.WinControls.BorderBoxStyle.SingleBorder;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BottomColor = System.Drawing.Color.DarkSlateBlue;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(127)))), ((int)(((byte)(227)))), ((int)(((byte)(255)))));
                // 
                // btnDeny
                // 
                btnDeny.AutoSize = false;
                btnDeny.Bounds = new System.Drawing.Rectangle(10, 0, 90, 30);
                btnDeny.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                btnDeny.ForeColor = System.Drawing.Color.White;
                btnDeny.Name = "btnDeny";
                btnDeny.Text = "Deny";
                btnDeny.Tag = msg;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor2 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor3 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor4 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnDeny.GetChildAt(2))).BoxStyle = Telerik.WinControls.BorderBoxStyle.SingleBorder;




                alertAuthorization.FixedSize = new Size(360, 120);

                alertAuthorization.AutoCloseDelay = 58;





                alertAuthorization.Popup.BackColor = Color.DarkOrange;
                alertAuthorization.Popup.AlertElement.BackColor = Color.DarkOrange;


                alertAuthorization.Popup.AlertElement.NumberOfColors = 1;
                alertAuthorization.FadeAnimationType = FadeAnimationType.None;

                btnAllow.TextElement.Tag = alertAuthorization;
                btnAllow.Click += new EventHandler(btnAllowBreakLogout_Click);
                btnDeny.Click += new EventHandler(btnDenyBreakLogout_Click);
                btnDeny.TextElement.Tag = alertAuthorization;



                string captionText = "";
                string driverNo = values[2].ToStr();





                string contentText = "<html><b><span style=font-size:large><color=Black>" + driverNo + " Break Authorization" + "</span></b></html>";
                alertAuthorization.Popup.Tag = msg;
                alertAuthorization.ScreenPosition = AlertScreenPosition.TopRight;
                alertAuthorization.Opacity = 1;

                alertAuthorization.ShowCloseButton = true;
                alertAuthorization.CaptionText = captionText;
                alertAuthorization.ContentText = contentText;
                alertAuthorization.Show();

                listOfBreakPopups.Add(alertAuthorization);




            }
            catch
            {


            }
        }


        void btnAllowBreakLogout_Click(object sender, EventArgs e)
        {
            try
            {
                new Thread(delegate ()
                {
                    try
                    {
                        AuthorizationBreakLogoutPermit((sender as RadButtonElement).Tag.ToStr());
                    }
                    catch
                    {


                    }
                }).Start();


                Thread.Sleep(1000);

                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoClose = true;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Hide();
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Dispose();
            }
            catch
            {


            }

        }


        private bool AuthorizationBreakLogoutPermit(string msg)
        {
            bool rtn = false;
            try
            {
                string currentTime = string.Format("{0:dd/MM/yyyy hh:mm:ss}", DateTime.Now);



                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);




                General.SendMessageToPDA("request pda=" + values[1].ToStr() + "=" + values[2].ToStr() + "=break auth status>>yes>>" + values[1].ToStr() + ">>" + currentTime + "=20");


                General.SendMessageToPDA("request broadcast=" + "**broadcast close break auth>>" + Environment.MachineName + ">>" + msg);


                RefreshDashBoardDrivers();






                return rtn;
            }
            catch
            {
                return false;

            }

        }


        void btnDenyBreakLogout_Click(object sender, EventArgs e)
        {

            try
            {

                new Thread(delegate ()
                {
                    try
                    {



                        string[] values = (sender as RadButtonElement).Tag.ToStr().Split(new string[] { ">>" }, StringSplitOptions.None);

                        string currentTime = string.Format("{0:dd/MM/yyyy hh:mm:ss}", DateTime.Now);


                        General.SendMessageToPDA("request pda=" + values[1].ToStr() + "=" + values[2].ToStr() + "=break auth status>>no>>" + values[1].ToStr() + ">>" + currentTime + "=20");

                        General.SendMessageToPDA("request broadcast=" + "**broadcast close break auth>>" + Environment.MachineName + ">>" + (sender as RadButtonElement).Tag.ToStr());


                    }
                    catch
                    {

                    }
                }).Start();


                Thread.Sleep(1000);

                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoClose = true;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Hide();
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Dispose();
            }
            catch
            {


            }
        }


        #endregion




        #region LogoutAuth
        void btnAllowLogout_Click(object sender, EventArgs e)
        {
            try
            {
                new Thread(delegate ()
                {
                    try
                    {
                        AuthorizationLogoutPermit((sender as RadButtonElement).Tag.ToStr());
                    }
                    catch
                    {


                    }
                }).Start();


                Thread.Sleep(1000);

                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoClose = true;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Hide();
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Dispose();
            }
            catch
            {


            }
            //  ((sender as RadButtonElement).Parent as RadDesktopAlert).Dispose();
        }

        void btnDenyLogout_Click(object sender, EventArgs e)
        {

            try
            {

                new Thread(delegate ()
                {
                    try
                    {



                        string[] values = (sender as RadButtonElement).Tag.ToStr().Split(new string[] { ">>" }, StringSplitOptions.None);

                        string currentTime = string.Format("{0:dd/MM/yyyy hh:mm:ss}", DateTime.Now);


                        General.SendMessageToPDA("request pda=" + values[1].ToStr() + "=" + values[2].ToStr() + "=logout auth status>>no>>" + values[1].ToStr() + ">>" + currentTime + "=10");

                        General.SendMessageToPDA("request broadcast=" + "**broadcast close logout auth>>" + Environment.MachineName + ">>" + values[1].ToStr());


                    }
                    catch
                    {

                    }
                }).Start();


                Thread.Sleep(1000);

                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoClose = true;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Hide();
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Dispose();
            }
            catch
            {


            }
        }

        private bool AuthorizationLogoutPermit(string msg)
        {
            bool rtn = false;
            try
            {
                string currentTime = string.Format("{0:dd/MM/yyyy hh:mm:ss}", DateTime.Now);



                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);




                General.SendMessageToPDA("request pda=" + values[1].ToStr() + "=" + values[2].ToStr() + "=logout auth status>>yes>>" + values[1].ToStr() + ">>" + currentTime + "=10");
                General.SendMessageToPDA("request force logout=" + values[2].ToStr());

                General.SendMessageToPDA("request broadcast=" + "**broadcast close logout auth>>" + Environment.MachineName + ">>" + msg);


                RefreshDashBoardDrivers();


                //Thread.Sleep(1000);
                //new Thread(delegate ()
                //{
                //    try
                //    {
                //        General.SendMessageToPDA("request force logout=" + this.DriverNo);
                //    }
                //    catch
                //    {

                //    }
                //}).Start();



                return rtn;
            }
            catch
            {
                return false;

            }

        }


        void alertLogoutAuthorization_Closed(object sender, RadPopupClosedEventArgs args)
        {
            try
            {
                listOfLogoutPopups.Remove((sender as RadDesktopAlert));
            }
            catch
            {

            }
        }


        #endregion



        #region JobAuth
        private void AuthorizePopup(string msg)
        {
            RadDesktopAlert alertAuthorization = new RadDesktopAlert();
            try
            {
                alertAuthorization.Closed += new RadPopupClosedEventHandler(alertAuthorization_Closed);
                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);



                RadButtonElement btnAllow = new RadButtonElement();
                RadButtonElement btnDeny = new RadButtonElement();


                alertAuthorization.ButtonItems.AddRange(new Telerik.WinControls.RadItem[] {
                btnAllow,
                btnDeny});



                alertAuthorization.PopupAnimation = false;
                alertAuthorization.FadeAnimationType = FadeAnimationType.None;

                alertAuthorization.ContentImage = null;

                alertAuthorization.PlaySound = false;
                alertAuthorization.ShowOptionsButton = false;
                alertAuthorization.ShowPinButton = false;
                alertAuthorization.SoundToPlay = null;
                //  alertAuthorization.
                alertAuthorization.ThemeName = null;

                btnAllow.AutoSize = false;
                btnAllow.Bounds = new System.Drawing.Rectangle(0, 0, 90, 30);
                btnAllow.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                btnAllow.ForeColor = System.Drawing.Color.White;
                btnAllow.Name = "btnAllow";
                btnAllow.Text = "Allow";
                btnAllow.Tag = msg;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor2 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor3 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor4 = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnAllow.GetChildAt(0))).BackColor = System.Drawing.Color.Green;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BoxStyle = Telerik.WinControls.BorderBoxStyle.SingleBorder;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BottomColor = System.Drawing.Color.DarkSlateBlue;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnAllow.GetChildAt(2))).BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(127)))), ((int)(((byte)(227)))), ((int)(((byte)(255)))));
                // 
                // btnDeny
                // 
                btnDeny.AutoSize = false;
                btnDeny.Bounds = new System.Drawing.Rectangle(10, 0, 90, 30);
                btnDeny.Font = new System.Drawing.Font("Microsoft Sans Serif", 8.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                btnDeny.ForeColor = System.Drawing.Color.White;
                btnDeny.Name = "btnDeny";
                btnDeny.Text = "Deny";
                btnDeny.Tag = msg;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor2 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor3 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor4 = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.FillPrimitive)(btnDeny.GetChildAt(0))).BackColor = System.Drawing.Color.Red;
                ((Telerik.WinControls.Primitives.BorderPrimitive)(btnDeny.GetChildAt(2))).BoxStyle = Telerik.WinControls.BorderBoxStyle.SingleBorder;
                
                alertAuthorization.FixedSize = new Size(360, 110);

                //if (AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt() >= 60)
                //{
                alertAuthorization.AutoCloseDelay = 58;
                //}
                //else
                //{

                //    alertAuthorization.AutoCloseDelay = AppVars.objPolicyConfiguration.PDAJobOfferRequestTimeout.ToInt()-2;
                //}




                alertAuthorization.Popup.BackColor = Color.GhostWhite;
                alertAuthorization.Popup.AlertElement.BackColor = Color.GhostWhite;
                alertAuthorization.Popup.AlertElement.NumberOfColors = 1;
                alertAuthorization.FadeAnimationType = FadeAnimationType.None;

                alertAuthorization.Popup.AnimationType = PopupAnimationTypes.None;

                btnAllow.TextElement.Tag = alertAuthorization;
                btnAllow.Click += new EventHandler(btnAllow_Click);
                btnDeny.Click += new EventHandler(btnDeny_Click);
                btnDeny.TextElement.Tag = alertAuthorization;
                
                alertAuthorization.Popup.AlertElement.CaptionElement.CaptionGrip.BackColor = Color.GhostWhite;

                string captionText = "";
                string driverNo = "";

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.CommandTimeout = 3;
                    db.DeferredLoadingEnabled = false;
                    driverNo = db.Fleet_Drivers.FirstOrDefault(c => c.Id == values[2].ToInt()).DefaultIfEmpty().DriverNo.ToStr();

                }

                string data = "";

                if (values[3].ToInt() == Enums.BOOKINGSTATUS.NOSHOW)
                {
                    data = driverNo + " Recover Job Authorization";

                }
                else if (values[3].ToInt() == Enums.BOOKINGSTATUS.NOPICKUP)
                {
                    data = driverNo + " No Pickup Authorization";
                }
                else if (values[3].ToInt() == Enums.BOOKINGSTATUS.REJECTED)
                {
                    data = driverNo + " Job Reject Authorization";

                }

                string contentText = "<html><b><span style=font-size:medium><color=Blue>" + data + "</span></b></html>";
                alertAuthorization.Popup.Tag = msg;
                //    alertAuthorization.ScreenPosition = AlertScreenPosition.TopRight;
                alertAuthorization.Opacity = 1;
                alertAuthorization.ShowCloseButton = true;
                alertAuthorization.CaptionText = captionText;
                alertAuthorization.ContentText = contentText;
                alertAuthorization.Show();

                listOfAuthPopups.Add(alertAuthorization);


                if (File.Exists(System.Windows.Forms.Application.StartupPath + "\\sound\\auth.wav"))
                {
                    try
                    {
                        using (System.Media.SoundPlayer sp = new System.Media.SoundPlayer(System.Windows.Forms.Application.StartupPath + "\\sound\\auth.wav"))
                        {
                            sp.Play();
                        }

                    }
                    catch
                    {

                    }
                }

            }
            catch
            {
                try
                {
                    listOfAuthPopups.Add(alertAuthorization);

                }
                catch
                {


                }

            }
        }


        void alertAuthorization_Closed(object sender, RadPopupClosedEventArgs args)
        {
            try
            {
                listOfAuthPopups.Remove((sender as RadDesktopAlert));
            }
            catch
            {

            }
        }
        void btnAllow_Click(object sender, EventArgs e)
        {
            try
            {
                new Thread(delegate ()
                {
                    try
                    {
                        AuthorizationPermit((sender as RadButtonElement).Tag.ToStr());
                    }
                    catch
                    {


                    }
                }).Start();


                Thread.Sleep(1000);

                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoClose = true;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Hide();
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Dispose();
            }
            catch
            {


            }
            //  ((sender as RadButtonElement).Parent as RadDesktopAlert).Dispose();
        }

        private void AuthorizationPermit(string msg)
        {
            try
            {
                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);
                long _JobId = values[1].ToLong();
                int _DriverId = values[2].ToInt();
                int JobStatusId = values[3].ToInt();
                int DriverStatusId = values[4].ToInt();


                new Thread(delegate ()
                {
                    try
                    {
                        General.SendMessageToPDA("request pda=" + _DriverId + "=" + _JobId + "=auth status>>yes>>" + _JobId + "=5=" + JobStatusId, _DriverId.ToString());

                    }
                    catch
                    {


                    }
                }).Start();





                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if (JobStatusId == Enums.BOOKINGSTATUS.NOPICKUP && AppVars.objPolicyConfiguration.EnableBookingOtherCharges.ToBool())
                    {


                        db.ExecuteQuery<int>("exec stp_UpdateJobEnd {0},{1},{2},{3},{4},{5},{6}", _JobId, _DriverId, JobStatusId.ToIntorNull(), DriverStatusId.ToIntorNull(), -1, "", "-1");

                    }
                    else
                    {

                        db.stp_UpdateJob(_JobId, _DriverId, JobStatusId.ToIntorNull(), DriverStatusId.ToIntorNull(), -1);

                    }
                }

                General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD + "=" + _JobId + "=syncdrivers");

                //   AppVars.frmMDI.RefreshActiveDashBoard();



                General.SendMessageToPDA("request broadcast=" + "**broadcast close auth job>>" + Environment.MachineName + ">>" + msg.Replace(">>", "<<") + ">>allow");

                //   new BroadcasterData().BroadCastToAll("**broadcast close auth job>>" + Environment.MachineName + ">>" + msg.Replace(">>", "<<") + ">>allow");

                if (JobStatusId == Enums.BOOKINGSTATUS.NOPICKUP)
                {
                    if (AppVars.objPolicyConfiguration.SMSNoPickup.ToStr().Trim().Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {


                            db.CommandTimeout = 3;
                            var objBook = db.Bookings.FirstOrDefault(c => c.Id == _JobId);

                            if (objBook != null && objBook.CustomerMobileNo.ToStr().Trim().Length > 0)
                            {
                                SendSMS(objBook.CustomerMobileNo.ToStr().Trim(), GetMessage(AppVars.objPolicyConfiguration.SMSNoPickup.ToStr().Trim(), objBook, objBook.Id), objBook.SMSType.ToInt());
                            }
                        }
                    }


                    UpdateNoPickupAndCancelledCountFromDb();
                }
            }
            catch (Exception ex)
            {


            }

        }


        void btnTrackDriver_Click(object sender, EventArgs e)
        {
            TrackDriver((sender as RadButtonElement).Tag.ToStr());
            Thread.Sleep(1000);
        }

        void btnTrackEscort_Click(object sender, EventArgs e)
        {
            TrackEscort((sender as RadButtonElement).Tag.ToStr());
            Thread.Sleep(1000);
        }

        void btnDeny_Click(object sender, EventArgs e)
        {

            try
            {

                new Thread(delegate ()
                {
                    try
                    {
                        AuthorizationDenied((sender as RadButtonElement).Tag.ToStr());
                    }
                    catch
                    {

                    }
                }).Start();

                Thread.Sleep(1000);


                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoClose = true;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).AutoCloseDelay = 1;
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Hide();
                ((sender as RadButtonElement).TextElement.Tag as RadDesktopAlert).Dispose();
            }
            catch
            {


            }
        }

        private void AuthorizationDenied(string msg)
        {

            try
            {
                // string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);


                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);
                long _JobId = values[1].ToLong();
                int _DriverId = values[2].ToInt();
                int JobStatusId = values[3].ToInt();
                int DriverStatusId = values[4].ToInt();

                if (AppVars.objPolicyConfiguration.MapType.ToInt() == 1)
                {
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {
                        General.SendMessageToPDA("request pda=" + _DriverId + "=" + _JobId + "=auth status>>no>>" + _JobId + "=5", _DriverId.ToString());
                        // For Google Map Use Socket To Send/Receive Data
                        //  General.SendMessageToPDA("request pda=" + values[2].ToStr() + "=" + values[1].ToStr() + "=auth status>>no>>" + values[1].ToStr() + "=5");
                    }

                }
                else
                {
                    if (AppVars.objPolicyConfiguration.IsListenAll.ToBool())
                    {
                        General.SendMessageToPDA("request pda=" + _DriverId + "=" + _JobId + "=auth status>>no>>" + _JobId + "=5", _DriverId.ToString());
                        // For Google Map Use Socket To Send/Receive Data
                        //   General.SendMessageToPDA("request pda=" + values[2].ToStr() + "=" + values[1].ToStr() + "=auth status>>no>>" + values[1].ToStr() + "=5");
                    }

                }

                General.SendMessageToPDA("request broadcast=" + "**broadcast close auth job>>" + Environment.MachineName + ">>" + msg.Replace(">>", "<<") + ">>deny");
                //  new BroadcasterData().BroadCastToAll("**broadcast close auth job>>" + Environment.MachineName + ">>" + msg.Replace(">>", "<<") + ">>deny");
            }
            catch (Exception ex)
            {


            }


        }


        private void TrackDriver(string msg)
        {


            try
            {
                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);



                long jobId = values[1].ToLong();
                int driverId = values[2].ToInt();



                rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? General.GetObject<Booking>(c => c.Id == jobId) : null, true, driverId);
                rpt.ShowDialog();
                rpt.Dispose();

                GC.Collect();







            }
            catch
            {


            }
        }

        private void TrackEscort(string msg)
        {


            try
            {
                string[] values = msg.Split(new string[] { ">>" }, StringSplitOptions.None);



                long jobId = values[1].ToLong();
                int driverId = values[2].ToInt();



                rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(jobId > 0 ? General.GetObject<Booking>(c => c.Id == jobId) : null, true, driverId);
                rpt.ShowDialog();
                rpt.Dispose();

                GC.Collect();







            }
            catch
            {


            }
        }

        #endregion

        #endregion



        #region JobPool region

        frmPoolBookingAlert frmJobPoolAlert = null;

        public void JobPoolOfferNotification(PoolBooking obj)
        {
            try
            {
                if (Pg_PoolJobs == null)
                    return;

                UpdateJobPoolCount(obj.BookingJson.ToStr());






                if (obj.EventType == EventType.OfferedJob)
                {
                    int jobsCount = Pg_PoolJobs.Item.Tag.ToInt();




                    if (jobsCount > 0)
                    {


                        //if (obj.ShowNotification)
                        //{

                        if (frmJobPoolAlert == null || frmJobPoolAlert.IsDisposed)
                        {
                            frmJobPoolAlert = new frmPoolBookingAlert(obj);

                            frmJobPoolAlert.Tag = "1";

                        }

                        frmJobPoolAlert.SetData(obj, jobsCount);
                        if (frmJobPoolAlert.Tag.ToStr() == "1")
                        {
                            frmJobPoolAlert.StartPosition = FormStartPosition.WindowsDefaultLocation;
                            frmJobPoolAlert.Show();

                        }

                        frmJobPoolAlert.Location = new Point(Screen.PrimaryScreen.WorkingArea.Width - 320, 30);
                        frmJobPoolAlert.BringToFront();
                        //   }
                    }
                }

            }
            catch
            {


            }

        }

        void TransferJob_Click(object sender, EventArgs e)
        {
            try
            {


                RadMenuItem item = (RadMenuItem)sender;



                long jobId = 0;



                if (Pg_PendingJobs.Item.IsSelected)
                {

                    jobId = grdPendingJobs.CurrentRow.Cells["Id"].Value.ToLong();
                }
                else if (Pg_PreBookings.Item.IsSelected)
                {

                    jobId = grdPreBookings.CurrentRow.Cells["Id"].Value.ToLong();
                }
                if (jobId != 0)
                {

                    if (item.Text.StartsWith("Transfer"))
                    {
                        RadDesktopAlert alert = new RadDesktopAlert();

                        alert.ContentImage = Resources.Resource1.refresh_small;
                        alert.AutoCloseDelay = 4;
                        alert.ShowOptionsButton = false;
                        alert.ShowPinButton = false;
                        alert.FixedSize = new Size(300, 80);
                        alert.CaptionText = "";
                        alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>Transferring Job Please Wait... </span></b></html>";
                        alert.Show();
                    }
                    new Thread(delegate ()
                    {

                        try
                        {
                            string rtn;
                            if (item.Text.StartsWith("Transfer"))
                            {

                                rtn = JobPool.TransferJob(AppVars.objPolicyConfiguration.DefaultClientId, jobId, AppVars.LoginObj.UserName.ToStr());



                            }
                            else
                            {
                                rtn = JobPool.SendBackToPool(AppVars.objPolicyConfiguration.DefaultClientId, jobId, AppVars.LoginObj.UserName.ToStr());

                            }


                            if (rtn.ToStr().ToLower().Contains("failed:"))
                            {
                                JsonGRoot a = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonGRoot>(rtn);

                                MessageBox.Show(a.Data.ToStr().Split(':')[1]);
                            }
                            //if (rtn)
                            //{
                            //    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);

                            //}
                        }
                        catch
                        {



                        }
                    }).Start();


                }





            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        ConditionalFormattingObject objTransferredPoolJobs = null;

        Font font_pooljob = new Font("Tahoma", 8, FontStyle.Regular);


        public void JobPoolRecoverJob(string msg)
        {


            if (Pg_PoolJobs == null)
                return;

            try
            {


                long jobId = msg.Split('=')[1].ToLong();

                grdJobsPool.Rows.Remove(grdJobsPool.Rows.FirstOrDefault(c => c.Cells["Id"].Value.ToLong() == jobId));
            }
            catch
            {

            }

        }
        public void PopulateJobsPool()
        {

            try
            {
                if (Pg_PoolJobs == null)
                    return;

                //DateTime? nowDate = DateTime.Now.Date;
                //  DateTime? fromDate = dtpFromJobsPool.Value.ToDateorNull();
                //   DateTime? tillDate = dtpTillJobsPool.Value.ToDateorNull();


                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var jobpool = (from a in db.Bookings.Where(a => (a.BookingStatusId == 25 || a.BookingStatusId == 21))
                                       //&& (fromDate == null || a.PickupDateTime.Value.Date >= fromDate)
                                       // && (tillDate == null || a.PickupDateTime.Value.Date <= tillDate))



                                   select new
                                   {
                                       Id = a.Id,
                                       RefNumber = a.BookingNo,
                                       PickupDateTemp = a.PickupDateTime,
                                       PickUpDate = string.Format("{0:dd/MM/yyyy}", a.PickupDateTime),
                                       Time = string.Format("{0:HH:mm}", a.PickupDateTime),
                                       Passenger = a.CustomerName,
                                       From = a.FromDoorNo != string.Empty ? a.FromDoorNo + " - " + a.FromAddress : a.FromAddress,
                                       To = a.ToDoorNo != string.Empty ? a.ToDoorNo + " - " + a.ToAddress : a.ToAddress,
                                       Fare = a.FareRate,
                                       Vehicle = a.Fleet_VehicleType.VehicleType,
                                       Account = "",
                                       Notes = a.NotesString,
                                       OfferPrice = a.FareRate,
                                       Status = a.BookingStatus.StatusName,

                                       AcceptedOn = string.Format("{0:dd/MM/yyyy HH:mm}", a.JobOfferDateTime),
                                       AcceptedBy = a.CompanyCreditCardDetails,
                                       Driver = a.NotesString,
                                       OtherCompanyIP = a.BoundType,
                                       a.AcceptedDateTime,
                                       a.ArrivalDateTime,
                                       a.POBDateTime,
                                       a.STCDateTime,

                                       // DriverNo = a.DriverId > 0 ? a.Fleet_Driver.DriverNo : "",
                                       // SendMessage = a.SpecialRequirements,
                                       // UpdateBy = a.EditLog,

                                   }).OrderByDescending(c => c.PickupDateTemp).ToList();

                    grdJobsPool.DataSource = jobpool;
                }
                //   grdJobsPool.EnableAlternatingRowColor = true;
                //  ((GridTableElement)this.grdJobsPool.TableElement).AlternatingRowColor = Color.AliceBlue;

                if (grdJobsPool.RowCount > 0)
                {
                    lblTransferredJobs.Text = "Transferred Jobs (" + grdJobsPool.RowCount + ")";
                }
                else
                {
                    lblTransferredJobs.Text = "Transferred Jobs";
                }
                FormatJobPoolsGrid();
            }
            catch (Exception ex)
            {

                // ENUtils.ShowMessage(ex.Message);
            }
        }

        void btnShowAllJobsPool_Click(object sender, EventArgs e)
        {
            dtpFromJobsPool.Value = null;
            dtpTillJobsPool.Value = null;
            PopulateJobsPool();
        }

        void btnSearchJobsPool_Click(object sender, EventArgs e)
        {
            PopulateJobsPool();
        }




        void grdPoolLister_ViewCellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                if (e.CellElement is GridHeaderCellElement)
                {
                    //e.CellElement
                    e.CellElement.BorderColor = _HeaderRowBorderColor;
                    e.CellElement.BorderColor2 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor3 = _HeaderRowBorderColor;
                    e.CellElement.BorderColor4 = _HeaderRowBorderColor;


                    //e.CellElement.DrawBorder = false;
                    e.CellElement.BackColor = _HeaderRowBackColor;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.Font = newFont;
                    e.CellElement.ForeColor = Color.White;
                    e.CellElement.DrawFill = true;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;

                }

                else if (e.CellElement is GridFilterCellElement)
                {

                    e.CellElement.Font = oldFont;
                    e.CellElement.NumberOfColors = 1;
                    e.CellElement.BackColor = Color.White;
                    e.CellElement.RowElement.BackColor = Color.White;
                    e.CellElement.RowElement.NumberOfColors = 1;

                    e.CellElement.BorderColor = GridRowBorderColor;
                    e.CellElement.BorderColor2 = GridRowBorderColor;
                    e.CellElement.BorderColor3 = GridRowBorderColor;
                    e.CellElement.BorderColor4 = GridRowBorderColor;

                    e.CellElement.BorderBoxStyle = BorderBoxStyle.SingleBorder;
                }
                else if (e.CellElement is GridDataCellElement)
                {

                    if (e.Column.Name == "Driver" && e.Row.Cells["AcceptedOn"].Value != null && e.Row.Cells["AcceptedOn"].Value.ToStr() != "")
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.LightGreen;

                        //     e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;


                    }

                    if (e.Column.Name == "Driver" && e.Row.Cells["AcceptedDateTime"].Value != null)
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.Yellow;

                        //      e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;

                    }
                    if (e.Column.Name == "Driver" && e.Row.Cells["ArrivalDateTime"].Value != null)
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.Pink;

                        //    e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;
                    }
                    if (e.Column.Name == "Driver" && e.Row.Cells["POBDateTime"].Value != null)
                    {
                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.Red;
                        e.CellElement.ForeColor = Color.White;
                        //       e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;
                    }
                    if (e.Column.Name == "Driver" && e.Row.Cells["STCDateTime"].Value != null)
                    {

                        e.CellElement.Font = oldFont;
                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.Blue;

                        //       e.CellElement.RowElement.NumberOfColors = 1;
                        e.CellElement.DrawFill = true;
                    }

                    if (e.Column.Name == "Driver" && e.Row.Cells["AcceptedOn"].Value.ToStr() == "")
                    {
                        e.CellElement.DrawFill = false;
                        // e.CellElement.RowElement.DrawFill = false;

                    }
                    else
                    {

                    }


                    if (e.Column.IsVisible)

                    {
                        e.CellElement.ToolTipText = e.CellElement.Value.ToStr();
                    }

                }


            }
            catch { }
        }


        //private void btnTrackPoolJob_Click(object sender, EventArgs e)
        //{


        //    long jobId = grdJobsPool.CurrentRow.Cells["Id"].Value.ToLong();
        //    string result = JobPool.TrackDriver(AppVars.objPolicyConfiguration.DefaultClientId, jobId, AppVars.LoginObj.UserName.ToStr());

        //    //string result2 =JobPoolAPICaller.JobPoolAPIProxy.TrackDriver(jobId.ToStr(), "", "", "");


        //    //var r = result.ToStr().Trim().Replace("\\", "").ToStr().Trim().Substring(1);
        //    //    r = r.Remove(r.LastIndexOf('"'));




        //    //r = r.Replace("\"trackDriverDetail\":\"", "\"trackDriverDetail\":");


        //    JsonRoot root= Newtonsoft.Json.JsonConvert.DeserializeObject<JsonRoot>(result); ;








        //    //string s=(root.Data.Data as JobPoolAPICaller.TrackDriverDetail).trackDriverDetail;

        //    //     var obj = Newtonsoft.Json.JsonConvert.DeserializeObject<JobPoolAPICaller.TrackDriverDetail>(root.Data.ToStr());

        //    if (root.Data.hasError == false)
        //    {
        //        rptJobRouthPathGoogleOtherOffice rpt = new rptJobRouthPathGoogleOtherOffice(jobId, root.Data);
        //        rpt.ShowDialog();
        //        rpt.Dispose();

        //        GC.Collect();
        //    }
        //    else
        //    {
        //        MessageBox.Show("Tracking not available.");
        //    }
        //}


        private void btnTrackPoolJob_Click(object sender, EventArgs e)
        {

            long jobId = grdJobsPool.CurrentRow.Cells["Id"].Value.ToLong();


            string result = JobPoolAPICaller.JobPoolAPIProxy.TrackDriver(jobId.ToStr(), "", "", "");


            RequestResponse<JobPoolAPICaller.TrackDriverDetail> obj = Newtonsoft.Json.JsonConvert.DeserializeObject<RequestResponse<JobPoolAPICaller.TrackDriverDetail>>(result);

            if (obj.HasError == false)
            {
                rptJobRouthPathGoogleOtherOffice rpt = new rptJobRouthPathGoogleOtherOffice(jobId, obj.Data);
                rpt.ShowDialog();
                rpt.Dispose();

                GC.Collect();
            }
            else
            {
                MessageBox.Show("Tracking not available.");
            }
        }

        private void btnTrackEscortPoolJob_Click(object sender, EventArgs e)
        {

            long jobId = grdJobsPool.CurrentRow.Cells["Id"].Value.ToLong();


            string result = JobPoolAPICaller.JobPoolAPIProxy.TrackDriver(jobId.ToStr(), "", "", "");


            RequestResponse<JobPoolAPICaller.TrackDriverDetail> obj = Newtonsoft.Json.JsonConvert.DeserializeObject<RequestResponse<JobPoolAPICaller.TrackDriverDetail>>(result);

            if (obj.HasError == false)
            {
                rptJobRouthPathGoogleOtherOffice rpt = new rptJobRouthPathGoogleOtherOffice(jobId, obj.Data);
                rpt.ShowDialog();
                rpt.Dispose();

                GC.Collect();
            }
            else
            {
                MessageBox.Show("Tracking not available.");
            }
        }


        private void FormatJobPoolsGrid()
        {
            try
            {

                if (objTransferredPoolJobs == null)
                {
                    objTransferredPoolJobs = new ConditionalFormattingObject();
                    //objTransferredPoolJobs.ApplyToRow = true;
                    //objTransferredPoolJobs.RowBackColor = Color.LightGreen;
                    //objTransferredPoolJobs.TValue1 = string.Empty;
                    //objTransferredPoolJobs.ConditionType = ConditionTypes.NotEqual;
                    //objTransferredPoolJobs.TValue2 = null;


                    //grdJobsPool.Columns["AcceptedOn"].ConditionalFormattingObjectList.Add(objTransferredPoolJobs);


                    if (CMenu_PoolJobs == null)
                    {
                        CMenu_PoolJobs = new RadDropDownMenu();
                        CMenu_PoolJobs.BackColor = Color.Orange;


                        RadMenuItem EditFareItem1 = new RadMenuItem("Recover Job");  // 0 index
                        EditFareItem1.ForeColor = Color.Black;
                        EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                        EditFareItem1.Click += new EventHandler(btnRecoverPoolJob_Click);
                        CMenu_PoolJobs.Items.Add(EditFareItem1);

                        EditFareItem1 = new RadMenuItem("Track Driver");  // 0 index
                        EditFareItem1.ForeColor = Color.Blue;
                        EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                        EditFareItem1.Click += new EventHandler(btnTrackPoolJob_Click);
                        CMenu_PoolJobs.Items.Add(EditFareItem1);

                        EditFareItem1 = new RadMenuItem("Track Escort");  // 0 index
                        EditFareItem1.ForeColor = Color.Blue;
                        EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                        EditFareItem1.Click += new EventHandler(btnTrackEscortPoolJob_Click);
                        if (AppVars.listUserRights.Count(c => c.functionId.ToUpper() == "SHOW TRACK ESCORT") > 0)
                        {
                            EditFareItem1.Visibility = ElementVisibility.Visible;
                        }
                        else
                        {
                            EditFareItem1.Visibility = ElementVisibility.Hidden;
                        }
                        CMenu_PoolJobs.Items.Add(EditFareItem1);

                        EditFareItem1 = new RadMenuItem("View Job");  // 0 index
                        EditFareItem1.ForeColor = Color.Black;
                        EditFareItem1.Font = new Font("Tahoma", 10, FontStyle.Bold);
                        EditFareItem1.Click += new EventHandler(btnViewPoolJob_Click);
                        CMenu_PoolJobs.Items.Add(EditFareItem1);

                        grdJobsPool.ContextMenuOpening += new ContextMenuOpeningEventHandler(grdJobsPool_ContextMenuOpening);
                        grdJobsPool.ViewCellFormatting += new CellFormattingEventHandler(grdPoolLister_ViewCellFormatting);


                        grdJobsPool.TableElement.RowHeight = 35;
                    }

                }




                grdJobsPool.Font = font_pooljob;

                //if (grdJobsPool.Columns.Contains("btnDelete"))
                //    grdJobsPool.Columns["btnDelete"].Width = 60;

                grdJobsPool.Columns["PickupDateTemp"].IsVisible = false;
                (grdJobsPool.Columns["PickupDateTemp"] as GridViewDateTimeColumn).CustomFormat = "dd/MM/yyyy HH:mm";
                (grdJobsPool.Columns["PickupDateTemp"] as GridViewDateTimeColumn).FormatString = "{0:dd/MM/yyyy HH:mm}";

                //  grdJobsPool.Columns["PickUpDate"].Width = 70;
                grdJobsPool.Columns["PickUpDate"].HeaderText = "Date";




                //  grdJobsPool.Columns["Time"].Width = 45;
                grdJobsPool.Columns["Time"].HeaderText = "Time";

                //grdJobsPool.Columns["FromLocTypeId"].IsVisible = false;
                //grdJobsPool.Columns["ToLocTypeId"].IsVisible = false;


                grdJobsPool.Columns["OtherCompanyIP"].IsVisible = false;

                grdJobsPool.Columns["Id"].IsVisible = false;
                grdJobsPool.Columns["Account"].IsVisible = false;
                grdJobsPool.Columns["AcceptedDateTime"].IsVisible = false;
                grdJobsPool.Columns["ArrivalDateTime"].IsVisible = false;
                grdJobsPool.Columns["POBDateTime"].IsVisible = false;
                grdJobsPool.Columns["STCDateTime"].IsVisible = false;



                grdJobsPool.Columns["OfferPrice"].HeaderText = "Fares";
                grdJobsPool.Columns["OfferPrice"].IsVisible = false;

                grdJobsPool.Columns["Notes"].HeaderText = "Notes";
                grdJobsPool.Columns["Status"].HeaderText = "Status";
                grdJobsPool.Columns["AcceptedBy"].IsVisible = false;




                grdJobsPool.Columns["Notes"].IsVisible = false;



                grdJobsPool.Columns["RefNumber"].HeaderText = "Ref #";




                grdJobsPool.Columns["Fare"].HeaderText = "Fare(£)";


                grdJobsPool.Columns["Account"].HeaderText = "A/C";

                grdJobsPool.Columns["From"].HeaderText = "Pickup Point";
                grdJobsPool.Columns["To"].HeaderText = "Destination";




                grdJobsPool.AllowEditRow = true;

                grdJobsPool.AutoSizeColumnsMode = GridViewAutoSizeColumnsMode.Fill;
                grdJobsPool.AllowAutoSizeColumns = true;

                //  grdJobsPool.Columns["AcceptedBy"].IsVisible = false;
            }
            catch
            {


            }

        }

        private void btnRecoverPoolJob_Click(object sender, EventArgs e)
        {

            RecoverPoolJob();

        }

        private void RecoverPoolJob()
        {
            try
            {
                var row = grdJobsPool.CurrentRow;


                if (row != null && row is GridViewDataRowInfo)
                {

                    long id = row.Cells["Id"].Value.ToLong();


                    //    JobPool.SendBackToPool(AppVars.objPolicyConfiguration.DefaultClientId, id, AppVars.LoginObj.UserName.ToStr());


                    try
                    {
                        string rtn;

                        rtn = JobPool.RecoverJob(AppVars.objPolicyConfiguration.DefaultClientId, id, AppVars.LoginObj.UserName.ToStr());


                        if (rtn.ToStr().ToLower().Contains("failed:"))
                        {

                            JsonGRoot a = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonGRoot>(rtn);


                            MessageBox.Show(a.Data.ToStr().Split(':')[1]);
                        }
                        //else
                        //    row.Delete();
                        //if (rtn)
                        //{
                        //    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD);

                        //}
                    }
                    catch
                    {



                    }


                    //using (TaxiDataContext db = new TaxiDataContext())
                    //{
                    //    Booking obj = db.Bookings.FirstOrDefault(c => c.Id == id);

                    //    if (obj != null)
                    //    {

                    //        if (obj.BookingStatusId == 21)
                    //        {
                    //            MessageBox.Show("You cannot Recover Job as job is already Transferred");
                    //            return;

                    //        }
                    //        else
                    //        {
                    //            obj.BookingStatusId = Enums.BOOKINGSTATUS.WAITING;
                    //            obj.Booking_Logs.Add(new Booking_Log { User = AppVars.LoginObj.UserName.ToStr(), UpdateDate = DateTime.Now, AfterUpdate = "Job Recovered from Pool" });

                    //            db.SubmitChanges();

                    //            row.Delete();
                    //            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_BOOKING_DASHBOARD);

                    //            new Thread(delegate ()
                    //            {

                    //                try
                    //                {
                    //                    RecoverPoolJobDriver(id);
                    //                }
                    //                catch
                    //                {

                    //                }
                    //            }).Start();

                    //        }


                    //    }

                    //}

                }
            }
            catch (Exception ex)
            {

                MessageBox.Show(ex.Message);
            }

        }






        private void btnViewPoolJob_Click(object sender, EventArgs e)
        {

            ViewDetailForm(grdJobsPool.CurrentRow);


        }


        void grdJobsPool_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {

            if (grdJobsPool.CurrentRow != null && grdJobsPool.CurrentRow is GridViewDataRowInfo)
            {
                //CMenu_PoolJobs.Items[1].Visibility = grdJobsPool.CurrentRow.Cells["Driver"].Value.ToStr() != string.Empty ? ElementVisibility.Visible : ElementVisibility.Collapsed;


                //if (CMenu_PoolJobs.Items[1].Visibility == ElementVisibility.Visible)
                //{
                //    CMenu_PoolJobs.Items[0].Visibility = ElementVisibility.Collapsed;

                //}
                //else
                //{
                //    CMenu_PoolJobs.Items[0].Visibility = ElementVisibility.Visible;
                //}

            }

            e.ContextMenu = CMenu_PoolJobs;
        }

        void Browser_DocumentCompleted(object sender, Gecko.Events.GeckoDocumentCompletedEventArgs e)
        {
            IsJobPoolDocumentLoaded = true;



            if (Browser.Tag == null)
            {
                try
                {


                    var res = JobPoolAPICaller.JobPoolAPIProxy.GetJobCount(AppVars.objPolicyConfiguration.DefaultClientId.ToStr());

                    string cnt = "0";
                    JobPoolResponse objResponse = Newtonsoft.Json.JsonConvert.DeserializeObject<JobPoolResponse>(res);
                    if (objResponse.HasError == false)
                        cnt = objResponse.Data.ToStr();
                    else
                        cnt = "0";


                    Pg_PoolJobs.Item.Text = "Treasure Pool(" + cnt + ")";
                    Pg_PoolJobs.Item.Tag = cnt;


                    Browser.Tag = cnt;
                }
                catch
                {

                }
            }

        }


        private bool IsJobPoolDocumentLoaded = false;
        string lastPoolDocText = "";
        private void UpdateJobPoolCount(string json = "")
        {

            try
            {


                if (IsJobPoolDocumentLoaded && Browser != null && Browser.Document.Body.InnerHtml != lastPoolDocText)
                {

                    lastPoolDocText = Browser.Document.Body.InnerHtml;


                    int jobsCount = 0;


                    if (json.ToStr().Trim().Length > 0 && json.ToStr().IsNumeric())
                        jobsCount = json.ToStr().Trim().ToInt();
                    else
                    {


                        Gecko.GeckoHtmlElement Btn = (Gecko.GeckoHtmlElement)Browser.DomDocument.GetElementById("my-button");
                        Btn.Click();

                        Gecko.DOM.GeckoInputElement obj = (Gecko.DOM.GeckoInputElement)Browser.Document.GetElementById("hdnTransferedJobCount");


                        if (obj.Value.ToStr() == "")
                            obj.Value = "0";

                        jobsCount = obj.Value.ToInt();

                    }




                    Pg_PoolJobs.Item.Text = "Treasure Pool(" + jobsCount.ToStr() + ")";
                    Pg_PoolJobs.Item.Tag = jobsCount;






                    if (jobsCount == 0)
                    {

                        if (frmJobPoolAlert != null)
                        {


                            if (frmJobPoolAlert.IsDisposed == false)
                            {
                                frmJobPoolAlert.CloseForm();

                            }

                        }
                    }
                    else
                    {

                        if (frmJobPoolAlert != null)
                        {


                            if (frmJobPoolAlert.IsDisposed == false)
                            {
                                frmJobPoolAlert.UpdateCounter(jobsCount);

                            }

                        }

                    }

                }
            }
            catch
            {

            }
        }


        private void InitializeJobPoolConfig()
        {

            try
            {
                Gecko.Xpcom.Initialize("Firefox");



                string JobPoolURL = "";
                string userName = string.Empty;
                string password = string.Empty;
                bool IsJobPoolConfExist = false;

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var data = db.ExecuteQuery<string>("select APIKey from mapkeys where maptype='JobPool'").FirstOrDefault().ToStr().Trim();
                    if (!string.IsNullOrEmpty(data))
                    {
                        data = Cryptography.Decrypt(data, "softeuroconnskey", true);
                        if (data.Split('|').Length > 2)
                        {
                            JobPoolURL = data.Split('|')[0];
                            userName = data.Split('|')[1];
                            password = data.Split('|')[2];

                            IsJobPoolConfExist = true;
                        }

                    }

                }

                if (IsJobPoolConfExist)
                {
                    this.grdAcceptorPooljobs.Visible = false;
                    this.radPanel6.Visible = true;
                    lblError.Visible = false;

                    Browser = new Gecko.GeckoWebBrowser();

                    this.panel3.Controls.Add(Browser);
                    Browser.Dock = DockStyle.Fill;
                    Browser.BringToFront();

                    string strPostData = "UserName={0}&Password={1}&ReturnUrl=Dashboard/JobPoolForDispatched";
                    strPostData = string.Format(strPostData, userName, password, null);

                    var postData = Gecko.IO.MimeInputStream.Create();
                    postData.AddHeader("Content-Type", "application/x-www-form-urlencoded");
                    postData.AddContentLength = true;
                    postData.SetData(strPostData);
                    //     JobPoolURL?UserName=32423&Password=123&ReturnUrl=Dashboard/JobPoolForDispatched



                    Browser.DocumentCompleted += new EventHandler<Gecko.Events.GeckoDocumentCompletedEventArgs>(Browser_DocumentCompleted);
                    Browser.Navigate(JobPoolURL, Gecko.GeckoLoadFlags.FirstLoad, null, postData);
                }
                else
                {
                    this.grdAcceptorPooljobs.Visible = false;
                    this.radPanel6.Visible = true;
                    lblError.Visible = true;
                    panel3.Visible = true;
                }


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage("Job Pool Authorization failed!");
            }


        }



        RadDropDownMenu grdOtherMenu = null;
        void grdOthersJobs_ContextMenuOpening(object sender, ContextMenuOpeningEventArgs e)
        {
            try
            {
                if (grdOtherMenu == null)
                {
                    grdOtherMenu = new RadDropDownMenu();


                    RadMenuItem item = new RadMenuItem("Copy Booking");
                    item.ForeColor = Color.Black;
                    item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    item.Click += new EventHandler(CopyOtherSearchBooking_Click);
                    item.Name = "CopyBooking";
                    item.Tag = (sender as RadGridView).Name;
                    grdOtherMenu.Items.Add(item);



                    item = new RadMenuItem("View Booking");
                    item.ForeColor = Color.Black;
                    item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    item.Click += new EventHandler(ViewOtherSearchBooking_Click);
                    item.Tag = (sender as RadGridView).Name;
                    item.Name = "ViewBooking";
                    grdOtherMenu.Items.Add(item);


                    item = new RadMenuItem("Re-Call");
                    item.ForeColor = Color.Red;
                    item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    item.Click += new EventHandler(RecallBooking_Click);
                    item.Tag = (sender as RadGridView).Name;
                    item.Name = "Recall";
                    grdOtherMenu.Items.Add(item);


                    item = new RadMenuItem("Re-Dispatch");
                    item.ForeColor = Color.Red;
                    item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    item.Click += new EventHandler(ReDispatchBooking_Click);
                    item.Tag = (sender as RadGridView).Name;
                    item.Name = "Redispatch";
                    grdOtherMenu.Items.Add(item);


                    item = new RadMenuItem("Audit Log");
                    item.ForeColor = Color.Black;
                    item.Font = new Font("Tahoma", 10, FontStyle.Bold);
                    item.Click += new EventHandler(AuditLogBooking_Click);
                    item.Tag = (sender as RadGridView).Name;
                    item.Name = "AuditLog";
                    grdOtherMenu.Items.Add(item);



                    if (AppVars.AppTheme != "ControlDefault")
                    {
                        foreach (var itemX in grdOtherMenu.Items)
                        {
                            if (itemX.ForeColor != Color.Red && itemX.ForeColor != Color.Crimson && itemX.ForeColor != Color.RosyBrown)
                                itemX.ForeColor = Color.White;
                        }

                    }

                }
                else
                {
                    grdOtherMenu.Items["CopyBooking"].Tag = (sender as RadGridView).Name;
                    grdOtherMenu.Items["ViewBooking"].Tag = (sender as RadGridView).Name;

                    grdOtherMenu.Items["Recall"].Tag = (sender as RadGridView).Name;
                    grdOtherMenu.Items["Redispatch"].Tag = (sender as RadGridView).Name;
                    grdOtherMenu.Items["AuditLog"].Tag = (sender as RadGridView).Name;

                }




                e.ContextMenu = grdOtherMenu;
            }
            catch
            {

            }
        }


        private void ShowAuditLog(string refNo)
        {
            try
            {
                rptfrmJobLog jobLog = new rptfrmJobLog(refNo);
                jobLog.FormBorderStyle = FormBorderStyle.FixedSingle;
                jobLog.StartPosition = FormStartPosition.CenterScreen;
                jobLog.ShowDialog();
                jobLog.Dispose();
            }
            catch (Exception ex)
            {


            }
        }

        void AuditLogBooking_Click(object sender, EventArgs e)
        {

            try
            {
                string name = (sender as RadMenuItem).Tag.ToStr();

                if (name == "grdCancelledJobs" && grdCancelledJobs.CurrentRow != null && grdCancelledJobs.CurrentRow is GridViewDataRowInfo)
                {

                    ShowAuditLog(grdCancelledJobs.CurrentRow.Cells["RefNumber"].Value.ToStr());
                }
                else if (name == "grdNoShowJobs" && grdNoShowJobs.CurrentRow != null && grdNoShowJobs.CurrentRow is GridViewDataRowInfo)
                {

                    ShowAuditLog(grdNoShowJobs.CurrentRow.Cells["RefNumber"].Value.ToStr());
                }
            }
            catch (Exception ex)
            {



            }
        }
        void CopyOtherSearchBooking_Click(object sender, EventArgs e)
        {

            try
            {

                string name = (sender as RadMenuItem).Tag.ToStr();

                if (name == "grdCancelledJobs" && grdCancelledJobs.CurrentRow != null && grdCancelledJobs.CurrentRow is GridViewDataRowInfo)
                {
                    CopyBooking(grdCancelledJobs.CurrentRow.Cells["Id"].Value.ToLong());
                }
                else if (name == "grdNoShowJobs" && grdNoShowJobs.CurrentRow != null && grdNoShowJobs.CurrentRow is GridViewDataRowInfo)
                {

                    CopyBooking(grdNoShowJobs.CurrentRow.Cells["Id"].Value.ToLong());
                }

            }
            catch (Exception ex)
            {



            }
        }




        void ViewOtherSearchBooking_Click(object sender, EventArgs e)
        {
            string name = (sender as RadMenuItem).Tag.ToStr();

            if (name == "grdCancelledJobs" && grdCancelledJobs.CurrentRow != null && grdCancelledJobs.CurrentRow is GridViewDataRowInfo)
            {
                ViewDetailForm(grdCancelledJobs.CurrentRow);
            }
            else if (name == "grdNoShowJobs" && grdNoShowJobs.CurrentRow != null && grdNoShowJobs.CurrentRow is GridViewDataRowInfo)
            {

                ViewDetailForm(grdNoShowJobs.CurrentRow);
            }


        }


        void RecallBooking_Click(object sender, EventArgs e)
        {
            try
            {
                string name = (sender as RadMenuItem).Tag.ToStr();
                long jobId = 0;
                int driverId = 0;
                string driverNo = string.Empty;
                GridViewRowInfo row = null;
                if (name == "grdCancelledJobs" && grdCancelledJobs.CurrentRow != null && grdCancelledJobs.CurrentRow is GridViewDataRowInfo)
                {

                    jobId = grdCancelledJobs.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdCancelledJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                    driverNo = grdCancelledJobs.CurrentRow.Cells["Driver"].Value.ToStr();
                    row = grdCancelledJobs.CurrentRow;
                }
                else if (name == "grdNoShowJobs" && grdNoShowJobs.CurrentRow != null && grdNoShowJobs.CurrentRow is GridViewDataRowInfo)
                {


                    jobId = grdNoShowJobs.CurrentRow.Cells["Id"].Value.ToLong();
                    driverId = grdNoShowJobs.CurrentRow.Cells["DriverId"].Value.ToInt();
                    driverNo = grdNoShowJobs.CurrentRow.Cells["Driver"].Value.ToStr();
                    row = grdNoShowJobs.CurrentRow;
                }

                if (DialogResult.Yes == MessageBox.Show("Are you sure you want to Re-Call this Booking ? ", "", MessageBoxButtons.YesNo))
                {

                    new Thread(delegate ()
                    {

                        try
                        {


                            General.ReCallBooking(jobId, driverId, true);
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.stp_BookingLog(jobId, AppVars.LoginObj.UserName.ToStr(), "Recall Job from Driver (" + driverNo + ")");
                            }

                        }
                        catch
                        {

                        }







                    }).Start();

                    row.Delete();

                }
            }
            catch
            {
            }


        }


        void ReDispatchBooking_Click(object sender, EventArgs e)
        {
            string name = (sender as RadMenuItem).Tag.ToStr();
            long jobId = 0;
            GridViewRowInfo row = null;
            if (name == "grdCancelledJobs" && grdCancelledJobs.CurrentRow != null && grdCancelledJobs.CurrentRow is GridViewDataRowInfo)
            {

                jobId = grdCancelledJobs.CurrentRow.Cells["Id"].Value.ToLong();
                row = grdCancelledJobs.CurrentRow;
            }
            else if (name == "grdNoShowJobs" && grdNoShowJobs.CurrentRow != null && grdNoShowJobs.CurrentRow is GridViewDataRowInfo)
            {


                jobId = grdNoShowJobs.CurrentRow.Cells["Id"].Value.ToLong();
                row = grdNoShowJobs.CurrentRow;
            }

            if (DialogResult.Yes == MessageBox.Show("Are you sure you want to Re-Dispatch this Booking ? ", "", MessageBoxButtons.YesNo))
            {
                if (General.ShowReDespatchForm(General.GetObject<Booking>(c => c.Id == jobId)))
                {
                    row.Delete();
                }
            }
        }

        Gecko.GeckoWebBrowser Browser = null;

        #endregion





        private void btnHideBooking_Click(object sender, EventArgs e)
        {
            HideBookings();
        }

        private void btnHideMap_Click(object sender, EventArgs e)
        {
            try
            {





                if (tableLayoutPanel2.Visible == true)
                {
                    // tableLayoutPanel2.RowStyles[0].Height = 0;
                    hidedriver();
                }
                else
                {
                    showdriver();
                    // radPageView1.Show();


                }
            }
            catch (Exception ex)
            {

            }
        }

        private void HideBookings()
        {

            if (radPageView1.Visible == true)
            {
                // tableLayoutPanel1.RowStyles[0].Height = 100;
                tableLayoutPanel2.Show();
                tableLayoutPanel2.Dock = DockStyle.Fill;
                this.Controls.Add(pnlActions);
                pnlActions.Dock = DockStyle.Top;
                radPageView1.Visible = false;
                // tableLayoutPanel1.RowStyles[1].Height = 0;
                btnHideBooking_new.Text = "Show Booking";
            }
            else
            {
                // this.Controls.Remove(pnlActions);
                Pg_PendingJobs.Controls.Add(pnlActions);
                tableLayoutPanel1.RowStyles[0].Height = 0;
                pnlActions.Dock = DockStyle.Top;
                btnHideBooking_new.Text = "Hide Booking";
                tableLayoutPanel2.Dock = DockStyle.Top;
                tableLayoutPanel2.Show();
                radPageView1.Visible = true;
                // tableLayoutPanel1.RowStyles[0].Height = 40;
                // tableLayoutPanel1.RowStyles[1].Height = 60;

            }

        }

        public void hidedriver()
        {
            // tableLayoutPanel2.RowStyles[0].Height = 0;
            tableLayoutPanel2.Visible = false;
            radPageView1.Dock = DockStyle.Fill;
            Pg_PendingJobs.Controls.Add(pnlActions);
            tableLayoutPanel1.RowStyles[0].Height = 0;
            pnlActions.Dock = DockStyle.Top;
            // tableLayoutPanel1.RowStyles[1].Height = 100;
            btnHideMap_new.Text = "Show Drivers";
        }

        private void showdriver()
        {
            btnHideMap_new.Text = "Hide Drivers";
            Pg_PendingJobs.Controls.Add(pnlActions);
            tableLayoutPanel1.RowStyles[0].Height = 0;
            pnlActions.Dock = DockStyle.Top;
            tableLayoutPanel2.Visible = true;
            tableLayoutPanel2.Dock = DockStyle.Top;
        }



        private Color GridGroupRowForeColor = Color.Blue;
        private Color GridRowBorderColor = Color.DarkSlateBlue;


        #region Driversgridevents

        #region OLDLAYOUT

        void grdDriver_CellFormatting(object sender, CellFormattingEventArgs e)
        {


            try
            {


                if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
                {
                    if (e.Column.Name == "DriverNo")
                    {


                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                        if (e.CellElement.BackColor.ToArgb() == -16777216)
                            e.CellElement.ForeColor = GridBackColor;
                        else
                            e.CellElement.ForeColor = Color.Black;



                        e.CellElement.DrawFill = true;

                    }
                    else
                    {

                        e.CellElement.DrawFill = false;
                    }




                }
            }
            catch
            {

            }
        }

        void grdOnBoardDriver_CellFormatting(object sender, CellFormattingEventArgs e)
        {



            try
            {


                if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
                {




                    if (e.Column.Name == "DriverNo")
                    {



                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                        //if (e.CellElement.BackColor.ToArgb() == -65536 || e.CellElement.BackColor.ToArgb() == -16777216 )
                        if (e.CellElement.BackColor.ToArgb() == -16777216 || e.CellElement.BackColor.ToArgb() == -65536)
                        {
                            e.CellElement.ForeColor = GridBackColor;
                            e.CellElement.Font = font_pob;
                        }
                        else
                            e.CellElement.ForeColor = Color.Black;



                        e.CellElement.DrawFill = true;

                    }
                    else
                    {

                        e.CellElement.DrawFill = false;
                    }



                }
            }
            catch
            {

            }
        }

        void grdOnPlotDrivers_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {






                if (e.ColumnIndex != -1)
                {
                    if (AppVars.AppTheme != "ControlDefault")
                    {
                        e.CellStyle.BackColor = Color.FromArgb(17, 17, 17);

                    }

                    if (grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null && grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag != null && grdOnPlotDrivers.Columns[e.ColumnIndex].Name != "SIN BIN")
                    {

                        e.CellStyle.BackColor = Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt());

                        if (e.CellStyle.BackColor.ToArgb() == -65536)
                        {

                            e.CellStyle.ForeColor = GridBackColor;
                            e.CellStyle.Font = newFont;
                            e.FormattingApplied = true;
                        }
                        else
                        {
                            e.CellStyle.ForeColor = Color.Black;
                            e.CellStyle.Font = regularFont;
                            e.FormattingApplied = true;

                        }
                    }




                    else if (grdOnPlotDrivers.Columns[e.ColumnIndex].Name == "SIN BIN")
                    {

                        e.CellStyle.BackColor = Color.FromArgb(17, 17, 17);
                        e.CellStyle.ForeColor = Color.White;

                    }



                }

            }
            catch
            {


            }
        }


        #endregion


        #region NewLayout





        private static void rightCellBorder(CellFormattingEventArgs e)
        {
            e.CellElement.BorderBoxStyle = BorderBoxStyle.FourBorders;
            e.CellElement.BorderLeftWidth = 0;
            e.CellElement.BorderRightWidth = 0;
            e.CellElement.BorderTopWidth = 0;
            e.CellElement.BorderBottomWidth = 0;

            e.CellElement.BorderRightColor = e.CellElement.BorderLeftColor = Color.DimGray;
        }

        void grdDriver_CellFormattingLayout2(object sender, CellFormattingEventArgs e)
        {
            try
            {
                rightCellBorder(e);


                e.CellElement.ForeColor = _CellForeColor;

                e.CellElement.Font = oldFont;

                if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
                {
                    if (e.Column.Name == "DriverNo" || e.Column.Name == "VehicleID")
                    {
                        e.CellElement.BackColor = GridBackColor;

                        e.CellElement.NumberOfColors = 1;

                        if (e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt() == -6632142)
                        {

                            //
                            e.CellElement.ForeColor = Color.FromArgb(-16744448);
                        }
                        else
                        {
                            ////
                            //for bcabs

                            //if (e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt() == -23296)
                            //{
                            //    e.CellElement.ForeColor = Color.Black;
                            //    e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                            //}
                            //else
                            //{

                            //    e.CellElement.ForeColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                            //    e.CellElement.BackColor = GridBackColor;
                            //}
                            //

                            //if (e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt() == -23296)
                            //{
                            //    e.CellElement.ForeColor = Color.Black;
                            //    e.CellElement.BackColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                            //}
                            //else
                            //{

                            e.CellElement.ForeColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());
                            //   e.CellElement.BackColor = GridBackColor;
                            // }
                        }

                        e.CellElement.Font = bigFont;

                        e.CellElement.DrawFill = true;

                    }
                    else
                    {

                        e.CellElement.DrawFill = false;
                    }




                }
            }
            catch
            {

            }

            //try
            //{
            //    rightCellBorder(e);

            //    e.CellElement.BackColor = GridBackColor;

            //    if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
            //    {
            //        if (e.Column.Name == "DriverNo")
            //        {


            //            e.CellElement.NumberOfColors = 1;

            //            if (e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt() == -6632142)
            //            {
            //                e.CellElement.ForeColor = Color.FromArgb(-16744448);
            //            }
            //            else
            //                e.CellElement.ForeColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());



            //            e.CellElement.Font = bigFont;

            //            e.CellElement.DrawFill = true;

            //        }
            //        else
            //        {
            //            e.CellElement.ForeColor = Color.Black;
            //            e.CellElement.Font = regularFont;
            //            e.CellElement.DrawFill = true;
            //        }




            //    }


            //    e.CellElement.DrawBorder = false;



            //    e.CellElement.BorderBoxStyle = BorderBoxStyle.FourBorders;
            //    e.CellElement.BorderLeftWidth = 0;
            //    e.CellElement.BorderRightWidth = 0;
            //    e.CellElement.BorderTopWidth = 0;
            //    e.CellElement.BorderBottomWidth = 01;
            //    e.CellElement.BorderRightColor = e.CellElement.BorderLeftColor = Color.LightGray;
            //}
            //catch
            //{

            //}
        }


        void grdOnBoardDriver_CellFormattingLayout2(object sender, CellFormattingEventArgs e)
        {

            try
            {
                rightCellBorder(e);

                //e.CellElement.ForeColor = Color.Black;
                e.CellElement.Font = oldFont;

                if (e.Column != null && e.Row != null && e.Row.Cells["Id"].Value != null)
                {




                    if (e.Column.Name == "DriverNo" || e.Column.Name == "VehicleID")
                    {

                        e.CellElement.TextAlignment = ContentAlignment.MiddleLeft;

                        e.CellElement.NumberOfColors = 1;
                        e.CellElement.ForeColor = Color.FromArgb(e.CellElement.RowInfo.Cells["BgColor"].Value.ToInt());

                        if (e.CellElement.ForeColor.ToArgb() == -16777216 || e.CellElement.ForeColor.ToArgb() == -65536)
                        {
                            //   e.CellElement.BackColor = Color.FromArgb(243, 243, 243);//Color.White;// e.CellElement.ForeColor = Color.White;
                            e.CellElement.Font = bigFont;
                        }
                        else
                        {
                            e.CellElement.Font = bigFont;
                            //  e.CellElement.BackColor = Color.FromArgb(243, 243, 243); //Color.White; //
                        }




                        //  e.CellElement.DrawFill = true;

                    }
                    else
                    {

                        e.CellElement.DrawFill = false;
                    }



                }
            }
            catch
            {

            }
            //e.CellElement.DrawBorder = false;


            //e.CellElement.BorderBoxStyle = BorderBoxStyle.FourBorders;
            //e.CellElement.BorderLeftWidth = 0;
            //e.CellElement.BorderRightWidth = 0;
            //e.CellElement.BorderTopWidth = 0;
            //e.CellElement.BorderBottomWidth = 01;
            //e.CellElement.BorderRightColor = e.CellElement.BorderLeftColor = Color.LightGray;


        }



        void grdOnPlotDrivers_CellFormattingLayout2(object sender, DataGridViewCellFormattingEventArgs e)
        {
            try
            {


                this.grdOnPlotDrivers.AdvancedCellBorderStyle.Bottom = DataGridViewAdvancedCellBorderStyle.None;
                this.grdOnPlotDrivers.AdvancedCellBorderStyle.Right = DataGridViewAdvancedCellBorderStyle.Single;
                this.grdOnPlotDrivers.AdvancedCellBorderStyle.Left = DataGridViewAdvancedCellBorderStyle.Single;


                e.CellStyle.BackColor = GridBackColor;
                // e.CellStyle.BackColor = Color.FromArgb(243, 243, 243); //needback


                if (e.ColumnIndex != -1)
                {


                    if (grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null && grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag != null && grdOnPlotDrivers.Columns[e.ColumnIndex].Name != "SIN BIN")
                    {
                        if (Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt()) == Color.FromArgb(255, 154, 205, 50) || Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt()) == Color.Green || Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt()) == Color.GreenYellow || Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt()) == Color.LightGreen)
                        {



                            e.CellStyle.ForeColor = Color.FromArgb(0, 128, 0);  //Color.FromArgb(1, 68, 160);
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;
                        }

                        else if (grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt() == -14634326)
                        {



                            e.CellStyle.ForeColor = Color.FromArgb(0, 128, 0);  //Color.FromArgb(1, 68, 160);
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;
                        }
                        else if (Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt()) == Color.FromArgb(255, 255, 255, 0))
                        {
                            e.CellStyle.ForeColor = Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt());
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;
                        }
                        else
                        {
                            //


                            e.CellStyle.ForeColor = Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt());
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;
                        }


                        //   -6632142

                        if (e.CellStyle.ForeColor.ToArgb() == -65536)
                        {
                            e.CellStyle.BackColor = GridBackColor;
                            //needback
                            // e.CellStyle.BackColor = Color.FromArgb(243, 243, 243);
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;
                        }
                        if (e.CellStyle.ForeColor.ToArgb() == -23296)
                        {

                            e.CellStyle.ForeColor = Color.Black;
                            e.CellStyle.BackColor = Color.FromArgb(grdOnPlotDrivers.Rows[e.RowIndex].Cells[e.ColumnIndex].Tag.ToInt());
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;
                        }

                        else
                        {
                            e.CellStyle.BackColor = GridBackColor;
                            // e.CellStyle.BackColor = Color.FromArgb(243, 243, 243);//needback
                            e.CellStyle.Font = bigFont;
                            e.FormattingApplied = true;

                        }
                    }




                    else if (grdOnPlotDrivers.Columns[e.ColumnIndex].Name == "SIN BIN")
                    {





                        e.CellStyle.BackColor = Color.Black;
                        e.CellStyle.ForeColor = Color.White;







                    }



                }

            }
            catch
            {


            }
        }
        public void CheckedAutoMode(bool mode, bool refreshenable)
        {
            ///   RefreshAutoDespOtherPC = refreshenable;

            chkEnableAutoDespatch.Tag = "1";
            chkEnableAutoDespatch.IsChecked = mode;
            chkEnableAutoDespatch.Tag = null;
            if (mode)
            {
                chkEnableAutoDespatch.ForeColor = Color.Green;

            }
            else
            {
                chkEnableAutoDespatch.ForeColor = Color.Black;
            }
        }

        public void CheckedBidMode(bool mode, bool refreshenable)
        {
            //  RefreshAutoDespOtherPC = refreshenable;

            chkEnableBidding.Tag = "1";
            chkEnableBidding.IsChecked = mode;
            chkEnableBidding.Tag = null;
            if (mode)
            {
                chkEnableBidding.ForeColor = Color.Green;

            }
            else
            {
                chkEnableBidding.ForeColor = Color.Black;
            }
        }


        private void ChkEnableBidding_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {

            if (chkEnableBidding.Tag != null)
                return;

            if (args.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                chkEnableBidding.ForeColor = Color.Green;

                SetBiddingMode(true, false);

            }
            else
            {
                chkEnableBidding.ForeColor = Color.Black;

                SetBiddingMode(false, false);
            }

            // RefreshAutoDespOtherPC = false;
        }


        private void ClearDashboardGridFilters()
        {
            // grdPendingJobs.FilterDescriptors.clea




        }

        public void ClearCommand()
        {





            if (txtCommand == null)
                return;


            this.txtCommand.KeyPress -= TxtCommand_KeyPress;
            txtCommand.Text = string.Empty;
            this.txtCommand.KeyPress += TxtCommand_KeyPress;
        }

        private void TxtCommand_KeyPress(object sender, KeyPressEventArgs e)
        {


            int keyNo = e.KeyChar.ToInt();

            if ((keyNo >= 97 && keyNo <= 122 || keyNo >= 65 && keyNo <= 90) && (txtCommand.Text.Length == 0 || txtCommand.Text.Trim()[0].ToStr().IsNumeric() == false))
            {

                e.Handled = true;


            }
            else
            {

                if (keyNo == 99 || keyNo == 67 || keyNo == 100 || keyNo == 68 || keyNo == 103 || keyNo == 71 || keyNo == 104 || keyNo == 72
                     || keyNo == 108 || keyNo == 76 || keyNo == 111 || keyNo == 79 || keyNo == 112 || keyNo == 80 || keyNo == 113 || keyNo == 81
                      || keyNo == 119 || keyNo == 87 || keyNo == 121 || keyNo == 89
                      || (keyNo >= 32 && keyNo <= 47) || (keyNo >= 58 && keyNo <= 64))
                    e.Handled = true;
                else
                {

                    e.Handled = RunCommand(e.KeyChar, txtCommand.Text.Trim());


                    if (e.Handled)
                    {
                        ClearCommand();
                    }
                }
            }
            // }


        }

        private bool RunCommand(char e, string commandLine)
        {
            bool handleCommand = false;



            if (commandLine.ToStr().IsNumeric() && e.ToStr().IsNumeric() == false)
            {


                e = Convert.ToChar(e.ToStr().ToUpper());

                int driverId = 0;

                var row = grdOnBoardDriver.Rows.FirstOrDefault(c => c.Cells["DriverNo"].Value.ToStr() == commandLine);

                if (row == null)
                    row = grdDriverWaiting.Rows.FirstOrDefault(c => c.Cells["DriverNo"].Value.ToStr() == commandLine);

                if (row != null)
                    driverId = row.Cells["DriverId"].Value.ToInt();





                if (e == (char)Keys.A)
                {
                    General.RunClearCommand(driverId);
                    handleCommand = true;
                }

                else if (e == (char)Keys.B)
                {
                    General.RunBreakCommand(driverId);
                    handleCommand = true;

                }
                else if (e == (char)Keys.E)
                {
                    General.RunForceArrivedCommand(driverId);
                    handleCommand = true;
                }
                else if (e == (char)Keys.X)
                {
                    General.RunRemoveRestrictionCommand(driverId);
                    handleCommand = true;
                }

                else if (e == (char)Keys.F)
                {

                    General.RunLogoutDriverCommand(driverId);
                    handleCommand = true;
                }


                else if (e == (char)Keys.I)
                {
                    General.RunDriverInformationCommand(driverId);
                    handleCommand = true;
                }
                else if (e == (char)Keys.J)
                {
                    General.RunCompletedJobsCommand(driverId);
                    handleCommand = true;
                }
                else if (e == (char)Keys.K)
                {
                    General.RunPDAMessageCommand(driverId);
                    handleCommand = true;
                }



                else if (e == (char)Keys.M)
                {
                    General.RunForcePOBCommand(driverId);
                    handleCommand = true;
                }

                else if (e == (char)Keys.N)
                {
                    General.RunNoShowCommand(driverId);
                    handleCommand = true;
                }

                else if (e == (char)Keys.R)
                {
                    General.RunRecallJobCommand(driverId);
                    handleCommand = true;
                }

                else if (e == (char)Keys.S)
                {

                    General.RunLoginDriverCommand(driverId);
                    handleCommand = true;
                }

                if (e == (char)Keys.T)
                {
                    General.RunTrackDriverCommand(driverId);
                    handleCommand = true;
                }


                else if (e == (char)Keys.U)
                {
                    General.RunSinbinDriverCommand(driverId);
                    handleCommand = true;
                }


                else if (e == (char)Keys.V)
                {
                    General.RunViewBookingCommand(driverId);
                    handleCommand = true;

                }



                else if (e == (char)Keys.Z)
                {
                    General.RunSMSMessageCommand(driverId);
                    handleCommand = true;
                }



            }


            return handleCommand;


        }

        private void ChkEnableAutoDespatch_ToggleStateChanged(object sender, Telerik.WinControls.UI.StateChangedEventArgs args)
        {
            if (chkEnableAutoDespatch.Tag != null)
                return;


            if (args.ToggleState == Telerik.WinControls.Enumerations.ToggleState.On)
            {
                chkEnableAutoDespatch.ForeColor = Color.Green;

                SetAutoDespatchMode(true, false);

            }
            else
            {
                chkEnableAutoDespatch.ForeColor = Color.Black;

                SetAutoDespatchMode(false, false);
            }

            //   RefreshAutoDespOtherPC = false;

        }




        #endregion

        #endregion

        private void chkTodayCancelled_CheckedChanged(object sender, EventArgs e)
        {

            PopulateCancelledGrid(chkTodayCancelled.Checked ? DateTime.Now.ToDateorNull() : null);





        }
    }

    public class clsBookingscount
    {
        public int count;
        public int? bookingstatusid;

    }
}

