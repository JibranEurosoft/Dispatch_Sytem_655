using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Xml;
using Utils;
using Telerik.WinControls.UI;

using Taxi_BLL;
using Taxi_Model;
using Telerik.WinControls.Enumerations;

using Telerik.WinControls;


using UI;
using System.Collections;


using System.Xml.Linq;


using System.Threading;
using System.Diagnostics;


using System.Drawing.Drawing2D;
using System.Web.Script.Serialization;
using Taxi_AppMain.Classes;

namespace Taxi_AppMain
{
    public partial class frmBooking2 : Form
    {
        private bool ENABLECMACBOOKINGCALCULATION = false;
        private bool WasQuotiation;

        private bool IsDespatched;

        private int? _PickBookingTypeId = AppVars.objPolicyConfiguration.DefaultBookingTypeId;

        public int? PickBookingTypeId
        {
            get { return _PickBookingTypeId; }
            set { _PickBookingTypeId = value; }
        }


        private bool _IsAccountCalled;

        public bool IsAccountCalled
        {
            get { return _IsAccountCalled; }
            set { _IsAccountCalled = value; }
        }

        frmDespatchJob frm = null;



        bool IsKeyword = false;



        public bool saved = false;
        private int _MapType;
        public int MapType
        {
            get { return _MapType; }
            set { _MapType = value; }
        }



        private string _CallRefNo;

        public string CallRefNo
        {
            get { return _CallRefNo; }
            set { _CallRefNo = value; }
        }







        BookingBO objMaster;
        Booking_Payment objBookingPayment = null;

        private int? _PickSubCompanyId;

        public int? PickSubCompanyId
        {
            get { return _PickSubCompanyId; }
            set { _PickSubCompanyId = value; }
        }


        private int _PickVehicleTypeId;

        public int PickVehicleTypeId
        {
            get { return _PickVehicleTypeId; }
            set { _PickVehicleTypeId = value; }
        }
        private string _PickViaString;

        public string PickViaString
        {
            get { return _PickViaString; }
            set { _PickViaString = value; }
        }

        public string CustomerHistoryCount = string.Empty;

        private int openedFrom;

        private string CallerCustomerName;
        public string CustomerPermanentNotes = string.Empty;

        private bool IsExistingCustomer = false;

        private bool IsF4 = false;

        string[] res = null;
        string searchTxt = "";
        private string[] priorityPostCodes = null;

        DateTime? lastPickupTime = null;

        private bool IsOnClosed = false;
        BackgroundWorker POIWorker = null;

        List<decimal> milesList = new List<decimal>();


        private string SameFromAddress = "";
        private string SameToAddress = "";
        private bool EnablePOI = false;


        UIX.AutoCompleteTextBox aTxt;

        DateTime? lastPickupDate = null;

        private Button btnConfirmationSMS;
        private Button btnSendInvoice;
        private Button btnPlayRecording;
        ContextMenuStrip c = null;

        private bool IsFormShown = false;

        public frmBooking2()
        {

            //Stopwatch s = new Stopwatch();
            //s.Start();
            InitializeComponent();

            lblCardIsRegisteredKP.Visible = false;
            //  Console.WriteLine("step 1 :" + s.ElapsedMilliseconds);
            //s.Reset();
            //s.Stop();
            //s.Start();

            InitializeConstructor();

            //   Console.WriteLine("step 2 :" + s.ElapsedMilliseconds);
        }




        public frmBooking2(int openFrom)
        {
            InitializeComponent();

            this.openedFrom = openFrom;


            InitializeConstructor();
        }

        public bool MakeDirectManualPayment = false;
        public bool DirectBookingPopup;

        public Rectangle? WindowLocation = null;
        public frmBooking2(string name, string phone, int? AccountId, bool IsAccountCall)
        {


            InitializeComponent();
            InitializeConstructor();
            name = name.ToProperCase();

            if (IsAccountCall == false)
            {
                ddlCustomerName.Text = name;

            }

            if (phone.StartsWith("07"))
            {
                txtCustomerMobileNo.Text = phone;
            }
            else
            {
                txtCustomerPhoneNo.Text = phone;
            }


            //else
            //{
            if (AccountId.ToInt() > 0)
            {
                IsDisplayingRecord = true;
                chkIsCompanyRates.Checked = true;
                ddlCompany.SelectedValue = AccountId;

                IsDisplayingRecord = false;

            }

            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());


        }

        public frmBooking2(string name, string phone, string doorNo, string address, int? AccountId, bool IsAccountCall)
        {


            InitializeComponent();
            InitializeConstructor();
            name = name.ToProperCase();

            if (IsAccountCall == false)
            {
                ddlCustomerName.Text = name;


                if (AccountId.ToInt() > 0 && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool()
                    && AppVars.listUserRights.Count(c => c.functionId == "Disable AutoSelect Account") == 0)
                {
                    IsDisplayingRecord = true;
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = AccountId;
                    IsDisplayingRecord = false;

                }
            }
            else
            {
                if (AccountId.ToInt() > 0)
                {
                    IsDisplayingRecord = true;
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = AccountId;
                    IsDisplayingRecord = false;

                }

            }
            //  btnSearch.Visible = false;

            if (phone.StartsWith("07"))
            {
                txtCustomerMobileNo.Text = phone;
            }
            else
            {
                txtCustomerPhoneNo.Text = phone;
            }

            txtFromFlightDoorNo.Text = doorNo;
            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = address;
            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            SetPickupZone(address.ToStr().ToUpper().Trim());


            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());

        }



        public frmBooking2(string name, string phone, string mobileNo, string doorNo, string address, string email, int? AccountId, bool IsAccountCall)
        {


            InitializeComponent();
            InitializeConstructor();


            name = name.ToProperCase();

            if (IsAccountCall == false)
            {
                ddlCustomerName.Text = name;


                if (AccountId.ToInt() > 0 && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool()
                    && AppVars.listUserRights.Count(c => c.functionId == "Disable AutoSelect Account") == 0)
                {
                    IsDisplayingRecord = true;
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = AccountId;
                    IsDisplayingRecord = false;

                }
            }
            else
            {
                if (AccountId.ToInt() > 0)
                {
                    IsDisplayingRecord = true;
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = AccountId;
                    IsDisplayingRecord = false;
                }
            }

            txtCustomerPhoneNo.Text = phone;
            txtCustomerMobileNo.Text = mobileNo;
            txtEmail.Text = email;

            txtFromFlightDoorNo.Text = doorNo;
            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = address;
            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());
        }

        public frmBooking2(string name, string phone, int? fromLocTypeId, int? toLocTypeId,
                          int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse, string doorNo)
        {



            InitializeComponent();
            InitializeConstructor();

            txtFromFlightDoorNo.Text = doorNo;
            PickBooking(name, phone, fromLocTypeId, toLocTypeId, fromLocId, toLocId, fromAddress, toAddress, fare, IsReverse);

            btnSearch.Visible = false;

            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());
        }



        public frmBooking2(string name, string phone, int? fromLocTypeId, int? toLocTypeId,
                    int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse, string fromDoorNo, string toDoorNo, string email, int? companyId, bool IsAccountCall)
        {



            InitializeComponent();
            InitializeConstructor();
            IsDisplayingRecord = true;

            txtFromFlightDoorNo.Text = fromDoorNo.ToStr().Trim();
            txtToFlightDoorNo.Text = toDoorNo.ToStr().Trim();

            txtEmail.Text = email;

            this.IsAccountCalled = IsAccountCall;

            if (companyId.ToInt() > 0)
            {
                chkIsCompanyRates.Checked = true;
                ddlCompany.SelectedValue = companyId;
                numCompanyFares.Value = fare;
            }

            PickBooking(name, phone, fromLocTypeId, toLocTypeId, fromLocId, toLocId, fromAddress, toAddress, fare, IsReverse);


            try
            {


                if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH || ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD || ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID)
                {
                    if (ddlCompany.SelectedValue != null)
                    {
                        chkIsCompanyRates.Checked = false;
                    }
                    ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;



                }
            }
            catch
            {

            }

            btnSearch.Visible = false;

            IsDisplayingRecord = false;

            if (name.ToStr().Trim().Length > 0)
            {
                IsExistingCustomer = true;
                CallerCustomerName = name.ToStr();

            }

            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());
        }





        private void PickBooking(string name, string phone, int? fromLocTypeId, int? toLocTypeId,
                          int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse)
        {


            name = name.ToProperCase();


            if (IsAccountCalled == false)
            {

                ddlCustomerName.Text = name;

            }


            if (phone.StartsWith("07"))
            {
                txtCustomerMobileNo.Text = phone;
            }
            else
            {
                txtCustomerPhoneNo.Text = phone;
            }

            if (IsReverse)
            {
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;
                toLocTypeId = toLocTypeId ^ fromLocTypeId;
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;

                if (fromLocId != null && toLocId != null)
                {

                    fromLocId = fromLocId ^ toLocId;
                    toLocId = toLocId ^ fromLocId;
                    fromLocId = fromLocId ^ toLocId;
                }

                if (fromLocId == null)
                    fromLocId = toLocId;

                if (toLocId == null)
                    toLocId = fromLocId;

                string tempAddress = fromAddress;
                fromAddress = toAddress;
                toAddress = tempAddress;



            }

            ddlFromLocType.SelectedValue = fromLocTypeId;
            ddlToLocType.SelectedValue = toLocTypeId;

            //if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = fromAddress;
            SetPickupZone(txtFromAddress.Text);
            this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = toAddress;
            SetDropOffZone(txtToAddress.Text);
            this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);




            numFareRate.Value = fare;



            FocusOnCustomer();
            //  ddlCustomerName.Focus();
            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());

        }



        private void PickBookingComplete(string name, string phone, string mobileNo, int? fromLocTypeId, int? toLocTypeId,
                         int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse, int? bookingTypeId, string email)
        {
            OnPickDetails(name, fromLocTypeId, toLocTypeId, fromLocId, toLocId, fromAddress, toAddress, fare, IsReverse);

            txtCustomerPhoneNo.Text = phone;
            txtCustomerMobileNo.Text = mobileNo;
            txtEmail.Text = email.ToStr().Trim();

            ddlBookingType.SelectedValue = bookingTypeId;


            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());

        }

        private void OnPickDetails(string name, int? fromLocTypeId, int? toLocTypeId,
                         int? fromLocId, int? toLocId, string fromAddress, string toAddress, decimal fare, bool IsReverse)
        {
            name = name.ToProperCase();
            ddlCustomerName.Text = name;

            if (IsReverse)
            {
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;
                toLocTypeId = toLocTypeId ^ fromLocTypeId;
                fromLocTypeId = fromLocTypeId ^ toLocTypeId;

                if (fromLocId != null && toLocId != null)
                {

                    fromLocId = fromLocId ^ toLocId;
                    toLocId = toLocId ^ fromLocId;
                    fromLocId = fromLocId ^ toLocId;
                }

                if (fromLocId == null)
                    fromLocId = toLocId;

                if (toLocId == null)
                    toLocId = fromLocId;

                string tempAddress = fromAddress;
                fromAddress = toAddress;
                toAddress = tempAddress;
            }

            ddlFromLocType.SelectedValue = fromLocTypeId;
            ddlToLocType.SelectedValue = toLocTypeId;

            //if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = fromAddress;
            SetPickupZone(txtFromAddress.Text);
            this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            //}
            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
            //{
            //    DetachLocationsSelectionEvent(ddlFromLocation);

            //    ddlFromLocation.SelectedValue = fromLocId;
            //    SetPickupZone(ddlFromLocation.Text);
            //    AttachLocationSelectionEvent(ddlFromLocation);
            //}
            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{
            //    txtFromPostCode.Text = fromAddress;
            //}
            //else
            //{
            //    ddlFromLocation.SelectedValue = fromLocId;
            //}


            //if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = toAddress;
            SetDropOffZone(txtToAddress.Text);
            this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            //  }
            //else if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{
            //    txtToPostCode.Text = toAddress;
            //}
            //else
            //{
            //    DetachLocationsSelectionEvent(ddlToLocation);
            //    ddlToLocation.SelectedValue = toLocId;
            //    SetDropOffZone(ddlToLocation.Text);
            //    AttachLocationSelectionEvent(ddlToLocation);
            //}


            numFareRate.Value = fare;
            //  ddlCustomerName.Focus();
            FocusOnCustomer();
            CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text.Trim());
        }



        private void InitializeConstructor()
        {



            try
            {






                ddlVehicleType.KeyDown += new KeyEventHandler(ddlVehicleType_KeyDown);
                btnMultiVehicle.Click += new EventHandler(btnMultiVehicle_Click);



                txtCustomerMobileNo.KeyDown += new KeyEventHandler(txtCustomerMobileNo_KeyDown);
                txtCustomerPhoneNo.KeyDown += new KeyEventHandler(txtCustomerPhoneNo_KeyDown);
                btnCustomerLister.Click += new EventHandler(btnCustomerLister_Click);

                btn_notes.Click += new EventHandler(btn_notes_Click);
                dtpPickupDate.KeyDown += new KeyEventHandler(dtpPickupDate_KeyDown);
                // dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.KeyPress += new KeyPressEventHandler(dtpPickupDate_KeyPress);


                ddlPickupPlot.KeyDown += new KeyEventHandler(ddlPickupPlot_KeyDown);
                ddlDropOffPlot.KeyDown += new KeyEventHandler(ddlDropOffPlot_KeyDown);






                dtpPickupTime.Enter += new EventHandler(dtpPickupTime_Enter);
                dtpPickupTime.Leave += new EventHandler(dtpPickupTime_Leave);
                //fwdkh3

                dtpPickupTime.DateTimePickerElement.TextBoxElement.TextBoxItem.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
                dtpPickupTime.DateTimePickerElement.KeyDown += DtpPickupTime_KeyDown;

                dtpPickupTime.Validated += new EventHandler(dtpPickupTime_Validated);




                ddlDriver.Enter += DdlDriver_Enter;
                ddlDriver.GotFocus += new EventHandler(ddlDriver_GotFocus);
                ddlDriver.KeyDown += new KeyEventHandler(ddlDriver_KeyDown);
                ddlDriver.SelectedIndexChanged += DdlDriver_SelectedIndexChanged; // new EventHandler(ddlDriver_SelectedIndexChanged);


                //   opt_one.Checked = true;

                chkIsCompanyRates.CheckedChanged += new EventHandler(chkIsCompanyRates_CheckedChanged);
                ddlCompany.KeyDown += new KeyEventHandler(ddlCompany_KeyDown);



                btnSms.Click += new EventHandler(btnSms_Click);



                //    chkAutoDespatch.ToggleStateChanging += new StateChangingEventHandler(chkAutoDespatch_ToggleStateChanging);//comment // leave it

                txtSpecialRequirements.KeyDown += new KeyEventHandler(txtSpecialRequirements_KeyDown);
                btnSaveNew.Click += new EventHandler(btnSaveNew_Click);
                btnCancelBooking.Click += new EventHandler(btnCancelBooking_Click);
                btnExitForm.Click += new EventHandler(btnExitForm_Click);



                //ddlPaymentType.SelectedValueChanged += new EventHandler(ddlPaymentType_SelectedValueChanged);
                btnPayment.Click += new EventHandler(btnPayment_Click);


                //   chkIsCommissionWise.CheckStateChanged += new EventHandler(chkIsCommissionWise_ToggleStateChanged);
                //  ddlCommissionType.SelectedIndexChanged += new EventHandler(ddlCommissionType_SelectedIndexChanged);
                //  ddlCommissionType.SelectedIndexChanged += DdlCommissionType_SelectedIndexChanged;
                btnPickFares.Click += new EventHandler(btnPickFares_Click);

                numFareRate.KeyDown += new KeyEventHandler(numFareRate_KeyDown);
                numFareRate.GotFocus += NumFareRate_GotFocus;
                numFareRate.Validated += new EventHandler(numFareRate_Validated);
                numParkingChrgs.Validated += new EventHandler(numFareRate_Validated);
                numWaitingChrgs.Validated += new EventHandler(numFareRate_Validated);
                numMeetCharges.Validated += new EventHandler(numFareRate_Validated);
                numCongChrgs.Validated += new EventHandler(numFareRate_Validated);
                numExtraChrgs.Validated += new EventHandler(numFareRate_Validated);

                btnDetailMap.Click += new EventHandler(btnDetailMap_Click);




                //RadTextBoxItem TotalPass = ((RadSpinElement)num_TotalPassengers.RootElement.Children[0]).TextBoxItem;
                num_TotalPassengers.KeyDown += new KeyEventHandler(child_KeyDown);

                //RadTextBoxItem totalLugg = ((RadSpinElement)numTotalLuggages.RootElement.Children[0]).TextBoxItem;
                numTotalLuggages.KeyDown += new KeyEventHandler(totalLugg_KeyDown);

                numFareRate.KeyDown += new KeyEventHandler(TextBoxItem_KeyDown);



                //till

                txtEmail.KeyDown += new KeyEventHandler(txtEmail_KeyDown);

                this.Load += new EventHandler(frmBooking_Load);
                this.FormClosed += new FormClosedEventHandler(frmBooking_FormClosed);
                this.Shown += new EventHandler(frmBooking_Shown);

                btnCancelBooking.Enabled = false;




                //needtouncomment

                this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);





                txtFromAddress.ListBoxElement.Width = 610;
                txtFromAddress.ListBoxElement.Height = 400;
                txtToAddress.ListBoxElement.Width = 610;


                Font font = new Font("Tahoma", 10.5f, FontStyle.Bold);
                txtFromAddress.ListBoxElement.Font = font;
                txtToAddress.ListBoxElement.Font = font;

                txtFromAddress.ListBoxElement.ItemHeight = 30;
                txtToAddress.ListBoxElement.ItemHeight = 30;

                //2needtouncomment
                txtFromAddress.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                txtFromAddress.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);

                txtToAddress.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                txtToAddress.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);


                txtToAddress.KeyDown += new KeyEventHandler(TextBoxElement_KeyDown);


                //  txtToAddress.TextBoxElement.KeyDown

                if (txtReturnFrom != null)
                {
                    txtReturnFrom.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                    txtReturnFrom.ListBoxElement.Width = 610;
                    txtReturnFrom.ListBoxElement.Height = 400;
                    txtReturnFrom.ListBoxElement.Font = font;

                    txtReturnFrom.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                    txtReturnFrom.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);
                    txtReturnFrom.ListBoxElement.ItemHeight = 30;
                }

                if (txtReturnTo != null)
                {
                    txtReturnTo.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    txtReturnTo.ListBoxElement.Width = 610;
                    txtReturnTo.ListBoxElement.Height = 400;
                    txtReturnTo.ListBoxElement.Font = font;

                    txtReturnTo.ListBoxElement.DrawMode = DrawMode.OwnerDrawVariable;
                    txtReturnTo.ListBoxElement.DrawItem += new DrawItemEventHandler(ListBox1_DrawItem);
                    txtReturnTo.ListBoxElement.ItemHeight = 30;
                }


                if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                {


                    txtFromAddress.Leave += new EventHandler(txtFromAddress_Leave);
                    txtToAddress.Leave += new EventHandler(txtFromAddress_Leave);


                    // txtToAddress.Validated += new EventHandler(txtToAddress_Validated);
                }





                objMaster = new BookingBO();


                FillCombos();




                pnlOtherCharges.Visible = true;




                OnNew();

                ddlVehicleType.SelectedValueChanged += new EventHandler(ddlVehicleType_SelectedValueChanged);

                ddlPaymentType.SelectedValueChanged += new EventHandler(ddlPaymentType_SelectedValueChanged);

                ddlBookingType.SelectedIndexChanged += new EventHandler(ddlBookingType_SelectedIndexChanged);

                SetBookingTypeDetails(ddlBookingType.SelectedValue.ToInt());

                EnablePOI = AppVars.objPolicyConfiguration.EnablePOI.ToBool();




                //if (!AppVars.objPolicyConfiguration.EnablePDA.ToBool())
                //{
                //  btnNearestDrv.Visible = false;
                btnViewMapReport.Visible = false;

                //  }


                MapType = AppVars.objPolicyConfiguration.MapType.ToInt();
                chkAutoDespatch.Enabled = AppVars.objPolicyConfiguration.EnablePDA.ToBool() ? true : false;









                numDrvWaitingMins.ValueChanged += new EventHandler(NumDrvWaitingMins_ValueChanged);


                btnDespatchView.Visible = AppVars.objPolicyConfiguration.PreferredShortestDistance.ToBool();



                if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "E.E-Car" || AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "local")
                {

                    InitializeAccountBookedBy(true, null);
                }





                //  AppVars.objPolicyConfiguration.

                // Booking Fees Work
                if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool())
                {
                    pnlBookingFees.Visible = true;
                    numBookingFee.Visible = true;
                }



                if (AppVars.objPolicyConfiguration.EnableBiddingForChauffers.ToBool())
                {
                    numTotalChrgs.ValueChanged += new EventHandler(numTotalChrgs_ValueChanged);

                }



                txtFromFlightDoorNo.KeyDown += new KeyEventHandler(txtFromFlightDoorNo_KeyDown);
                txtFromStreetComing.KeyDown += new KeyEventHandler(txtFromStreetComing_KeyDown);

                btnAttributes.Click += btnAttributes_Click;
                txtToFlightDoorNo.KeyDown += new KeyEventHandler(txtToFlightDoorNo_KeyDown);
                ENABLECMACBOOKINGCALCULATION = AppVars.listUserRights.Count(c => c.functionId == "ENABLE CMAC BOOKING CALCULATION") > 0;

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void NumFareRate_GotFocus(object sender, EventArgs e)
        {
            numFareRate.Tag = numFareRate.Value;
        }

        private void DdlDriver_Enter(object sender, EventArgs e)
        {
            ddlDriver.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
        }

        private void DtpPickupTime_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                dtpPickupTime.Tag = null;
                FocusOnPickupDate();
                //fwdkh3  FocusOnSpecialRequirement();
            }
            else if (e.KeyCode == Keys.Insert || e.KeyCode == Keys.ShiftKey)
            {
                FocusOnPickupDate();
            }


            else
                dtpPickupTime.Tag = null;


        }

        private void DdlDriver_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            int? driverId = ddlDriver.SelectedValue.ToIntorNull();
            if (objMaster != null && objMaster.PrimaryKeyValue == null && driverId != null && chkAutoDespatch.Checked == false)
            {
                btnSaveNew.Text = "Save and Dispatch";

            }
            else
            {
                btnSaveNew.Text = "Save Booking    (CTRL+S)";
            }


        }







        void dtpPickupTime_Enter(object sender, EventArgs e)
        {
            lastPickupTime = dtpPickupTime.Value.ToDateTimeorNull();


        }

        void numFareRate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnSpecialRequirement();

            }
            if (e.KeyCode == Keys.Insert)
            {
                FocusOnVehicle();

            }

        }

        void numTotalChrgs_ValueChanged(object sender, EventArgs e)
        {

            if (numTotalChrgs.Value >= AppVars.objPolicyConfiguration.FromBidPriceLimit.ToDecimal() && numTotalChrgs.Value <= AppVars.objPolicyConfiguration.TillBidPriceLimit.ToDecimal())
            {

                if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
                {

                    chkBidding.Checked = true;
                }

            }

        }








        void NumDrvWaitingMins_ValueChanged(object sender, EventArgs e)
        {
            if (IsDisplayingRecord)
                return;

            if (ddlVehicleType.SelectedValue != null)
            {

                try
                {
                    decimal val = numDrvWaitingMins.Value;


                    if (val == 0)
                    {
                        numMeetCharges.Value = 0.00m;

                        if (ddlCompany.SelectedValue != null && numWaitingChrgs.Enabled)
                        {

                            numWaitingChrgs.Value = 0.00m;
                        }

                        CalculateTotalCharges();

                    }
                    else
                    {

                        var objVehicle = General.GetObject<Fleet_VehicleType>(c => c.Id == ddlVehicleType.SelectedValue.ToInt());

                        if (objVehicle != null)
                        {
                            numMeetCharges.Value = Math.Round(((val * objVehicle.DriverWaitingChargesPerHour.ToDecimal())), 1);



                            if (ddlCompany.SelectedValue != null && numWaitingChrgs.Enabled)
                            {

                                numWaitingChrgs.Value = Math.Round(((val * objVehicle.AccountWaitingChargesPerHour.ToDecimal())), 1);


                            }

                            CalculateTotalCharges();

                        }

                    }

                }
                catch
                {


                }


            }
        }



        void ddlVehicleType_SelectedValueChanged(object sender, EventArgs e)
        {
            if (ddlVehicleType.SelectedValue != null)
            {




                UpdateAutoCalculateFares();
            }
        }


        void ddlReturnVehicleType_SelectedValueChanged(object sender, EventArgs e)
        {
            if (ddlReturnVehicleType.Tag != null)
                return;

            if (ddlReturnVehicleType.SelectedValue != null)
            {





                UpdateAutoCalculateFares();
            }
        }



        private void Num_TotalPassengers_ValueChanged(object sender, EventArgs e)
        {
            try
            {

                if (IsDisplayingRecord == false)
                {


                    using (Taxi_Model.TaxiDataContext db = new Taxi_Model.TaxiDataContext())
                    {
                        var list = db.Fleet_VehicleTypes.Where(c => c.IsNonVatable == null || c.IsNonVatable == false)
                            .Select(c => new { c.Id, c.VehicleType, c.NoofPassengers }).ToList();

                        foreach (var item in list.OrderBy(c => c.NoofPassengers))
                        {

                            if (num_TotalPassengers.Value > item.NoofPassengers.ToInt())
                            {
                                var veh = list.OrderBy(c => c.NoofPassengers).FirstOrDefault(c => num_TotalPassengers.Value <= c.NoofPassengers);

                                if (veh != null && ddlVehicleType.SelectedValue.ToInt() != veh.Id)
                                {
                                    ddlVehicleType.SelectedValue = veh.Id;
                                    break;

                                }



                            }

                        }

                    }
                }
            }
            catch
            {

            }
        }

        void txtEmail_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Left)
            {
                if (txtEmail.SelectionStart == 0)
                    FocusOnMobNo();
            }
            else if (e.KeyCode == Keys.Up)
            {
                // FocusOnMobNo();
                FocusOnMobNo();

            }
            else if (e.KeyCode == Keys.Down)
            {
                //FocusOnPickupDate();
                FocusOnVehicle();

            }
            else if (e.KeyCode == Keys.Enter)
            {
                FocusOnVehicle();

            }

        }



        void TextBoxElement_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Up)
            {
                if (txtToAddress.SelectionStart <= 18 && txtToAddress.ListBoxElement.Visible == false)
                {
                    e.SuppressKeyPress = true;
                    FocusOnFromAddress();
                }
                //    SendKeys.Send("{TAB}");
            }



        }




        void dtpPickupDate_Leave(object sender, EventArgs e)
        {
            dtpPickupDate.Tag = null;

            SetReturnPickupDate();



            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true || HasFareIncrementCharges)
            {

                try
                {

                    if (lastPickupDate == null || lastPickupDate != dtpPickupDate.DateTimePickerElement.Value.ToDate())
                    {

                        UpdateAutoCalculateFares();
                    }
                }
                catch
                {


                }
            }
            //fwdkh3
            //  FocusOnFromAddress();
        }

        private void SetReturnPickupDate()
        {
            try
            {

                if (opt_return.Checked && dtpReturnPickupDate != null && dtpPickupDate.Value.ToDate() > dtpReturnPickupDate.Value.ToDate())
                {
                    dtpReturnPickupDate.Value = dtpPickupDate.Value.ToDate();

                }
            }
            catch
            {

            }


        }

        void ddlBookingType_SelectedIndexChanged(object sender, EventArgs e)
        {

            SetBookingTypeDetails(ddlBookingType.SelectedValue.ToInt());




        }


        private void SetBookingTypeDetails(int bookingtypeId)
        {

            ShowGroupJobPanel(false, ddlToLocType.SelectedValue.ToInt());
            SetPaymentFooterLabel("Payment && Charges Details");
            SetDefaultSettings();

        }


        private void SetDefaultSettings()
        {

            if (!dtpPickupDate.Enabled)
            {

                dtpPickupDate.Enabled = true;

                ////  lblPickupTime.Location = new Point(411, 40);//(594, 335);
                // dtpPickupTime.Location = new Point(507, 37);//(641, 334);
                lblPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
                dtpPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);

                lblPickupTime.Text = "Pickup &Time";

                //   btnSelectVia.Location = new Point(800, 129);
                //   btn_notes.Location = new Point(749, 282);

            }
        }

        private void SetPaymentFooterLabel(string heading)
        {
            try
            {



                pnlOtherCharges.Visible = true;
                pnlOtherCharges.BringToFront();






            }
            catch (Exception ex)
            {

            }
        }






        private void ShowGroupJobRoomAndFlightDetails(bool canShow, int locTypeId)
        {






            if (canShow == true)
            {




                if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
                {
                    canShow = true;

                }
                else if (locTypeId == Enums.LOCATION_TYPES.HOTELS)
                {
                    canShow = false;


                }

            }



            if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {
                dtpPickupDate.Enabled = false;
                //  lblPickupTime.Location = new Point(411, 40);//(764, 149);
                // dtpPickupTime.Location = new Point(507, 37);//(853, 148);
                lblPickupTime.Text = "Pickup &Time";
                lblPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
                dtpPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
            }
            else
            {
                dtpPickupDate.Enabled = true;

                // lblPickupTime.Location = new Point(411, 40);//(600, 337);
                // dtpPickupTime.Location = new Point(507, 37);//(641, 334);
                lblPickupTime.Font = new Font("Tahoma", 10, FontStyle.Bold);
                dtpPickupTime.Font = new Font("Tahoma", 11, FontStyle.Bold);

                lblPickupTime.Text = "Pickup &Time";

            }










        }

        private void ShowGroupJobPanel(bool canShow, int locTypeId)
        {




            ShowGroupJobRoomAndFlightDetails(canShow, locTypeId);

        }






        void txtFromAddress_Leave(object sender, EventArgs e)
        {
            try
            {
                string temp = "";
                if (sender is UIX.AutoCompleteTextBox)
                {


                    string postcode = string.Empty;



                    var item = (sender as UIX.AutoCompleteTextBox);

                    postcode = General.GetPostCodeMatch((sender as UIX.AutoCompleteTextBox).Text.Trim());

                    if (postcode.ToStr().Length > 0 && postcode.Contains(" "))
                    {
                        string tag = (sender as UIX.AutoCompleteTextBox).Tag.ToStr();



                        (sender as UIX.AutoCompleteTextBox).Tag = null;
                        temp = item.Name;
                    }
                    else
                    {
                        if (item.Text.Length > 7 && item.Text.Contains(" ") && item.Text.ToStr().Replace(" ", "").Trim().IsAlpha() && item.Tag.ToStr() != "")
                        {

                            if (item.Name == "txtFromAddress")
                            {
                                ddlPickupPlot.SelectedValue = 0;
                                // SetPickupZone(box.Text.Trim());

                            }
                            else if (item.Name == "txtToAddress")
                            {

                                ddlDropOffPlot.SelectedValue = 0;

                                //   SetDropOffZone(box.Text.Trim());

                            }


                            UpdateAutoCalculateFares();



                        }
                        temp = item.Name;



                    }




                }
                else
                {

                    UpdateAutoCalculateFares();

                }

            }
            catch
            {


            }
        }










        public void UpdateFaresAndMap()
        {

            UpdateAutoCalculateFares();
            LoadNearestMap();
        }

        public void UpdateFares()
        {

            //    LoadNearestMap();
            UpdateAutoCalculateFares();

        }



        private void UpdateAutoCalculateFares()
        {





            if (IsF4 == false && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool() == false)
            {


                return;


            }

            if (objMaster.PrimaryKeyValue != null)
                return;

            if (IsDisplayingRecord || (ddlCompany != null && ddlCompany.Tag.ToBool()))
                return;

            if (IsAllowUpdating == false)
            {
                btnPickFares.Enabled = true;

                if (opt_return.Checked && chkQuotedPrice.Checked)
                {
                    numReturnFare.Value = numFareRate.Value;
                    numReturnCompanyFares.Value = numCompanyFares.Value;
                }

                return;

            }

            try
            {

                if (btnPickFares.Visible == false)
                    return;


                int fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int toLocTypeId = ddlToLocType.SelectedValue.ToInt();
                bool isOk = false;

                if ((
                     !string.IsNullOrEmpty(txtFromAddress.Text.Trim()))

                    &&

                    (
                     !string.IsNullOrEmpty(txtToAddress.Text.Trim())))
                {

                    isOk = true;
                }






                if (isOk)
                {
                    SetRouteType();

                    if (AppVars.keyLocations.Count(c => c.ToStr().Trim().ToLower() == txtFromAddress.Text.Trim().ToLower()) == 0
                        &&
                        AppVars.keyLocations.Count(c => c.ToStr().Trim().ToLower() == txtToAddress.Text.Trim().ToLower()) == 0
                        )
                    {


                        if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS && txtToAddress.Text.ToStr().Trim().ToLower() == "as directed"
                            && numJourneyTime != null)
                        {

                            GetFareByJourneyTime(numJourneyTime.Value);
                        }
                        else
                        {

                            //InitializeAutoCalculateFaresWorker();

                            //object[] objarr = new object[10];
                            //objarr[0] =General.GetPostCodeMatch(txtFromAddress.Text);
                            //objarr[1] = General.GetPostCodeMatch(txtToAddress.Text);

                            //worker_autocalculatefares.RunWorkerAsync(objarr);
                            // CalculateAutoFareUI();

                            if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool())
                            {

                                CalculateAutoFareUI();
                            }
                            else
                            {
                                // CalculateAutoFareUI();

                                Thread th = new System.Threading.Thread(new ThreadStart(CalculateAutoFareUI));

                                th.Priority = ThreadPriority.Highest;
                                th.Start();
                            }
                        }
                    }



                }




            }
            catch
            {


            }

        }



        private void CalculateAutoFareUI()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIDelegate(CalculateTotalFares));
            }
            else
            {
                CalculateTotalFares();
            }

        }


        private void CalculateAutoFares()
        {
            try
            {
                if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                {

                    if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool())
                    {

                        CalculateAutoFareUI();
                    }
                    else
                    {

                        Thread th = new System.Threading.Thread(new ThreadStart(CalculateAutoFareUI));
                        th.IsBackground = true;
                        th.Start();
                    }
                }
            }
            catch (Exception ex)
            {

            }

        }




        private void ddlPickupPlot_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                    FocusOnToAddress();
                else if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                    FocusOnToPostCode();


            }
        }

        private void ddlDropOffPlot_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnCustomer();

            }
        }

        void ddlDriver_GotFocus(object sender, EventArgs e)
        {
            FillDriversCombo();
        }

        private void FillDriversCombo()
        {

            try
            {
                ddlDriver.GotFocus -= new EventHandler(ddlDriver_GotFocus);

                FillComboByOneWayDriver();
            }
            catch
            {


            }
            //if (ddlDriver.DataSource == null)
            //{

            //    ComboFunctions.FillDriverNoQueueCombo(ddlDriver);
            //    ddlDriver.GotFocus -= new EventHandler(ddlDriver_GotFocus);

            //}
        }


        private void FillComboByOneWayDriver()
        {
            try
            {

                if (ddlDriver.DataSource == null)
                {

                    //  ComboFunctions.FillDriverNoQueueCombo(ddlDriver);
                    if (chkAllocateDriver.Checked)
                    {

                        ComboFunctions.FillDriverNoCombo(ddlDriver);

                        if (objMaster.Current != null && objMaster.Current.DriverId != null)
                        {
                            ddlDriver.SelectedValue = objMaster.Current.DriverId;

                        }
                    }
                    else
                    {
                        if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") > 0)
                        {
                            if (objMaster.Current != null && objMaster.Current.DriverId != null)
                                ComboFunctions.FillDriverNoLoggedInDespatchQueueCombo(ddlDriver, objMaster.Current.DriverId, objMaster.Current.Fleet_Driver.DriverNo + " - " + objMaster.Current.Fleet_Driver.DriverName);
                            else
                                ComboFunctions.FillDriverNoLoggedInDespatchQueueCombo(ddlDriver, null, "");
                        }
                        else
                        {

                            if (objMaster.Current != null && objMaster.Current.DriverId != null)
                                ComboFunctions.FillDriverNoQueueCombo(ddlDriver, objMaster.Current.DriverId, objMaster.Current.Fleet_Driver.DriverNo + " - " + objMaster.Current.Fleet_Driver.DriverName);
                            else
                                ComboFunctions.FillDriverNoQueueCombo(ddlDriver);

                        }

                    }




                }
                else
                {

                    if (chkAllocateDriver.Checked)
                    {

                        ComboFunctions.FillDriverNoCombo(ddlDriver);

                        if (objMaster.Current != null && objMaster.Current.DriverId != null)
                        {
                            ddlDriver.SelectedValue = objMaster.Current.DriverId;

                        }
                    }
                    else
                    {

                        int? LastSelectedDriverId = null;

                        if (ddlDriver.DataSource != null && ddlDriver.SelectedValue != null)
                            LastSelectedDriverId = ddlDriver.SelectedValue.ToInt();

                        if (objMaster.Current != null && objMaster.Current.DriverId != null)
                            ComboFunctions.FillDriverNoQueueCombo(ddlDriver, objMaster.Current.DriverId, objMaster.Current.Fleet_Driver.DriverNo + " - " + objMaster.Current.Fleet_Driver.DriverName);
                        else
                            ComboFunctions.FillDriverNoQueueCombo(ddlDriver);

                        if (ddlDriver.SelectedValue != null && LastSelectedDriverId != null && LastSelectedDriverId != ddlDriver.SelectedValue.ToInt())
                        {

                            ddlDriver.SelectedValue = LastSelectedDriverId;

                            if (ddlDriver.Items.Count(c => c.Value.ToInt() == LastSelectedDriverId.ToInt()) == 0)
                            {
                                ddlDriver.SelectedIndex = -1;
                            }

                        }

                    }



                }
            }
            catch
            {


            }

        }


        void dtpPickupTime_Leave(object sender, EventArgs e)
        {
            dtpPickupTime.Tag = null;
            i = 0;

            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true || HasFareIncrementCharges)
            {
                //comment
                try
                {
                    if (lastPickupTime == null || lastPickupTime != dtpPickupTime.Value.ToDateTime())
                    {

                        UpdateAutoCalculateFares();

                        if (grdPickupDateTime != null && grdPickupDateTime.Rows.Count > 0)
                        {

                            this.radPageView1.SelectedTab = this.tabCurrentBooking;
                        }
                    }
                }
                catch
                {


                }
            }




        }




        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
        {

            if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
            {
                e.Graphics.FillRectangle(Brushes.CornflowerBlue, e.Bounds);
            }
            else
            {

                if (AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Length == 0)
                {

                    e.Graphics.FillRectangle(Brushes.White, e.Bounds);

                }

                else
                {


                    if (priorityPostCodes == null)
                    {
                        priorityPostCodes = AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Split(new char[] { ',' });
                    }


                    if (AppVars.zonesList.Count(c => ((sender as ListBox).Items[e.Index].ToString()).Contains(c)) > 0)
                    {

                        if (priorityPostCodes != null && priorityPostCodes.Count(c => GeneralBLL.GetHalfPostCodeMatch((sender as ListBox).Items[e.Index].ToString()) == c) > 0)
                        {
                            e.Graphics.FillRectangle(Brushes.White, e.Bounds);


                        }
                        else
                            e.Graphics.FillRectangle(Brushes.LightPink, e.Bounds);


                    }


                    else
                    {
                        e.Graphics.FillRectangle(Brushes.Red, e.Bounds);
                    }
                }
            }

            // Draw a rectangle in blue around each item.
            e.Graphics.DrawRectangle(Pens.Blue, e.Bounds);

            // Draw the text in the item.
            e.Graphics.DrawString((sender as ListBox).Items[e.Index].ToString(),
                e.Font, Brushes.Black, e.Bounds.X, e.Bounds.Y);

            // Draw the focus rectangle around the selected item.
            e.DrawFocusRectangle();
        }














        private void InitializeTimer()
        {
            if (this.timer1 == null)
            {
                this.timer1 = new System.Windows.Forms.Timer();
                this.timer1.Tick += timer1_Tick;
                this.timer1.Interval = 100;
            }

        }









        void frmBooking_FormClosed(object sender, FormClosedEventArgs e)
        {
            try
            {



                IsOnClosed = true;

                this.Visible = false;
                if (saved && (frm == null || (frm != null && frm.SuccessDespatched == false)))
                {

                    if ((objMaster.PrimaryKeyValue == null)
                        || (objMaster.PrimaryKeyValue != null && objMaster.Current != null && objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.WAITING))
                    {



                        if (objMaster.Current.IsQuotation.ToBool() || WasQuotiation)
                        {
                            if (OldPickupDateTime == null && objMaster.Current.EditOn == null)
                            {
                                new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_SAVEQUOTATION);
                            }
                            else
                            {
                                new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_ONLY_DASHBOARD);

                            }
                        }
                        else
                        {




                            if (AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() == 0 && objMaster.Current != null && objMaster.Current.PickupDateTime.ToDate() <= DateTime.Now.ToDate())
                            {

                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                {

                                    if (OldPickupDateTime == null || (OldPickupDateTime > objMaster.Current.PickupDateTime && OldPickupDateTime <= DateTime.Now.ToDate()))
                                    {

                                        if (OldPickupDateTime == null && objMaster.Current.EditOn == null)
                                        {
                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_SERACTIVEBOOKINGS_DASHBOARD + ">>>" + GetBookingJSON());

                                        }
                                        else
                                        {

                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD + "=" + objMaster.Current.Id);
                                        }
                                    }
                                    else
                                    {

                                        //  General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                                        General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + objMaster.Current.Id);


                                    }
                                }
                                else
                                {



                                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + objMaster.Current.Id);
                                }
                            }

                            else if (AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt() > 0 && objMaster.Current != null && objMaster.Current.PickupDateTime <= DateTime.Now.AddHours(AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt()))
                            {
                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.ONEWAY)
                                {

                                    if (OldPickupDateTime == null || (OldPickupDateTime > objMaster.Current.PickupDateTime && OldPickupDateTime <= DateTime.Now.AddHours(AppVars.objPolicyConfiguration.DaysInTodayBooking.ToInt())))
                                    {

                                        if (OldPickupDateTime == null && objMaster.Current.EditOn == null)
                                        {


                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_SERACTIVEBOOKINGS_DASHBOARD + ">>>" + GetBookingJSON());

                                        }
                                        else
                                        {

                                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_ACTIVEBOOKINGS_DASHBOARD + "=" + objMaster.Current.Id);
                                        }


                                    }
                                    else
                                    {

                                        //   General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                                        General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + objMaster.Current.Id);
                                    }
                                }
                                else
                                {


                                    // General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + objMaster.Current.Id);
                                }




                            }
                            else
                            {


                                //General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD);

                                General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + objMaster.Current.Id);
                            }





                        }


                    }
                    else
                    {

                        if (this.openedFrom == 0)
                        {


                            General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_DASHBOARD);
                        }
                        else if (this.openedFrom == 1)
                        {
                            if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.REJECTED)
                            {
                                new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_DECLINEDWEBBOOKINGS_DASHBOARD);
                            }
                            else
                            {

                                ((frmBookingDashBoard)System.Windows.Forms.Application.OpenForms.OfType<Form>().FirstOrDefault(c => c.Name == "frmBookingDashBoard")).PopulateWebBookingsGrid();

                                //  new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_WEBBOOKINGS_DASHBOARD);
                            }

                        }
                        else if (this.openedFrom == 2)
                        {
                            new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_BOOKINGHISTORY_DASHBOARD);

                        }


                    }

                }

                if (frm != null)
                {
                    if (frm.SmsThread != null)
                        frm.SmsThread.Start();


                    frm.Dispose();
                }


                DisposeGDIObjects();




                this.Dispose(true);


                GC.Collect();


                //General.DisposeForm(this);
            }
            catch (Exception ex)
            {


            }

        }








        private void DisposeGDIObjects()
        {

            //    this.Font.Dispose();

            try
            {
                ddlSubCompany.Dispose();
                //    btnPasteBooking.Dispose();
                btnDespatchView.Dispose();

                // lblBookingType.Font.Dispose();
                lblBookingType.Dispose();
                ddlBookingType.Dispose();
                // label1.Controls.Clear();
                label1.Dispose();


                txtBookingNo.Font.Dispose();
                txtCustomerMobileNo.Font.Dispose();
                txtCustomerPhoneNo.Font.Dispose();

                txtFromAddress.Font.Dispose();
                txtFromAddress.ListBoxElement.Font.Dispose();
                txtToAddress.ListBoxElement.Font.Dispose();
                txtFromAddress.ListBoxElement.Items.Clear();
                txtFromAddress.ListBoxElement.Dispose();
                txtToAddress.ListBoxElement.Items.Clear();
                txtToAddress.ListBoxElement.Dispose();

                txtToAddress.Font.Dispose();
                //  ddlFromLocation.Font.Dispose();
                //  ddlToLocation.Font.Dispose();

                //  lblFromLoc.Font.Dispose();
                lblFromStreetComing.Font.Dispose();

                if (lblDepartment != null)
                    lblDepartment.Font.Dispose();

                if (lblBookedBy != null)
                {
                    lblBookedBy.Font.Dispose();
                }

                lblMap.Font.Dispose();
                txtSpecialRequirements.Font.Dispose();

                btnSaveNew.Image.Dispose();

                btnExit.Image.Dispose();
                btnExitForm.Image.Dispose();

                if (btnDetailMap.Image != null)
                    btnDetailMap.Image.Dispose();


                pnlMain.Dispose();





                if (webBrowser1 != null)
                {

                    webBrowser1.Stop();

                    webBrowser1.Dispose();
                    webBrowser1 = null;
                }








                if (timer1 != null)
                {
                    timer1.Stop();
                    timer1.Dispose();
                    timer1 = null;

                    if (POIWorker != null)
                    {
                        if (POIWorker.IsBusy)
                        {

                            POIWorker.CancelAsync();
                        }


                        POIWorker.Dispose();
                        POIWorker = null;
                        GC.Collect();

                    }
                }


                if (worker_fares != null)
                {
                    if (worker_fares.IsBusy)
                    {
                        worker_fares.CancelAsync();
                    }

                    worker_fares.Dispose();
                    worker_fares = null;
                    GC.Collect();
                }






                if (radPageView1 != null)
                {
                    radPageView1.Controls.Clear();

                    radPageView1.Dispose();
                    radPageView1 = null;
                }
            }
            catch
            {


            }

            InstallEventHandlers(pnlCustomer);
            InstallEventHandlers(pnlMain);

        }



















        private void IncreaseViaPanelSize()
        {
            this.pnlVia.Size = new System.Drawing.Size(1250, 220);
        }


        void TextBoxElement_TextChanged(object sender, EventArgs e)
        {


            try
            {

                IsKeyword = false;

                InitializeTimer();
                timer1.Stop();

                aTxt = (UIX.AutoCompleteTextBox)sender;
                aTxt.ResetListBox();

                if (aTxt.Name == "txtFromAddress")
                    txtToAddress.SendToBack();

                else if (aTxt.Name == "txtToAddress")
                    txtToAddress.BringToFront();

                else if (aTxt.Name == "txtViaAddress")
                    IncreaseViaPanelSize();


                if (EnablePOI)
                {

                    InitializeSearchPOIWorker();

                    if (POIWorker.IsBusy)
                    {
                        POIWorker.CancelAsync();

                        POIWorker.Dispose();
                        POIWorker = null;
                        // GC.Collect();
                        InitializeSearchPOIWorker();

                    }


                    AddressTextChangePOI();
                }
                else
                {

                    AddressTextChangeWOPOI();
                }
            }
            catch (Exception ex)
            {

            }
        }


        private void InitializeSearchPOIWorker()
        {
            if (POIWorker == null)
            {
                POIWorker = new BackgroundWorker();
                POIWorker.WorkerSupportsCancellation = true;
                POIWorker.DoWork += new DoWorkEventHandler(POIWorker_DoWork);
                POIWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(POIWorker_RunWorkerCompleted);
            }



        }

        void POIWorker_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                if (e.Cancelled || e.Result == null || (sender as BackgroundWorker) == null)
                    return;

                if (e.Result is List<Taxi_AppMain.Digi.AddressDetails>)
                {
                    aTxt.ListBoxElement.Tag = e.Result;


                    ShowAddressesPOI(((List<Taxi_AppMain.Digi.AddressDetails>)e.Result).Select(c => c.AddressLine1).ToArray<string>());
                }
                else
                    ShowAddressesPOI((string[])e.Result);

            }
            catch
            {


            }
        }



        void POIWorker_DoWork(object sender, DoWorkEventArgs e)
        {


            string searchValue = e.Argument.ToStr();
            try
            {
                if (POIWorker == null || IsOnClosed)
                {
                    e.Cancel = true;
                    return;


                }


                //
                string postCode = General.GetPostCodeMatchOpt(searchValue);

                string doorNo = string.Empty;
                string place = string.Empty;




                if (postCode.Length == 0 && searchValue.Trim().Contains(" ") && searchValue.Trim().Contains(".") == false && searchValue.Trim().Contains("#") == false
                  && searchValue[0].ToStr().IsAlpha() && searchValue.Split(new char[] { ' ' }).Any(c => c.IsAlpha() == false))
                //    && (searchValue.Trim().Substring(0, searchValue.Trim().IndexOf(' ')).ToStr().IsAlpha() == false || searchValue.Trim().Substring(searchValue.Trim().IndexOf(' ') + 1)[0].ToStr().IsAlpha()))
                {
                    var arrData = searchValue.Split(new char[] { ' ' });



                    if (arrData.Count() == 2)
                    {
                        postCode = General.GetPostCodeMatchOpt(arrData.FirstOrDefault(c => c.IsAlpha() == false));

                    }
                    else if (arrData.Count() > 2)
                    {

                        if (arrData[1][0].ToStr().IsNumeric())
                            postCode = General.GetPostCodeMatchOpt((arrData.FirstOrDefault(c => c.IsAlpha() == false) + " " + arrData[1]).Trim());
                        else if (arrData[1].ToStr().IsAlpha() == false && arrData[2].ToStr().IsAlpha() == false)
                            postCode = General.GetPostCodeMatchOpt((arrData.FirstOrDefault(c => c.IsAlpha() == false) + " " + arrData[2]).Trim());
                        else
                            postCode = General.GetPostCodeMatchOpt(arrData.FirstOrDefault(c => c.IsAlpha() == false));
                    }


                }

                if (!string.IsNullOrEmpty(postCode) && postCode.IsAlpha() == true)
                    postCode = string.Empty;

                string street = searchValue;

                if (postCode.Length > 0)
                {
                    street = street.Replace(postCode, "").Trim();
                }


                if (!string.IsNullOrEmpty(street) && !string.IsNullOrEmpty(postCode) && street.IsAlpha() == false && street.Length < 4 && searchValue.IndexOf(postCode) < searchValue.IndexOf(street))
                {
                    street = "";
                    postCode = searchTxt;
                }


                if (street.Length > 0)
                {

                    if (char.IsNumber(street[0]))
                    {

                        for (int i = 0; i <= 3; i++)
                        {

                            try
                            {
                                if (char.IsNumber(street[i]) || (doorNo.Length > 0 && doorNo.Length == i && char.IsLetter(street[i])))
                                    doorNo += street[i];
                                else
                                    break;
                            }
                            catch
                            {


                            }
                        }
                    }
                }


                if (street.Contains("#"))
                {
                    street = street.Replace("#", "").Trim();
                    place = "p=";
                }

                if (doorNo.Length > 0 && place.Length == 0)
                {
                    street = street.Replace(doorNo, "").Trim();


                }


                if (postCode.Length == 0 && street.Length < 3 && street != "//")
                {
                    e.Cancel = true;
                    return;

                }


                if (street.Length > 1 || postCode.Length > 0)
                {
                    if (postCode.Length > 0)
                    {
                        if (doorNo.Length > 0 && postCode == General.GetPostCodeMatch(postCode))
                        {
                            doorNo = string.Empty;
                        }

                    }

                    if (postCode.Length >= 5 && postCode.Contains(" ") == false)
                    {


                        //string resultPostCode = AppVars.listOfAddress.FirstOrDefault(a => a.PostalCode.Strip(' ') == postCode).DefaultIfEmpty().PostalCode.ToStr().Trim();


                        //if (resultPostCode.Length >= 5 && resultPostCode.Contains(" "))
                        //{
                        //    postCode = resultPostCode;

                        //}

                    }


                    if (POIWorker == null || POIWorker.CancellationPending || ((sender as BackgroundWorker) == null || (sender as BackgroundWorker).CancellationPending))
                    {
                        e.Cancel = true;
                        return;
                    }






                    //if (text.Contains(" ") && text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()==false
                    //    && (AppVars.keyLocations.Contains(text.Split(new char[] { ' ' })[0])))
                    //{
                    //  aTxt.ListBoxElement.Items.Clear();
                    if (searchValue.Contains(" ") && searchValue.Length < 20 && searchValue.WordCount() == 2 && searchValue.Contains(".") == false && searchValue.Strip(' ').IsAlpha() == false)
                    {

                        string[] arr = searchValue.Split(new char[] { ' ' });

                        if (arr.Count() == 2)
                        {
                            if (arr[0].IsAlpha())
                            {
                                string pcode = General.GetPostCodeMatch(arr[1].ToStr().ToUpper());

                                if (pcode.ToStr().Length > 0)
                                {
                                    e.Result = (from a in General.GetQueryable<Gen_Location>(c => (c.Gen_LocationType.ShortCutKey == arr[0]) && c.PostCode.StartsWith(pcode))
                                                select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                                    if (e.Result != null && (e.Result as string[]).Count() == 0)
                                        e.Result = null;

                                }
                            }
                        }

                    }




                    if (e.Result == null)
                    {

                        if (doorNo.Length > 0 && street.Strip(' ').IsAlpha() == false)
                        {
                            postCode = General.GetPostCodeMatch(street);
                            if (postCode.Length > 0)
                            {

                                street = street.Replace(postCode, "").Trim();
                            }
                        }
                        else if (postCode.Length > 0 && street.Length == 0 && postCode.Count(c => c == ' ') > 1)
                        {
                            string originalPostCode = postCode;
                            postCode = postCode.Substring(0, postCode.LastIndexOf(' '));

                            doorNo = originalPostCode.Replace(postCode, "").ToStr().Trim();
                        }
                        else if (street.Length > 3 && street.Contains(' ') && street.IsAlpha() == false && doorNo.Length == 0)
                        {


                            for (int i = 0; i < street.Length; i++)
                            {
                                if (Char.IsDigit(street[i]))
                                {
                                    if (i > 0 && street[i - 1] == ' ')
                                    {

                                        doorNo += street[i];
                                    }
                                    else if (i == 0)
                                    {
                                        doorNo += street[i];
                                    }
                                    else if (doorNo.Length > 0)
                                    {
                                        doorNo += street[i];

                                    }


                                }

                            }


                            if (doorNo.Length > 0)
                                street = street.Replace(doorNo, "").Trim();
                        }
                        else if (postCode.Length > 0 && postCode.Contains(" ") == false && street.Length == 0 && doorNo.Length == 0 && place.Length == 0)
                        {
                            //    IF LENGTH IS 5
                            //THEN
                            //E11AA=> IF 3RD CHARACTER IS NUMERIC THEN E1 1AA


                            //IF LENGTH IS 6
                            //THEN
                            //HA20DU=> IF 4TH CHARACTER IS NUMERIC THEN HA2 0DU

                            //IF LENGTH IS 7
                            //THEN 
                            //WC1A1AB=> IF 5TH CHARACTER IS NUMERIC THEN WC1A 1AB



                            if (postCode.Length == 5)
                            {
                                if (postCode[2].ToStr().IsNumeric())
                                {
                                    postCode = postCode.Insert(2, " ");

                                }

                            }
                            else if (postCode.Length == 6)
                            {
                                if (postCode[3].ToStr().IsNumeric())
                                {
                                    postCode = postCode.Insert(3, " ");

                                }

                            }
                            else if (postCode.Length == 7)
                            {
                                if (postCode[4].ToStr().IsNumeric())
                                {
                                    postCode = postCode.Insert(4, " ");

                                }

                            }
                        }




                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            if (postCode.Length > 0 && postCode.Contains(" ") == false && doorNo.Length == 0 && street.Length > 0 && place.Length == 0 && System.Configuration.ConfigurationManager.AppSettings["name"] != null)
                            {
                                e.Result = db.stp_GetByRoadAndPostCodeLevelData(postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();

                            }
                            else if (place.Length > 0 && System.Configuration.ConfigurationManager.AppSettings["name"] != null)
                            {

                                string pafdbname = System.Configuration.ConfigurationManager.AppSettings["name"] != null ? System.Configuration.ConfigurationManager.AppSettings["name"].ToStr() : "PAFDb";
                                if (postCode.Length == 0)
                                {

                                    postCode = General.GetPostCodeMatch(street);
                                }



                                if (street.Length > 0 && postCode.Length == 0 && doorNo.Length == 0)
                                {
                                    string query = string.Empty;

                                    if (searchValue.Trim().EndsWith("#") == false && street.Contains(" ") && street.WordCount() >= 2)
                                    {

                                        string street2 = searchValue.Split(new char[] { '#' })[1].Trim();


                                        street = street.Replace(street2, "").Trim();

                                        query = string.Format("   SELECT  TOP 200  "

                                           + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                          + " FROM " + pafdbname + ".dbo.DetailData dd "

                                          + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode  "

                                          + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                        + "     WHERE (dd.Data LIKE '%{0}%' ) AND ((md.Street like '{1}%' or md.SubStreet like    '{1}%' or md.Town like '{1}%' or md.Locality like '{1}%')   )  "


                                          + "   ORDER BY l.Id  ", street, street2);

                                    }

                                    else
                                    {
                                        query = string.Format("SELECT TOP 50 dd.Data + ' ' + T1.AddressLine + ' ' + MD.PostCode FROM"
                                       + "  (" +
                                         "SELECT" +



                                        " AddressLine = md.Street, postcode = SUBSTRING(md.PostCode, 0, CHARINDEX(' ', MD.POSTCODE)), ID = MIN(md.id), DETAILID = MIN(dd.Id)" +
                                        " FROM " + pafdbname + ".dbo.Localization l " +
                                        " INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCodeId = l.PostCodeId" +
                                        " INNER JOIN " + pafdbname + ".dbo.DetailData dd ON md.PostCode = dd.PostCode" +



                                       "  WHERE Data LIKE  '%{0}%'" +
                                       "  GROUP BY MD.STREET, SUBSTRING(md.PostCode, 0, CHARINDEX(' ', MD.POSTCODE))" +
                                       "  ) AS T1" +
                                      "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.Id = T1.ID" +
                                      "  INNER JOIN " + pafdbname + ".dbo.DetailData dd ON dd.Id = T1.DETAILID" +

                                      "  INNER JOIN " + pafdbname + ".dbo.Localization l  on l.PostCodeId = MD.PostCodeId" +
                                      "  order by l.id ", street);



                                        //query = string.Format("SELECT TOP 200     "

                                        //                         + "AddressLine = dd.Data + ' ' + md.Street + ' ' + md.PostCode "

                                        //                         + "FROM "

                                        //                         + pafdbname + ".dbo.Localization l "

                                        //                         + " INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCodeId = l.PostCodeId"

                                        //                         + " INNER JOIN " + pafdbname + ".dbo.DetailData dd ON md.PostCode = dd.PostCode"

                                        //                         + " WHERE Data LIKE  '%{0}%' order by l.id     ", street);


                                    }

                                    var results2 = db.ExecuteQuery<string>(query).ToArray<string>();


                                    if (results2.Count(c => c.ToLower().StartsWith("flat")) > 0)
                                    {
                                        try
                                        {
                                            var results3 = results2.Where(c => c.ToLower().StartsWith("flat")).Select(c => c.Substring(c.IndexOf(" ") + 1))
                                                .Select(a => a.Substring(a.IndexOf(" ") + 1)).ToArray<string>();
                                            results2 = results2.Where(c => c.ToLower().StartsWith("flat") == false).ToArray<string>();



                                            e.Result = results2.Union(results3).ToArray<string>();
                                        }
                                        catch
                                        {
                                            e.Result = results2;
                                        }
                                    }
                                    else
                                    {
                                        e.Result = results2;
                                    }

                                }
                                else if (street.Length > 0 && postCode.Length > 0)
                                {

                                    if (postCode.Length > 0)
                                    {
                                        street = street.Replace(postCode, "").TrimEnd();

                                    }

                                    if (doorNo.Length > 0)
                                    {
                                        street = street.Replace(doorNo, "").TrimStart();

                                    }


                                    if (doorNo.Length > 0)
                                    {


                                        string query = string.Format("   SELECT  TOP 200  "

                                             + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                            + " FROM " + pafdbname + ".dbo.DetailData dd "

                                            + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode and md.PostCode like '{0} %'  "

                                            + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                           + "    WHERE dd.Data LIKE '%{1}%' OR ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   and dd.Data like +'% {2}%')   "

                                            + "   ORDER BY l.Id  ", postCode, street, doorNo);

                                        //  + "OPTION(QUERYTRACEON 8649)  ",

                                        e.Result = db.ExecuteQuery<string>(query).ToArray<string>();
                                    }
                                    else
                                    {

                                        string query = string.Format("   SELECT  TOP 200  "

                                            + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                           + " FROM " + pafdbname + ".dbo.DetailData dd "

                                           + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode and md.PostCode like '{0} %'  "

                                           + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                          + "    WHERE dd.Data LIKE '%{1}%' OR ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   )   "

                                           + "   ORDER BY l.Id  ", postCode, street);

                                        //  + "OPTION(QUERYTRACEON 8649)  ",

                                        e.Result = db.ExecuteQuery<string>(query).ToArray<string>();


                                    }


                                    //e.Result = db.stp_getroadleveldatabyplacenameandpostcode(street,postCode,doorNo).Select(c => c.AddressLine).ToArray<string>();

                                }
                                else
                                {


                                    string street2 = street.Replace(doorNo, "").TrimStart();



                                    string query = string.Format("   SELECT  TOP 200  "

                                         + " AddressLine = dd.Data +' '  +md.substreet+ ' '+ md.Street + ' ' +md.PostCode  "

                                        + " FROM " + pafdbname + ".dbo.DetailData ddv "

                                        + "  INNER JOIN " + pafdbname + ".dbo.MainData md ON md.PostCode = dd.PostCode  "

                                        + "    INNER JOIN " + pafdbname + ".dbo.Localization l ON l.PostCodeId = md.PostCodeId    "

                                      + "     WHERE (dd.Data LIKE '%{0}%' ) OR ((md.Street like '{1}%' or md.SubStreet like    '{1}%')   )  "


                                        + "   ORDER BY l.Id  ", street, street2);

                                    //  + "OPTION(QUERYTRACEON 8649)  ",

                                    e.Result = db.ExecuteQuery<string>(query).ToArray<string>();



                                }
                            }
                            else
                            {

                                if (street.EndsWith("\\") && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool())
                                {
                                    try
                                    {

                                        e.Result = db.ExecuteQuery<string>("select CompanyName from gen_company where isclosed=0 order by companyname").ToArray<string>();

                                        street = street.Replace("\\", "").Trim();

                                        if (street.Length > 0)
                                        {
                                            List<string> listX = new List<string>();
                                            foreach (string item in e.Result as string[])
                                            {

                                                if (item.ToUpper().Contains(street.ToUpper()))
                                                    listX.Add(item);

                                            }

                                            e.Result = listX.ToArray<string>();

                                        }

                                    }
                                    catch
                                    {


                                    }
                                }

                                else if (street.StartsWith("//") && customerinfo.Length > 0)
                                {
                                    try
                                    {

                                        e.Result = db.ExecuteQuery<string>("exec stp_getcustomerhistoryaddresses {0}", customerinfo).ToArray<string>();

                                        street = street.Replace("//", "").Trim();

                                        if (street.Length > 0)
                                        {
                                            List<string> listX = new List<string>();
                                            foreach (string item in e.Result as string[])
                                            {

                                                if (item.ToUpper().Contains(street.ToUpper()))
                                                    listX.Add(item);

                                            }

                                            e.Result = listX.ToArray<string>();

                                        }

                                    }
                                    catch
                                    {


                                    }
                                }
                                else
                                {

                                    if (AppVars.objPolicyConfiguration.TcpConnectionType.ToInt() == 3)
                                    {
                                        Taxi_AppMain.Digi.DigiMapSearch c = new Taxi_AppMain.Digi.DigiMapSearch();

                                        string type = "address";

                                        if (street.Length == 0 && postCode.Length > 0)
                                            type = "postcode";

                                        e.Result = c.SearchAddress("ymSKdoxaNIhRnn2", type, searchTxt).ToList();

                                    }
                                    else
                                    {



                                        //if (POIWorker.IsBusy == false)
                                        //{

                                        //if(Debugger.IsAttached)
                                        //{
                                        //     e.Result = db.ExecuteQuery<stp_GetByRoadLevelDataResult>("exec stp_GetByRoadLevelData {0},{1},{2},{3}",postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();

                                        //}
                                        //else
                                        if (System.Configuration.ConfigurationManager.AppSettings["name"] == null)
                                            e.Result = db.ExecuteQuery<stp_GetByRoadLevelDataResult>("exec stp_GetByRoadLevelData_paf2 {0},{1},{2},{3}", postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();
                                        else
                                            e.Result = db.stp_GetByRoadLevelData(postCode, doorNo, street, place).Select(c => c.AddressLine1).ToArray<string>();
                                        //}
                                        //else
                                        //{
                                    }

                                    //}
                                }
                            }


                        }
                    }

                    if (POIWorker == null || POIWorker.CancellationPending || ((sender as BackgroundWorker) == null || (sender as BackgroundWorker).CancellationPending))
                    {
                        e.Cancel = true;
                        return;
                    }






                }


                //



            }
            catch (Exception ex)
            {
                AddExcepLog("POIWORKER_DOWORK : " + ex.Message);
                //     Console.WriteLine("Start work catch: " + searchValue);

            }
        }

        private void AddExcepLog(string msg)
        {

            try
            {
                File.AppendAllText(Application.StartupPath + "\\exception_booking.txt", DateTime.Now.ToStr() + "," + msg + Environment.NewLine);

            }
            catch
            {


            }

        }





        private void AddressTextChangeWOPOI()
        {
            string text = aTxt.Text;
            string doorNo = string.Empty;

            if (AppVars.objPolicyConfiguration.StripDoorNoOnAddress.ToBool())
            {
                if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToStr().ToLower() == aTxt.Text.ToLower())
                {
                    aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    aTxt.Text = aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim();


                    if (aTxt.Text.Contains(".") && aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
                    {

                        aTxt.Text = aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim();
                    }

                    aTxt.SelectedItem = aTxt.Text.Trim();
                    aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    //    }               

                }

            }

            if (text.Length > 2 && text.EndsWith(".") == false && text.EndsWith(",") == false)
            {

                if (aTxt.SelectedItem == null || (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() != aTxt.Text.ToLower()))
                {


                    for (int i = 0; i <= 2; i++)
                    {
                        if (char.IsNumber(text[i]))
                            doorNo += text[i];
                        else
                            break;

                    }
                    text = text.Remove(text.IndexOf(doorNo), doorNo.Length).TrimStart(new char[] { ' ' });
                }
            }


            if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool() && text.Length <= 3 && text.Length > 0 && text.EndsWith("."))
            {
                string itemFound = string.Empty;

                foreach (object item in ddlPickupPlot.Items)
                {

                    if (item.ToString().Contains(text))
                    {

                        itemFound = item.ToString().Substring(item.ToString().IndexOf("ZoneName =")).ToStr().Replace("ZoneName =", "").Trim().Replace("}", "").Trim().ToStr();
                        if (itemFound.StartsWith(text))
                        {
                            itemFound = itemFound.Replace(text, "").Trim();

                            break;

                        }
                    }

                    //  var itemFound = ddlPickupPlot.Items.OfType<Gen_Zone>().FirstOrDefault(c => c.ZoneName.StartsWith(text));
                }

                if (!string.IsNullOrEmpty(itemFound.ToStr().Trim()))
                {
                    aTxt.Text = itemFound;

                    return;
                }


            }


            if (text.Length > 1 && text != "BASX")
            {
                if (text.EndsWith("   "))
                {
                    if (aTxt.Name == "txtFromAddress")
                    {
                        FocusOnPickupPlot();
                    }
                    else if (aTxt.Name == "txtToAddress")
                    {
                        FocusOnDropOffPlot();
                    }

                    return;

                }

                else if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() == aTxt.Text.ToLower())
                {
                    aTxt.ListBoxElement.Items.Clear();

                    aTxt.ResetListBox();

                    string locName = aTxt.SelectedItem.ToLower();
                    int commaIndex = aTxt.SelectedItem.LastIndexOf(',');
                    if (commaIndex != -1)
                    {
                        locName = locName.Remove(commaIndex);
                    }


                    string formerValue = aTxt.FormerValue.ToLower().Trim();

                    int? loctypeId = 0;
                    Gen_Location loc = null;
                    if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
                    || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 3 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                    {
                        //if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
                        // ||   (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <=2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                        //{



                        if (aTxt.FormerValue.EndsWith("  ") || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                        {
                            loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == locName);
                        }
                        else
                            loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

                        if (loc != null)
                        {
                            loctypeId = loc.LocationTypeId;
                        }
                    }

                    if (loctypeId != 0)
                    {

                        if (aTxt.Name == "txtFromAddress")
                        {

                            ddlFromLocType.SelectedValue = loctypeId;
                            //  RadComboBoxItem item = null;


                            if (loctypeId == Enums.LOCATION_TYPES.ADDRESS && aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                                if (aTxt.Name == "txtFromAddress")
                                {
                                    SetPickupZone(aTxt.Text);

                                    UpdateAutoCalculateFares();
                                }


                            }

                        }

                        if (loctypeId != Enums.LOCATION_TYPES.POSTCODE || loctypeId != Enums.LOCATION_TYPES.ADDRESS
                            || loctypeId != Enums.LOCATION_TYPES.AIRPORT || loctypeId != Enums.LOCATION_TYPES.BASE)
                        {

                            txtToAddress.Focus();

                        }




                        else if (aTxt.Name == "txtToAddress")
                        {

                            ddlToLocType.SelectedValue = loctypeId;
                            // RadComboBoxItem item = null;


                            if (loctypeId == Enums.LOCATION_TYPES.ADDRESS && aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                                SetDropOffZone(aTxt.Text);
                                UpdateAutoCalculateFares();


                            }



                            if (loctypeId == Enums.LOCATION_TYPES.POSTCODE || loctypeId == Enums.LOCATION_TYPES.ADDRESS)
                            {
                                txtToFlightDoorNo.Focus();
                            }
                            else
                            {
                                ddlCustomerName.Focus();
                            }
                        }
                    }
                    else if (aTxt.Text.Contains('.'))
                    {

                        RemoveNumbering(doorNo);

                        if (aTxt.Name == "txtFromAddress")
                        {

                            SetPickupZone(aTxt.SelectedItem);
                            txtFromFlightDoorNo.Focus();

                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);
                            txtToFlightDoorNo.Focus();

                        }
                    }
                    else if (!string.IsNullOrEmpty(doorNo))
                    {
                        aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        aTxt.Text = doorNo + " " + aTxt.Text;
                        aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    }
                    else
                    {
                        if (aTxt.Name == "txtFromAddress")
                        {


                            SetPickupZone(aTxt.SelectedItem);
                            //  txtFromFlightDoorNo.Focus();

                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);
                            //  txtToFlightDoorNo.Focus();

                        }

                        if (aTxt.SelectedItem.ToStr().Trim() != string.Empty)
                        {
                            UpdateAutoCalculateFares();

                        }


                    }

                    aTxt.FormerValue = string.Empty;


                    return;
                }



                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    //   CancelWebClientAsync();
                    // wc.CancelAsync();
                    aTxt.Values = null;

                }
                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text) || (text.Length <= 4 && (text.EndsWith("  ") || (text[1] == ' ' || (text.Length > 2 && char.IsLetter(text[1]) && text[2] == ' ' && text.Trim().WordCount() == 2))))
                   || (text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()))
                {


                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.StartsWith(text))
                               select (a.PostCode != string.Empty ? a.LocationName + " " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + " " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {


                            res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                   select (a.PostCode != string.Empty ? a.LocationName + " " + a.PostCode : a.LocationName)
                                       ).ToArray<string>();
                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);


                        aTxt.ShowListBox();
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }
                }


                if (MapType == Enums.MAP_TYPE.NONE) return;

                StartAddressTimer(text);

            }
            else if (text.Length > 0)
            {
                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    //   CancelWebClientAsync();
                    // wc.CancelAsync();
                    aTxt.Values = null;

                }
                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text))
                {

                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.ToLower() == text)
                               select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {


                            res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                       ).ToArray<string>();
                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);

                        if (text == "." && finalList.Count() == 1)
                        {
                            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                            aTxt.Text = finalList[0];
                            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                            if (aTxt.Name == "txtFromAddress")
                            {

                                SetPickupZone(aTxt.Text);
                                txtFromFlightDoorNo.Focus();

                            }

                            else if (aTxt.Name == "txtToAddress")
                            {
                                SetDropOffZone(aTxt.Text);
                                txtToFlightDoorNo.Focus();

                            }
                        }
                        else
                        {

                            aTxt.ShowListBox();
                        }
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }




                    StartAddressTimer(text);
                }


            }
            else
            {
                if (MapType == Enums.MAP_TYPE.NONE) return;
                aTxt.ResetListBox();
                //  aTxt.ListBoxElement.Visible = false;
                aTxt.ListBoxElement.Items.Clear();

                //   CancelWebClientAsync();
                //  wc.CancelAsync();
                aTxt.Values = null;

            }



        }


        void timer1_Tick(object sender, EventArgs e)
        {
            try
            {
                if (aTxt == null || IsKeyword)
                {

                    timer1.Stop();
                    return;
                }

                timer1.Stop();

                searchTxt = searchTxt.ToUpper();




                if (POIWorker.IsBusy)
                    POIWorker.CancelAsync();


                customerinfo = txtCustomerMobileNo.Text.Trim();

                if (customerinfo.Length == 0)
                    customerinfo = txtCustomerPhoneNo.Text.Trim();

                POIWorker.RunWorkerAsync(searchTxt);




            }
            catch (Exception ex)
            {


            }

        }


        private string customerinfo;


        private void StartAddressTimer(string text)
        {
            text = text.ToLower();
            searchTxt = text;
            InitializeTimer();
            timer1.Start();
        }


        #region ROAD LEVEL DATA ADDRESS SEARCHING


        private void SaveLocation(Taxi_AppMain.Digi.AddressDetails rec)
        {
            if (rec == null)
                return;
            try
            {
                string address = rec.AddressLine1.Replace("  ", " ");
                string locName = rec.AddressLine1;
                string postcode = General.GetPostCodeMatch(rec.AddressLine1);

                if (postcode.Length > 0)
                    locName = locName.Replace(postcode, "").Trim().ToUpper();

                locName = locName.Replace("  ", " ").Trim();

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.ExecuteQuery<int>("stp_savelocation {0},{1},{2},{3},{4}", locName, address, General.GetPostCodeMatch(rec.AddressLine1), Convert.ToDouble(rec.Coordinates.Split(',')[0]), Convert.ToDouble(rec.Coordinates.Split(',')[1]));
                }
            }
            catch
            {

            }
        }


        private void AddressTextChangePOI()
        {
            string text = aTxt.Text;
            string doorNo = string.Empty;





            if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToStr().ToLower() == aTxt.Text.ToLower()
                 && aTxt.Text.Length > 0)

            {
                if (aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim().Length > 0)
                {




                    aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);


                    if (aTxt.FormerValue.ToStr().EndsWith("\\") && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool())
                    {
                        try
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                int Id = db.Gen_Companies.Where(c => c.CompanyName.ToUpper() == aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper()).Select(args => args.Id).FirstOrDefault();



                                if (Id > 0)
                                {
                                    FillCompanyComboIfNull();


                                    aTxt.Text = "";
                                    ddlCompany.SelectedValue = Id;


                                }


                            }
                        }
                        catch
                        {

                        }


                    }
                    else
                    {


                        aTxt.Text = aTxt.ListBoxElement.SelectedItem.ToStr().Trim().ToUpper().Trim();


                        if (aTxt.ListBoxElement.Tag != null)
                        {
                            var rec = (aTxt.ListBoxElement.Tag as List<Taxi_AppMain.Digi.AddressDetails>).FirstOrDefault(c => aTxt.Text.EndsWith(c.AddressLine1));

                            SaveLocation(rec);


                        }


                        if (aTxt.Text.Contains(".") && aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
                        {
                            aTxt.Text = aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim();
                        }

                        aTxt.SelectedItem = aTxt.Text.Trim();

                    }
                    aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                }
            }



            if (text.ToStr().Trim().Length > 0)
            {

                for (int i = 0; i <= 2; i++)
                {
                    if (char.IsNumber(text[i]))
                        doorNo += text[i];
                    else
                        break;
                }

            }



            if (text.Length > 1 && text != "BASX")
            {
                if (text.EndsWith("   "))
                {
                    if (aTxt.Name == "txtFromAddress")
                    {
                        FocusOnPickupPlot();
                    }
                    else if (aTxt.Name == "txtToAddress")
                    {
                        FocusOnDropOffPlot();
                    }
                    return;
                }


                else if (aTxt.SelectedItem != null && aTxt.SelectedItem.ToLower() == aTxt.Text.ToLower())
                {
                    aTxt.ListBoxElement.Items.Clear();
                    aTxt.ResetListBox();

                    string locName = aTxt.SelectedItem.ToLower();
                    int commaIndex = aTxt.SelectedItem.LastIndexOf(',');
                    if (commaIndex != -1)
                    {
                        locName = locName.Remove(commaIndex);
                    }


                    string formerValue = aTxt.FormerValue.ToLower().Trim();

                    int? loctypeId = 0;
                    //   Gen_Location loc = null;
                    if (AppVars.keyLocations.Contains(formerValue) || aTxt.FormerValue.EndsWith("  ")
                    || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 3 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                    {
                        if (aTxt.FormerValue.EndsWith("  ") || (aTxt.FormerValue.Length < 13 && aTxt.FormerValue.WordCount() == 2 && aTxt.FormerValue.Remove(aTxt.FormerValue.IndexOf(' ')).Trim().Length <= 2 && aTxt.FormerValue.Strip(' ').IsAlpha()))
                        {
                            string shortkey = aTxt.FormerValue.ToStr().Trim().Contains(" ") ? aTxt.FormerValue.Substring(0, aTxt.FormerValue.IndexOf(' ')) : "";


                            using (TaxiDataContext db = new TaxiDataContext())
                            {



                                loctypeId = db.Gen_Locations.FirstOrDefault(c => c.Address.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey))).DefaultIfEmpty().LocationTypeId;

                                if (loctypeId == null)
                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.FullLocationName.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey))).DefaultIfEmpty().LocationTypeId;


                                if (loctypeId == null)
                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey))).DefaultIfEmpty().LocationTypeId;


                                if (loctypeId == null)
                                {
                                    try
                                    {
                                        string postcode = General.GetPostCodeMatch(locName.ToUpper().Trim());
                                        if (postcode.Length > 0 && postcode.Contains(" "))
                                        {
                                            postcode = postcode.ToLower();
                                            locName = locName.Replace(postcode, "").Trim();

                                            loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey))).DefaultIfEmpty().LocationTypeId;

                                        }
                                    }
                                    catch
                                    {

                                    }

                                }

                            }

                            // loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == locName && (shortkey == string.Empty || c.ShortCutKey.StartsWith(shortkey)));
                        }
                        else
                        {
                            if (locName.IsAlpha() == false)
                            {
                                string postcode = General.GetPostCodeMatch(locName.ToUpper());

                                if (postcode.Length > 0)
                                {
                                    postcode = postcode.ToLower();
                                    string street = locName.Replace(postcode, "").Trim();


                                    if (street.EndsWith(","))
                                    {
                                        street = street.Substring(0, street.LastIndexOf(",") - 1).ToLower();


                                    }

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode).DefaultIfEmpty().LocationTypeId;
                                    }

                                    // loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode);

                                }
                                else
                                {

                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                                    }

                                    //  loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

                                }



                            }
                            else
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                                }


                                //  loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);
                            }


                        }
                        if (loctypeId != null)
                        {
                            loctypeId = loctypeId.ToInt();
                        }
                        else
                            loctypeId = Enums.LOCATION_TYPES.ADDRESS;
                    }
                    else
                    {

                        if (locName.IsAlpha() == false)
                        {
                            string postcode = General.GetPostCodeMatch(locName.ToUpper());

                            if (postcode.Length > 0)
                            {
                                postcode = postcode.ToLower();
                                string street = locName.Replace(postcode, "").Trim();


                                if (street.EndsWith(","))
                                {
                                    street = street.Substring(0, street.LastIndexOf(",") - 1).ToLower();


                                }


                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode).DefaultIfEmpty().LocationTypeId;

                                }

                                //  loc = General.GetObject<Gen_Location>(c => c.LocationName.ToLower() == street && c.PostCode.ToLower() == postcode);

                            }
                            else
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                                }


                                //  loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);

                            }



                        }
                        else
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                loctypeId = db.Gen_Locations.FirstOrDefault(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName).DefaultIfEmpty().LocationTypeId;

                            }


                            // loc = General.GetObject<Gen_Location>(c => c.ShortCutKey == formerValue && c.LocationName.ToLower() == locName);
                        }

                        if (loctypeId != null)
                        {
                            loctypeId = loctypeId.ToInt();
                        }
                        else
                            loctypeId = Enums.LOCATION_TYPES.ADDRESS;

                    }

                    if (loctypeId == 0)
                    {
                        if (aTxt.Name == "txtFromAddress")
                        {
                            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                            {

                                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                            }

                        }
                        else if (aTxt.Name == "txtToAddress")
                        {
                            if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                            {

                                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                            }

                        }
                        else
                        {


                        }
                    }

                    if (loctypeId == 0)
                    {
                        loctypeId = Enums.LOCATION_TYPES.ADDRESS;

                    }

                    if (loctypeId != 0)
                    {

                        if (aTxt.Name == "txtFromAddress")
                        {

                            ddlFromLocType.SelectedValue = loctypeId;
                            //RadComboBoxItem item = (RadComboBoxItem)ddlFromLocation.Items.FirstOrDefault(b => b.Text.ToUpper().Equals(aTxt.SelectedItem.ToUpper()));
                            //if (item != null)
                            //{
                            //   // ddlFromLocation.SelectedValue = item.Value;
                            //    if (commaIndex > 0 && ddlFromLocation.Text.ToUpper() != item.Text.ToUpper())
                            //    {
                            //       SetPickupZone(item.Text);
                            //    }


                            //    if (loc != null && loc.ZoneId != null && ddlPickupPlot.SelectedValue == null)
                            //    {
                            //        ddlPickupPlot.SelectedValue = loc.ZoneId;
                            //    }

                            //    if (ddlFromLocation.SelectedValue != null && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                            //    {
                            //        UpdateAutoCalculateFares();

                            //    }
                            //}
                            //else
                            //{
                            if (aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                //   aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                                if (aTxt.Name == "txtFromAddress")
                                {
                                    SetPickupZone(aTxt.Text);
                                    UpdateAutoCalculateFares();
                                    LoadNearest();
                                    aTxt.SelectedItem = "";

                                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                                    {
                                        FocusOnFromDoor();
                                    }
                                    else
                                    {

                                        //   AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail

                                        FocusOnToAddress();
                                    }
                                    //  txtToAddress.Focus();

                                }
                            }
                            // }

                            //if (loctypeId != Enums.LOCATION_TYPES.POSTCODE || loctypeId != Enums.LOCATION_TYPES.ADDRESS
                            //    || loctypeId != Enums.LOCATION_TYPES.AIRPORT || loctypeId != Enums.LOCATION_TYPES.BASE)
                            //{

                            //    txtToAddress.Focus();

                            //}



                        }
                        else if (aTxt.Name == "txtViaAddress")
                        {

                            //  txtViaAddress.KeyDown -=new KeyEventHandler(txtViaAddress_KeyDown);

                            ddlViaFromLocType.SelectedValue = loctypeId;


                            AddViaPoint();




                            //  txtViaAddress.KeyDown += new KeyEventHandler(txtViaAddress_KeyDown);
                        }
                        else if (aTxt.Name == "txtToAddress")
                        {

                            ddlToLocType.SelectedValue = loctypeId;

                            if (aTxt.SelectedItem.ToStr().Length > 0)
                            {
                                aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                // aTxt.Text = doorNo + " " + aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.SelectedItem.ToStr().Trim();
                                aTxt.Text = aTxt.Text.Trim();
                                aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                                SetDropOffZone(aTxt.Text);
                                UpdateAutoCalculateFares();
                                LoadNearest();
                                aTxt.SelectedItem = "";
                            }




                            //  txtToFlightDoorNo.Focus();

                            //   ddlCustomerName.Focus();

                        }


                        if (aTxt != null)
                            CheckWhiteList(aTxt.Text.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim());

                    }
                    else if (aTxt.Text.Contains('.'))
                    {
                        RemoveNumbering(doorNo);

                        if (aTxt.Name == "txtFromAddress")
                        {

                            SetPickupZone(aTxt.SelectedItem);
                            txtFromFlightDoorNo.Focus();

                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);
                            txtToFlightDoorNo.Focus();
                            UpdateAutoCalculateFares();
                        }
                    }
                    else if (!string.IsNullOrEmpty(doorNo))
                    {
                        aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        aTxt.Text = aTxt.Text;
                        aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                        if (aTxt.Name == "txtFromAddress")
                        {
                            SetPickupZone(aTxt.SelectedItem);
                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);

                        }

                        if (aTxt.SelectedItem.ToStr().Trim() != string.Empty)
                        {
                            UpdateAutoCalculateFares();
                        }
                    }
                    else
                    {
                        if (aTxt.Name == "txtFromAddress")
                        {
                            SetPickupZone(aTxt.SelectedItem);
                        }
                        else if (aTxt.Name == "txtViaAddress")
                        {
                            AddViaPoint();
                        }

                        else if (aTxt.Name == "txtToAddress")
                        {
                            SetDropOffZone(aTxt.SelectedItem);

                        }

                        if (aTxt.SelectedItem.ToStr().Trim() != string.Empty && aTxt.Name != "txtViaAddress")
                        {
                            UpdateAutoCalculateFares();
                        }
                    }

                    aTxt.FormerValue = string.Empty;
                    return;
                }

                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    aTxt.Values = null;

                }

                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text) || (text.Length <= 4 && (text.EndsWith("  ") || (text[1] == ' ' || (text.Length > 2 && char.IsLetter(text[1]) && text[2] == ' ' && text.Trim().WordCount() == 2))))
                   || (text.Length < 13 && text.WordCount() == 2 && text.Remove(text.IndexOf(' ')).Trim().Length <= 3 && text.Strip(' ').IsAlpha()))
                {


                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.StartsWith(text))
                               select (a.PostCode != string.Empty ? a.LocationName + " " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + " " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {

                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                db.DeferredLoadingEnabled = false;
                                db.CommandTimeout = 5;

                                res = (from a in db.Gen_Locations.Where(c => c.ShortCutKey == text)
                                       select (a.PostCode != string.Empty ? a.LocationName + " " + a.PostCode : a.LocationName)
                                     ).ToArray<string>();

                                //res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                //       select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                //      ).ToArray<string>();

                            }



                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);

                        aTxt.ShowListBox();

                        if (aTxt.ListBoxElement.Items.Count > 0 && aTxt.ListBoxElement.SelectedIndex == -1)
                        {

                            aTxt.onUpdating = true;
                            aTxt.ListBoxElement.SelectedIndex = 0;
                            aTxt.onUpdating = false;
                        }
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }
                }


                if (MapType == Enums.MAP_TYPE.NONE) return;

                StartAddressTimer(text);

            }
            else if (text.Length > 0)
            {
                if (MapType == Enums.MAP_TYPE.GOOGLEMAPS)
                {

                    aTxt.Values = null;

                }
                text = text.ToLower();

                if (AppVars.keyLocations.Contains(text))
                {

                    aTxt.ListBoxElement.Items.Clear();


                    string[] res = null;

                    if (text.EndsWith("  "))
                    {

                        text = text.Trim();

                        res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey.ToLower() == text)
                               select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                ).ToArray<string>();


                    }
                    else
                    {
                        if (text.Contains(' ') && text.Substring(text.IndexOf(' ')).Trim().Length > 1)
                        {
                            string shortcut = text.Remove(text.IndexOf(' ')).Trim();

                            string locName = text.Substring(text.IndexOf(' ')).Trim().ToLower();

                            res = (from a in General.GetQueryable<Gen_Location>(c => c.Gen_LocationType.ShortCutKey == shortcut &&
                                        c.LocationName.ToLower().Contains(locName))
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                      ).ToArray<string>();

                        }
                        else
                        {


                            res = (from a in General.GetQueryable<Gen_Location>(c => c.ShortCutKey == text)
                                   select (a.PostCode != string.Empty ? a.LocationName + ", " + a.PostCode : a.LocationName)
                                       ).ToArray<string>();
                        }
                    }


                    if (res.Count() > 0)
                    {
                        IsKeyword = true;


                        var finalList = (from a in AppVars.zonesList
                                         from b in res
                                         where b.Contains(a)
                                         select b).ToArray<string>();


                        if (finalList.Count() > 0)
                            finalList = finalList.Union(res).ToArray<string>();

                        else
                            finalList = res;


                        aTxt.ListBoxElement.Items.AddRange(finalList);

                        if (text == "." && finalList.Count() == 1)
                        {
                            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                            aTxt.Text = finalList[0];
                            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                            if (aTxt.Name == "txtFromAddress")
                            {

                                SetPickupZone(aTxt.Text);
                                txtFromFlightDoorNo.Focus();

                            }

                            else if (aTxt.Name == "txtToAddress")
                            {
                                SetDropOffZone(aTxt.Text);
                                txtToFlightDoorNo.Focus();

                            }
                        }
                        else
                        {

                            aTxt.ShowListBox();
                        }
                    }


                    if (aTxt.Text != aTxt.FormerValue)
                    {
                        aTxt.FormerValue = aTxt.Text;
                    }

                    StartAddressTimer(text);
                }


            }
            else
            {
                //if (MapType == Enums.MAP_TYPE.NONE)
                //    return;
                aTxt.ResetListBox();
                aTxt.ListBoxElement.Items.Clear();
                aTxt.Values = null;

            }



        }






        private void ShowAddressesPOI(string[] resValue)
        {
            int sno = 1;

            // var finalList = resValue;

            try
            {






                //

                var finalList = (from a in AppVars.zonesList
                                 from b in resValue
                                 where b.Contains(a) && (b.Substring(b.IndexOf(a), a.Length) == a && (b.IndexOf(a) - 1) >= 0 && b[b.IndexOf(a) - 1] == ' ' && GeneralBLL.GetHalfPostCodeMatch(b) == a)

                                 select b).ToArray<string>();


                if (finalList.Count() > 0)
                {



                    finalList = finalList.Union(resValue).ToArray<string>();


                    var finalList2 = (from a in resValue
                                      where General.GetPostCodeMatch(a).Length == 0
                                      select a).ToArray<string>();


                    finalList = finalList2.Union(finalList).ToArray<string>();

                }
                else
                {
                    finalList = resValue;

                    var finalList2 = (from a in resValue
                                      where General.GetPostCodeMatch(a).Length == 0
                                      select a).ToArray<string>();


                    finalList = finalList2.Union(finalList).ToArray<string>();
                }



                //if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
                //{
                //    searchTxt = searchTxt.Replace("#", "").Trim();



                //    string[] list = null;
                //    using (TaxiDataContext db = new TaxiDataContext())
                //    {
                //        list = db.Gen_RecentAddresses.OrderByDescending(c => c.SearchedOn).Take(50)
                //       .Where(c => c.AddressLine1.Contains(searchTxt) && (ddlCompany.SelectedValue == null || c.CompanyId == ddlCompany.SelectedValue.ToIntorNull()))
                //       .Distinct().Select(c => c.AddressLine1.Replace("&", "AND")).ToArray<string>();
                //    }


                //    if (list!=null && list.Count() > 0)
                //    {


                //        try
                //        {


                //            list = (from a in XDocument.Parse("<?xml version=\"1.0\" encoding=\"utf-8\"?><adds>" + String.Join(" ", list) + "</adds>").Element("adds").Nodes()
                //                    where (a as XElement).Value.Contains(searchTxt)
                //                    select (a as XElement).Value).Distinct().ToArray<string>();


                //            if (finalList != null)
                //            {

                //                finalList = list.Union(finalList).ToArray<string>();
                //            }
                //            else
                //            {

                //                finalList = list;
                //            }
                //        }
                //        catch
                //        {


                //        }
                //    }
                //}

                if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0 && searchTxt.ToStr().Trim().Length > 0)
                {
                    try
                    {
                        searchTxt = searchTxt.Replace("#", "").Trim();


                        string serch = "<add>" + searchTxt;
                        string[] list = null;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.CommandTimeout = 6;

                            list = db.Gen_RecentAddresses
                           .Where(c => c.AddressLine1.Contains(serch))
                           .OrderByDescending(c => c.SearchedOn).Take(50)
                           .Distinct().Select(c => c.AddressLine1.Replace("&", "AND")).ToArray<string>();
                        }


                        if (list != null && list.Count() > 0)
                        {





                            list = (from a in XDocument.Parse("<?xml version=\"1.0\" encoding=\"utf-8\"?><adds>" + String.Join(" ", list) + "</adds>").Element("adds").Nodes()
                                    where (a as XElement).Value.StartsWith(searchTxt)
                                    select (a as XElement).Value).Distinct().ToArray<string>();


                            if (finalList != null)
                            {

                                finalList = list.Union(finalList).ToArray<string>();
                            }
                            else
                            {

                                finalList = list;
                            }


                        }
                    }
                    catch (Exception ex)
                    {
                        try
                        {
                            File.AppendAllText("recentaddress_exception.txt", DateTime.Now + " : " + ex.Message + Environment.NewLine);

                        }
                        catch
                        {


                        }


                    }
                }


                if (finalList.Count() < 10 && aTxt.Text.EndsWith("\\") == false)
                {
                    finalList = finalList.Select(args => (sno++) + ". " + args).ToArray();
                }


                aTxt.ListBoxElement.Items.Clear();
                aTxt.ListBoxElement.Items.AddRange(finalList);
                //



                if (aTxt.ListBoxElement.Items.Count == 0)
                    aTxt.ResetListBox();
                else
                {


                    aTxt.ShowListBox();


                }

                if (searchTxt != aTxt.FormerValue.ToLower())
                {
                    aTxt.FormerValue = aTxt.Text;

                }

                if (aTxt.ListBoxElement.Items.Count > 0 && aTxt.ListBoxElement.SelectedIndex == -1)
                {

                    aTxt.onUpdating = true;
                    aTxt.ListBoxElement.SelectedIndex = 0;
                    aTxt.onUpdating = false;
                }

                //if (aTxt.ListBoxElement.Items.Count > 0 && aTxt.ListBoxElement.SelectedIndex == -1)
                //{


                //    //aTxt.onUpdating = true;
                //    //   aTxt.ListBoxElement.SelectedValueChanged -= ;
                //    //  aTxt.ListBoxElement.SelectedIndex = 0;
                //    //aTxt.onUpdating = false;
                //}
            }
            catch (Exception ex)
            {
                AddExcepLog("POIWORKER_COMPLETED : " + ex.Message);


            }
        }


        #endregion


        private void SetPickupZone(string val)
        {
            try
            {


                ddlPickupPlot.SelectedValue = GetZoneId(val.ToStr().ToUpper()).ToInt();


                if (IsOutoftownPlot)
                    ddlBookingType.SelectedValue = Enums.BOOKING_TYPES.OUTOFTOWN;
                else
                {

                    if (objMaster.PrimaryKeyValue == null)
                    {
                        ddlBookingType.SelectedValue = Enums.BOOKING_TYPES.LOCAL;
                    }
                    else
                    {
                        ddlBookingType.SelectedValue = objMaster.Current.BookingTypeId;

                    }



                }

                if (chkLead.Checked == false && leadZoneDueTime != null)
                {
                    try
                    {
                        int hour = leadZoneDueTime.Value.Hour;
                        int min = leadZoneDueTime.Value.Minute;

                        numLead.Value = ((hour * 60) + min);



                    }
                    catch
                    {


                    }

                }
                else
                {
                    try
                    {
                        if (ddlPickupPlot.SelectedValue == null && chkLead.Checked == false)
                        {


                            if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    db.DeferredLoadingEnabled = false;
                                    db.CommandTimeout = 3;

                                    string postcode = General.GetPostCodeMatch(txtFromAddress.Text.Trim().ToUpper());
                                    if (postcode.Length > 0)
                                    {
                                        int locId = db.Gen_Locations.FirstOrDefault(c => c.LocationTypeId == Enums.LOCATION_TYPES.AIRPORT && c.PostCode == postcode).DefaultIfEmpty().Id;
                                        if (locId > 0)
                                        {
                                            int airportlead = db.Gen_Syspolicy_LocationExpiries.FirstOrDefault(c => c.LocationId == locId).DefaultIfEmpty().ExpiryMins.ToInt();


                                            // chkLead.Checked = true;
                                            numLead.Value = airportlead;

                                        }
                                    }


                                }
                            }
                            else
                            {
                                numLead.Value = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToDecimal();


                            }


                        }
                    }
                    catch
                    {


                    }


                }


                if (locationAttributes.ToStr().Length > 0)
                {
                    if (btnAttributes.Tag.ToStr().Trim().Length == 0)
                    {

                        btnAttributes.Text = btnAttributes.Text + Environment.NewLine + locationAttributes.ToStr().Trim().TrimStart(new char[] { ',' }).TrimEnd(new char[] { ',' });
                        btnAttributes.Tag = locationAttributes.ToStr().Trim();
                    }
                    else
                    {


                        if (btnAttributes.Tag.ToStr().Contains("," + locationAttributes + ",") == false)
                        {
                            btnAttributes.Text = btnAttributes.Text + "," + locationAttributes.ToStr().Trim().TrimStart(new char[] { ',' }).TrimEnd(new char[] { ',' });

                            string val2 = locationAttributes;

                            if (val2.Contains(","))
                                val2 = val2.Replace(",", "").Trim();

                            btnAttributes.Tag = btnAttributes.Tag + val2.ToStr().Trim() + ",";

                            btnAttributes.Tag = btnAttributes.Tag.ToStr().Replace(",", ",").Trim();



                            if (btnAttributes.Text.EndsWith(","))
                                btnAttributes.Text = btnAttributes.Text.TrimEnd(new char[] { ',' });


                            if (btnAttributes.Text.StartsWith(","))
                                btnAttributes.Text = btnAttributes.Text.TrimStart(new char[] { ',' });

                        }


                    }
                }
                else
                {
                    if (ddlDropOffPlot.Tag.ToStr().Trim().Length > 0)
                    {

                        if (btnAttributes.Tag.ToStr().Contains(ddlDropOffPlot.Tag.ToStr().Trim()))
                        {
                            btnAttributes.Text = btnAttributes.Text.Replace(ddlDropOffPlot.Tag.ToStr().Replace(",", "").Trim(), "").Trim();




                            string val2 = ddlDropOffPlot.Tag.ToStr().Trim();

                            if (val2.Contains(","))
                                val2 = val2.Replace(",", "").Trim();



                            btnAttributes.Tag = btnAttributes.Tag.ToStr().Replace(ddlDropOffPlot.Tag.ToStr(), "").Trim();

                            if (btnAttributes.Tag.ToStr() == ",,")
                                btnAccountCode.Tag = null;

                            if (btnAttributes.Text.EndsWith(","))
                                btnAttributes.Text = btnAttributes.Text.TrimEnd(new char[] { ',' });


                            if (btnAttributes.Text.StartsWith(","))
                                btnAttributes.Text = btnAttributes.Text.TrimStart(new char[] { ',' });

                        }


                    }

                }

            }
            catch
            {


            }

        }

        private void SetDropOffZone(string val)
        {
            ddlDropOffPlot.SelectedValue = GetZoneId(val.ToStr().ToUpper()).ToInt();
        }




        private void RemoveNumbering(string formerVal)
        {

            aTxt.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

            if (aTxt.Text.IndexOf(".") < 3 && aTxt.Text.IndexOf(".") > 0 && char.IsNumber(aTxt.Text[aTxt.Text.IndexOf(".") - 1]))
            {

                aTxt.Text = (formerVal.ToStr() + " " + aTxt.Text.Remove(0, aTxt.Text.IndexOf('.') + 1).Trim()).Trim();
            }
            else
            {
                if (EnablePOI)
                {

                    aTxt.Text = aTxt.Text.ToStr().Trim();
                }
                else
                {
                    aTxt.Text = (formerVal.ToStr() + " " + aTxt.Text.ToStr().Trim()).Trim();

                }
            }

            aTxt.TextChanged += new EventHandler(TextBoxElement_TextChanged);

        }









        private void Control_Paint(object sender, PaintEventArgs e)
        {



            Control activeControl = this.ActiveControl;

            if (activeControl != null && activeControl.Parent == sender)
            {

                if (activeControl.Name != "chkQuotedPrice" && activeControl.Name != "dtpPickupDate" && activeControl.Name != "dtpPickupTime" && activeControl.Name != "chkAutoDespatch" && activeControl.Name != "chkBidding" && activeControl.Name != "chkDisableDriverSMS" && activeControl.Name != "chkDisablePassengerSMS" && activeControl.Name != "ddlDepartment")
                {


                    //activeControl.BackColor = Color.AliceBlue;

                    Rectangle r = new Rectangle(activeControl.Location.X - Convert.ToInt32(1.8), activeControl.Location.Y - Convert.ToInt32(1.8),
                                     activeControl.Size.Width + Convert.ToInt32(2.8), activeControl.Size.Height + Convert.ToInt32(2.8));

                    LinearGradientBrush myLinearGradientBrush = new LinearGradientBrush(
                                        r,
                                        Color.Blue,
                                        Color.Green,
                                        LinearGradientMode.Horizontal);
                    e.Graphics.FillRectangle(myLinearGradientBrush, r);


                    e.Graphics.DrawRectangle(Pens.LightBlue,
                            r);



                }
                else
                {



                }

            }

        }

        private void Control_ReceivedFocus(object sender, EventArgs e)
        {
            this.Refresh();

        }

        private void InstallEventHandlers(Control containerControl)
        {



            containerControl.Paint -= Control_Paint;
            containerControl.Paint += Control_Paint;


            foreach (Control nestedControl in containerControl.Controls)
            {

                if (nestedControl.Name != "dtpPickupTime" && nestedControl.Name != "dtpPickupDate" && nestedControl.Name != "ddlDepartment" && nestedControl.Name != "numFareRate")
                {
                    nestedControl.Enter -= Control_ReceivedFocus;
                    nestedControl.Enter += Control_ReceivedFocus;



                    if (nestedControl is ScrollableControl)
                        InstallEventHandlers(nestedControl);
                }
            }
        }




        void frmBooking_Load(object sender, EventArgs e)
        {
            try
            {

                if (this.WindowLocation != null && this.WindowLocation.Value != null)
                {


                    if (WindowLocation.Value.X != 0)
                    {
                        this.Location = new Point((WindowLocation.Value.X - this.Width) / 2,
                              (WindowLocation.Value.Height - this.Height) / 2);
                    }
                }

                if (objMaster.Current == null)
                {
                    ddlBookingType.SelectedValue = this.PickBookingTypeId;



                    if (this.PickSubCompanyId != null && this.PickSubCompanyId != ddlSubCompany.SelectedValue.ToInt())
                        ddlSubCompany.SelectedValue = this.PickSubCompanyId;



                    if (this.CustomerPermanentNotes.ToStr().Trim().Length > 0)
                    {
                        txtSpecialRequirements.Text = this.CustomerPermanentNotes.ToStr();
                        chkPermanentCustNotes.Checked = true;
                    }

                    //if (this.PickVehicleTypeId != 0)
                    //    ddlVehicleType.SelectedValue = PickVehicleTypeId;


                    if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                    {
                        //   chkPermanentCustNotes.Checked = true;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            var excludedDrvs = btnExcludeDrivers.Tag.ToStr().Trim().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);



                            var drivers = string.Join(",", (from a in db.Fleet_Drivers

                                                                // join b in excludedDrvs on a.Id equals b
                                                            where a.IsActive == true && excludedDrvs.Contains(a.Id.ToString())
                                                            select a.DriverNo).ToArray<string>());


                            btnExcludeDrivers.Text += Environment.NewLine + drivers;
                            //btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                        }
                    }

                    if (this.PickViaString.ToStr().Trim().Length > 0)
                    {
                        int cnt = 1;
                        try
                        {
                            ShowViaPoint(true);
                            foreach (var item in this.PickViaString.ToStr().Trim().Split(new char[] { ':' }))
                            {

                                if ((item.Contains("Via " + cnt) && item.Replace(("Via " + cnt), "").Trim().Length > 0) || item.Contains("Via " + cnt) == false)
                                {
                                    var row = grdVia.Rows.AddNew();

                                    row.Cells["VIALOCATIONVALUE"].Value = item.Replace(("Via " + cnt), "").Trim();

                                    if (row.Cells["VIALOCATIONVALUE"].Value.ToStr().Contains(","))
                                        row.Cells["VIALOCATIONVALUE"].Value = row.Cells["VIALOCATIONVALUE"].Value.ToStr().Replace(",", " ").Trim();

                                    row.Cells["FROMVIALOCTYPEID"].Value = Enums.LOCATION_TYPES.ADDRESS;

                                    row.Cells["FROMTYPELABEL"].Value = "";

                                    //  row.Cells["FROMTYPEVALUE"].Value = "Address";

                                    row.Cells["VIALOCATIONID"].Value = null;
                                    row.Cells["VIALOCATIONLABEL"].Value = "Via Address";

                                }

                                cnt++;



                            }

                            ShowViaPoint(false);

                            // opt_one.TabIndexChanged += new EventHandler(opt_one_TabIndexChanged);

                        }
                        catch
                        {


                        }

                    }

                    SetIfLoyalityAccount();
                }
                else if (objMaster.Current != null && objMaster.Current.DriverId != null)
                {

                    ComboFunctions.FillDriverNoQueueCombo(ddlDriver, objMaster.Current.DriverId, objMaster.Current.Fleet_Driver.DriverNo + " - " + objMaster.Current.Fleet_Driver.DriverName);

                    chkAllocateDriver.Checked = objMaster.Current.IsConfirmedDriver.ToBool();
                    //  this.chkAllocateDriver.CheckedChanged += new System.EventHandler(this.chkAllocateDriver_CheckedChanged);
                }


                if (chkAllocateDriver.Enabled)
                {
                    this.chkAllocateDriver.CheckedChanged += new System.EventHandler(this.chkAllocateDriver_CheckedChanged);
                }



                InstallEventHandlers(this);
                InstallEventHandlers(pnlMain);
                InstallEventHandlers(pnlCustomer);

                InstallEventHandlers(pnlFares);
                InstallEventHandlers(pnlBookingFees);
                InstallEventHandlers(panel2);

                if (AppVars.listUserRights.Count(x => x.functionId == "HIDE COMPANY PRICE") == 0)
                    InitializeCompanyPrice();


                numReturnCompanyFares.Enabled = false;
                numCompanyFares.Enabled = false;




                this.StartPosition = FormStartPosition.CenterScreen;


                if (ddlDepartment != null && ddlDepartment.Items.Count > 0 && ddlDepartment.SelectedValue != null)
                    ddlDepartment.SelectedValue = null;



                if (AppVars.objPolicyConfiguration.AutoDespatchType.ToInt() == 5 && AppVars.objPolicyConfiguration.AutoDespatchPriorityForAccJobs.ToBool())
                {
                    chkHasPriority.Visible = true;
                    numPriority.Visible = true;
                }


                if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "Cr0wn_C@r$_$0l!hull_Ltd")
                    chkSurge.Visible = true;
            }
            catch
            {


            }

            btn_notes.Leave += new EventHandler(btn_notes_Leave);
            opt_one.KeyDown += new KeyEventHandler(opt_one_KeyDown);
            /// 

            // this.Opacity = 0.09;
            if (AppVars.objPolicyConfiguration.MapType.ToInt() == 2)
                btnDespatchView.Visible = false;



            ApplyTheme();

            if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool()
                && AppVars.listUserRights.Count(c => c.functionId == "Disable AutoSelect Account") == 0)
            {
                ddlCustomerName.Validated += new EventHandler(ddlCustomerName_Validated);


                if (objMaster.PrimaryKeyValue == null)
                {
                    if (ddlCompany.SelectedValue == null)
                    {
                        chkIsCompanyRates.Checked = true;
                    }
                    else
                    {
                        FillCompanyContacts();
                    }

                    if (AppVars.listUserRights.Count(c => c.functionId == "SHOW SETFARES") == 0)
                    {

                        if (objMaster.Current == null)
                        {
                            ddlCompany.Enter += DdlCompany_Enter;
                        }
                    }
                }

                else if (objMaster.PrimaryKeyValue.ToInt() > 0 && objMaster.Current.CompanyId > 0)
                {
                    FillCompanyContacts();
                }

            }



            if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "gmTS.LTD")
            {
                chkMiles.Visible = true;
                numMiles.Visible = true;


            }

            if (AppVars.objPolicyConfiguration.MapType.ToInt() == 2)
            {
                btnDespatchView.Visible = false;
                lblRoute.Visible = true;
                ddlRoute.Visible = true;


                if (AppVars.objPolicyConfiguration.PreferredShortestDistance.ToBool() == false)
                {
                    ddlRoute.SelectedIndex = 1;

                    SetRouteType();

                }
                ddlRoute.SelectedIndexChanged += DdlRoute_SelectedIndexChanged;

                if (objMaster.Current != null && objMaster.Current.BoundType.ToStr().Trim().Length > 0)
                    ddlRoute.Text = objMaster.Current.BoundType.ToStr().Trim();


                ddlRoute.Enabled = btnPickFares.Enabled;
            }


            if (this.CustomerHistoryCount.ToStr().Length > 0)
            {
                this.lblBookedBy.Text = this.CustomerHistoryCount;


            }



            if (AppVars.listUserRights.Count(c => c.functionId == "SHOW SETFARES") > 0)
            {

                btnSetFares.Visible = true;
                btnSetFares.Click += btnSetFares_Click;

                using (TaxiDataContext db = new TaxiDataContext())
                {


                    try
                    {



                        try
                        {
                            AppVars.ShowSetFareValue = db.ExecuteQuery<string>("select setval from appsettings where setkey='setfareonbooking'").FirstOrDefault().ToStr().ToInt();
                        }
                        catch
                        {

                        }
                        if (AppVars.ShowSetFareValue == 0)
                        {
                            ddlCustomerName.TextChanged += new EventHandler(ddlCustomerName_TextChanged);
                            ddlCustomerName.AutoCompleteSource = AutoCompleteSource.CustomSource;
                            ddlCustomerName.AutoCompleteMode = AutoCompleteMode.Suggest;
                        }
                        else
                        {
                            btnSetFares.Tag = "frmAlertShowFares";
                            //    btnPickAccountBooking.Visible = false;
                            //  ddlCompany.Size = new Size(407, ddlCompany.Size.Height);
                            //  pnlAutoDespatch.Size = new Size(154, 107);


                            if (objMaster.Current == null)
                            {
                                ddlCompany.Enter += DdlCompany_Enter;
                            }
                        }
                    }
                    catch
                    {

                    }
                }

            }
            //else
            //{
            //    btnPickAccountBooking.Visible = false;
            //    ddlCompany.Size = new Size(407, ddlCompany.Size.Height);
            //    pnlAutoDespatch.Size = new Size(154, 107);
            //}

        }

        private void DdlCompany_Enter(object sender, EventArgs e)
        {
            FillCompanyComboIfNull();
        }

        private void FillCompanyComboIfNull()
        {
            if (ddlCompany.DataSource == null)
            {
                ddlCompany.Enter -= DdlCompany_Enter;

                ComboFunctions.FillCompanyComboX(ddlCompany);
                ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                ddlCompany.Enter += DdlCompany_Enter;
            }
        }

        private void SetRouteType()
        {
            if (ddlRoute.SelectedIndex == 1)
            {
                AppVars.routemode = "fastest;car";

            }
            else
                AppVars.routemode = "shortest;car";

        }

        private void DdlRoute_SelectedIndexChanged(object sender, EventArgs e)
        {

            SetRouteType();
            LoadNearestMap();
            UpdateAutoCalculateFares();
        }

        private void ApplyTheme()
        {

            if (AppVars.AppTheme != "ControlDefault")
            {
                panel2.BackColor = Color.Black;
                // lblHeaderAction.BackColor = Color.Black;
                // lblHeaderAction.BackColor = Color.Black;
                //  pnlHeader.BackColor = Color.Purple;
                pnlOtherCharges.BackColor = Color.Black;
                // lblPaymentHeading.BackColor = Color.Purple;
                pnlFares.BackColor = Color.Black;
                radPanel1.BackColor = Color.Black;
                //   pnlPaymentMode.BackColor = Color.Black;
                ddlCompany.BackColor = Color.Red;

                lblBookingType.BackColor = Color.Purple;
                lblBookingType.ForeColor = Color.White;
                lblMap.BackColor = Color.Purple;
                lblMap.ForeColor = Color.White;
                ddlCompany.ForeColor = Color.White;
                ddlPaymentType.BackColor = Color.Black;
                ddlPaymentType.ForeColor = Color.White;
                txtPaymentReference.BackColor = Color.Black;

                btn_notes.BackColor = Color.Black;
                btn_notes.ForeColor = Color.White;
                btnPickFares.BackColor = Color.Black;
                btnPickFares.ForeColor = Color.White;

                btnDetailMap.BackColor = Color.Black;
                btnDetailMap.ForeColor = Color.White;

                radLabel27.BackColor = Color.Black;



                foreach (var item in pnlCustomer.Controls)
                {
                    if (item is TextBox)
                    {
                        (item as TextBox).BackColor = Color.Black;
                        (item as TextBox).ForeColor = Color.White;
                    }
                    if (item is Label)
                    {
                        (item as Label).BackColor = Color.Black;
                        (item as Label).ForeColor = Color.White;
                    }
                    if (item is CheckBox)
                    {
                        (item as CheckBox).BackColor = Color.Black;
                        (item as CheckBox).ForeColor = Color.White;
                    }

                }


                foreach (var item in pnljourney.Controls)
                {
                    if (item is RadioButton)
                    {
                        (item as RadioButton).BackColor = Color.Black;
                        (item as RadioButton).ForeColor = Color.White;
                    }


                }


                foreach (var item in pnlOtherCharges.Controls)
                {
                    if (item is Label)
                    {
                        if ((item as Label).Name == "lblAccParkingCharges" || (item as Label).Name == "lblAccWaitingCharges")
                        {
                            (item as Label).BackColor = Color.Black;
                            (item as Label).ForeColor = Color.Gray;

                        }
                        else
                        {
                            (item as Label).BackColor = Color.Black;
                            (item as Label).ForeColor = Color.White;
                        }

                    }

                }

                foreach (var item in panel1.Controls)
                {
                    if (item is Button)
                    {
                        (item as Button).BackColor = Color.Black;
                        (item as Button).ForeColor = Color.White;
                    }



                }
                lblPaymentRef.ForeColor = Color.White;
                foreach (var item in panel2.Controls)
                {
                    if (item is Button)
                    {
                        (item as Button).BackColor = Color.Black;
                        (item as Button).ForeColor = Color.White;
                    }

                    if (item is TextBox)
                    {
                        (item as TextBox).BackColor = Color.Black;
                        (item as TextBox).ForeColor = Color.White;
                    }

                    if (item is CheckBox)
                    {
                        (item as CheckBox).BackColor = Color.Black;
                        (item as CheckBox).ForeColor = Color.White;
                    }
                }


                foreach (var item in radPanel3.Controls)
                {
                    if (item is Button)
                    {
                        (item as Button).BackColor = Color.Black;
                        (item as Button).ForeColor = Color.White;
                    }

                    if (item is TextBox)
                    {
                        (item as TextBox).BackColor = Color.Black;
                        (item as TextBox).ForeColor = Color.White;
                    }

                    if (item is CheckBox)
                    {
                        (item as CheckBox).BackColor = Color.Black;
                        (item as CheckBox).ForeColor = Color.White;
                    }
                }

                foreach (var item in pnlMain.Controls)
                {
                    if (item is CheckBox)
                    {
                        (item as CheckBox).BackColor = Color.Black;
                        (item as CheckBox).ForeColor = Color.White;
                    }

                    if (item is Button)
                    {
                        (item as Button).BackColor = Color.Black;
                        (item as Button).ForeColor = Color.White;
                    }


                    if (item is AutoCompleteTextBox)
                    {
                        (item as AutoCompleteTextBox).BackColor = Color.Black;
                        (item as AutoCompleteTextBox).ForeColor = Color.White;
                    }


                    if (item is TextBox)
                    {
                        (item as TextBox).BackColor = Color.Black;
                        (item as TextBox).ForeColor = Color.White;
                    }

                }


                foreach (var item in pnlFares.Controls)
                {

                    if (item is Label)
                    {
                        (item as Label).BackColor = Color.Black;
                        (item as Label).ForeColor = Color.White;
                    }


                }




                foreach (var item in panel4.Controls)
                {

                    if (item is Button)
                    {
                        (item as Button).BackColor = Color.Black;
                        (item as Button).ForeColor = Color.White;
                    }


                }


                foreach (var item in radPanel1.Controls)
                {
                    if (item is Button)
                    {
                        (item as Button).BackColor = Color.Black;
                        (item as Button).ForeColor = Color.White;
                    }

                    if (item is Label)
                    {
                        (item as Label).BackColor = Color.Black;
                        (item as Label).ForeColor = Color.White;
                    }

                    if (item is CheckBox)
                    {
                        (item as CheckBox).BackColor = Color.Black;
                        (item as CheckBox).ForeColor = Color.White;
                    }

                    if (item is TextBox)
                    {
                        (item as TextBox).BackColor = Color.Black;
                        (item as TextBox).ForeColor = Color.White;
                    }
                }

                txtPromotion.BackColor = Color.Purple;
                radPanel3.BackColor = Color.Purple;

                radLabel14.BackColor = Color.Black;


                panel1.BackColor = Color.Black;
                chkIsCompanyRates.ForeColor = Color.White;
                pnlMain.BackColor = Color.Black;

                chkQuotation.BackColor = Color.Black;
                chkQuotation.ForeColor = Color.White;
                chkReverse.BackColor = Color.Black;
                chkReverse.ForeColor = Color.White;


                ddlPickupPlot.BackColor = Color.Black;
                ddlPickupPlot.ForeColor = Color.White;

                ddlDropOffPlot.BackColor = Color.Black;
                ddlDropOffPlot.ForeColor = Color.White;

                btnDespatchView.BackColor = Color.Black;
                btnDespatchView.ForeColor = Color.White;

                btnNearestDrv.BackColor = Color.Black;
                btnNearestDrv.ForeColor = Color.White;
                ddlSubCompany.BackColor = Color.Black;
                ddlSubCompany.ForeColor = Color.White;

                opt_one.ForeColor = Color.White;
                opt_return.ForeColor = Color.White;
                opt_waitreturn.ForeColor = Color.White;

                lblVehicleType.ForeColor = Color.White;
                lblVehicleType.BackColor = Color.Black;

                ddlSubCompany.BackColor = Color.Black;
                ddlSubCompany.ForeColor = Color.White;

                // lblJourneyType.BackColor = Color.Black;
                // lblJourneyType.ForeColor = Color.White;


                lblFromLoc.BackColor = Color.Black;
                lblFromLoc.ForeColor = Color.White;

                lblToLoc.BackColor = Color.Black;
                lblToLoc.ForeColor = Color.White;


                lblPassengers.BackColor = Color.Black;
                lblPassengers.ForeColor = Color.White;

                lblLuggages.BackColor = Color.Black;
                lblLuggages.ForeColor = Color.White;


                //  lblPickupDate.BackColor = Color.Black;
                // lblPickupDate.ForeColor = Color.White;



                lblPickupTime.BackColor = Color.Black;
                lblPickupTime.ForeColor = Color.White;


                // lblDriver.BackColor = Color.Black;
                //lblDriver.ForeColor = Color.White;


                lblPickupPlot.BackColor = Color.Black;
                lblPickupPlot.ForeColor = Color.White;


                lblDropOffPlot.BackColor = Color.Black;
                lblDropOffPlot.ForeColor = Color.White;




                lblFromDoorFlightNo.BackColor = Color.Black;
                lblFromDoorFlightNo.ForeColor = Color.White;



                lblToDoorFlightNo.BackColor = Color.Black;
                lblToDoorFlightNo.ForeColor = Color.White;



                lblFromStreetComing.BackColor = Color.Black;
                lblFromStreetComing.ForeColor = Color.White;

                lblToStreetComing.BackColor = Color.Black;
                lblToStreetComing.ForeColor = Color.White;


                radLabel7.BackColor = Color.Black;

                pnlCustomer.BackColor = Color.Black;
                pnlAutoDespatch.BackColor = Color.Black;
                chkAutoDespatch.ForeColor = Color.White;
                chkBidding.ForeColor = Color.White;




                //lblPassengerName.ForeColor = Color.White;
                //lblMobNo.ForeColor = Color.White;
                //lblTelNo.ForeColor = Color.White;
                //lblEmail.ForeColor = Color.White;
                //   chkDisableDriverSMS.ForeColor = Color.White;
                //      chkDisablePassengerSMS.ForeColor = Color.White;


                dtpPickupDate.BackColor = Color.Black;
                dtpPickupDate.ForeColor = Color.White;



                dtpPickupTime.BackColor = Color.Black;
                dtpPickupTime.ForeColor = Color.White;
                //                   AppVars.LoginObj.t

                btn_notes.ForeColor = Color.Black;


                //  lblSpecialReq.ForeColor = Color.White;
                ddlPaymentType.ForeColor = Color.White;


                ddlDriver.ForeColor = Color.White;
                label1.BackColor = Color.Purple;
                panel4.BackColor = Color.Black;


                radLabel7.ForeColor = Color.White;
                btnPayment.BackColor = Color.Black;
                btnPayment.ForeColor = Color.White;
                btnExtrAcHARGES.BackColor = Color.Black;
                btnExtrAcHARGES.ForeColor = Color.White;

                btnMultiBooking.BackColor = Color.Black;
                btnMultiBooking.ForeColor = Color.White;

                ddlVehicleType.BackColor = Color.Black;
                ddlVehicleType.ForeColor = Color.White;
            }

        }




        void opt_one_TabIndexChanged(object sender, EventArgs e)
        {
            numFareRate.Focus();
        }

        void btn_notes_Leave(object sender, EventArgs e)
        {
            txtCustomerMobileNo.Focus();
        }






        private void FormatViaGrid()
        {


            grdVia.RowsChanged += new GridViewCollectionChangedEventHandler(grdVia_RowsChanged);
            grdVia.AutoSizeRows = true;
            grdVia.TableElement.TableHeaderHeight = 0;
            grdVia.ShowGroupPanel = false;
            grdVia.AllowAddNewRow = false;
            grdVia.AllowEditRow = false;
            grdVia.ShowRowHeaderColumn = false;

            grdVia.TableElement.BorderWidth = 0;
            grdVia.TableElement.BorderColor = Color.Transparent;

            grdVia.EnableHotTracking = false;
            grdVia.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
            grdVia.EnableAlternatingRowColor = true;

            if (AppVars.AppTheme != "HighContrastBlack")
            {
                grdVia.TableElement.AlternatingRowColor = Color.AliceBlue;
            }
            GridViewTextBoxColumn col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "ID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "IsUpdated";
            grdVia.Columns.Add(col);



            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "MASTERID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "FROMVIALOCTYPEID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.IsVisible = false;
            col.Name = "VIALOCATIONID";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "FROMTYPELABEL";
            col.HeaderText = "";
            col.Width = 100;
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "FROMTYPEVALUE";
            col.Width = 150;
            col.HeaderText = "";
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "EMPTY";
            col.IsVisible = false;
            col.Width = 100;
            grdVia.Columns.Add(col);


            AddReverceFromColumn(grdVia);
            AddReverceDestinationColumn(grdVia);


            col = new GridViewTextBoxColumn();
            col.Name = "VIALOCATIONLABEL";
            col.HeaderText = "";
            col.Width = 120;
            grdVia.Columns.Add(col);


            col = new GridViewTextBoxColumn();
            col.Name = "VIALOCATIONVALUE";
            col.Width = 280;
            col.HeaderText = "";
            grdVia.Columns.Add(col);

            AddColumn(grdVia, "ColMoveUp", "Delete", Resources.Resource1.lc_moveup);
            AddColumn(grdVia, "ColMoveDown", "Delete", Resources.Resource1.lc_movedown);

            AddColumn(grdVia, "ColDelete", "Delete", null);

            grdVia.CommandCellClick += new CommandCellClickEventHandler(grid_CommandCellClick);
            grdVia.CellFormatting += new CellFormattingEventHandler(grdVia_CellFormatting);
        }

        void grdVia_CellFormatting(object sender, CellFormattingEventArgs e)
        {
            try
            {
                if (e.CellElement is GridDataCellElement)
                {
                    if (e.Column is GridViewCommandColumn)
                    {

                        if (e.Column.Name == "ColMoveUp")
                            ((RadButtonElement)e.CellElement.Children[0]).Image = Resources.Resource1.lc_moveup;

                        else if (e.Column.Name == "ColMoveDown")
                            ((RadButtonElement)e.CellElement.Children[0]).Image = Resources.Resource1.lc_movedown;
                    }


                }
            }
            catch
            {


            }
        }



        private void MoveRow(bool moveUp)
        {
            try
            {
                GridViewRowInfo currentRow = this.grdVia.CurrentRow;
                if (currentRow == null)
                {
                    return;
                }

                int index = moveUp ? currentRow.Index - 1 : currentRow.Index + 1;

                if (index < 0 || index >= this.grdVia.RowCount)
                {
                    return;
                }
                this.grdVia.Rows.Move(index, currentRow.Index);
                this.grdVia.CurrentRow = this.grdVia.Rows[index];
                this.grdVia.CurrentRow.Cells["IsUpdated"].Value = "1";
            }
            catch
            {


            }
        }

        public void AddColumn(RadGridView grid, string name, string headerText, Bitmap img)
        {
            try
            {
                GridViewCommandColumn col = new GridViewCommandColumn();
                col.Name = name;

                if (img == null)
                {
                    col.UseDefaultText = true;
                    col.DefaultText = headerText;
                    col.BestFit();
                }
                else
                {
                    col.Width = 30;
                }

                col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
                col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                grid.Columns.Add(col);

                grid.NewRowEnterKeyMode = RadGridViewNewRowEnterKeyMode.EnterMovesToNextRow;
            }
            catch
            {


            }
        }




        void grid_CommandCellClick(object sender, EventArgs e)
        {
            try
            {

                GridCommandCellElement gridCell = (GridCommandCellElement)sender;
                if (gridCell.ColumnInfo.Name == "ColDelete")
                {
                    if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to delete a via Address ? ", "", MessageBoxButtons.YesNo, RadMessageIcon.Question))
                    {
                        RadGridView grid = gridCell.GridControl;
                        grid.CurrentRow.Delete();

                        CalculateAutoFares();
                        LoadNearestMap();
                    }
                }
                else if (gridCell.ColumnInfo.Name == "ColRervP")
                {
                    if (txtFromAddress.Text != "")
                    {
                        ReverceToPickUpPoint();

                        CalculateAutoFares();
                        LoadNearestMap();
                    }

                }
                else if (gridCell.ColumnInfo.Name == "ColRervD")
                {
                    if (txtToAddress.Text != "")
                    {
                        ReverceToDestination();
                        CalculateAutoFares();
                        LoadNearestMap();
                    }
                }
                else if (gridCell.ColumnInfo.Name == "ColMoveUp")
                {
                    MoveRow(true);
                    LoadNearestMap();
                }
                else if (gridCell.ColumnInfo.Name == "ColMoveDown")
                {
                    MoveRow(false);
                    LoadNearestMap();
                }
            }
            catch
            {


            }

        }


        void grdVia_RowsChanged(object sender, GridViewCollectionChangedEventArgs e)
        {
            if (e.Action == Telerik.WinControls.Data.NotifyCollectionChangedAction.Remove)
            {

                grdVia.CurrentRow = null;
            }
        }

        void ddlViaLocation_OnRefreshing(object sender, EventArgs e)
        {
            FillViaLocations();
        }

        private void AddNew()
        {
            OnNew();
        }


        private void OnNew()
        {
            ddlVehicleType.SelectedValue = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();


            SetCashPaymentType();

            chkQuotedPrice.Visible = true;
            chkQuotation.Visible = AppVars.objPolicyConfiguration.EnableQuotation.ToBool();

            SetJourneyWise(ToggleState.On);
            UseCompanyRates(ToggleState.Off);
            txtBookingNo.Text = "Not Allocated";


            FocusOnPickupTime();




            if (AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool())
            {
                IsAutoDespatchEnabled(true);
                IsBiddingEnabled(true);


            }
            else
            {
                chkAutoDespatch.Visible = false;
                chkAutoDespatch.Checked = false;
                //  pnlAutoDespatch.Height = 118;

                chkBidding.Visible = false;
                chkBidding.Checked = false;


            }

            if (AppVars.objPolicyConfiguration.EnableBabySeats.ToBool())
            {
                InitializeBabySeats();

                if (ddlBabyseat1 != null)
                {

                    ddlBabyseat1.SelectedIndex = 0;
                    ddlbabyseat2.SelectedIndex = 0;
                }
            }



            if (AppVars.objPolicyConfiguration.ShowBlankPickupDateAsDefault.ToBool() == false)
            {

                dtpPickupDate.Value = DateTime.Now.ToDate();

                dtpPickupTime.Value = DateTime.Now;
                dtpPickupDate.Leave += new EventHandler(dtpPickupDate_Leave);


                dtpPickupTime_txt.TextChanged += dtpPickupTime_txt_TextChanged;
                dtpPickupTime_txt.KeyDown += dtpPickupTime_txt_KeyDown;
                dtpPickupTime_txt.Leave += dtpPickupTime_txt_Leave;

                dtpPickupTime_txt.GotFocus += dtpPickupTime_txt_GotFocus;
                dtpPickupTime_txt.MouseUp += dtpPickupTime_txt_MouseUp;

            }


            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {

                dtpPickupDate.Enter += new EventHandler(dtpPickupDate_Enter);
            }



            if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 1)
            {
                lblPaymentRef.Visible = true;
                txtPaymentReference.Visible = true;

                txtPaymentReference.KeyDown += TxtPaymentReference_KeyDown;


            }

            else if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 2)
            {
                lblPaymentRef.Visible = false;
                txtPaymentReference.Visible = false;


            }
            else if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 3)
            {


                lblPaymentRef.Visible = false;
                txtPaymentReference.Visible = false;
                InitializeAgentPanel();

                //    ddlAgentCommissionType.SelectedIndex = 1;
            }



            if (AppVars.objPolicyConfiguration.ClientType.ToStr() == "chauffers")
            {
                AsDirected();

            }


        }




        void dtpPickupDate_Enter(object sender, EventArgs e)
        {
            lastPickupDate = dtpPickupDate.Value.ToDateorNull();
            //RemoveDateTimePickerTag();

            dtpPickupDate.DateTimePickerElement.Tag = 0;
        }



        private void InitializeBabySeats()
        {
            this.ddlBabyseat1 = new System.Windows.Forms.ComboBox();
            this.label8 = new System.Windows.Forms.Label();
            this.ddlbabyseat2 = new System.Windows.Forms.ComboBox();
            this.label9 = new System.Windows.Forms.Label();


            this.pnlMain.Controls.Add(this.ddlbabyseat2);
            this.pnlMain.Controls.Add(this.label9);
            this.pnlMain.Controls.Add(this.ddlBabyseat1);
            this.pnlMain.Controls.Add(this.label8);


            // 
            // ddlBabyseat1
            // 
            this.ddlBabyseat1.BackColor = System.Drawing.Color.White;
            this.ddlBabyseat1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlBabyseat1.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlBabyseat1.FormattingEnabled = true;


            object[] arr = General.GetQueryable<Gen_BabySeat>(null).OrderBy(c => c.Id).Select(a => a.BabySeatName).ToArray<string>();


            this.ddlBabyseat1.Items.AddRange(arr);

            //this.ddlBabyseat1.Items.AddRange(new object[] {
            //"No child seat required",
            //"Rear-facing infant seat (suitable for babies)",
            //"Forward-facing upring child seat (for toddlers and smaller children)",
            //"Child booster seat"});
            this.ddlBabyseat1.Location = new System.Drawing.Point(132, 436);
            this.ddlBabyseat1.Name = "ddlBabyseat1";
            this.ddlBabyseat1.Size = new System.Drawing.Size(219, 24);
            this.ddlBabyseat1.TabIndex = 271;
            // 
            // label8
            // 
            this.label8.AutoSize = true;
            this.label8.BackColor = System.Drawing.Color.Transparent;
            this.label8.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label8.Location = new System.Drawing.Point(6, 437);
            this.label8.Name = "label8";
            this.label8.Size = new System.Drawing.Size(103, 18);
            this.label8.TabIndex = 270;
            this.label8.Text = "First Child Seat";
            // 
            // ddlbabyseat2
            // 
            this.ddlbabyseat2.BackColor = System.Drawing.Color.White;
            this.ddlbabyseat2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
            this.ddlbabyseat2.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlbabyseat2.FormattingEnabled = true;
            //this.ddlbabyseat2.Items.AddRange(new object[] {
            //"No child seat required",
            //"Rear-facing infant seat (suitable for babies)",
            //"Forward-facing upring child seat (for toddlers and smaller children)",
            //"Child booster seat"});
            this.ddlbabyseat2.Items.AddRange(arr);


            this.ddlbabyseat2.Location = new System.Drawing.Point(132, 467);
            this.ddlbabyseat2.Name = "ddlbabyseat2";
            this.ddlbabyseat2.Size = new System.Drawing.Size(219, 24);
            this.ddlbabyseat2.TabIndex = 273;
            // 
            // label9
            // 
            this.label9.AutoSize = true;
            this.label9.BackColor = System.Drawing.Color.Transparent;
            this.label9.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label9.Location = new System.Drawing.Point(6, 468);
            this.label9.Name = "label9";
            this.label9.Size = new System.Drawing.Size(123, 18);
            this.label9.TabIndex = 272;
            this.label9.Text = "Second Child Seat";


        }

        private void IsBiddingEnabled(bool enabled)
        {

            if (enabled)
            {
                chkBidding.Visible = true;
                chkBidding.Checked = true;
            }
            else
            {
                // chkBidding.Visible = false;
                chkBidding.Checked = false;

            }
        }

        private void IsAutoDespatchEnabled(bool enabled)
        {
            if (enabled)
            {
                chkAutoDespatch.Visible = true;
                chkAutoDespatch.Checked = true;
                // pnlAutoDespatch.Height = 148;


            }
            else
            {
                // chkAutoDespatch.Visible = false;
                chkAutoDespatch.Checked = false;

                // pnlAutoDespatch.Height = 118;

                // pnlAutoDespatch.Height = 148;



            }

            ShowAutoDespatchLabels(enabled);

        }

        private void ShowAutoDespatchLabels(bool show)
        {

            //  numBeforeMinutes.Visible = show;


            numBeforeMinutes.Value = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt()
                                    + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();


        }



        private void ShowAddresses()
        {
            int sno = 1;

            var finalList = (from a in AppVars.zonesList
                             from b in res
                             where b.Contains(a) && (b.Substring(b.IndexOf(a), a.Length) == a && (b.IndexOf(a) - 1) >= 0 && b[b.IndexOf(a) - 1] == ' ' && GeneralBLL.GetHalfPostCodeMatch(b) == a)

                             select b).ToArray<string>();


            if (finalList.Count() > 0)
            {
                finalList = finalList.Union(res).ToArray<string>();

            }
            else
                finalList = res;



            if (finalList.Count() > 1 && AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
            {

                var list = General.GetQueryable<Gen_RecentAddress>(null).OrderByDescending(c => c.SearchedOn).Take(50)
                    .Where(c => c.AddressLine1.Contains(searchTxt) && (ddlCompany.SelectedValue == null || c.CompanyId == ddlCompany.SelectedValue.ToIntorNull()))
                    .Distinct().Select(c => c.AddressLine1).ToArray<string>();

                if (list.Count() > 0)
                {


                    try
                    {

                        list = (from a in XDocument.Parse("<?xml version=\"1.0\" encoding=\"utf-8\"?><adds>" + String.Join(" ", list) + "</adds>").Element("adds").Nodes()
                                where (a as XElement).Value.Contains(searchTxt)
                                select (a as XElement).Value).Distinct().ToArray<string>();


                        finalList = list.Union(finalList).ToArray<string>();
                    }
                    catch
                    {


                    }
                }
            }


            if (finalList.Count() < 10)
            {
                finalList = finalList.Select(args => (sno++) + ". " + args).ToArray();
            }


            aTxt.ListBoxElement.Items.Clear();
            aTxt.ListBoxElement.Items.AddRange(finalList);


            if (aTxt.ListBoxElement.Items.Count == 0)
                aTxt.ResetListBox();
            else
            {


                aTxt.ShowListBox();


            }

            if (searchTxt != aTxt.FormerValue.ToLower())
            {
                aTxt.FormerValue = aTxt.Text;

            }
        }





        private void FillToLocations()
        {



            int locTypeId = ddlToLocType.SelectedValue.ToInt();
            if (locTypeId == 0)
                return;

            if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {


                SetReturnAirportJob(opt_return.Checked ? ToggleState.On : ToggleState.Off);


                SetReturnFrom(ToggleState.Off);

            }

            else
            {
                //   txtToAddress.Height = 33;// 80;
                lblToLoc.Text = "&Destination";
                txtToAddress.Visible = true;



                txtToPostCode.Text = string.Empty;
                txtToPostCode.Visible = false;


                lblToDoorFlightNo.Text = "Notes";
                lblToDoorFlightNo.Visible = true;

                txtToFlightDoorNo.MaxLength = 100;

                txtToFlightDoorNo.Text = string.Empty;
                txtToFlightDoorNo.Visible = true;



                txtToStreetComing.Text = string.Empty;
                txtToStreetComing.Visible = false;

                lblToStreetComing.Visible = false;


                if (locTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

                    txtToAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
                    txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                    SetDropOffZone(txtToAddress.Text);

                    UpdateAutoCalculateFares();
                }
            }






        }




        private void SetOthersToLocation()
        {
            txtToPostCode.Text = string.Empty;
            txtToPostCode.Visible = false;

            //  txtToFlightDoorNo.Text = string.Empty;
            //  txtToFlightDoorNo.Visible = false;

            txtToStreetComing.Text = string.Empty;
            txtToStreetComing.Visible = false;

            // lblToDoorFlightNo.Visible = false;
            lblToStreetComing.Visible = false;

            // txtToAddress.Text = string.Empty;
            //txtToAddress.Visible = false;


            // ddlToLocation.Visible = true;
            // lblToLoc.Text = "To Location";





            lblToDoorFlightNo.Text = "Notes";
            lblToDoorFlightNo.Visible = true;




            lblToDoorFlightNo.Location = new Point(603, 134);
            txtToFlightDoorNo.Location = new Point(681, 129);

            lblToStreetComing.Location = new Point(602, 158);
            txtToStreetComing.Location = new Point(681, 153);


            lblFromDoorFlightNo.Location = new Point(602, 71);
            txtFromFlightDoorNo.Location = new Point(681, 70);









            // lblToDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, this.NewtoDoorNoLoc.Y + 1);

            txtToFlightDoorNo.MaxLength = 100;
            ////fwdkh1//  txtToFlightDoorNo.Width = 200;

            txtToFlightDoorNo.Text = string.Empty;
            txtToFlightDoorNo.Visible = true;

            //needtouncomment
            //  txtToFlightDoorNo.Location = this.NewtoDoorNoLoc;



            //

            if (ddlReturnFromAirport != null)
            {

                ddlReturnFromAirport.SelectedValue = null;
                ddlReturnFromAirport.Visible = false;
                lblReturnFromAirport.Visible = false;
            }
        }


        private void SetReturnAirportJob(ToggleState toggle)
        {
            if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
            {

                if (toggle == ToggleState.On)
                {



                    txtToFlightDoorNo.MaxLength = 100;
                    ////fwdkh1//  txtToFlightDoorNo.Width = 170;

                    //needtouncomment
                    // lblToDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, this.OldtoDoorNoLoc.Y);
                    //  txtToFlightDoorNo.Location = this.OldtoDoorNoLoc;
                    txtToFlightDoorNo.Visible = true;
                    txtToStreetComing.Visible = true;

                    lblToDoorFlightNo.Visible = true;
                    lblToStreetComing.Visible = true;




                    lblToDoorFlightNo.Text = "Flight No";
                    lblToStreetComing.Text = "Coming From";

                    lblToDoorFlightNo.Location = lblFromDoorFlightNo.Location;
                    txtToFlightDoorNo.Location = txtFromFlightDoorNo.Location;

                    lblToStreetComing.Location = new Point(lblToDoorFlightNo.Location.X, lblToDoorFlightNo.Location.Y + 30);
                    txtToStreetComing.Location = new Point(txtToFlightDoorNo.Location.X, txtToFlightDoorNo.Location.Y + 30);


                    lblFromDoorFlightNo.Location = new Point(lblToDoorFlightNo.Location.X, lblToDoorFlightNo.Location.Y + 60);
                    txtFromFlightDoorNo.Location = new Point(txtToFlightDoorNo.Location.X, txtToFlightDoorNo.Location.Y + 60);



                }
                else
                {


                    SetOthersToLocation();

                }



            }
        }



        private void FillFromLocations()
        {
            int locTypeId = ddlFromLocType.SelectedValue.ToInt();
            if (locTypeId == 0)
                return;

            if (locTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {


                txtFromPostCode.Text = string.Empty;
                txtFromPostCode.Visible = false;

                txtFromFlightDoorNo.MaxLength = 100;
                //     txtFromFlightDoorNo.Width = 170;


                //needtouncomment
                // lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.OldfromDoorNoLoc.Y);
                // txtFromFlightDoorNo.Location = this.OldfromDoorNoLoc;
                txtFromFlightDoorNo.Visible = true;
                txtFromStreetComing.Visible = true;
                lblFromDoorFlightNo.Visible = true;
                lblFromStreetComing.Visible = true;

                // lblFromLoc.Text = "From Location";

                lblFromDoorFlightNo.Text = "Flight No";
                lblFromStreetComing.Text = "Coming From";

            }


            else
            {
                // txtFromAddress.Height = 33;// 80;
                txtFromAddress.Visible = true;



                txtFromPostCode.Text = string.Empty;
                txtFromPostCode.Visible = false;

                lblFromDoorFlightNo.Text = "Notes"; //"Notes";
                lblFromDoorFlightNo.Visible = true;


                //needtouncomment
                //   lblFromDoorFlightNo.Location = new Point(lblFromDoorFlightNo.Location.X, this.NewFromDoorNoLoc.Y + 1);

                txtFromFlightDoorNo.MaxLength = 100;
                //  txtFromFlightDoorNo.Width = 170;

                txtFromFlightDoorNo.Text = string.Empty;
                txtFromFlightDoorNo.Visible = true;


                //needtouncomment
                //   txtFromFlightDoorNo.Location = this.NewFromDoorNoLoc;


                txtFromStreetComing.Text = string.Empty;
                txtFromStreetComing.Visible = false;

                lblFromStreetComing.Visible = false;

                lblFromLoc.Text = "&Pickup Point";

                if (locTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    PickFromBase();

                    SetPickupZone(txtFromAddress.Text);

                    UpdateAutoCalculateFares();
                }
            }

        }

        private void FillSubCompanyCombo(ComboBox cbo)
        {
            cbo.DisplayMember = "CompanyName";
            cbo.ValueMember = "Id";
            cbo.DataSource = General.GetQueryable<Gen_SubCompany>(null).OrderBy(c => c.CompanyName).ToList();

            cbo.DropDownStyle = ComboBoxStyle.DropDownList;
            cbo.SelectedValue = AppVars.objSubCompany.Id;


            if (cbo.Items.Count == 1 || AppVars.DefaultBookingSubCompanyId != 0)
            {
                cbo.Visible = false;

            }
        }
        private void FillPlotCombo(ComboBox cbo, DataTable list)
        {
            cbo.DisplayMember = "ZoneName";
            cbo.ValueMember = "Id";
            //   cbo.DataSource = General.GetQueryable<Gen_Zone>(c => c.MinLatitude != null).OrderBy(c => c.OrderNo).Select(args => new { args.Id, ZoneName = args.OrderNo + ". " + args.ZoneName }).ToList();
            cbo.DataSource = list;



            cbo.DropDownStyle = ComboBoxStyle.DropDown;

            cbo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;

            cbo.AutoCompleteSource = AutoCompleteSource.ListItems;
            cbo.SelectedIndex = -1;
        }

        private void FillPlotCombo(ComboBox cbo, IList list)
        {
            cbo.DisplayMember = "ZoneName";
            cbo.ValueMember = "Id";
            //   cbo.DataSource = General.GetQueryable<Gen_Zone>(c => c.MinLatitude != null).OrderBy(c => c.OrderNo).Select(args => new { args.Id, ZoneName = args.OrderNo + ". " + args.ZoneName }).ToList();
            cbo.DataSource = list;



            cbo.DropDownStyle = ComboBoxStyle.DropDown;

            cbo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;

            cbo.AutoCompleteSource = AutoCompleteSource.ListItems;
            cbo.SelectedIndex = -1;
        }











        private void FillCombos()
        {




            Program.FillCombos();

            ComboFunctions.FillCombo(Program.dtCombos.Tables[0].Copy(), ddlFromLocType, "LocationType", "Id");
            ComboFunctions.FillCombo(Program.dtCombos.Tables[0].Copy(), ddlToLocType, "LocationType", "Id");




            ddlSubCompany.DisplayMember = "CompanyName";
            ddlSubCompany.ValueMember = "Id";
            ddlSubCompany.DataSource = Program.dtCombos.Tables[1].Copy();

            ddlSubCompany.DropDownStyle = ComboBoxStyle.DropDownList;



            if (AppVars.objSubCompany == null)
            {
                AppVars.objSubCompany = new Gen_SubCompany();
                AppVars.objSubCompany.Id = 1;

            }

            ddlSubCompany.SelectedValue = AppVars.objSubCompany.Id;


            if (ddlSubCompany.Items.Count == 1 || AppVars.DefaultBookingSubCompanyId != 0)
                ddlSubCompany.Visible = false;


            if (ddlSubCompany.Items.Count > 1 && AppVars.CanTransferJob)
            {
                ddlSubCompany.Visible = true;

            }


            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

            if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.ADDRESS)
                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;


            //    ddlPickupPlot.InitializeSettings();
            //   ddlDropOffPlot.InitializeSettings();

            FillPlotCombo(ddlPickupPlot, Program.dtCombos.Tables[2].Copy());
            FillPlotCombo(ddlDropOffPlot, Program.dtCombos.Tables[2].Copy());








            ComboFunctions.FillCombo(Program.dtCombos.Tables[3].Copy(), ddlBookingType, "BookingTypeName", "Id");



            if (PickBookingTypeId == null)
                PickBookingTypeId = Enums.BOOKING_TYPES.LOCAL;

            ddlBookingType.SelectedValue = PickBookingTypeId;


            ComboFunctions.FillCombo(Program.dtCombos.Tables[4].Copy(), ddlVehicleType, "VehicleType", "Id", false);



            ComboFunctions.FillCombo(Program.dtCombos.Tables[5].Copy(), ddlPaymentType, "PaymentType", "Id");






        }




        private void FocusOnPickupPlot()
        {
            ddlPickupPlot.Focus();
        }

        private void FocusOnDropOffPlot()
        {
            ddlDropOffPlot.Focus();
        }

        private void FocusOnFromAddress()
        {
            txtFromAddress.Focus();

        }

        private void FocusOnFromPostCode()
        {
            txtFromPostCode.Focus();
        }




        void frmBooking_Shown(object sender, EventArgs e)
        {
            try
            {






                txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                this.opt_one.Validating += Opt_one_Validating;

                if (this.Size.Height == 750)
                    this.Size = new Size(this.Size.Width, 784);





                if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool())
                {
                    //numBookingFee.SpinElement.KeyDown += new KeyEventHandler(numBookingFee_KeyDown);//comment
                    numBookingFee.Validated += new EventHandler(numCustomerFares_Validated);
                    numReturnBookingFee.Validated += new EventHandler(numReturnCustFare_Validated);
                    // numReturnBookingFee.SpinElement.KeyDown += new KeyEventHandler(numReturnBookingFee_KeyDown);//comment
                }






                if (objMaster != null && objMaster.PrimaryKeyValue != null)
                {


                    //this.btnLostProperty = new System.Windows.Forms.Button();
                    //this.btnComplaint = new System.Windows.Forms.Button();


                    this.btnConfirmationSMS = new Button();
                    this.btnSendInvoice = new Button();

                    this.btnPlayRecording = new Button();



                    // 
                    // btnPlayRecording
                    // 
                    this.btnPlayRecording.BackColor = System.Drawing.Color.LightGoldenrodYellow;
                    this.btnPlayRecording.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold);
                    this.btnPlayRecording.ForeColor = System.Drawing.Color.Black;
                    this.btnPlayRecording.Location = new System.Drawing.Point(500, 0);
                    this.btnPlayRecording.Name = "btnPlayRecording";
                    this.btnPlayRecording.Size = new System.Drawing.Size(110, 36);
                    this.btnPlayRecording.TabIndex = 0;
                    this.btnPlayRecording.Text = "Play Recording";
                    this.btnPlayRecording.UseVisualStyleBackColor = false;
                    this.btnPlayRecording.Visible = true;
                    this.btnPlayRecording.BringToFront();

                    //this.Controls.Add(this.btnLostProperty);
                    //this.Controls.Add(this.btnComplaint);
                    this.panel4.Controls.Add(this.btnPlayRecording);



                    this.btnConfirmationSMS.Location = new System.Drawing.Point(810, 4);
                    this.btnConfirmationSMS.Name = "btnConfirmationSMS";
                    this.btnConfirmationSMS.Font = new Font("Segoe UI", 8, FontStyle.Bold);
                    this.btnConfirmationSMS.Size = new System.Drawing.Size(110, 33);
                    this.btnConfirmationSMS.TabIndex = 0;
                    this.btnConfirmationSMS.Text = "Confirmation SMS";
                    this.btnConfirmationSMS.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;

                    this.btnConfirmationSMS.Visible = true;
                    this.btnConfirmationSMS.BackColor = Color.FromArgb(233, 240, 249);
                    this.btnConfirmationSMS.Click += new System.EventHandler(this.btnConfirmationSMS_Click);

                    this.btnSendInvoice.Location = new System.Drawing.Point(695, 3);
                    this.btnSendInvoice.Name = "btnSendInvoice";
                    this.btnSendInvoice.Size = new System.Drawing.Size(93, 33);
                    this.btnSendInvoice.TabIndex = 269;
                    this.btnSendInvoice.Text = "Send Invoice";
                    this.btnSendInvoice.BackColor = Color.FromArgb(233, 240, 249);
                    this.btnSendInvoice.Font = new Font("Segoe UI", 8, FontStyle.Bold);
                    this.btnSendInvoice.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageBeforeText;

                    this.btnSendInvoice.Visible = false;
                    this.btnSendInvoice.Click += new System.EventHandler(this.btnSendInvoice_Click);


                    this.Controls.Add(this.btnSendInvoice);
                    this.Controls.Add(this.btnConfirmationSMS);

                    btnConfirmationSMS.BringToFront();

                    if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                    {

                        if (AppVars.listUserRights.Count(c => c.functionId == "DISABLE SEND INVOICE FROM BOOKING") == 0)
                        {

                            if (objMaster.Current.PaymentTypeId.ToInt() != Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                            {

                                btnSendInvoice.Visible = true;
                                btnSendInvoice.BringToFront();
                            }


                        }

                        if (objMaster.Current.PartyId != null)
                        {
                            try
                            {

                                this.ddlCompletedSubCompany = new System.Windows.Forms.ComboBox();
                                this.lblCompletedSubCompany = new System.Windows.Forms.Label();

                                // 
                                // ddlCompletedSubCompany
                                // 
                                this.ddlCompletedSubCompany.BackColor = System.Drawing.Color.White;
                                this.ddlCompletedSubCompany.FlatStyle = System.Windows.Forms.FlatStyle.Popup;
                                this.ddlCompletedSubCompany.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                                this.ddlCompletedSubCompany.FormattingEnabled = true;
                                this.ddlCompletedSubCompany.Location = new System.Drawing.Point(413, 7);
                                this.ddlCompletedSubCompany.Name = "ddlCompletedSubCompany";
                                this.ddlCompletedSubCompany.Size = new System.Drawing.Size(246, 27);
                                this.ddlCompletedSubCompany.TabIndex = 274;
                                // 
                                // lblCompletedSubCompany
                                // 
                                this.lblCompletedSubCompany.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                                this.lblCompletedSubCompany.ForeColor = System.Drawing.Color.Blue;
                                this.lblCompletedSubCompany.Location = new System.Drawing.Point(284, 10);
                                this.lblCompletedSubCompany.Name = "lblCompletedSubCompany";
                                this.lblCompletedSubCompany.Size = new System.Drawing.Size(123, 21);
                                this.lblCompletedSubCompany.TabIndex = 275;
                                this.lblCompletedSubCompany.Text = "Completed By :";

                                this.Controls.Add(this.lblCompletedSubCompany);
                                this.Controls.Add(this.ddlCompletedSubCompany);

                                if (ddlCompletedSubCompany.DataSource == null)
                                {
                                    ddlCompletedSubCompany.DisplayMember = "CompanyName";
                                    ddlCompletedSubCompany.ValueMember = "Id";
                                    ddlCompletedSubCompany.DataSource = Program.dtCombos.Tables[1].Copy();
                                    ddlCompletedSubCompany.DropDownStyle = ComboBoxStyle.DropDownList;
                                }

                                ddlCompletedSubCompany.SelectedValue = objMaster.Current.PartyId;

                                this.Text = label1.Text + " -" + this.Text;
                                label1.Visible = false;
                                ddlCompletedSubCompany.Enabled = false;
                                ddlCompletedSubCompany.BringToFront();
                                this.lblCompletedSubCompany.BringToFront();
                            }
                            catch
                            {

                            }
                        }

                    }




                    if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0 &&
                 (txtCustomerMobileNo.Text.Length > 8 || txtCustomerPhoneNo.Text.Length > 8)
                 )
                    {
                        if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0 && AppVars.listUserRights.Count(c => c.functionId == "DISABLE RECORDING") == 0)
                        {
                            btnPlayRecording.Visible = true;


                            if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0 && AppVars.listUserRights.Count(c => c.functionId == "FILE BASED RECORDING") > 0)
                            {
                                btnPlayRecording.Visible = true;
                                this.btnPlayRecording.Click += new System.EventHandler(this.btnPlayRecording_Click);
                                this.CallRefNo = objMaster.Current.CallRefNo.ToStr().Trim();
                            }
                            else
                                this.btnPlayRecording.Click += new System.EventHandler(this.btnPlayRecordingAsterisk_Click);
                        }
                    }




                    //

                    CalculateTotalCharges(true);

                }



                //pickupgrid
                if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool() && AppVars.objPolicyConfiguration.EnablePOI.ToBool())
                {
                    if (objMaster.Current == null || (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.DISPATCHED))
                    {

                        //comment
                        dtpPickupDate.ValueChanged += new EventHandler(DateTimePickerElement_ValueChanged);
                        dtpPickupTime.ValueChanged += new EventHandler(DateTimePickerElement_ValueChanged);
                        GetCurrentWaitingBookings(true);
                    }
                }


                pnlMain.Select();


                FocusOnPickupTime();
                //  dtpPickupTime_txt.Focus();
                //  dtpPickupTime.Focus();
                IsFormShown = true;

                BringToFront();


                if (objMaster.Current != null && objMaster.Current.CompanyId != null && numCompanyFares.Visible)
                {
                    if (IsAllowUpdating == true)
                    {

                        if (numFareRate.Enabled && numCompanyFares.Enabled == false && ddlPaymentType.Enabled == false && btnPayment.Visible == false)
                            numCompanyFares.Enabled = false;
                        else
                            numCompanyFares.Enabled = true;

                        if (numReturnCompanyFares != null && numReturnCompanyFares.Visible)
                            numReturnCompanyFares.Enabled = true;

                    }
                    else
                    {
                        if (numParkingChrgs.Enabled)
                        {
                            numCompanyFares.Enabled = true;

                            if (numReturnCompanyFares != null && numReturnCompanyFares.Visible)
                                numReturnCompanyFares.Enabled = true;

                        }

                    }
                    if (ddlDepartment != null && objMaster.Current.DepartmentId != null)
                        ddlDepartment.SelectedValue = objMaster.Current.DepartmentId;



                    if (ddlEscort != null)
                    {

                        try
                        {
                            if (objMaster.Current.EscortId != null)
                                ddlEscort.SelectedValue = objMaster.Current.EscortId;
                            else
                                ddlEscort.SelectedValue = null;
                        }
                        catch
                        {

                        }
                    }

                }


                if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                {
                    btnExcludeDrivers.TextAlign = ContentAlignment.TopCenter;


                }

                if (btnAttributes.Tag.ToStr().Trim().Length > 0)
                {
                    btnAttributes.TextAlign = ContentAlignment.TopCenter;
                }


                ddlCustomerName.CharacterCasing = CharacterCasing.Upper;




                ddlCustomerName.KeyDown += new KeyEventHandler(ddlCustomerName_KeyDown);



                IsShown = true;




                if (AppVars.objPolicyConfiguration.PickVehicleDetailsOnBooking.ToBool() == true)
                {
                    num_TotalPassengers.ValueChanged += Num_TotalPassengers_ValueChanged;

                }



                if (objMaster != null && objMaster.PrimaryKeyValue != null && MakeDirectManualPayment)
                {
                    MakePayment();

                }


                if (this.DirectBookingPopup)
                {
                    FocusOnFromAddress();
                    SetCustomerHistoryAddresses(txtFromAddress);

                }
            }
            catch
            {
                btnPickFares.Enabled = true;
                IsFormShown = true;

            }





        }


        private void btnPlayRecording_Click(object sender, EventArgs e)
        {

            if (objMaster.PrimaryKeyValue != null)
            {
                if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0)
                {

                    try
                    {

                        XmlDocument d = new XmlDocument();
                        d.Load(Application.StartupPath + "\\Configuration.xml");
                        string callRefNo = objMaster.Current.CallRefNo.ToStr().Trim();
                        DateTime? bookingDate = objMaster.Current.BookingDate;

                        string month = bookingDate.Value.Month < 10 ? "0" + bookingDate.Value.Month.ToStr() : bookingDate.Value.Month.ToStr();
                        string day = bookingDate.Value.Day < 10 ? "0" + bookingDate.Value.Day.ToStr() : bookingDate.Value.Day.ToStr();
                        string dir = d.GetElementsByTagName("RECORDINGDRIVE")[0].InnerText + "\\" + bookingDate.Value.Year.ToStr() + "\\" + month + "\\" + day;
                        if (Directory.Exists(dir))
                        {
                            callRefNo += ".wav";
                            string file = Directory.GetFiles(dir).Where(c => c.EndsWith(callRefNo)).FirstOrDefault();

                            if (file.ToStr().Length > 0)
                            {

                                Process.Start(file);
                            }
                            else
                            {
                                ENUtils.ShowMessage("Recording File not Found '" + callRefNo + "' in the specified Directory " + dir);
                            }
                        }
                        else
                        {

                            ENUtils.ShowMessage("Recording File Directory not Found : " + dir);

                        }

                        GC.Collect();
                    }
                    catch (Exception ex)
                    {

                        ENUtils.ShowMessage(ex.Message);

                    }
                }

            }
        }


        private void SetCustomerHistoryAddresses(UIX.AutoCompleteTextBox txt)
        {
            try
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    string custDetails = txtCustomerMobileNo.Text.Trim();

                    if (custDetails.Length == 0)
                        custDetails = txtCustomerPhoneNo.Text.Trim();




                    var list = db.stp_getcustomerhistory(custDetails).ToList();

                    if (list.Count > 0)
                    {

                        aTxt = txt;
                        ShowAddressesPOI((string[])(list.Select(c => c.From).ToList().Union(list.Select(c => c.To).ToList())).ToArray<string>());

                    }

                }
            }
            catch
            { }
        }

        private void Opt_one_Validating(object sender, CancelEventArgs e)
        {

        }

        private void btnPlayRecordingAsterisk_Click(object sender, EventArgs e)
        {

            if (objMaster.PrimaryKeyValue != null)
            {
                //if (objMaster.Current.CallRefNo.ToStr().Trim().Length > 0)
                //{

                try
                {
                    if (Directory.Exists(Application.StartupPath + "\\Recordings") == false)
                    {
                        try
                        {

                            Directory.CreateDirectory(Application.StartupPath + "\\Recordings");
                        }
                        catch
                        {

                        }
                    }



                    if (File.Exists(Application.StartupPath + "\\Recordings\\" + objMaster.Current.CallRefNo.ToStr().Trim()))
                    {

                        Process.Start(Application.StartupPath + "\\Recordings\\" + objMaster.Current.CallRefNo.ToStr().Trim());

                    }
                    else
                    {

                        string phoneNo = objMaster.Current.CustomerMobileNo.ToStr().Trim().Length > 0 ? objMaster.Current.CustomerMobileNo.ToStr().Trim() : objMaster.Current.CustomerPhoneNo.ToStr().Trim();

                        if (phoneNo.StartsWith("44") == false)
                        {

                            phoneNo = phoneNo.Substring(1);
                            phoneNo = phoneNo.Insert(0, "44");
                        }


                        string baseurl = System.Configuration.ConfigurationManager.AppSettings["recordingurl"].ToStr();
                        string username = System.Configuration.ConfigurationManager.AppSettings["recordingusername"].ToStr();

                        if (baseurl.ToStr().Trim().Length == 0)
                        {
                            MessageBox.Show("Recording Url is not defined in Configurations");
                            return;
                        }
                        if (username.ToStr().Trim().Length == 0)
                        {
                            MessageBox.Show("Recording UserName is not defined in Configurations");
                            return;
                        }


                        string recordingPath = General.DownloadRecordingFile(Application.StartupPath + "\\Recordings", baseurl, username, objMaster.Current.CallRefNo.ToStr().Trim(), phoneNo, objMaster.Current.BookingDate.ToDate());


                        if (recordingPath.ToStr().Trim().Length > 0)
                        {

                            Process.Start(recordingPath);

                        }


                    }

                    GC.Collect();
                }
                catch (Exception ex)
                {

                    ENUtils.ShowMessage(ex.Message);

                }
                //  }

                //else if (pathwav.ToStr().Length > 0)
                //{
                //    if (File.Exists(pathwav))
                //    {

                //        System.Diagnostics.Process.Start(pathwav);
                //    }
                //    else
                //    {
                //        MessageBox.Show("Recording File not found : " + pathwav);

                //    }
                //}
            }
        }

        void opt_one_KeyDown(object sender, KeyEventArgs e)
        {
            //if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnSpecialRequirement();

            //}
            if (e.KeyCode == Keys.Enter)
            {

                ////fwdkh   FocusOnCustomer();
                //fwdkh3  FocusOnFare();
                FocusOnDriver();
            }

        }
        void numBookingFee_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {
                if (e.KeyCode == Keys.Enter)
                {
                    if (numReturnBookingFee.Visible)
                    {
                        numReturnBookingFee.Focus();

                    }
                    else
                        FocusOnSpecialRequirement();


                }
            }
            catch
            {

            }
        }

        void numReturnBookingFee_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                FocusOnSpecialRequirement();
            }
        }

        void numReturnCustFare_Validated(object sender, EventArgs e)
        {
            CalculateTotalCharges();
        }

        void numCustomerFares_Validated(object sender, EventArgs e)
        {
            try
            {

                CalculateTotalCharges();

            }
            catch
            {

            }
        }


        private System.Windows.Forms.ErrorProvider errorProvider1;
        private System.Windows.Forms.ErrorProvider errorProvider2;

        private void txtCustomerMobileNo_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtCustomerMobileNo.Text.Trim().Length >= 10)
                {
                    CheckIfCardIsRegisteredKP(txtCustomerMobileNo.Text);
                }
                else
                {
                    lblCardIsRegisteredKP.Visible = false;
                }

                if (txtCustomerMobileNo.Text.Trim().Length == 11)
                {
                    if (IsBookingExistForContact())
                    {
                        txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);


                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            string blackreason = db.Customers.Where(c => c.MobileNo == txtCustomerMobileNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Select(c => c.BlackListResion).FirstOrDefault().ToStr();

                            if (blackreason.Trim().Length > 0)
                            {
                                //if ( General.GetQueryable<Customer>(c => c.MobileNo == txtCustomerMobileNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                                //{

                                //if (General.GetQueryable<Customer>(c => c.MobileNo == txtCustomerMobileNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                                //{
                                pnlCustomer.BackColor = Color.Red;
                                if (DialogResult.No == MessageBox.Show("This is a Black Listed customer" + Environment.NewLine + "(" + blackreason + ")" + Environment.NewLine + Environment.NewLine + "Do you want to see Booking history ? ", "Warning!", MessageBoxButtons.YesNo))
                                {
                                    txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                                    txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                                    return;

                                }

                            }
                            else
                            {
                                if (AppVars.AppTheme != "ControlDefault")
                                {
                                    pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                                }
                                else
                                    pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                            }
                        }


                        SearchBooking();

                        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                    }
                    else
                    {
                        if (AppVars.AppTheme != "ControlDefault")
                        {
                            pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                        }
                        else
                            pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                    }
                }
                else
                {
                    if (AppVars.AppTheme != "ControlDefault")
                    {
                        pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                    }
                    else
                        pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                }



                if (!string.IsNullOrEmpty(txtCustomerMobileNo.Text.Trim()))
                {

                    if (errorProvider1 == null)
                    {
                        this.errorProvider1 = new System.Windows.Forms.ErrorProvider();
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).BeginInit();

                        this.errorProvider1.ContainerControl = this;
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider1)).EndInit();

                    }

                    if (txtCustomerMobileNo.Text.Trim().Length == 11)
                    {

                        errorProvider1.Icon = Resources.Resource1.verified2;
                        errorProvider1.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider1.SetError(txtCustomerMobileNo, "Mobile No is Verified");


                    }
                    else
                    {

                        errorProvider1.Icon = Resources.Resource1.warning;
                        errorProvider1.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider1.SetError(txtCustomerMobileNo, "Invalid " + "Mobile No!" + Environment.NewLine + "Please enter 11 digits number");


                    }
                }


            }
            catch (Exception ex)
            {


            }
        }



        void txtCustomerPhoneNo_TextChanged(object sender, EventArgs e)
        {
            try
            {
                if (txtCustomerPhoneNo.Text.Trim().Length == 11)
                {
                    if (IsBookingExistForContact())
                    {



                        txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);


                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            string blackreason = db.Customers.Where(c => c.TelephoneNo == txtCustomerPhoneNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Select(c => c.BlackListResion).FirstOrDefault().ToStr();

                            if (blackreason.Trim().Length > 0)
                            {
                                //if ( General.GetQueryable<Customer>(c => c.MobileNo == txtCustomerMobileNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                                //{

                                //if (General.GetQueryable<Customer>(c => c.MobileNo == txtCustomerMobileNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                                //{
                                pnlCustomer.BackColor = Color.Red;
                                if (DialogResult.No == MessageBox.Show("This is a Black Listed customer" + Environment.NewLine + "(" + blackreason + ")" + Environment.NewLine + Environment.NewLine + "Do you want to see Booking history ? ", "Warning!", MessageBoxButtons.YesNo))
                                {
                                    txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                                    txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                                    return;

                                }
                            }
                            else
                            {
                                if (AppVars.AppTheme != "ControlDefault")
                                {
                                    pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                                }
                                else
                                    pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                            }
                        }


                        //if (General.GetQueryable<Customer>(c => c.TelephoneNo == txtCustomerPhoneNo.Text.Trim() && (c.BlackList != null && c.BlackList == true)).Count() > 0)
                        //{
                        //    pnlCustomer.BackColor = Color.Red;
                        //    if (DialogResult.No == MessageBox.Show("This is a Black Listed customer" + Environment.NewLine + "Do you want to see Booking history ? ", "Warning!", MessageBoxButtons.YesNo))
                        //    {
                        //        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                        //        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                        //        return;
                        //    }
                        //}
                        //else
                        //{
                        //    if (AppVars.AppTheme != "ControlDefault")
                        //    {
                        //        pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                        //    }
                        //    else
                        //        pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;

                        //}


                        SearchBooking();


                        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);
                        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                    }
                    else
                    {

                        if (AppVars.AppTheme != "ControlDefault")
                        {
                            pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                        }
                        else
                            pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;
                    }




                }
                else
                {

                    if (AppVars.AppTheme != "ControlDefault")
                    {
                        pnlCustomer.BackColor = Color.Black;// Color.GhostWhite;
                    }
                    else
                        pnlCustomer.BackColor = Color.AliceBlue;// Color.GhostWhite;
                }




                if (!string.IsNullOrEmpty(txtCustomerPhoneNo.Text.Trim()))
                {


                    if (errorProvider2 == null)
                    {
                        this.errorProvider2 = new System.Windows.Forms.ErrorProvider();
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider2)).BeginInit();

                        this.errorProvider2.ContainerControl = this;
                        ((System.ComponentModel.ISupportInitialize)(this.errorProvider2)).EndInit();

                    }

                    if (txtCustomerPhoneNo.Text.Trim().Length == 11)
                    {

                        errorProvider2.Icon = Resources.Resource1.verified2;
                        errorProvider2.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider2.SetError(txtCustomerPhoneNo, "Telephone No is Verified");


                    }
                    else
                    {

                        errorProvider2.Icon = Resources.Resource1.warning;
                        errorProvider2.BlinkStyle = ErrorBlinkStyle.NeverBlink;
                        errorProvider2.SetError(txtCustomerPhoneNo, "Invalid " + "Telephone No!" + Environment.NewLine + "Please enter 11 digits number");


                    }
                }


            }
            catch (Exception ex)
            {


            }
        }

        private bool IsBookingExistForContact()
        {
            bool isExist = false;

            try
            {
                string telNo = txtCustomerPhoneNo.Text.Trim().ToLower();
                string mobNo = txtCustomerMobileNo.Text.Trim().ToLower();



                isExist = General.GetQueryable<Booking>(null).Count(c => (c.CustomerMobileNo != null && c.CustomerPhoneNo != null)
                         && (((c.CustomerPhoneNo == telNo || telNo == string.Empty) &&
                             (c.CustomerMobileNo == mobNo || mobNo == string.Empty))
                             ||

                              ((c.CustomerPhoneNo == mobNo || mobNo == string.Empty) &&
                             (c.CustomerMobileNo == telNo || telNo == string.Empty))
                             )
                             ) > 0;




                //= data1.Where(a => (a.CustomerPhoneNo == telNo || telNo == string.Empty) &&
                //            (a.CustomerMobileNo == mobNo || mobNo == string.Empty)).Count() > 0;




            }
            catch (Exception ex)
            {


            }
            return isExist;

        }





        private void MileageError()
        {
            lblMap.Text = "Mileage not found";

        }







        private decimal CalculateTotalDistance(string origin, string[] via, string destination)
        {


            decimal miles = 0.00m;

            string actualOrigin = origin;
            string actualDestination = destination;



            if (AppVars.objPolicyConfiguration.AddFareCalculationType.ToInt() == 1)
            {

                if (via != null)
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        for (int i = 0; i < via.Count(); i++)
                        {



                            if (i == 0)
                            {
                                // destination = General.GetPostCodeMatch(via[i].ToStr());
                                destination = via[i].ToStr();
                            }
                            else
                            {
                                //origin = General.GetPostCodeMatch(via[i - 1].ToStr());
                                //destination = General.GetPostCodeMatch(via[i].ToStr());

                                origin = via[i - 1].ToStr();
                                destination = via[i].ToStr();
                            }


                            stp_getCoordinatesByAddressResult pickupCoord = null;
                            stp_getCoordinatesByAddressResult destCoord = null;



                            pickupCoord = db.stp_getCoordinatesByAddress(origin, General.GetPostCodeMatch(origin)).FirstOrDefault();
                            destCoord = db.stp_getCoordinatesByAddress(destination, General.GetPostCodeMatch(destination)).FirstOrDefault();




                            string originString = string.Empty;
                            string destString = string.Empty;
                            if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                            {
                                origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                            }

                            if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                            {
                                destination = destCoord.Latitude + "," + destCoord.Longtiude;
                            }





                            miles += General.CalculateDistanceVia(origin, destination);

                        }

                    }
                }
            }
            else
            {
                if (via != null)
                {
                    for (int i = 0; i < via.Count(); i++)
                    {
                        if (i == 0)
                        {
                            destination = via[i].ToStr();
                        }
                        else
                        {
                            origin = via[i - 1].ToStr();
                            destination = via[i].ToStr();
                        }

                        miles += General.CalculateDistance(origin, destination);
                    }
                }

            }




            if (via != null && via.Count() > 0)
            {
                origin = destination;
            }
            else
            {
                origin = actualOrigin;
            }

            destination = actualDestination;

            //if (originString.Length > 0)
            //{
            //    origin = originString;                  

            //}

            //if (destString.Length > 0)
            //{
            //    destination = destString;


            //}


            if (via != null && via.Count() > 0)
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    stp_getCoordinatesByAddressResult pickupCoord = db.stp_getCoordinatesByAddress(origin, General.GetPostCodeMatch(origin)).FirstOrDefault();
                    stp_getCoordinatesByAddressResult destCoord = db.stp_getCoordinatesByAddress(destination, General.GetPostCodeMatch(destination)).FirstOrDefault();


                    if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                    {
                        origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                    }

                    if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                    {
                        destination = destCoord.Latitude + "," + destCoord.Longtiude;
                    }

                    miles += General.CalculateDistanceVia(origin, destination);


                }
            }
            else
            {

                miles += General.CalculateDistance(origin, destination);
            }


            return miles;

        }



        private void ddlToLocType_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            FillToLocations();


        }

        private void btnDetailMap_Click(object sender, EventArgs e)
        {


            ShowMap();

        }


        private void ShowMap()
        {
            try
            {
                int? locTypeId = ddlFromLocType.SelectedValue.ToIntorNull();
                int? locId = null;

                bool fromNAT = false, toNAT = false;

                string origin = "";
                string destination = "";

                origin = txtFromAddress.Text.Trim();

                if (locTypeId == Enums.LOCATION_TYPES.TOWN)
                {
                    origin = txtFromAddress.Text.Trim();

                    fromNAT = true;
                }



                if (origin == string.Empty)
                {
                    ENUtils.ShowMessage("Map not found");
                    return;
                }


                locTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                locId = null;



                destination = txtToAddress.Text.Trim();

                if (locTypeId == Enums.LOCATION_TYPES.TOWN)
                {

                    toNAT = true;
                }



                if (destination == string.Empty)
                {
                    destination = origin;

                }




                if (General.GetPostCodeMatch(origin.ToStr().ToUpper()) == string.Empty)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        string postcode = db.Gen_Zones.FirstOrDefault(c => c.ZoneName.ToUpper() == origin.ToUpper()).DefaultIfEmpty().PostCode.ToStr();

                        origin = (origin + " " + postcode).Trim();

                    }

                }


                if (General.GetPostCodeMatch(destination.ToStr().ToUpper()) == string.Empty)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        string postcode = db.Gen_Zones.FirstOrDefault(c => c.ZoneName.ToUpper() == destination.ToUpper()).DefaultIfEmpty().PostCode.ToStr();

                        destination = (destination + " " + postcode).Trim();
                    }
                }





                stp_getCoordinatesByAddressResult pickupCoord = null;
                stp_getCoordinatesByAddressResult destCoord = null;

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    pickupCoord = General.GetCoordinatesByAddress(origin, General.GetPostCodeMatch(origin), db);
                    destCoord = General.GetCoordinatesByAddress(destination, General.GetPostCodeMatch(destination), db);
                }



                string originString = origin;
                string destString = destination;

                if (pickupCoord != null && pickupCoord.Latitude != null && pickupCoord.Latitude != 0)
                {
                    origin = pickupCoord.Latitude + "," + pickupCoord.Longtiude;
                    fromNAT = true;
                    toNAT = true;

                }

                if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                {
                    destination = destCoord.Latitude + "," + destCoord.Longtiude;
                    fromNAT = true;
                    toNAT = true;
                }




                string[] viaLocs = new string[0];

                if (pnlVia != null)
                {
                    viaLocs = grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();
                }



                //  string viaLocations = "";
                if (viaLocs.Count() > 0)
                {


                    if (fromNAT == false && toNAT == false && AppVars.objPolicyConfiguration.AddFareCalculationType.ToInt() == 1)
                    {

                        viaLocs = viaLocs.Select(c => General.GetPostCodeMatch(c)).Where(c => c.Length > 0).ToArray<string>();
                        if (viaLocs.Count() == 0)
                        {
                            ENUtils.ShowMessage("Map not found");
                            return;

                        }
                    }
                    else
                    {

                        List<string> listVia = new List<string>();
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            foreach (var item in viaLocs)
                            {

                                stp_getCoordinatesByAddressResult viaCoord = null;

                                //TEMPORARY REMOVED=> PUT IT BACK ,  JUST COMMENT THESE LINES BECAUSE OF MOUNT CARS
                                //if (AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal() > 0)
                                //{
                                //    viaCoord = General.GetCoordinatesByAddress(item, General.GetPostCodeMatch(item), db);
                                //}

                                if (viaCoord == null)
                                    viaCoord = db.stp_getCoordinatesByAddress(item, General.GetPostCodeMatch(item)).FirstOrDefault();

                                if (viaCoord != null && viaCoord.Latitude != null && viaCoord.Latitude != 0)
                                {


                                    listVia.Add((viaCoord.Latitude + "," + viaCoord.Longtiude).Trim());
                                }
                                else
                                {
                                    string postcode = General.GetPostCodeMatch(item);

                                    if (postcode.ToStr().Length == 0)
                                    {
                                        listVia.Add(item);

                                    }
                                    else
                                    {

                                        listVia.Add(postcode);
                                    }

                                }
                                //string postcode = db.Gen_Zones.FirstOrDefault(c => c.ZoneName.ToUpper() == item.ToUpper()).DefaultIfEmpty().PostCode.ToStr();



                            }

                        }

                        viaLocs = listVia.ToArray<string>();




                    }



                }




                string viaStr = "**";

                if (viaLocs != null && viaLocs.Count() > 0)
                {
                    viaStr = string.Join(">>>", viaLocs);

                    viaStr = viaStr.Replace(" ", "**").Trim();

                }


                string connString = Application.StartupPath + "\\TreasureRouteMap.exe";

                System.Diagnostics.Process proc = System.Diagnostics.Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                if (proc != null)
                {
                    proc.Kill();
                    proc.CloseMainWindow();
                    proc.Close();
                }

                SetRouteType();

                string conn = System.Configuration.ConfigurationManager.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");

                string arg = "frmmap" + " " + conn + " " + origin.Replace(" ", "**") + " " + viaStr.Replace(" ", "**") + " " + destination.Replace(" ", "**") + " " + fromNAT + " " + toNAT + " " + originString.Replace(" ", "**") + " " + destString.Replace(" ", "**") + " " + AppVars.routemode.ToStr();

                System.Diagnostics.Process.Start(connString, arg);





            }
            catch (Exception ex)
            {


            }



        }




        private bool ValidateOptionalMandatoryFields()
        {

            bool rtn = true;

            if (numFareRate.Value == 0)
            {
                if ((ddlCompany.Enabled && numCompanyFares.Value == 0))
                {

                    if (DialogResult.No == MessageBox.Show("Please enter a Fares,Company Price..." + Environment.NewLine + "Do you still want to save a booking ? " + Environment.NewLine, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {
                        radLabel5.ForeColor = Color.Magenta;
                        lblCompanyPrice.ForeColor = Color.Magenta;

                        rtn = false;
                    }
                }
                else
                {

                    if (DialogResult.No == MessageBox.Show("Please enter a Fares..." + Environment.NewLine + "Do you still want to save a booking ? " + Environment.NewLine, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {

                        radLabel5.ForeColor = Color.Magenta;
                        rtn = false;
                    }
                }
            }
            else if ((ddlCompany.Enabled && numCompanyFares.Value == 0))
            {

                if (DialogResult.No == MessageBox.Show("Please enter a Company Price..." + Environment.NewLine + "Do you still want to save a booking ? " + Environment.NewLine, "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                {

                    lblCompanyPrice.ForeColor = Color.Magenta;

                    rtn = false;
                }
            }







            return rtn;

        }

        //fwd00
        void FetchBookingLimits()
        {



        }

        #region Overridden Methods
        decimal OldTotalCharges = 0.00m;

        DateTime? OldPickupDateTime = null;


        private int GetPriority(Booking obj)
        {
            int rtn = 0;
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    DateTime? leadtime = null;

                    if (objMaster.Current == null && obj != null)
                    {
                        leadtime = obj.AutoDespatchTime;


                        if (leadtime == null)
                        {
                            leadtime = new DateTime(1753, 1, 1);
                        }

                        rtn = db.ExecuteQuery<int>("exec stp_GetPriorityValue {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}"
                            , ddlBookingType.SelectedValue.ToInt(), ddlPickupPlot.SelectedValue.ToInt(), ddlDropOffPlot.SelectedValue.ToInt(), ddlVehicleType.SelectedValue.ToInt()
                            , ddlCompany.SelectedValue.ToInt(), 0, txtCustomerMobileNo.Text.Trim(), txtCustomerPhoneNo.Text.Trim(),
                           DateTime.Now, obj.PickupDateTime.ToDateTime(), leadtime).FirstOrDefault().ToInt();

                    }
                    else
                    {
                        leadtime = objMaster.Current.AutoDespatchTime;
                        if (leadtime == null)
                        {
                            leadtime = new DateTime(1753, 1, 1);
                        }
                        rtn = db.ExecuteQuery<int>("exec stp_GetPriorityValue {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}"
                                        , objMaster.Current.BookingTypeId, objMaster.Current.ZoneId.ToInt(), objMaster.Current.DropOffZoneId.ToInt(), objMaster.Current.VehicleTypeId.ToInt()
                                        , objMaster.Current.CompanyId.ToInt(), objMaster.Current.CustomerId.ToInt(), objMaster.Current.CustomerMobileNo.ToStr(), objMaster.Current.CustomerPhoneNo.ToStr(),
                                        objMaster.Current.BookingDate.ToDateTime(), objMaster.Current.PickupDateTime, leadtime).FirstOrDefault().ToInt();
                    }

                }
            }
            catch (Exception ex)
            {

            }
            return rtn;


        }


        private int GetReturnPriority(Booking obj)
        {
            int rtn = 0;
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    DateTime? leadtime = null;
                    int? retVehicleTypeId = ddlVehicleType.SelectedValue.ToInt();


                    if (ddlReturnVehicleType != null && ddlReturnVehicleType.SelectedValue != null)
                    {
                        ddlReturnVehicleType.SelectedValue.ToInt();

                    }

                    if (objMaster.Current == null && obj != null)
                    {
                        leadtime = obj.AutoDespatchTime;


                        if (leadtime == null)
                        {
                            leadtime = new DateTime(1753, 1, 1);
                        }

                        rtn = db.ExecuteQuery<int>("exec stp_GetPriorityValue {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}"
                            , ddlBookingType.SelectedValue.ToInt(), ddlDropOffPlot.SelectedValue.ToInt(), ddlPickupPlot.SelectedValue.ToInt(), retVehicleTypeId
                            , ddlCompany.SelectedValue.ToInt(), 0, txtCustomerMobileNo.Text.Trim(), txtCustomerPhoneNo.Text.Trim(),
                              DateTime.Now, obj.ReturnPickupDateTime.ToDateTime(), leadtime).FirstOrDefault().ToInt();

                    }
                    else
                    {
                        leadtime = objMaster.Current.AutoDespatchTime;
                        if (leadtime == null)
                        {
                            leadtime = new DateTime(1753, 1, 1);
                        }
                        rtn = db.ExecuteQuery<int>("exec stp_GetPriorityValue {0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}"
                                        , objMaster.Current.BookingTypeId, objMaster.Current.DropOffZoneId.ToInt(), objMaster.Current.ZoneId.ToInt(), retVehicleTypeId
                                        , objMaster.Current.CompanyId.ToInt(), objMaster.Current.CustomerId.ToInt(), objMaster.Current.CustomerMobileNo.ToStr(), objMaster.Current.CustomerPhoneNo.ToStr(),
                                          objMaster.Current.BookingDate.ToDateTime(), objMaster.Current.ReturnPickupDateTime, leadtime).FirstOrDefault().ToInt();
                    }

                }
            }
            catch (Exception ex)
            {

            }
            return rtn;


        }

        // DialogResult result;
        private bool Save()
        {


            try
            {

                //   result = DialogResult.None;





                if (AppVars.objPolicyConfiguration.ValidateOptionalFaresOnBooking.ToBool() && ValidateOptionalMandatoryFields() == false)
                    return false;


                bool IsAddMode = false;
                DateTime nowDate = DateTime.Now;







                string accountName = "";
                string paymentType = "";
                string journeyType = "";


                string FromAdd = "";
                string ToAdd = "";
                string Customer = "";
                decimal FareRate = 0;
                string Vehicle = "";
                string From = "";
                string To = "";
                string Phone = "";
                string Mobile = "";
                int pickupZoneId = 0;
                int dropOffZoneId = 0;

                int? oldPaymentTypeId = null;
                string via = "";
                bool IsQuotedPrice = false;

                string special = string.Empty;
                //


                if (objMaster.PrimaryKeyValue == null)
                {


                    objMaster.New();

                    objMaster.Current.BookingDate = nowDate;
                    objMaster.Current.AddOn = nowDate;
                    objMaster.Current.AddBy = AppVars.LoginObj.LuserId.ToIntorNull();
                    objMaster.Current.AddLog = AppVars.LoginObj.UserName.ToStr();
                    objMaster.Current.CallRefNo = this.CallRefNo;
                    IsAddMode = true;
                    OldTotalCharges = -1;

                    if (ddlPaymentType.Tag != null)
                    {

                        Booking_Payment objPayment = (Booking_Payment)ddlPaymentType.Tag;

                        objMaster.Current.CustomerCreditCardDetails = objPayment.OrderDescription.ToStr();

                        objMaster.Current.BookingPayment = new Booking_Payment();

                        objMaster.Current.BookingPayment.NameOnCard = objPayment.NameOnCard.ToStr().Trim();
                        objMaster.Current.BookingPayment.CardNumber = objPayment.CardNumber.ToStr().Trim();
                        objMaster.Current.BookingPayment.CardExpiryDate = objPayment.CardExpiryDate;



                        objMaster.Current.BookingPayment.CardStartDate = objPayment.CardStartDate;


                        objMaster.Current.BookingPayment.CV2 = objPayment.CV2.ToStr().Trim();
                        objMaster.Current.BookingPayment.CreditCardTypeId = objPayment.CreditCardTypeId;

                        //Customer Detail

                        objMaster.Current.BookingPayment.Status = objPayment.Status.ToStr().Trim();
                        // objMaster.Current.BookingPayment.OrderDescription = txtOrderDesc.Text.Trim();
                        objMaster.Current.BookingPayment.Address = objPayment.Address.ToStr().Trim();
                        objMaster.Current.BookingPayment.City = objPayment.City.ToStr().Trim();
                        objMaster.Current.BookingPayment.PostCode = objPayment.PostCode.ToStr().Trim();
                        objMaster.Current.BookingPayment.Email = objPayment.Email.ToStr().Trim();

                        objMaster.Current.BookingPayment.AuthCode = objPayment.AuthCode.ToStr().Trim();


                        try
                        {
                            if (objMaster.Current.BookingPayment.AuthCode.ToStr().Trim().Length == 0 && txtPaymentReference.Text.Length > 0 && txtPaymentReference.Text.ToLower().Contains("authcode:"))
                            {


                                objMaster.Current.BookingPayment.AuthCode = txtPaymentReference.Text.Substring(txtPaymentReference.Text.IndexOf("AuthCode"));

                            }

                            if (objMaster.Current.BookingPayment.AuthCode.ToStr().Trim().Length == 0 && txtPaymentReference.Text.Length > 0 && txtPaymentReference.Text.ToLower().Contains("auth code:"))
                            {


                                objMaster.Current.BookingPayment.AuthCode = txtPaymentReference.Text.Substring(txtPaymentReference.Text.IndexOf("Auth Code:"));

                            }
                        }
                        catch
                        {

                        }

                        objMaster.Current.BookingPayment.PaymentGatewayId = objPayment.PaymentGatewayId;

                        objMaster.Current.BookingPayment.NetFares = objPayment.NetFares.ToDecimal();

                        objMaster.Current.BookingPayment.SurchargePercent = objPayment.SurchargePercent;
                        objMaster.Current.BookingPayment.SurchargeAmount = objPayment.SurchargeAmount;
                        objMaster.Current.BookingPayment.TipAmount = objPayment.TipAmount;
                        objMaster.Current.BookingPayment.TotalAmount = objPayment.TotalAmount;



                        if (txtPaymentReference.Text.ToStr().Length > 0)
                            objMaster.Current.Booking_Logs.Add(new Booking_Log { BookingId = objMaster.Current.Id, User = AppVars.LoginObj.LoginName, AfterUpdate = txtPaymentReference.Text + Environment.NewLine + "(Payment from Dispatch)", UpdateDate = DateTime.Now });
                        // }

                    }
                }
                else
                {





                    pickupZoneId = objMaster.Current.ZoneId.ToInt();
                    dropOffZoneId = objMaster.Current.DropOffZoneId.ToInt();
                    FromAdd = objMaster.Current.FromAddress.ToStr();
                    ToAdd = objMaster.Current.ToAddress.ToStr();


                    if (objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                        FromAdd = objMaster.Current.FromStreet.ToStr() + " " + objMaster.Current.FromAddress.ToStr();

                    if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                        ToAdd = objMaster.Current.ToStreet.ToStr() + " " + objMaster.Current.ToAddress.ToStr();



                    Customer = objMaster.Current.CustomerName.ToUpper().ToStr();
                    FareRate = objMaster.Current.FareRate.ToDecimal();
                    //  FareRate = objMaster.Current.TotalCharges.ToDecimal();


                    //if (AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim() != "")
                    //    FareRate = objMaster.Current.GetType().GetProperty(AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim()).GetValue(objMaster.Current, null).ToDecimal();

                    if (objMaster.Current.VehicleTypeId != null)
                        Vehicle = objMaster.Current.Fleet_VehicleType.VehicleType.ToStr();

                    From = objMaster.Current.FromLocTypeId != null ? objMaster.Current.Gen_LocationType.LocationType.ToStr() : "Address";
                    To = objMaster.Current.ToLocTypeId != null ? objMaster.Current.Gen_LocationType1.LocationType.ToStr() : "Address";
                    Phone = objMaster.Current.CustomerPhoneNo.ToStr();
                    Mobile = objMaster.Current.CustomerMobileNo.ToStr();
                    OldPickupDateTime = objMaster.Current.PickupDateTime;
                    special = objMaster.Current.SpecialRequirements.ToStr().Trim();


                    accountName = objMaster.Current.Gen_Company.DefaultIfEmpty().CompanyName.ToStr();
                    journeyType = "O/W";

                    if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                        journeyType = "Return";
                    else if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.WAITANDRETURN)
                        journeyType = "W/R";


                    oldPaymentTypeId = objMaster.Current.PaymentTypeId;
                    paymentType = objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr();
                    //paymentType = objMaster.Current.Gen_PaymentType.PaymentCategoryId == null ? objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr()
                    //            : objMaster.Current.Gen_PaymentType.Gen_PaymentCategory.CategoryName.ToStr();

                    if (objMaster.Current.Booking_ViaLocations.Count > 0)
                    {
                        int i = 1;
                        via = string.Join(" * ", objMaster.Current.Booking_ViaLocations.Select(c => "(" + i++.ToStr() + ")" + c.ViaLocValue.ToStr()).ToArray<string>());
                    }


                    if (chkQuotedPrice != null)
                        IsQuotedPrice = objMaster.Current.IsQuotedPrice.ToBool();

                    objMaster.Edit();

                    objMaster.Current.EditOn = nowDate;
                    objMaster.Current.EditBy = AppVars.LoginObj.LuserId.ToIntorNull();
                    objMaster.Current.EditLog = AppVars.LoginObj.UserName.ToStr();

                }

                objMaster.PermanentNotes = objMaster.Current.SpecialRequirements.ToStr().Trim();

                objMaster.ExcludedDriverIds = btnExcludeDrivers.Tag.ToStr().Trim();





                if (ddlBabyseat1 != null && ddlbabyseat2 != null)
                {

                    string babyseats = string.Empty;



                    if (ddlBabyseat1.SelectedIndex > 0)
                        babyseats = ddlBabyseat1.SelectedItem.ToStr();


                    if (ddlbabyseat2.SelectedIndex > 0)
                        babyseats += "<<<" + ddlbabyseat2.SelectedItem.ToStr();

                    else
                    {
                        if (ddlBabyseat1.SelectedIndex > 0)
                            babyseats += "<<<";
                    }


                    objMaster.Current.BabySeats = babyseats;

                }


                objMaster.Current.BookingTypeId = ddlBookingType.SelectedValue.ToIntorNull();


                int? driverId = ddlDriver.SelectedValue.ToIntorNull();


                if (objMaster.Current.Id > 0
                    && (objMaster.Current.DriverId != null)
                    && (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.FOJ
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START))
                {

                    if (driverId != null && objMaster.Current.DriverId != driverId)
                    {

                    }
                    else
                    {

                        driverId = objMaster.Current.DriverId;
                        objMaster.Current.DriverId = driverId;
                    }

                }
                else
                {
                    objMaster.Current.DriverId = driverId;
                    objMaster.Current.IsConfirmedDriver = chkAllocateDriver.Checked;
                }


                objMaster.Current.VehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
                objMaster.Current.PaymentTypeId = ddlPaymentType.SelectedValue.ToIntorNull();
                objMaster.Current.CompanyId = ddlCompany.SelectedValue.ToIntorNull();

                //    objMaster.Current.CustomerCreditCardDetails = txtCustomerCreditCardNo.Text.Trim();
                //    objMaster.Current.CompanyCreditCardDetails = txtCompanyCreditCardNo.Text.Trim();






                if (ddlDepartment != null)
                    objMaster.Current.DepartmentId = ddlDepartment.SelectedValue.ToLongorNull();



                if (ddlEscort != null)
                {
                    objMaster.Current.EscortId = ddlEscort.SelectedValue.ToLongorNull();

                    objMaster.Current.EscortPrice = numEscortPrice.Value.ToDecimal();

                }

                objMaster.Current.IsCompanyWise = chkIsCompanyRates.Checked;

                int journeyTypeId = Enums.JOURNEY_TYPES.ONEWAY;

                if (opt_return.Checked)
                {
                    journeyTypeId = Enums.JOURNEY_TYPES.RETURN;

                }
                else if (opt_waitreturn.Checked)
                {

                    journeyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;
                }


                objMaster.Current.JourneyTypeId = journeyTypeId;


                objMaster.Current.IsQuotation = chkQuotation.Checked;


                if (pnlOrderNo != null)
                {

                    objMaster.Current.OrderNo = txtOrderNo.Text.ToStr().Trim();
                    objMaster.Current.PupilNo = txtPupilNo.Text.ToStr().Trim();
                }


                if (dtpPickupDate.Enabled)
                {

                    objMaster.Current.PickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();

                }


                if (chkLead.Checked)
                {
                    objMaster.Current.AutoDespatchTime = objMaster.Current.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt()).ToDateTime();
                    objMaster.Current.DeadMileage = numLead.Value;
                }
                else
                {
                    objMaster.Current.AutoDespatchTime = null;
                    objMaster.Current.DeadMileage = 0;

                }



                if (dtpReturnPickupDate != null)
                {
                    if (dtpReturnPickupDate.Value != null && dtpReturnPickupTime.Value != null)
                    {
                        objMaster.Current.ReturnPickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpReturnPickupDate.Value.ToDateorNull() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
                    }
                    else
                        objMaster.Current.ReturnPickupDateTime = null;

                    // objMaster.Current.ReturnDriverId = ddlReturnDriver.SelectedValue.ToIntorNull();


                    objMaster.AddedBy = AppVars.LoginObj.UserName.ToStr();



                    if (txtReturnSpecialReq != null)
                    {

                        objMaster.ReturnSpecialRequirement = txtReturnSpecialReq.Text.Trim();
                    }


                    if (ddlReturnVehicleType != null)
                    {
                        objMaster.ReturnVehicleTypeId = ddlReturnVehicleType.SelectedValue.ToIntorNull();
                    }



                    if (chkHasPriority.Visible)
                        objMaster.returnPriority = GetReturnPriority(null);


                    //need to uncomment
                    // if (ddlReturnPaymentType != null)
                    //     objMaster.ReturnPaymentTypeId = ddlReturnPaymentType.SelectedValue.ToIntorNull();

                }

                if (objMaster.Current.MasterJobId != null && objMaster.Current.Booking1 != null)
                {
                    objMaster.Current.Booking1.ReturnPickupDateTime = objMaster.Current.PickupDateTime;

                }

                objMaster.Current.SubcompanyId = ddlSubCompany.SelectedValue.ToIntorNull();

                objMaster.Current.NoofPassengers = num_TotalPassengers.Value.ToInt();
                objMaster.Current.NoofLuggages = numTotalLuggages.Value.ToInt();
                objMaster.Current.NoofHandLuggages = numHandLugg.Value.ToInt();

                objMaster.Current.SMSType = Enums.SMSACCOUNT_TYPE.MODEMSMS;

                objMaster.Current.EnableFareMeter = chkSurge.Checked;
                objMaster.Current.NotesString = chkSurge.Checked ? chkSurge.Tag.ToStr() : "";

                objMaster.Current.FareRate = numFareRate.Value.ToDecimal();

                if (numReturnFare != null)
                    objMaster.Current.ReturnFareRate = numReturnFare.Value.ToDecimal();


                objMaster.Current.CompanyPrice = numCompanyFares != null ? numCompanyFares.Value.ToDecimal() : 0;
                objMaster.Current.CustomerPrice = objMaster.Current.FareRate;
                objMaster.Current.ServiceCharges = numBookingFee.Visible ? numBookingFee.Value : 0.00m;
                if (opt_return.Checked)
                {
                    if (numReturnCompanyFares != null)
                        objMaster.Current.WaitingMins = numReturnCompanyFares.Value;

                    if (numReturnFare != null)
                        objMaster.ReturnCustomerPrice = numReturnBookingFee.Value;
                }

                objMaster.Current.ParkingCharges = numParkingChrgs.Value.ToDecimal();
                objMaster.Current.WaitingCharges = numWaitingChrgs.Value.ToDecimal();
                objMaster.Current.ExtraDropCharges = numExtraChrgs.Value.ToDecimal();
                objMaster.Current.MeetAndGreetCharges = numMeetCharges.Value.ToDecimal();
                objMaster.Current.CongtionCharges = numCongChrgs.Value.ToDecimal();

                objMaster.ReturnParking = numCongChrgs.Tag.ToDecimal();

                // Add Drv Waiting Mins (Request of Double o cars)
                objMaster.Current.DriverWaitingMins = numDrvWaitingMins.Value.ToInt();


                objMaster.OldCustomerName = objMaster.Current.CustomerName.ToStr().Trim();


                if (IsExistingCustomer)
                {
                    objMaster.OldCustomerName = CallerCustomerName.ToStr();

                    objMaster.IsExistingCustomer = true;

                }

                //   if(objMaster.Current.CustomerId==null)
                //     objMaster.Current.CustomerId = ddlCustomerName.Tag.ToIntorNull();
                objMaster.Current.CustomerName = ddlCustomerName.Text.ToStr().Trim();


                objMaster.OldPhoneNo = objMaster.Current.CustomerPhoneNo.ToStr().Trim();
                objMaster.OldMobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();

                objMaster.Current.CustomerPhoneNo = txtCustomerPhoneNo.Text.Trim();
                objMaster.Current.CustomerMobileNo = txtCustomerMobileNo.Text.Trim();





                objMaster.OldEmail = objMaster.Current.CustomerEmail.ToStr().Trim();
                objMaster.Current.CustomerEmail = txtEmail.Text.Trim();

                objMaster.Current.SpecialRequirements = txtSpecialRequirements.Text.Trim();


                int FromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int ToLocTypeId = ddlToLocType.SelectedValue.ToInt();

                if (FromLocTypeId == 0)
                    FromLocTypeId = Enums.LOCATION_TYPES.ADDRESS;

                if (ToLocTypeId == 0)
                    ToLocTypeId = Enums.LOCATION_TYPES.ADDRESS;

                objMaster.Current.FromLocTypeId = FromLocTypeId;
                objMaster.Current.ToLocTypeId = ToLocTypeId;
                //    objMaster.Current.FromLocId = ddlFromLocation.SelectedValue.ToIntorNull();
                //    objMaster.Current.ToLocId = ddlToLocation.SelectedValue.ToIntorNull();


                objMaster.Current.PaymentComments = txtPaymentReference.Text.Trim();

                if (ddlReturnFromAirport != null)
                    objMaster.Current.ReturnFromLocId = ddlReturnFromAirport.SelectedValue.ToIntorNull();


                //if (FromLocTypeId == Enums.LOCATION_TYPES.ADDRESS || FromLocTypeId == Enums.LOCATION_TYPES.BASE)
                objMaster.Current.FromAddress = txtFromAddress.Text.Trim();

                //else if (FromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    objMaster.Current.FromAddress = txtFromPostCode.Text.Trim();
                //else
                //{
                //    objMaster.Current.FromAddress = ddlFromLocation.ComboBoxElement.TextBoxElement.TextBoxItem.Text.Trim();
                //}



                objMaster.Current.FromDoorNo = txtFromFlightDoorNo.Text.Trim();
                objMaster.Current.FromStreet = txtFromStreetComing.Text.Trim();
                objMaster.Current.FromPostCode = txtFromPostCode.Text.Trim();



                //   if (ToLocTypeId == Enums.LOCATION_TYPES.ADDRESS || ToLocTypeId == Enums.LOCATION_TYPES.BASE)
                objMaster.Current.ToAddress = txtToAddress.Text.StripNewLine().Trim();

                //else if (ToLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    objMaster.Current.ToAddress = txtToPostCode.Text.Trim();
                //else
                //{
                //    objMaster.Current.ToAddress = ddlToLocation.ComboBoxElement.TextBoxElement.TextBoxItem.Text.Trim();
                //}

                objMaster.Current.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();
                objMaster.Current.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();


                //if (AppVars.objPolicyConfiguration.ShowAreaWithPlots.ToBool())
                //{

                //    if (ddlPickupPlot.SelectedValue == null)
                //        objMaster.Current.ZoneId = GetZoneId(objMaster.Current.FromAddress.ToStr());
                //    else
                //        objMaster.Current.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();

                //    if (ddlDropOffPlot.SelectedValue == null)
                //        objMaster.Current.DropOffZoneId = GetZoneId(objMaster.Current.ToAddress.ToStr());
                //    else
                //        objMaster.Current.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();
                //}


                objMaster.Current.ToDoorNo = txtToFlightDoorNo.Text.Trim();
                objMaster.Current.ToStreet = txtToStreetComing.Text.Trim();
                objMaster.Current.ToPostCode = txtToPostCode.Text.Trim();


                objMaster.Current.AutoDespatch = chkAutoDespatch.Checked;
                objMaster.Current.IsBidding = chkBidding.Checked;

                //     objMaster.Current.DisableDriverSMS = chkDisableDriverSMS.Checked;
                //     objMaster.Current.DisablePassengerSMS = chkDisablePassengerSMS.Checked;



                objMaster.Current.DistanceString = lblMap.Text.ToStr();

                if (chkTakenByAgent != null)
                {

                    objMaster.Current.JobTakenByCompany = chkTakenByAgent.Checked;
                    //  objMaster.Current.AgentCommissionPercent = numAgentCommissionPercent.Value.ToInt();
                    objMaster.Current.AgentCommission = numAgentCommission.Value.ToDecimal();
                    objMaster.Current.CashRate = numAgentCharge.Value.ToDecimal();
                    //  objMaster.Current.FromFlightNo = ddlAgentCommissionType.Text.Trim();
                }


                if (numJourneyTime != null)
                {
                    objMaster.Current.JourneyTimeInMins = numJourneyTime.Value.ToDecimal();

                }



                objMaster.Current.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";




                if (AccCompanyCode.ToStr().Trim().Length > 0 || AccBookerEmail.ToStr().Trim().Length > 0)
                {
                    if (objMaster.Current.Booking_MemberDetails == null)
                        objMaster.Current.Booking_MemberDetails = new Booking_MemberDetail();


                    objMaster.Current.Booking_MemberDetails.BookerEmail = AccBookerEmail.ToStr().Trim();
                    objMaster.Current.Booking_MemberDetails.CompanyCode = AccCompanyCode.ToStr().Trim();
                    objMaster.Current.Booking_MemberDetails.EmployeeType = AccPassengerType.ToStr().Trim();
                    objMaster.Current.Booking_MemberDetails.BookingId = objMaster.Current.Id;
                    objMaster.Current.Booking_MemberDetails.CompanyId = objMaster.Current.CompanyId;

                }


                if (ddlRoute != null)
                    objMaster.Current.BoundType = ddlRoute.Text.ToStr().Trim();






                if (grdVia != null)
                {

                    if (grdVia.Rows.Count(c => c.Cells["IsUpdated"].Value.ToInt() == 1) > 0)
                    {
                        objMaster.Current.Booking_ViaLocations.Clear();

                        grdVia.Rows.ToList().ForEach(c => c.Cells["ID"].Value = 0);

                    }
                    string[] skipProperties = { "Gen_Location", "Booking", "Gen_LocationType" };
                    IList<Booking_ViaLocation> savedList = objMaster.Current.Booking_ViaLocations;
                    List<Booking_ViaLocation> listofDetail = (from r in grdVia.Rows
                                                              select new Booking_ViaLocation
                                                              {
                                                                  Id = r.Cells["ID"].Value.ToLong(),
                                                                  BookingId = r.Cells["MASTERID"].Value.ToLong(),
                                                                  ViaLocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToIntorNull(),
                                                                  ViaLocTypeLabel = r.Cells["FROMTYPELABEL"].Value.ToStr(),
                                                                  ViaLocTypeValue = r.Cells["FROMTYPEVALUE"].Value.ToStr(),

                                                                  ViaLocId = r.Cells["VIALOCATIONID"].Value.ToIntorNull(),
                                                                  ViaLocLabel = r.Cells["VIALOCATIONLABEL"].Value.ToStr(),
                                                                  ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()

                                                              }).ToList();


                    Utils.General.SyncChildCollection(ref savedList, ref listofDetail, "Id", skipProperties);
                }





                // AUDIT SECTION
                if (objMaster.PrimaryKeyValue != null)
                {
                    try
                    {
                        OldTotalCharges = objMaster.Current.TotalCharges.ToDecimal();

                        string A_FromAdd = objMaster.Current.FromAddress.ToStr();
                        string A_ToAdd = objMaster.Current.ToAddress.ToStr();


                        if (objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            A_FromAdd = objMaster.Current.FromStreet.ToStr() + " " + objMaster.Current.FromAddress.ToStr();

                        if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                            A_ToAdd = objMaster.Current.ToStreet.ToStr() + " " + objMaster.Current.ToAddress.ToStr();


                        string A_Customer = objMaster.Current.CustomerName.ToStr();
                        decimal A_FareRate = objMaster.Current.FareRate.ToDecimal();

                        //if (AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim().Length > 0)
                        //{
                        //    A_FareRate = objMaster.Current.GetType().GetProperty(AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim()).GetValue(objMaster.Current, null).ToDecimal();
                        //}                 

                        string A_Vehicle = objMaster.Current.Fleet_VehicleType.VehicleType.ToStr();
                        string A_From = objMaster.Current.Gen_LocationType.LocationType.ToStr();
                        string A_To = objMaster.Current.Gen_LocationType1.LocationType.ToStr();
                        string A_Phone = objMaster.Current.CustomerPhoneNo.ToStr();
                        string A_Mobile = objMaster.Current.CustomerMobileNo.ToStr();


                        string A_journeyType = "O/W";

                        if (opt_return.Checked)
                            A_journeyType = "Return";
                        else if (opt_waitreturn.Checked)
                            A_journeyType = "W/R";



                        string Get = "";
                        string old = "";


                        if (chkQuotedPrice != null && IsQuotedPrice != chkQuotedPrice.Checked)
                        {
                            Get += " Quoted Price " + (chkQuotedPrice.Checked ? "checked" : "un-checked") + Environment.NewLine;
                            old += " Quoted Price : " + (IsQuotedPrice ? "checked" : "un-checked") + Environment.NewLine;

                        }

                        if (FromAdd != A_FromAdd)
                        {
                            Get += " Pickup Point: " + A_FromAdd + Environment.NewLine;
                            old += " Pickup Point: " + FromAdd + Environment.NewLine;
                        }
                        if (ToAdd != A_ToAdd)
                        {
                            Get += " Destination: " + A_ToAdd + Environment.NewLine;
                            old += " Destination: " + ToAdd + Environment.NewLine;

                        }
                        if (Customer != A_Customer)
                        {
                            Get += " Customer Name: " + objMaster.Current.CustomerName.ToStr() + Environment.NewLine;
                            old += " Customer Name: " + Customer + Environment.NewLine;
                        }
                        if (FareRate != A_FareRate)
                        {
                            Get += " Fares: " + objMaster.Current.FareRate.ToDecimal() + Environment.NewLine;
                            old += " Fares: " + FareRate + Environment.NewLine;
                        }
                        if (Vehicle != A_Vehicle)
                        {
                            Get += " Vehicle: " + objMaster.Current.Fleet_VehicleType.VehicleType.ToStr() + Environment.NewLine;
                            old += " Vehicle: " + Vehicle + Environment.NewLine;
                        }
                        if (From != A_From)
                        {
                            Get += " From: " + objMaster.Current.Gen_LocationType.LocationType.ToStr() + Environment.NewLine;
                            old += " From: " + From + Environment.NewLine;
                        }
                        if (To != A_To)
                        {
                            Get += " To: " + objMaster.Current.Gen_LocationType1.LocationType.ToStr() + Environment.NewLine;
                            old += " To: " + To + Environment.NewLine;


                        }

                        if (Phone != A_Phone)
                        {
                            Get += " Phone No: " + objMaster.Current.CustomerPhoneNo.ToStr() + Environment.NewLine;
                            old += " Phone No: " + Phone + Environment.NewLine;
                        }

                        if (Mobile != A_Mobile)
                        {
                            Get += " Mobile No: " + objMaster.Current.CustomerMobileNo.ToStr() + Environment.NewLine;
                            old += " Mobile No: " + Mobile + Environment.NewLine;
                        }

                        if (dtpPickupDate.Value != null && OldPickupDateTime.Value != null &&
                            (OldPickupDateTime.Value.Date != dtpPickupDate.Value.ToDate())
                            || (dtpPickupTime.Value != null && OldPickupDateTime.Value.TimeOfDay != dtpPickupTime.Value.ToDateTime().TimeOfDay))
                        {
                            Get += " PickupDate/Time: " + string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay) + "| ";
                            old += " PickupDate/Time: " + string.Format("{0:dd/MM/yyyy HH:mm}", OldPickupDateTime.Value) + Environment.NewLine;
                        }




                        if (ddlPickupPlot.SelectedValue != null && ddlPickupPlot.SelectedValue.ToInt() != pickupZoneId)
                        {
                            Get += " PickupPlot: " + ddlPickupPlot.Text.ToStr().ToUpper() + Environment.NewLine;
                            old += " PickupPlot: " + objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr() + Environment.NewLine;

                            UpdateJourney = 2;
                        }


                        if (ddlDropOffPlot.SelectedValue != null && ddlDropOffPlot.SelectedValue.ToInt() != dropOffZoneId)
                        {
                            Get += " DropOffPlot: " + ddlDropOffPlot.Text.ToStr().ToUpper() + Environment.NewLine;
                            old += " DropOffPlot: " + objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr() + Environment.NewLine;




                            UpdateJourney = 3;
                        }


                        if (accountName != ddlCompany.Text.Trim())
                        {
                            Get += " Account: " + ddlCompany.Text.Trim() + Environment.NewLine;
                            old += " Account: " + accountName + Environment.NewLine;

                        }


                        if (paymentType != ddlPaymentType.Text.Trim())
                        {
                            Get += " Payment Type: " + ddlPaymentType.Text.Trim() + Environment.NewLine;
                            old += " Payment Type: " + paymentType + Environment.NewLine;



                            //if (objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentCategoryId != null)
                            //{
                            //    paymentType = General.GetObject<Gen_PaymentType>(c => c.PaymentType == ddlPaymentType.Text.Trim()).DefaultIfEmpty().Gen_PaymentCategory.DefaultIfEmpty().CategoryName.ToStr().Trim();

                            //    if (string.IsNullOrEmpty(paymentType.ToStr().Trim()))
                            //        paymentType = ddlPaymentType.Text.Trim();

                            //}
                            //else
                            //{

                            paymentType = ddlPaymentType.Text.Trim();
                            //   }

                        }
                        //else
                        //{
                        //    if (objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentCategoryId != null)
                        //    {

                        //        paymentType = objMaster.Current.Gen_PaymentType.Gen_PaymentCategory.CategoryName.ToStr();
                        //    }


                        //}



                        if (journeyType != A_journeyType)
                        {
                            Get += " Journey Type: " + A_journeyType + Environment.NewLine;
                            old += " Journey Type: " + journeyType + Environment.NewLine;

                            if (A_journeyType.ToStr().ToLower() == "w/r")
                                UpdateJourney = 1;
                        }


                        if (special != txtSpecialRequirements.Text.Trim())
                        {
                            Get += " Special Instruction: " + txtSpecialRequirements.Text.Trim() + Environment.NewLine;
                            old += " Special Instruction: " + special + Environment.NewLine;
                        }


                        string A_Via = " ";

                        if (grdVia != null && grdVia.Rows.Count > 0)
                        {
                            int i = 1;
                            A_Via = string.Join(" * ", grdVia.Rows.Select(c => "(" + i++.ToStr() + ")" + c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>());
                        }



                        if (via != A_Via.ToStr().Trim())
                        {
                            Get += " Via: " + A_Via + Environment.NewLine;
                            old += " Via: " + via + Environment.NewLine;
                        }

                        var NewRec = Get.TrimEnd('\r', '\n', ' ');
                        var oldRec = old.TrimEnd('\r', '\n', ' ');

                        if (NewRec != "" && old != "" && btnPayment.Tag == null && SaveFromPayment == false)
                        {
                            if (DialogResult.No == MessageBox.Show("Do you want to save these changes ?", "Edit Changes Confirmation", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                            {
                                return false;

                            }



                            //  int? LoginID = AppVars.LoginObj.LgroupId.ToInt();
                            long BokingID = objMaster.PrimaryKeyValue.ToLong();
                            DateTime now = DateTime.Now.ToDateTime();

                            objMaster.Current.Booking_Logs.Add(new Booking_Log { BookingId = BokingID, User = AppVars.LoginObj.LoginName, BeforeUpdate = oldRec, AfterUpdate = NewRec, UpdateDate = now });

                            string msg = string.Empty;
                            string pickUpPlot = string.Empty;
                            string dropOffPlot = string.Empty;


                            string mobNo = objMaster.Current.CustomerMobileNo;
                            if (string.IsNullOrEmpty(mobNo))
                                mobNo = " ";


                            else if (!string.IsNullOrEmpty(A_Phone))
                            {
                                mobNo = mobNo + "/" + A_Phone;
                            }


                            string A_Special = txtSpecialRequirements.Text.Trim();

                            if (string.IsNullOrEmpty(A_Special))
                            {
                                A_Special = " ";

                            }


                            //if (objMaster.Current.SecondaryPaymentTypeId != null && objMaster.Current.CashFares.ToDecimal() > 0)
                            //{
                            //    A_Special += " , Additional Cash Payment : " + objMaster.Current.CashFares.ToDecimal();
                            //}


                            string A_Account = ddlCompany.Text.Trim();

                            if (string.IsNullOrEmpty(A_Account))
                            {
                                A_Account = " ";
                            }





                        }
                        else
                        {
                            if (opt_return.Checked)
                            {
                                objMaster.PartialUpdateReturnJob = true;

                            }
                        }
                    }
                    catch
                    {


                    }
                }


                // END AUDIT SECTION









                objMaster.AutoDespatchBeforeMins = numBeforeMinutes.Value.ToInt();



                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                {
                    if (!string.IsNullOrEmpty(txtReturnFrom.Text.Trim()))
                    {
                        objMaster.ReturnFromAddress = txtReturnFrom.Text.Trim();
                        objMaster.ReturnZoneId = GetZoneIdOnly(objMaster.ReturnFromAddress);


                    }
                    else if (ddlReturnFromAirport != null && ddlReturnFromAirport.SelectedValue != null)
                    {
                        objMaster.Current.ReturnFromLocId = ddlReturnFromAirport.SelectedValue.ToIntorNull();

                    }


                    if (!string.IsNullOrEmpty(txtReturnTo.Text.Trim()))
                    {
                        objMaster.ReturnToAddress = txtReturnTo.Text.Trim();

                        objMaster.ReturnDropOffZoneId = GetZoneIdOnly(objMaster.ReturnToAddress);
                    }
                    //else if (ddlReturnTo.SelectedValue != null)
                    //{
                    //    objMaster.ReturnToLocIdv = ddlReturnTo.SelectedValue.ToIntorNull();

                    //}
                }

                objMaster.Current.IsReverse = chkReverse.Checked;


                //if (chkGenerateToken.Checked && txtTokenNo.Text.Length > 0)
                //    objMaster.Current.JobCode = txtTokenNo.Text.Trim();

                objMaster.Current.TipAmount = numTipAmount.Value.ToDecimal();

                objMaster.CheckServiceCharges = AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool();


                objMaster.Current.IsQuotedPrice = chkQuotedPrice.Checked;
                objMaster.Current.NoOfChilds = chkPermanentCustNotes.Checked ? 1 : 0;



                objMaster.Current.AttributeValues = btnAttributes.Tag.ToStr().Trim();
                objMaster.Current.ExcludedDriverIds = btnExcludeDrivers.Tag.ToStr().Trim();


                if (ReturnBookingPaymentTypeId == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID && ddlPaymentType.SelectedValue.ToInt() != Enums.PAYMENT_TYPES.CREDIT_CARD_PAID)
                {
                    ReturnBookingPaymentTypeId = objMaster.Current.PaymentTypeId;
                }

                objMaster.ReturnPaymentTypeId = ReturnBookingPaymentTypeId;
                objMaster.AllowUpdateTransaction = IsAllowUpdating;


                if (listofNotesCopied != null && listofNotesCopied.Count > 0)
                {
                    try
                    {
                        foreach (var item in listofNotesCopied)
                        {
                            objMaster.Current.Booking_Notes.Add(new Booking_Note { AddBy = item.AddBy, AddOn = item.AddOn, notes = item.notes });

                        }


                        listofNotesCopied = null;
                    }
                    catch
                    {

                    }

                }


                if (extraChargesOneWaySavedList != null)
                {


                    string[] skipProperties = { "Gen_Attribute", "Booking", "Gen_AttributesCategory" };

                    IList<Booking_Attribute> savedList3 = objMaster.Current.Booking_Attributes;
                    List<Booking_Attribute> listofDetail3 = extraChargesOneWaySavedList;
                    Utils.General.SyncChildCollection(ref savedList3, ref listofDetail3, "Id", skipProperties);

                }

                if (extraChargesReturnSavedList != null)
                    objMaster.listofReturnExtraChargesAttributes = extraChargesReturnSavedList;



                if (chkHasPriority.Visible)
                {
                    if (chkHasPriority.Checked)
                    {
                        objMaster.Current.JourneyTimeInMins = chkHasPriority.Checked ? 1 : 0;
                        objMaster.Current.ExtraMile = numPriority.Value;
                    }
                    else
                    {


                        objMaster.Current.ExtraMile = GetPriority(null);



                        // objMaster.Current.ExtraMile = numPriority.Value;
                    }

                }


                if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() && objMaster.Current.CompanyId != null)
                    objMaster.DisableUpdateCustomerProfile = true;



                objMaster.Current.ApplyServiceCharges = chkMiles.Checked;

                if (chkMiles.Checked)
                    objMaster.Current.TotalTravelledMiles = numMiles.Value;

                objMaster.Save();






                saved = true;
                string mobileNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();


                UpdateSetFareLog(setFareLogMsg.ToStr().Trim());

                if (driverId != null && chkAllocateDriver.Checked == false
                   && (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING || objMaster.Current.BookingStatusId == null))
                {
                    //    if (driverId != null
                    //    && (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.WAITING || objMaster.Current.BookingStatusId == null))
                    //{

                    frm = new frmDespatchJob(objMaster.Current);
                    frm.ShowAllLoggedInDrivers = AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") > 0;
                    frm.ShowDialog();
                    this.IsDespatched = frm.SuccessDespatched;
                }





                // Advance Booking Confirmation Text


                DateTime? pickupdateTime = objMaster.Current.PickupDateTime;
                if (AppVars.objPolicyConfiguration.EnableAdvanceBookingSMSConfirmation.ToBool() && AppVars.listofSMSTags != null
                    && IsAddMode && pickupdateTime != null && objMaster.Current.IsQuotation.ToBool() == false
                    && (objMaster.Current.CompanyId == null || objMaster.Current.Gen_Company.DefaultIfEmpty().DisableAdvanceText.ToBool() == false))
                {

                    // string msg=string.Empty;
                    string msg = AppVars.objPolicyConfiguration.AdvanceBookingSMSText.ToStr().Trim();

                    string advancemsg = msg;



                    //using (TaxiDataContext db = new TaxiDataContext())
                    //{
                    //    msg = db.Gen_SysPolicy_Configurations.FirstOrDefault().AdvanceBookingSMSText.ToStr();
                    //    AppVars.listofSMSTags = db.SMSTags.ToList();
                    //      advancemsg=msg;
                    //}





                    string pickupSpan = string.Format("{0:HH:mm}", pickupdateTime);

                    TimeSpan picktime = TimeSpan.Parse(pickupSpan);

                    string nowP = string.Format("{0:HH:mm}", nowDate);
                    TimeSpan nowSpantime = TimeSpan.Parse(nowP);

                    int afterMins = AppVars.objPolicyConfiguration.AdvanceBookingSMSConfirmationMins.ToInt();
                    double minDifference = pickupdateTime.Value.Subtract(nowDate).TotalMinutes;
                    //  int dayDiff = pickupdateTime.Value.Date.Subtract(DateTime.Now.Date).Days;
                    if (afterMins == 0 || minDifference >= afterMins)
                    {
                        object propertyValue = string.Empty;

                        foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                        {
                            switch (tag.TagObjectName)
                            {
                                case "booking":

                                    if (tag.TagPropertyValue.Contains('.'))
                                    {

                                        string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                        object parentObj = objMaster.Current.GetType().GetProperty(val[0]).GetValue(objMaster.Current, null);

                                        if (parentObj != null)
                                        {
                                            propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                        }
                                        else
                                            propertyValue = string.Empty;


                                        break;
                                    }
                                    else
                                    {
                                        propertyValue = objMaster.Current.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current, null);
                                    }


                                    if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                                    {
                                        propertyValue = objMaster.Current.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objMaster.Current, null);
                                    }
                                    break;


                                case "Booking_ViaLocations":
                                    if (tag.TagPropertyValue == "ViaLocValue")
                                    {


                                        string[] VilLocs = null;
                                        int cnt = 1;
                                        VilLocs = objMaster.Current.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                        if (VilLocs.Count() > 0)
                                        {

                                            string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                            propertyValue = Locations;
                                        }
                                        else
                                            propertyValue = string.Empty;

                                    }
                                    break;




                                default:
                                    if (objMaster.Current.SubcompanyId != null)
                                    {

                                        if (tag.TagMemberValue.ToStr().Trim() == "<CompanyName>")
                                        {
                                            string companyName = ddlSubCompany.Text.Trim();

                                            if (CompanyName.ToStr().Trim().Length > 0)
                                            {
                                                propertyValue = companyName;

                                            }
                                            else
                                            {
                                                if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                                {

                                                    propertyValue = AppVars.objSubCompany.CompanyName.ToStr().Trim();
                                                }
                                                else
                                                {
                                                    propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                                }
                                            }

                                        }


                                        if (tag.TagMemberValue.ToStr().Trim() == "<CompanyTelNo>")
                                        {


                                            if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                            {

                                                propertyValue = AppVars.objSubCompany.TelephoneNo.ToStr().Trim();
                                            }
                                            else
                                            {
                                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                            }


                                        }

                                        if (tag.TagMemberValue.ToStr().Trim() == "<CompanyEmail>")
                                        {


                                            if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                            {

                                                propertyValue = AppVars.objSubCompany.EmailAddress.ToStr().Trim();
                                            }
                                            else
                                            {
                                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                            }


                                        }



                                    }
                                    else
                                        propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);


                                    break;



                            }


                            msg = msg.Replace(tag.TagMemberValue,
                                tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                        }


                        msg.Replace("\n\n", "\n");

                        string refMsg = "";
                        if (General.SendAdvanceBookingSMS(mobileNo, ref refMsg, msg, objMaster.Current.SMSType.ToInt()))
                        {
                            try
                            {

                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && objMaster.Current.BookingReturns.Count > 0)
                                {
                                    msg = advancemsg;

                                    Booking objReturn = objMaster.Current.BookingReturns[0];

                                    foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                                    {
                                        switch (tag.TagObjectName)
                                        {
                                            case "booking":

                                                if (tag.TagPropertyValue.Contains('.'))
                                                {

                                                    string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                                    object parentObj = objReturn.GetType().GetProperty(val[0]).GetValue(objReturn, null);

                                                    if (parentObj != null)
                                                    {
                                                        propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                                    }
                                                    else
                                                        propertyValue = string.Empty;


                                                    break;
                                                }
                                                else
                                                {
                                                    propertyValue = objReturn.GetType().GetProperty(tag.TagPropertyValue).GetValue(objReturn, null);
                                                }


                                                if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                                                {
                                                    propertyValue = objReturn.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objReturn, null);
                                                }
                                                break;


                                            case "Booking_ViaLocations":
                                                if (tag.TagPropertyValue == "ViaLocValue")
                                                {


                                                    string[] VilLocs = null;
                                                    int cnt = 1;
                                                    VilLocs = objReturn.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                                    if (VilLocs.Count() > 0)
                                                    {

                                                        string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                                        propertyValue = Locations;
                                                    }
                                                    else
                                                        propertyValue = string.Empty;

                                                }
                                                break;


                                            default:
                                                if (objMaster.Current.SubcompanyId != null)
                                                {

                                                    if (tag.TagMemberValue.ToStr().Trim() == "<CompanyName>")
                                                    {
                                                        string companyName = ddlSubCompany.Text.Trim();

                                                        if (CompanyName.ToStr().Trim().Length > 0)
                                                        {
                                                            propertyValue = companyName;

                                                        }
                                                        else
                                                        {
                                                            if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                                            {

                                                                propertyValue = AppVars.objSubCompany.CompanyName.ToStr().Trim();
                                                            }
                                                            else
                                                            {
                                                                propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                                            }
                                                        }

                                                    }


                                                    if (tag.TagMemberValue.ToStr().Trim() == "<CompanyTelNo>")
                                                    {


                                                        if (objMaster.Current.SubcompanyId.ToInt() == AppVars.objSubCompany.Id)
                                                        {

                                                            propertyValue = AppVars.objSubCompany.TelephoneNo.ToStr().Trim();
                                                        }
                                                        else
                                                        {
                                                            propertyValue = objMaster.Current.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objMaster.Current.Gen_SubCompany, null);

                                                        }


                                                    }



                                                }

                                                else
                                                    propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);


                                                break;



                                        }


                                        msg = msg.Replace(tag.TagMemberValue,
                                            tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                                    }

                                    msg.Replace("\n\n", "\n");

                                    Thread.Sleep(1000);
                                    General.SendAdvanceBookingSMS(mobileNo, ref refMsg, msg, objMaster.Current.SMSType.ToInt());
                                    Thread.Sleep(1000);

                                }
                            }
                            catch
                            {


                            }


                            if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                            {

                                RadDesktopAlert alert = new RadDesktopAlert();
                                alert.CaptionText = "Booking saved and Confirmation Text Sent successfully!";


                                string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                     "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                    + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                                alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                                alert.ContentImage = Resources.Resource1.email;
                                alert.Show();
                            }

                        }
                        else
                        {

                            if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                            {

                                RadDesktopAlert alert = new RadDesktopAlert();
                                alert.CaptionText = "Booking saved successfully!";


                                string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                     "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                    + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                                alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                                //    alert.ContentImage = Resources.Resource1save_Tick; // comment
                                alert.Show();
                            }

                        }

                    }
                    else
                    {
                        if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                        {

                            RadDesktopAlert alert = new RadDesktopAlert();
                            alert.CaptionText = "Booking saved successfully!";


                            string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                 "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                            alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                            alert.ContentImage = Resources.Resource1.save_Tick;
                            alert.Show();
                        }


                    }
                }
                else
                {
                    if (IsAddMode)
                    {
                        if (AppVars.objPolicyConfiguration.DisablePopupNotifications.ToBool() == false)
                        {
                            RadDesktopAlert alert = new RadDesktopAlert();
                            alert.CaptionText = "Booking saved successfully!";




                            string txt = objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN ?
                                 "1st Ref # : " + objMaster.Current.BookingNo.ToStr()
                                + Environment.NewLine + "2nd Ref # : " + objMaster.Current.BookingReturns[0].BookingNo.ToStr() : "Ref # " + objMaster.Current.BookingNo.ToStr();


                            alert.ContentText = "<html> <b><span style=font-size:medium><color=Blue>" + txt + "</span></b></html>";
                            alert.ContentImage = Resources.Resource1.save_Tick;
                            alert.Show();
                        }





                    }

                }





                if (IsAddMode)
                {

                    if (AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail.ToBool())
                    {
                        if (AppVars.listUserRights.Count(c => c.functionId == "AUTO SEND CONFIRMATION EMAIL") > 0)
                        {
                            SendAutoEmail(0);
                        }
                        else
                            SendEmail(false);
                    }
                    else
                    {
                        if (txtEmail.Text.Trim().Length > 0 || objMaster.Current.CompanyId != null)
                        {
                            if (AppVars.listUserRights.Count(c => c.functionId == "AUTO SEND CONFIRMATION EMAIL") > 0)
                            {
                                AutoSendConfirmationEmail("");
                            }
                        }
                    }



                }
                else
                {

                    if (AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail.ToBool()
                        && AppVars.listUserRights.Count(c => c.functionId == "AUTO SEND CONFIRMATION EMAIL") > 0)
                    {
                        SendAutoEmail(objMaster.Current.Id);
                    }


                }




                if (objMaster.Current.BookingStatusId == 21 || objMaster.Current.BookingStatusId == 25 || objMaster.Current.BookingStatusId == 27)
                {



                    new Thread(delegate ()
                    {

                        try
                        {


                            JobPool.UpdateJob(AppVars.objPolicyConfiguration.DefaultClientId, objMaster.Current.Id, AppVars.LoginObj.UserName.ToStr());





                        }
                        catch
                        {



                        }
                    }).Start();





                }
                else
                {
                    UpdateRecentAddresses();

                    UpdateCustomAddresses();


                    if (IsAddMode == false)
                    {
                        UpdateJobToDriverPDA();


                    }

                    if (flightInfo != null)
                    {
                        General.UpdateFlightAlert(flightInfo.FlightNo, flightInfo.DateTime, flightInfo.FlightInformation.ToStr(), flightInfo.DelayedDateTime);
                    }
                }




                IsSave = true;
                return IsSave;
            }
            catch (Exception ex)
            {
                IsSave = false;
                if (objMaster.Errors.Count > 0)
                    MessageBox.Show(objMaster.ShowErrors());
                else
                {
                    MessageBox.Show(ex.Message);
                }
                return IsSave;
            }
        }


        private void SendAutoEmail(long Id)
        {

            string email = objMaster.Current.CustomerEmail.ToStr().Trim();

            if (email.Length > 0)
            //&&  (result ==  DialogResult.None  || result== DialogResult.Yes))
            {
                if (AppVars.listUserRights.Count(c => c.functionId == "AUTO SEND CONFIRMATION EMAIL") > 0)
                {

                    if (objMaster.Current.IsQuotation.ToBool()
                        && (DialogResult.Yes == MessageBox.Show("Do you want to send quotation email ?", "Quotation Email", MessageBoxButtons.YesNo)))
                    {

                        if (Id == 0)
                        {



                            AutoSendConfirmationEmail("Confirmation");

                        }
                        else
                        {

                            AutoSendConfirmationEmail("Amendment");
                        }


                    }
                    else
                    {



                        if (Id == 0)
                        {



                            AutoSendConfirmationEmail("Confirmation");

                        }
                        else
                        {
                            if (DialogResult.Yes == MessageBox.Show("Do you want to send confirmation email ?", "Confirmation Email", MessageBoxButtons.YesNo))
                            {
                                AutoSendConfirmationEmail("Amendment");
                            }
                        }
                    }
                }
            }

        }


        private int UpdateJourney = 0;

        private void UpdateCustomAddresses()
        {
            try
            {
                string pickup = txtFromAddress.Text.Trim();
                int fromZoneId = ddlPickupPlot.SelectedValue.ToInt();

                string destination = txtToAddress.Text.Trim();
                int toZoneId = ddlDropOffPlot.SelectedValue.ToInt();


                using (TaxiDataContext db = new TaxiDataContext())
                {
                    if (General.GetPostCodeMatch(pickup).Length == 0 && fromZoneId != 0)
                    {
                        if (db.Gen_Locations.Count(c => c.LocationName == pickup) == 0)
                        {
                            Gen_Location loc = new Gen_Location();
                            loc.LocationTypeId = Enums.LOCATION_TYPES.ADDRESS;
                            loc.LocationName = pickup;
                            loc.Address = pickup;
                            loc.PostCode = "";
                            loc.ZoneId = fromZoneId;
                            loc.CustomShortKey = true;
                            loc.ShortCutKey = pickup.Length >= 4 ? pickup.Substring(0, 3) : pickup;
                            db.Gen_Locations.InsertOnSubmit(loc);
                            db.SubmitChanges();
                        }
                        else
                        {


                        }
                    }


                    if (General.GetPostCodeMatch(destination).Length == 0 && toZoneId != 0)
                    {
                        if (db.Gen_Locations.Count(c => c.LocationName == destination) == 0)
                        {
                            Gen_Location loc = new Gen_Location();
                            loc.LocationTypeId = Enums.LOCATION_TYPES.ADDRESS;
                            loc.LocationName = destination;
                            loc.Address = destination;
                            loc.PostCode = "";
                            loc.ZoneId = toZoneId;
                            loc.CustomShortKey = true;
                            loc.ShortCutKey = destination.Length >= 4 ? destination.Substring(0, 3) : destination;
                            db.Gen_Locations.InsertOnSubmit(loc);
                            db.SubmitChanges();
                        }
                        else
                        {


                        }
                    }
                }
            }
            catch
            {


            }




        }


        private void UpdateJobToDriverPDA()
        {
            try
            {



                if (objMaster.Current.DriverId != null &&
                   (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START
                   || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                   || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC
                   || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.FOJ
                   )
                      && (objMaster.Current.Fleet_Driver.Fleet_Driver_PDASettings.Count > 0 && objMaster.Current.Fleet_Driver.Fleet_Driver_PDASettings[0].CurrentPdaVersion > 15.40m)
                      && AppVars.objPolicyConfiguration.IsListenAll.ToBool() && !string.IsNullOrEmpty(AppVars.objPolicyConfiguration.ListenerIP.ToStr().Trim()))
                {

                    AppVars.objPolicyConfiguration = General.GetObject<Gen_SysPolicy_Configuration>(c => c.Id != 0);


                    string paymentType = objMaster.Current.Gen_PaymentType.PaymentCategoryId == null ? objMaster.Current.Gen_PaymentType.DefaultIfEmpty().PaymentType.ToStr()
                            : objMaster.Current.Gen_PaymentType.Gen_PaymentCategory.CategoryName.ToStr();


                    string journey = "O/W";


                    if (objMaster.Current.JourneyTypeId.ToInt() == 3)
                    {
                        journey = "W/R";
                    }


                    string IsExtra = (objMaster.Current.CompanyId != null || objMaster.Current.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || objMaster.Current.ToLocTypeId == Enums.LOCATION_TYPES.AIRPORT) ? "1" : "0";
                    int i = 1;
                    string viaP = "";



                    if (objMaster.Current.Booking_ViaLocations.Count > 0)
                    {

                        viaP = string.Join(" * ", objMaster.Current.Booking_ViaLocations.Select(c => "(" + i++.ToStr() + ")" + c.ViaLocValue.ToStr()).ToArray<string>());
                    }


                    string mobileNo = objMaster.Current.CustomerMobileNo.ToStr();
                    string telNo = objMaster.Current.CustomerPhoneNo.ToStr();



                    if (string.IsNullOrEmpty(mobileNo) && !string.IsNullOrEmpty(telNo))
                    {
                        mobileNo = telNo;
                    }
                    else if (!string.IsNullOrEmpty(mobileNo) && !string.IsNullOrEmpty(telNo))
                    {
                        mobileNo += "/" + telNo;
                    }


                    string pickUpPlot = "";
                    string dropOffPlot = "";
                    string companyName = string.Empty;

                    if (objMaster.Current.CompanyId != null && objMaster.Current.Gen_Company.DefaultIfEmpty().AccountTypeId.ToInt() != Enums.ACCOUNT_TYPE.CASH)
                        companyName = objMaster.Current.Gen_Company.DefaultIfEmpty().CompanyName;
                    else
                        companyName = objMaster.Current.Gen_Company.DefaultIfEmpty().CompanyName.ToStr();


                    //error in 13.4 => if its a plot job, then pickup point is hiding in pda.

                    pickUpPlot = objMaster.Current.ZoneId != null ? "<<<" + objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr() : "";
                    dropOffPlot = objMaster.Current.DropOffZoneId != null ? "<<<" + objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr() : "";


                    string fromAddress = objMaster.Current.FromAddress.ToStr().Trim();
                    string toAddress = objMaster.Current.ToAddress.ToStr().Trim();

                    if (objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE || objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        fromAddress = objMaster.Current.FromStreet.ToStr() + " " + objMaster.Current.FromAddress.ToStr();

                    }

                    if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE || objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        toAddress = objMaster.Current.ToStreet.ToStr() + " " + objMaster.Current.ToAddress.ToStr();
                    }

                    //half card and cash
                    string specialRequirements = objMaster.Current.SpecialRequirements.ToStr();


                    decimal pdafares = objMaster.Current.GetType().GetProperty(AppVars.objPolicyConfiguration.PDAFaresPropertyName.ToStr().Trim()).GetValue(objMaster.Current, null).ToDecimal();





                    string showFaresValue = objMaster.Current.Gen_PaymentType.ShowFaresOnPDA.ToStr().Trim();

                    string showFares = ",\"ShowFares\":\"" + showFaresValue + "\"";
                    string showSummary = ",\"ShowSummary\":\"" + showFaresValue + "\"";



                    pdafares = objMaster.Current.FareRate.ToDecimal() + objMaster.Current.MeetAndGreetCharges.ToDecimal() + objMaster.Current.CongtionCharges.ToDecimal()
                              + objMaster.Current.AgentCommission.ToDecimal() + objMaster.Current.CashRate.ToDecimal()
                          //+ objBooking.CashRate.ToDecimal() + objBooking.CashFares.ToDecimal() +
                          + objMaster.Current.ExtraDropCharges.ToDecimal() + objMaster.Current.ServiceCharges.ToDecimal();




                    decimal driverfares = objMaster.Current.FareRate.ToDecimal();

                    if (showFaresValue.ToStr() == "1" && objMaster.Current.CompanyId != null && (objMaster.Current.PaymentTypeId.ToInt() == 1 || objMaster.Current.PaymentTypeId.ToInt() == 2 || objMaster.Current.PaymentTypeId.ToInt() == 6))
                    {
                        if (AppVars.listUserRights.Count(c => c.functionId == "ALWAYS SHOW DRIVER PRICE IN PDA") == 0)
                        {
                            pdafares = objMaster.Current.CompanyPrice.ToDecimal() + objMaster.Current.MeetAndGreetCharges.ToDecimal() + objMaster.Current.CongtionCharges.ToDecimal()
                             + objMaster.Current.AgentCommission.ToDecimal() + objMaster.Current.CashRate.ToDecimal()
                         //+ objBooking.CashRate.ToDecimal() + objBooking.CashFares.ToDecimal() +
                         + objMaster.Current.ExtraDropCharges.ToDecimal() + objMaster.Current.ServiceCharges.ToDecimal();


                            driverfares = objMaster.Current.CompanyPrice.ToDecimal();
                        }
                    }


                    string revertStatus = "";
                    if (AppVars.listUserRights.Count(c => c.functionId == "REVERT DRIVER STATUS") > 0 && (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC) && UpdateJourney > 0)
                    {



                        if (UpdateJourney == 3)
                            revertStatus = ",\"revertstatus\":\"" + (objMaster.Current.Id.ToStr() + "|" + objMaster.Current.DriverId.ToStr() + "|" + objMaster.Current.DropOffZoneId.ToInt().ToStr() + "|" + objMaster.Current.BookingStatusId.ToStr() + "|" + AppVars.LoginObj.UserName.ToStr()) + "\"";



                    }
                    //string showFares = ",\"ShowFares\":\"" + objMaster.Current.Gen_PaymentType.ShowFaresOnPDA.ToStr().Trim() + "\"";
                    //string showSummary = ",\"ShowSummary\":\"" + "1" + "\"";


                    string agentDetails = string.Empty;
                    string parkingandWaiting = string.Empty;
                    if (objMaster.Current.CompanyId != null)
                    {
                        agentDetails = ",\"AgentFees\":\"" + String.Format("{0:0.00}", objMaster.Current.AgentCommission + objMaster.Current.CashRate.ToDecimal() + objMaster.Current.ServiceCharges.ToDecimal() + objMaster.Current.ExtraDropCharges.ToDecimal()) + "\"";

                        //   agentDetails = ",\"AgentFees\":\"" + String.Format("{0:0.00}", objMaster.Current.AgentCommission) + "\"";
                        parkingandWaiting = ",\"Parking\":\"" + string.Format("{0:0.00}", objMaster.Current.ParkingCharges) + "\",\"Waiting\":\"" + String.Format("{0:0.00}", objMaster.Current.WaitingCharges) + "\"";


                        /*   if (objMaster.Current.PaymentTypeId.ToInt() == Enums.PAYMENT_TYPES.CASH)
                           {
                               pdafares = objMaster.Current.FareRate.ToDecimal() + objMaster.Current.ParkingCharges.ToDecimal() + objMaster.Current.WaitingCharges.ToDecimal() + objMaster.Current.AgentCommission.ToDecimal();


                           }*/
                    }
                    else
                    {
                        agentDetails = ",\"AgentFees\":\"" + String.Format("{0:0.00}", objMaster.Current.ServiceCharges.ToDecimal() + objMaster.Current.ExtraDropCharges.ToDecimal()) + "\"";

                        parkingandWaiting = ",\"Parking\":\"" + string.Format("{0:0.00}", objMaster.Current.CongtionCharges) + "\",\"Waiting\":\"" + String.Format("{0:0.00}", objMaster.Current.MeetAndGreetCharges) + "\"";
                        //

                    }


                    string fromdoorno = objMaster.Current.FromDoorNo.ToStr().Trim();
                    if (fromdoorno.Length > 0 && fromdoorno.WordCount() > 2 && fromdoorno.Contains(" "))
                    {

                        try
                        {

                            fromdoorno = fromdoorno.Replace(" ", "-");
                        }
                        catch
                        {


                        }
                    }


                    if (fromAddress.ToStr().Trim().Contains("-") && objMaster.Current.Fleet_Driver.Fleet_Driver_PDASettings[0].CurrentPdaVersion.ToDecimal() == 23.50m)
                    {
                        fromAddress = fromAddress.Replace("-", "  ");

                    }


                    //if (objMaster.Current.CompanyId != null && AppVars.listUserRights.Count(c => c.functionId == "SHOW BOOKINGREF FOR ACCOUNT JOB ON PDA") > 0)
                    //{
                    //    if (specialRequirements.Length == 0)
                    //        specialRequirements = "Booking Ref- " + objMaster.Current.BookingNo.ToStr();
                    //    else
                    //        specialRequirements = "Booking Ref- " + objMaster.Current.BookingNo.ToStr() + " , " + specialRequirements;
                    //}



                    if (objMaster.Current.CompanyId != null)
                    {
                        try
                        {
                            if (AppVars.listUserRights.Count(c => c.functionId == "SHOW BOOKINGREF FOR ACCOUNT JOB ON PDA") > 0)
                            {
                                if (specialRequirements.Length == 0)
                                    specialRequirements = "Booking Ref- " + objMaster.Current.BookingNo.ToStr();
                                else
                                    specialRequirements = "Booking Ref- " + objMaster.Current.BookingNo.ToStr() + " , " + specialRequirements;


                                if (objMaster.Current.AttributeValues.ToStr().Trim().Length > 0)
                                {
                                    string attributes = string.Empty;
                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        foreach (var item in objMaster.Current.AttributeValues.ToStr().Trim().Split(','))
                                        {
                                            if (item.ToStr().Trim().Length > 0)
                                            {
                                                attributes += db.Gen_Attributes.Where(c => c.ShortName == item).Select(c => c.Name).FirstOrDefault() + ",";


                                            }

                                        }

                                    }


                                    if (attributes.EndsWith(","))
                                        attributes.Remove((attributes.Length - 1));


                                    if (attributes.ToStr().Trim().Length > 0)
                                    {

                                        if (specialRequirements.Length == 0)
                                            specialRequirements = "Attributes - " + attributes;
                                        else
                                        {
                                            specialRequirements = "Booking Ref- " + objMaster.Current.BookingNo.ToStr() + " , " + "Attributes - " + attributes + " , " + objMaster.Current.SpecialRequirements.ToStr();
                                        }
                                    }
                                }
                            }
                            else if (AppVars.listUserRights.Count(c => c.functionId == "SHOW EXTRA DETAILS ON PDA") > 0)
                            {





                                string otherDetails = string.Empty;

                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    otherDetails = db.ExecuteQuery<string>("select SetVal from appsettings where setkey='ExtraColumnsonSpecialReq'").FirstOrDefault();
                                }


                                if (otherDetails.ToStr().Trim().Length > 0)
                                {


                                    if (specialRequirements.Length == 0)
                                    {

                                        foreach (var item in otherDetails.ToStr().Split('|'))
                                        {
                                            var arr = item.Split(':');

                                            if (objMaster.Current.GetType().GetProperty(arr[1]).GetValue(objMaster.Current).ToStr().Trim().Length > 0)
                                            {



                                                specialRequirements = arr[0] + " - " + objMaster.Current.GetType().GetProperty(arr[2]).GetValue(objMaster.Current).ToStr().Trim();


                                                specialRequirements += Environment.NewLine;


                                            }
                                        }

                                    }
                                    else
                                    {
                                        string tempspecial = specialRequirements;
                                        foreach (var item in otherDetails.ToStr().Split('|'))
                                        {
                                            var arr = item.Split(':');

                                            if (objMaster.Current.GetType().GetProperty(arr[1]).GetValue(objMaster.Current).ToStr().Trim().Length > 0)
                                            {



                                                specialRequirements = arr[0] + " - " + objMaster.Current.GetType().GetProperty(arr[2]).GetValue(objMaster.Current).ToStr().Trim();


                                                specialRequirements += Environment.NewLine;


                                            }
                                        }
                                        specialRequirements = tempspecial + Environment.NewLine + specialRequirements;





                                    }


                                    if (specialRequirements.ToStr().EndsWith(Environment.NewLine))
                                        specialRequirements = specialRequirements.Remove(specialRequirements.LastIndexOf(Environment.NewLine));



                                }

                            }

                        }
                        catch
                        {

                        }
                    }

                    if (specialRequirements.ToStr().Contains("\""))
                        specialRequirements = specialRequirements.ToStr().Replace("\"", "-").Trim();


                    string appendString = string.Empty;


                    appendString = ",\"ShowOnlyPlot\":\"" + "0" + "\"" +
                               ",\"BookingType\":\"" + objMaster.Current.BookingType.BookingTypeName.ToStr() + "\"" +
                           ",\"ExtraCharges\":\"" + objMaster.Current.ExtraDropCharges.ToDecimal() + "\"" +
                            ",\"BookingFee\":\"" + 0.00 + "\"";



                    if (objMaster.Current.BookingDate.Value.AddMinutes(10) > objMaster.Current.PickupDateTime.Value)
                    {
                        if (AppVars.listUserRights.Count(c => c.functionId == "DISABLE ASAP ON PDA") == 0)
                        {

                            appendString += ",\"priority\":\"" + "ASAP" + "\"";

                        }
                    }


                    string summary = string.Empty;

                    if (AppVars.objPolicyConfiguration.PDAVersion.ToDecimal() > 100)
                    {

                        List<BookingSummary> listofSummary = new List<BookingSummary>();

                        if (objMaster.Current.CompanyId != null)
                            listofSummary.Add(new BookingSummary { label = "Agent Fee", value = string.Format("{0:0.00}", objMaster.Current.AgentCommission.ToDecimal() + objMaster.Current.CashRate.ToDecimal()) });


                        listofSummary.Add(new BookingSummary { label = "BookingFee", value = string.Format("{0:0.00}", objMaster.Current.ServiceCharges.ToDecimal()) });


                        listofSummary.Add(new BookingSummary { label = "Parking", value = string.Format("{0:0.00}", objMaster.Current.CongtionCharges.ToDecimal()) });
                        listofSummary.Add(new BookingSummary { label = "Waiting", value = string.Format("{0:0.00}", objMaster.Current.MeetAndGreetCharges.ToDecimal()) });

                        listofSummary.Add(new BookingSummary { label = "Extras", value = string.Format("{0:0.00}", objMaster.Current.ExtraDropCharges.ToDecimal()) });



                        summary = ",\"Summary\":" + Newtonsoft.Json.JsonConvert.SerializeObject(listofSummary);
                    }


                    string toDoorNo = objMaster.Current.ToDoorNo.ToStr().Trim();

                    if (objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT && objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                        toDoorNo = string.Empty;
                    else if (toDoorNo.Length > 0)
                        toDoorNo = toDoorNo + "-";

                    string msg = "Update Job>>" + "{ \"JobId\" :\"" + objMaster.Current.Id.ToStr() +
                                           "\", \"Pickup\":\"" + (!string.IsNullOrEmpty(objMaster.Current.FromDoorNo) ? fromdoorno + "-" + fromAddress + pickUpPlot : fromAddress + pickUpPlot) +
                                            "\", \"Destination\":\"" + toDoorNo + toAddress + dropOffPlot + "\"," +
                                           "\"PickupDateTime\":\"" + string.Format("{0:dd/MM/yyyy   HH:mm}", objMaster.Current.PickupDateTime) + "\"" +
                                           ",\"Cust\":\"" + objMaster.Current.CustomerName + "\",\"Mob\":\"" + mobileNo + " " + "\",\"Fare\":\"" + string.Format("{0:0.00}", pdafares) + "\",\"Vehicle\":\"" + objMaster.Current.Fleet_VehicleType.VehicleType + "\",\"Account\":\"" + companyName + " " + "\"" +
                                             ",\"Lug\":\"" + objMaster.Current.NoofLuggages.ToInt() + "\",\"Passengers\":\"" + objMaster.Current.NoofPassengers.ToInt() + "\",\"Journey\":\"" + journey + "\",\"Payment\":\"" + paymentType + "\",\"Special\":\"" + specialRequirements + " " + "\",\"Extra\":\"" + IsExtra + "\",\"Via\":\"" + viaP + " " + "\"" +
                                       ",\"CompanyId\":\"" + objMaster.Current.CompanyId.ToInt() + "\",\"SubCompanyId\":\"" + objMaster.Current.SubcompanyId.ToInt() + "\",\"QuotedPrice\":\"" + (objMaster.Current.IsQuotedPrice.ToBool() ? "1" : "0") + "\"" +

                                             parkingandWaiting + ",\"DriverFares\":\"" + String.Format("{0:0.00}", driverfares) + "\"" +
                                          agentDetails +
                                             ",\"Did\":\"" + objMaster.Current.DriverId + "\",\"BabySeats\":\"" + objMaster.Current.BabySeats.ToStr() + "\"" + showFares + showSummary + appendString + revertStatus + " }";





                    new Thread(delegate ()
                    {

                        General.SendMessageToPDA("request pda=" + objMaster.Current.DriverId + "=" + objMaster.Current.Id + "=" + msg + "=8");
                    }).Start();



                    if (AppVars.objPolicyConfiguration.DespatchOfflineJobs.ToBool())
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.stp_SaveOfflineMessage(objMaster.Current.Id, objMaster.Current.DriverId, "", AppVars.LoginObj.LoginName.ToStr(), "Update Job>>" + objMaster.Current.DriverId + ">>" + objMaster.Current.Id + ">>" + msg + "=8");
                        }

                    }

                    if ((objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC) && UpdateJourney > 0)
                    {

                        if (UpdateJourney == 1 || (UpdateJourney == 2 && AppVars.listUserRights.Count(c => c.functionId == "ENABLE UPDATE DRIVER PLOT ON EDIT PICK JOB") > 0))  // change journey type or pickup plot
                        {

                            if (objMaster.Current.ZoneId != null)
                                new TaxiDataContext().ExecuteQuery<int>("exec stp_UpdateDriverPlotByJob {0},{1},{2},{3},{4},{5}", objMaster.Current.Id, objMaster.Current.DriverId, "", objMaster.Current.ZoneId, "", "");
                        }
                        else if (UpdateJourney == 3) // change dropoff address
                        {

                            if (AppVars.listUserRights.Count(c => c.functionId == "REVERT DRIVER STATUS") > 0 && (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC) && UpdateJourney > 0)
                            {




                                //  revertStatus = ",\"revertstatus\":\"" + (objMaster.Current.Id.ToStr() + "|" + objMaster.Current.DriverId.ToStr() + "|" + objMaster.Current.DropOffZoneId.ToInt().ToStr() + "|" + objMaster.Current.BookingStatusId.ToStr() + "|" + AppVars.LoginObj.UserName.ToStr()) + "\"";



                            }
                            else
                            {



                                if (objMaster.Current.DropOffZoneId != null)
                                    new TaxiDataContext().ExecuteQuery<int>("exec stp_UpdateDriverPlotByJob {0},{1},{2},{3},{4},{5}", objMaster.Current.Id, objMaster.Current.DriverId, "", objMaster.Current.DropOffZoneId, "", "");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {


            }


        }


        private void UpdateSetFareLog(string msg)
        {


            try
            {
                if (objMaster.Current.Id > 0 && msg.Length > 0)
                {

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.stp_BookingLog(objMaster.Current.Id, AppVars.LoginObj.LoginName.ToStr().Trim(), msg);

                    }


                }
            }
            catch
            {

            }

        }


        private void UpdateRecentAddresses()
        {

            if (AppVars.objPolicyConfiguration.RecentAddressesFrequency.ToInt() > 0)
            {

                try
                {


                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        string frompostcode = General.GetPostCodeMatch(objMaster.Current.FromAddress.ToStr().Trim().ToUpper());
                        string topostcode = General.GetPostCodeMatch(objMaster.Current.ToAddress.ToStr().Trim().ToUpper());


                        if ((ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT || lblFromDoorFlightNo.Text.ToLower().StartsWith("flight")) && ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        {
                            if (objMaster.Current.ToAddress.Length > 2 && (ddlDropOffPlot.SelectedValue != null || General.GetPostCodeMatch(objMaster.Current.ToAddress.ToStr().Trim().ToUpper()).ToStr().Contains(" ")))
                                db.stp_SaveRecentAddresses("<add>" + objMaster.Current.ToAddress + "</add>", objMaster.Current.ToAddress, objMaster.Current.CompanyId);

                        }
                        else if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT || lblToDoorFlightNo.Text.ToLower().StartsWith("flight")))
                        {
                            if (objMaster.Current.FromAddress.Length > 2 && (ddlPickupPlot.SelectedValue != null || General.GetPostCodeMatch(objMaster.Current.FromAddress.ToStr().Trim().ToUpper()).ToStr().Contains(" ")))
                                db.stp_SaveRecentAddresses("<add>" + objMaster.Current.FromAddress + "</add>", "", objMaster.Current.CompanyId);

                        }
                        else if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        {

                            if (objMaster.Current.FromAddress.Length < 3)
                            {
                                if (objMaster.Current.ToAddress.Length > 2 && (ddlDropOffPlot.SelectedValue != null || General.GetPostCodeMatch(objMaster.Current.ToAddress.ToStr().Trim().ToUpper()).ToStr().Contains(" ")))
                                {
                                    db.stp_SaveRecentAddresses("<add>" + objMaster.Current.ToAddress + "</add>", objMaster.Current.ToAddress, objMaster.Current.CompanyId);
                                }
                            }
                            else if (objMaster.Current.ToAddress.Length < 3)
                            {
                                if (objMaster.Current.FromAddress.Length > 2 && (ddlPickupPlot.SelectedValue != null || General.GetPostCodeMatch(objMaster.Current.FromAddress.ToStr().Trim().ToUpper()).ToStr().Contains(" ")))
                                {
                                    db.stp_SaveRecentAddresses("<add>" + objMaster.Current.FromAddress + "</add>", "", objMaster.Current.CompanyId);
                                }
                            }
                            else
                                if ((ddlPickupPlot.SelectedValue != null || General.GetPostCodeMatch(objMaster.Current.FromAddress.ToStr().Trim().ToUpper()).ToStr().Contains(" "))
                                && (ddlDropOffPlot.SelectedValue != null || General.GetPostCodeMatch(objMaster.Current.ToAddress.ToStr().Trim().ToUpper()).ToStr().Contains(" ")))
                            {
                                {
                                    db.stp_SaveRecentAddresses("<add>" + objMaster.Current.FromAddress + "</add><add>" + objMaster.Current.ToAddress + "</add>", objMaster.Current.ToAddress, objMaster.Current.CompanyId);
                                }
                            }
                        }
                    }
                }
                catch
                {


                }
            }
        }










        DateTime? leadZoneDueTime = null;
        private bool IsOutoftownPlot;

        private int? GetZoneId(string address)
        {
            if (address.ToStr().Trim().Length == 0)
                return null;

            if (address.ToStr().Trim().Length == 0)
                return null;

            //if (Debugger.IsAttached)
            //    return null;


            if (address != "AS DIRECTED" && string.IsNullOrEmpty(General.GetPostCodeMatch(address)))
            {

                int? zId = null;
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    zId = db.Gen_Locations.FirstOrDefault(c => c.LocationName == address || (c.FullLocationName != null && c.FullLocationName == address)).DefaultIfEmpty().ZoneId;

                }

                if (zId != null)
                    return zId;
                else
                    return null;



            }


            if (address.Contains(", UK"))
                address = address.Remove(address.LastIndexOf(", UK"));



            int? zoneId = null;

            try
            {
                if (address == "AS DIRECTED")
                {
                    zoneId = General.GetObject<Gen_Zone>(c => c.ZoneName == address).DefaultIfEmpty().Id;

                    if (zoneId == 0)
                        zoneId = null;
                }
                else
                {
                    // if (AppVars.listOfAddress.Count(c=>c.AddressLine1.Contains(address.ToStr().ToUpper()))

                    if (AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Trim().Length > 0)
                        zoneId = AppVars.listOfAddress.FirstOrDefault(c => c.AddressLine1.Contains(address.ToStr().ToUpper())).DefaultIfEmpty().ZoneId;

                    if (zoneId == null)
                    {

                        string postCode = General.GetPostCode(address);


                        if (address.Contains(",") && AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Trim().Length > 0)
                        {

                            string addr = address.Substring(0, address.LastIndexOf(',')).Trim();

                            if (addr.ToStr().Trim() != string.Empty)
                            {
                                zoneId = General.GetObject<Gen_Location>(c => c.PostCode == postCode && c.LocationName == addr).DefaultIfEmpty().ZoneId;
                            }
                        }

                        if (zoneId == null)
                        {

                            stp_getCoordinatesByAddressResult objCoord = null;


                            try
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    objCoord = db.stp_getCoordinatesByAddress(address, postCode).FirstOrDefault();


                                }
                            }
                            catch
                            {

                            }


                            // Gen_Coordinate objCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == postCode);
                            if (objCoord != null)
                            {
                                double latitude = 0, longitude = 0;

                                latitude = Convert.ToDouble(objCoord.Latitude);
                                longitude = Convert.ToDouble(objCoord.Longtiude);

                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    db.DeferredLoadingEnabled = false;

                                    var plot = (from a in db.Gen_Zones.Where(c => (c.ShapeType != null && c.ShapeType == "circle") || (c.MinLatitude != null && (latitude >= c.MinLatitude && latitude <= c.MaxLatitude)
                                                                       && (longitude <= c.MaxLongitude && longitude >= c.MinLongitude)))
                                                orderby a.PlotKind

                                                select new
                                                {
                                                    a.Id,
                                                    a.JobDueTime
                                                    ,
                                                    a.BlockDropOff,
                                                    a.Description
                                                }
                                              ).ToList();


                                    if (plot.Count() > 0)
                                    {

                                        foreach (var item in plot)
                                        {

                                            if (FindPoint(latitude, longitude, db.Gen_Zone_PolyVertices.Where(c => c.ZoneId == item.Id).ToList()))
                                            {
                                                zoneId = item.Id;
                                                leadZoneDueTime = item.JobDueTime;
                                                IsOutoftownPlot = item.BlockDropOff.ToBool();

                                                locationAttributes = item.Description.ToStr();

                                                if (locationAttributes.Length == 0)
                                                {
                                                    if (AppVars.listUserRights.Count(c => c.functionId == "SHOW LOCATION ATTRIBUTES") > 0)
                                                    {

                                                        try
                                                        {
                                                            address = address.Replace("  ", " ");
                                                            locationAttributes = db.Gen_Locations.Where(c => c.FullLocationName.Replace("  ", " ") == address && c.LocationTypeId != Enums.LOCATION_TYPES.AIRPORT).Select(c => c.City).FirstOrDefault();
                                                        }
                                                        catch
                                                        { }
                                                    }

                                                }


                                                if (locationAttributes.Length > 0)
                                                    ddlDropOffPlot.Tag = locationAttributes;


                                                break;
                                            }
                                        }



                                    }
                                    else
                                    {

                                        if (AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Length > 0)
                                        {
                                            Gen_Coordinate objCoord2 = General.GetObject<Gen_Coordinate>(c => c.PostCode == postCode);

                                            double distPick = Convert.ToDouble(AppVars.objPolicyConfiguration.CreditCardExtraCharges.ToDecimal());

                                            if (distPick > 0)
                                            {

                                                string[] arr = AppVars.objPolicyConfiguration.PriorityPostCodes.Split(new char[] { ',' });

                                                if (objCoord2.PostCode.ToStr().Contains(" ") && arr.Contains(objCoord2.PostCode.Split(new char[] { ' ' })[0]))
                                                {
                                                    var zone = (from a in General.GetQueryable<Gen_Zone_PolyVertice>(null).AsEnumerable()
                                                                select new
                                                                {

                                                                    a.Gen_Zone.Id,
                                                                    a.Gen_Zone.ZoneName,
                                                                    DistanceMin = new DotNetCoords.LatLng(Convert.ToDouble(a.Latitude), Convert.ToDouble(a.Longitude)).DistanceMiles(new DotNetCoords.LatLng(Convert.ToDouble(objCoord2.Latitude), Convert.ToDouble(objCoord2.Longitude))),


                                                                }).OrderBy(c => c.DistanceMin).Where(c => c.DistanceMin <= distPick).FirstOrDefault();



                                                    if (zone != null)
                                                        zoneId = zone.Id;
                                                }
                                            }
                                        }
                                    }



                                }
                            }
                        }
                    }

                }


            }
            catch (Exception ex)
            {


            }

            return zoneId;

        }


        string locationAttributes = "";

        public int? GetZoneIdOnly(string address)
        {
            if (address.ToStr().Trim().Length == 0)
                return null;

            if (address.ToStr().Trim().Length == 0)
                return null;





            if (address != "AS DIRECTED" && string.IsNullOrEmpty(General.GetPostCodeMatch(address)))
            {

                int? zId = null;
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    zId = db.Gen_Locations.FirstOrDefault(c => c.LocationName == address || (c.FullLocationName != null && c.FullLocationName == address)).DefaultIfEmpty().ZoneId;

                }

                if (zId != null)
                    return zId;
                else
                    return null;



            }


            if (address.Contains(", UK"))
                address = address.Remove(address.LastIndexOf(", UK"));



            int? zoneId = null;

            try
            {
                if (address == "AS DIRECTED")
                {
                    zoneId = General.GetObject<Gen_Zone>(c => c.ZoneName == address).DefaultIfEmpty().Id;

                    if (zoneId == 0)
                        zoneId = null;
                }
                else
                {
                    // if (AppVars.listOfAddress.Count(c=>c.AddressLine1.Contains(address.ToStr().ToUpper()))


                    if (zoneId == null)
                    {

                        string postCode = General.GetPostCode(address);


                        if (address.Contains(",") && AppVars.objPolicyConfiguration.PriorityPostCodes.ToStr().Trim().Length > 0)
                        {

                            string addr = address.Substring(0, address.LastIndexOf(',')).Trim();

                            if (addr.ToStr().Trim() != string.Empty)
                            {
                                zoneId = General.GetObject<Gen_Location>(c => c.PostCode == postCode && c.LocationName == addr).DefaultIfEmpty().ZoneId;
                            }
                        }

                        if (zoneId == null)
                        {

                            stp_getCoordinatesByAddressResult objCoord = null;


                            try
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    objCoord = db.stp_getCoordinatesByAddress(address, postCode).FirstOrDefault();


                                }
                            }
                            catch
                            {

                            }


                            // Gen_Coordinate objCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == postCode);
                            if (objCoord != null)
                            {
                                double latitude = 0, longitude = 0;

                                latitude = Convert.ToDouble(objCoord.Latitude);
                                longitude = Convert.ToDouble(objCoord.Longtiude);






                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    db.DeferredLoadingEnabled = false;

                                    var plot = (from a in db.Gen_Zones.Where(c => (c.ShapeType != null && c.ShapeType == "circle") || (c.MinLatitude != null && (latitude >= c.MinLatitude && latitude <= c.MaxLatitude)
                                                                       && (longitude <= c.MaxLongitude && longitude >= c.MinLongitude)))
                                                orderby a.PlotKind

                                                select new
                                                {
                                                    a.Id,
                                                    a.JobDueTime
                                                    ,
                                                    a.BlockDropOff
                                                }
                                              ).ToList();
                                    // select a.Id).ToArray<int>();
                                    //    }

                                    if (plot.Count() > 0)
                                    {
                                        using (TaxiDataContext DB = new TaxiDataContext())
                                        {
                                            foreach (var item in plot)
                                            {

                                                if (FindPoint(latitude, longitude, DB.Gen_Zone_PolyVertices.Where(c => c.ZoneId == item.Id).ToList()))
                                                {
                                                    zoneId = item.Id;
                                                    //   leadZoneDueTime = item.JobDueTime;
                                                    //IsOutoftownPlot = item.BlockDropOff.ToBool();
                                                    break;
                                                }
                                            }
                                        }


                                    }

                                }
                            }
                        }
                    }

                }


            }
            catch (Exception ex)
            {


            }

            return zoneId;

        }









        private bool IsDisplayingRecord = false;

        public void OnDisplayRecord(long Id)
        {

            objMaster.GetByPrimaryKey(Id);
            DisplayRecord();

        }

        private void chkAllocateDriver_CheckedChanged(object sender, EventArgs e)
        {
            try
            {



                FillComboByOneWayDriver();

                //if (chkAllocateDriver.Checked)
                //{
                //    if (lblReturnDriver != null && ddlReturnDriver.Enabled)
                //    {
                //        if (chkSameAllocationtoReturnDrv != null)
                //            chkSameAllocationtoReturnDrv.Visible = true;

                //    }
                //    else
                //    {
                //        if (chkSameAllocationtoReturnDrv != null)
                //            chkSameAllocationtoReturnDrv.Visible = false;
                //    }
                //}
                //else
                //{
                //    if (chkSameAllocationtoReturnDrv != null)
                //        chkSameAllocationtoReturnDrv.Visible = false;

                //}
            }
            catch
            {


            }
        }


        private void DisplayRecord()
        {
            if (objMaster.Current == null) return;
            btnRefundKP.Visible = false;
            btnRefundKP.SendToBack();
            lblCardIsRegisteredKP.Visible = false;
            try
            {


                IsDisplayingRecord = true;

                int notesCnt = objMaster.Current.Booking_Notes.Count;

                if (notesCnt > 0)
                {
                    btn_notes.Text = "Notes(" + notesCnt + ") [F5]";

                    //btn_notes.ButtonElement.ButtonFillElement.BackColor = Color.Red;
                    //btn_notes.ButtonElement.ButtonFillElement.NumberOfColors = 1;
                    //btn_notes.ButtonElement.ForeColor = Color.White;
                }
                else
                {
                    btn_notes.Text = "Notes(0) [F5]";
                }

                //    btnPasteBooking.Visible = false;
                //btnComplaint.Visible = true;
                //btnLostProperty.Visible = true;

                btnCancelBooking.Enabled = true;
                btnJobInformation.Enabled = true;
                btnJobInformation.Click += new EventHandler(btnPrintJob_Click);
                //     btnSearch.Enabled = false;
                btnMultiBooking.Enabled = false;
                btnSms.Visible = true;



                chkReverse.CheckStateChanged -= new EventHandler(chkReverse_ToggleStateChanging);//comment

                chkReverse.Checked = objMaster.Current.IsReverse.ToBool();
                chkReverse.CheckStateChanged += new EventHandler(chkReverse_ToggleStateChanging);//comment




                //txtVehicleNo.Text = objMaster.Current.Fleet_Master.DefaultIfEmpty().Plateno.ToStr();

                ddlSubCompany.SelectedValue = objMaster.Current.SubcompanyId.ToInt();



                try
                {
                    ddlBookingType.SelectedValue = objMaster.Current.BookingTypeId;
                }
                catch
                {


                }

                if (objMaster.Current.BookingTypeId != null && ddlBookingType.SelectedValue.ToInt() != objMaster.Current.BookingTypeId)
                {

                    var list = (DataTable)ddlBookingType.DataSource;

                    // list.Add(new BookingType { Id = objMaster.Current.BookingTypeId.ToInt(), BookingTypeName = objMaster.Current.BookingType.BookingTypeName });

                    DataRow row = list.NewRow();
                    row["Id"] = objMaster.Current.BookingTypeId.ToInt();
                    row["BookingTypeName"] = objMaster.Current.BookingType.BookingTypeName;


                    list.Rows.Add(row);

                    ddlBookingType.DataSource = null;

                    ComboFunctions.FillCombo(list, ddlBookingType, "BookingTypeName", "Id");

                    //   ComboFunctions.FillCombo<BookingType>(list, ddlBookingType, "BookingTypeName", "Id");


                    ddlBookingType.SelectedValue = objMaster.Current.BookingTypeId.ToInt();
                    ddlBookingType.Enabled = false;

                }

                if (objMaster.Current.BookingTypeId.ToInt() == 100)
                {
                    ddlBookingType.Enabled = false;
                }

                // chkQuotation.Location = new Point(chkQuotation.Location.X, chkQuotation.Location.Y + 20);
                //chkQuotation.Checked = objMaster.Current.IsQuotation.ToBool();
                chkQuotation.Checked = objMaster.Current.IsQuotation.ToBool();
                WasQuotiation = chkQuotation.Checked;

                txtBookingNo.Text = objMaster.Current.BookingNo.ToStr();



                this.Text = "Ref # " + txtBookingNo.Text;

                if (objMaster.Current.AddLog.ToStr().ToLower() == "customer")
                {
                    this.Text += " , Online Ref # " + objMaster.Current.Id;
                }

                if (objMaster.Current.FleetMasterId != null)
                {

                    this.Text += " , VehicleID : " + objMaster.Current.Fleet_Master.DefaultIfEmpty().VehicleID.ToStr();
                }

                ddlFromLocType.SelectedValue = objMaster.Current.FromLocTypeId;
                ddlToLocType.SelectedValue = objMaster.Current.ToLocTypeId;

                // DetachLocationsSelectionEvent(ddlFromLocation);
                //    ddlFromLocation.SelectedValue = objMaster.Current.FromLocId;
                //  AttachLocationSelectionEvent(ddlFromLocation);

                // DetachLocationsSelectionEvent(ddlToLocation);
                //    ddlToLocation.SelectedValue = objMaster.Current.ToLocId;
                // AttachLocationSelectionEvent(ddlToLocation);

                ddlVehicleType.SelectedValue = objMaster.Current.VehicleTypeId;


                ddlCustomerName.Text = objMaster.Current.CustomerName;
                txtCustomerMobileNo.Text = objMaster.Current.CustomerMobileNo;
                txtCustomerPhoneNo.Text = objMaster.Current.CustomerPhoneNo;
                txtEmail.Text = objMaster.Current.CustomerEmail.ToStr().Trim();
                numBookingFee.Value = objMaster.Current.ServiceCharges.ToDecimal();

                txtSpecialRequirements.Text = objMaster.Current.SpecialRequirements;

                //checking registered card for konnect pay
                CheckIfCardIsRegisteredKP(objMaster?.Current?.CustomerMobileNo);
                int journeyTypeId = objMaster.Current.JourneyTypeId.ToInt();

                //opt_JOneWay.ToggleStateChanging -= opt_JOneWay_ToggleStateChanging;
                opt_one.CheckedChanged -= opt_one_CheckedChanged;

                if (journeyTypeId == Enums.JOURNEY_TYPES.ONEWAY)
                    opt_one.Checked = true;
                else if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                {
                    opt_return.Checked = true;
                    //  opt_JReturnWay.ToggleState = Telerik.WinControls.Enumerations.ToggleState.On;

                    label1.Text = " Booking(Return)";



                }
                else if (journeyTypeId == Enums.JOURNEY_TYPES.WAITANDRETURN)
                {
                    opt_waitreturn.Checked = true;
                    //  opt_WaitandReturn.ToggleState = ToggleState.On;
                }

                if (ddlReturnFromAirport != null)
                    ddlReturnFromAirport.SelectedValue = objMaster.Current.ReturnFromLocId;



                if (objMaster.Current.MasterJobId != null)
                {
                    pnlReturnJobNo.Visible = true;
                    pnlReturnJobNo.Text = "Return From Job # " + objMaster.Current.Booking1.DefaultIfEmpty().BookingNo.ToStr();



                    if (objMaster.Current.BookingTypeId.ToInt() == Enums.BOOKING_TYPES.WEB && objMaster.Current.ToLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        lblToDoorFlightNo.Text = "Flight No";

                    }


                }

                opt_one.CheckedChanged += new EventHandler(opt_one_CheckedChanged);
                //  opt_JOneWay.ToggleStateChanging += new StateChangingEventHandler(opt_JOneWay_ToggleStateChanging);

                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED)
                {
                    btnCancelBooking.Text = "Cancel Notes";
                    //   IsCancel = true;

                }

                if (objMaster.Current.CompanyId == null)
                    chkIsCompanyRates.Checked = false;
                else
                    chkIsCompanyRates.Checked = objMaster.Current.IsCompanyWise.ToBool();

                if (objMaster.Current.CompanyId != null && objMaster.Current.Gen_Company.IsClosed.ToBool())
                {

                    //List<ClsCompanyComboDataSource> list =(List<ClsCompanyComboDataSource>) ddlCompany.DataSource;
                    //list.Add(new ClsCompanyComboDataSource { Id = objMaster.Current.CompanyId.ToInt(), CompanyName = objMaster.Current.Gen_Company.CompanyName });
                    ddlCompany.SelectedValueChanged -= new EventHandler(ddlCompany_SelectedValueChanged);
                    ComboFunctions.FillCompanyComboX(ddlCompany, objMaster.Current.CompanyId.ToInt());


                    ddlCompany.SelectedIndex = -1;

                    //   ComboFunctions.FillCompanyCombo(ddlCompany, data);
                    ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                }


                ddlCompany.SelectedValue = objMaster.Current.CompanyId;

                ddlPaymentType.SelectedValue = objMaster.Current.PaymentTypeId;

                //if ((ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD || ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID)
                //    && !string.IsNullOrEmpty(objMaster.Current.BookingPayment.DefaultIfEmpty().AuthCode))
                //{


                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if ((ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD || ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID)
                     && (db.Booking_Payments.Count(c => c.BookingId == objMaster.Current.Id && c.AuthCode != null && c.AuthCode != "") > 0 ||
                        (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID && (objMaster.Current.BookingTypeId.ToInt() == Enums.BOOKING_TYPES.ONLINE || objMaster.Current.BookingTypeId.ToInt() == Enums.BOOKING_TYPES.WEB))
                      || (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID && objMaster.Current.PaymentComments.ToStr().Trim().Length > 0 && AppVars.listUserRights.Count(c => c.functionId == "LOCK BOOKING ON EXTERNAL PAYMENT") > 0)



                        ))
                    {
                        try
                        {
                            btnPayment.Visible = false;

                            ddlPaymentType.Enabled = false;



                            if (objMaster.Current.CompanyId != null)
                                numFareRate.Enabled = true;
                            else
                                numFareRate.Enabled = false;

                            btnPickFares.Visible = false;
                            chkQuotedPrice.Enabled = false;

                            //if (numCompanyFares != null)
                            //    numCompanyFares.Enabled = false;



                            chkIsCompanyRates.Enabled = false;

                            ddlCompany.Enabled = false;


                            txtPaymentReference.Enabled = false;
                            numBookingFee.Enabled = false;

                            numExtraChrgs.Enabled = false;
                            numCongChrgs.Enabled = false;
                            numMeetCharges.Enabled = false;
                            numParkingChrgs.Enabled = false;
                            numWaitingChrgs.Enabled = false;
                            numDrvWaitingMins.Enabled = false;
                            if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                            {

                                numReturnFare.Enabled = false;
                                numReturnBookingFee.Enabled = false;
                                opt_return.Enabled = false;
                                opt_waitreturn.Enabled = false;
                                opt_one.Enabled = false;

                            }
                        }
                        catch
                        {


                        }


                    }
                }



                //txtCustomerCreditCardNo.Text = objMaster.Current.CustomerCreditCardDetails.ToStr().Trim();
                //txtCompanyCreditCardNo.Text = objMaster.Current.CompanyCreditCardDetails.ToStr().Trim();







                if (pnlOrderNo != null)
                {

                    txtOrderNo.Text = objMaster.Current.OrderNo.ToStr();
                    txtPupilNo.Text = objMaster.Current.PupilNo.ToStr();

                }

                if (txtAccountBookedBy != null)
                {
                    txtAccountBookedBy.Text = objMaster.Current.BookedBy.ToStr().Trim();
                }


                if (chkTakenByAgent != null)
                {

                    chkTakenByAgent.Checked = objMaster.Current.JobTakenByCompany.ToBool();
                    //  numAgentCommissionPercent.Value = objMaster.Current.AgentCommissionPercent.ToInt();
                    //     ddlAgentCommissionType.SelectedIndex = objMaster.Current.FromFlightNo.ToStr().Trim() == "Percent" ? 0 : 1;
                    numAgentCommission.Value = objMaster.Current.AgentCommission.ToDecimal();

                    numAgentCharge.Value = objMaster.Current.CashRate.ToDecimal();
                }

                if (numJourneyTime != null)
                {
                    numJourneyTime.Value = objMaster.Current.JourneyTimeInMins.ToDecimal();

                }

                if (ddlDepartment != null && objMaster.Current.DepartmentId != null)
                    ddlDepartment.SelectedValue = objMaster.Current.DepartmentId;


                if (ddlEscort != null)
                {
                    if (objMaster.Current.EscortId != null)
                        ddlEscort.SelectedValue = objMaster.Current.EscortId;

                    numEscortPrice.Value = objMaster.Current.EscortPrice.ToDecimal();

                }

                dtpPickupDate.Value = objMaster.Current.PickupDateTime.ToDate();
                dtpPickupTime.Value = objMaster.Current.PickupDateTime.ToDateTime();
                SetPickupTimeHourAndMin(dtpPickupTime.Value.ToDateTime());


                numLead.Value = objMaster.Current.DeadMileage.ToDecimal();

                if (numLead.Value > 0)
                    chkLead.Checked = true;
                else
                {
                    if (objMaster.Current.ZoneId != null)
                    {
                        DateTime? dueTime = null;
                        try
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                db.CommandTimeout = 3;
                                dueTime = db.Gen_Zones.Where(c => c.Id == objMaster.Current.ZoneId).Select(c => c.JobDueTime).FirstOrDefault();
                                numLead.Value = ((dueTime.Value.Hour * 60) + dueTime.Value.Minute);
                            }
                        }
                        catch
                        {

                        }
                    }

                }


                chkHasPriority.Checked = objMaster.Current.JourneyTimeInMins.ToInt() > 0 ? true : false;

                if (objMaster.Current.ExtraMile.ToDecimal() <= numPriority.Maximum)
                {
                    numPriority.Value = objMaster.Current.ExtraMile.ToDecimal();
                }



                if (dtpReturnPickupDate != null)
                {
                    dtpReturnPickupDate.Value = objMaster.Current.ReturnPickupDateTime.ToDate();
                    dtpReturnPickupTime.Value = objMaster.Current.ReturnPickupDateTime.ToDateTime();


                    //if (objMaster.Current.ReturnDriverId != null)
                    //    ddlReturnDriver.SelectedValue = objMaster.Current.ReturnDriverId;
                }


                num_TotalPassengers.Value = objMaster.Current.NoofPassengers.ToDecimal();
                numTotalLuggages.Value = objMaster.Current.NoofLuggages.ToDecimal();
                numHandLugg.Value = objMaster.Current.NoofHandLuggages.ToDecimal();

                numFareRate.Value = objMaster.Current.FareRate.ToDecimal();

                if (numReturnFare != null)
                    numReturnFare.Value = objMaster.Current.ReturnFareRate.ToDecimal();

                if (numCompanyFares != null)
                {
                    numCompanyFares.Value = objMaster.Current.CompanyPrice.ToDecimal();

                    if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                    {
                        numReturnCompanyFares.Value = objMaster.Current.WaitingMins.ToDecimal();

                    }
                }

                numParkingChrgs.Value = objMaster.Current.ParkingCharges.ToDecimal();
                numWaitingChrgs.Value = objMaster.Current.WaitingCharges.ToDecimal();
                numExtraChrgs.Value = objMaster.Current.ExtraDropCharges.ToDecimal();
                numMeetCharges.Value = objMaster.Current.MeetAndGreetCharges.ToDecimal();
                numCongChrgs.Value = objMaster.Current.CongtionCharges.ToDecimal();
                numTipAmount.Value = objMaster.Current.TipAmount.ToDecimal();

                numTotalChrgs.Value = objMaster.Current.TotalCharges.ToDecimal();

                //  numDrvWaitingMins.Enabled = true;

                numDrvWaitingMins.Value = objMaster.Current.DriverWaitingMins.ToDecimal();


                //if (pnlComcab != null)
                //{
                //    try
                //    {
                //        numComcab_Cash.Value = objMaster.Current.CashRate.ToDecimal();
                //        numComcab_Account.Maximum = 5000;
                //        numComcab_Account.Value = objMaster.Current.AccountRate.ToDecimal();
                //        //    numComcab_ExtraMile.Value = objMaster.Current.ExtraMile.ToDecimal();
                //        numComcab_WaitingMin.Value = objMaster.Current.WaitingMins.ToDecimal();
                //    }
                //    catch
                //    {
                //        //

                //    }
                //}


                txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtFromAddress.Text = objMaster.Current.FromAddress.ToStr();
                txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                txtFromFlightDoorNo.Text = objMaster.Current.FromDoorNo.ToStr();
                txtFromStreetComing.Text = objMaster.Current.FromStreet.ToStr();

                txtFromPostCode.Text = objMaster.Current.FromPostCode.ToStr();

                txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtToAddress.Text = objMaster.Current.ToAddress.ToStr();
                txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                txtToFlightDoorNo.Text = objMaster.Current.ToDoorNo.ToStr();
                txtToStreetComing.Text = objMaster.Current.ToStreet.ToStr();

                txtToPostCode.Text = objMaster.Current.ToPostCode.ToStr();




                chkAutoDespatch.Checked = objMaster.Current.AutoDespatch.ToBool();
                chkBidding.Checked = objMaster.Current.IsBidding.ToBool();

                DateTime? pickUpDate = objMaster.Current.PickupDateTime;




                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP)
                {
                    //  chkDisableDriverSMS.Enabled = false;
                    //   chkDisablePassengerSMS.Enabled = false;

                    chkQuotation.Enabled = false;




                }




                int fromLocTypeId = objMaster.Current.FromLocTypeId.ToInt();

                //  if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS)
                txtFromAddress.Focus();
                //else if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    txtFromPostCode.Focus();
                //else
                //    ddlFromLocation.Focus();


                //    chkDisableDriverSMS.Checked = objMaster.Current.DisableDriverSMS.ToBool();
                //    chkDisablePassengerSMS.Checked = objMaster.Current.DisablePassengerSMS.ToBool();

                //if (optSMSGsm != null)
                //{
                //    if (objMaster.Current.SMSType.ToInt() == Enums.SMSACCOUNT_TYPE.CLICKATELL)
                //    {
                //        optSMSThirdParty.Checked = true;

                //    }
                //    else
                //        optSMSGsm.Checked = true;


                //}


                if (chkAutoDespatch.Enabled)
                {
                    ddlPickupPlot.SelectedValue = objMaster.Current.ZoneId.ToInt();
                    ddlDropOffPlot.SelectedValue = objMaster.Current.DropOffZoneId.ToInt();
                    // txtPickupPlot.Text = objMaster.Current.Gen_Zone1.DefaultIfEmpty().ZoneName.ToStr();
                    // txtDropOffZone.Text = objMaster.Current.Gen_Zone.DefaultIfEmpty().ZoneName.ToStr();

                }

                if (objMaster.Current.PartyId != null && objMaster.Current.TransferJobId != null)
                {
                    lblBookedBy.Text = "Job Received from : " + objMaster.Current.Gen_Party.CompanyName.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.AddOn.ToDateTime());
                    ddlBookingType.Enabled = false;
                }
                else
                {
                    lblBookedBy.Text = "Job booked by : " + objMaster.Current.AddLog.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.AddOn.ToDateTime());


                }

                if (!string.IsNullOrEmpty(objMaster.Current.EditLog))
                {
                    lblBookedBy.Text += " , Edit by : " + objMaster.Current.EditLog.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.EditOn.ToDateTime());
                }


                if (!string.IsNullOrEmpty(objMaster.Current.Despatchby))
                {
                    lblBookedBy.Text += " , Despatched by : " + objMaster.Current.Despatchby.ToStr() + " on " + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.DespatchDateTime.ToDateTime());
                }








                if (objMaster.Current.FaresPostedFrom.ToStr().Trim().Length == 0 && objMaster.Current.CompanyId != null && objMaster.Current.AccountRate.ToDecimal() > 0)
                {
                    txtFaresPostedFrom.Text = "Mileage " + objMaster.Current.AccountRate.ToDecimal();
                }
                else
                {



                    txtFaresPostedFrom.Text = objMaster.Current.FaresPostedFrom.ToStr();

                    if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED && txtFaresPostedFrom.Text.ToLower().Contains("meter"))
                    {
                        chkQuotedPrice.Location = new Point(chkQuotedPrice.Location.X + 10, chkQuotedPrice.Location.Y + 50);
                        chkQuotedPrice.BringToFront();
                    }


                }
                if (!string.IsNullOrEmpty(txtFaresPostedFrom.Text))
                    txtFaresPostedFrom.Visible = true;



                if (ddlBabyseat1 != null && ddlbabyseat2 != null)
                {
                    string babyseats = objMaster.Current.BabySeats.ToStr();
                    if (!string.IsNullOrEmpty(babyseats) && babyseats.Contains("<<<"))
                    {

                        string[] arr = babyseats.Split(new string[] { "<<<" }, StringSplitOptions.None);

                        if (arr.Count() == 2)
                        {
                            ddlBabyseat1.SelectedItem = arr[0].ToStr().Trim();
                            ddlbabyseat2.SelectedItem = arr[1].ToStr().Trim();

                        }
                    }
                }

                DisplayBooking_ViaLocations();




                if (txtReturnSpecialReq != null)
                {
                    if (objMaster.Current.BookingReturns.Count > 0)
                    {
                        try
                        {
                            txtReturnSpecialReq.Text = objMaster.Current.BookingReturns[0].DefaultIfEmpty().SpecialRequirements.ToStr();

                            if (ddlReturnVehicleType != null)
                            {
                                int? returnVehicleId = objMaster.Current.BookingReturns[0].DefaultIfEmpty().VehicleTypeId;

                                if (returnVehicleId == null)
                                    returnVehicleId = objMaster.Current.VehicleTypeId;

                                ddlReturnVehicleType.SelectedValue = returnVehicleId;

                            }




                            objMaster.ReturnPaymentTypeId = objMaster.Current.BookingReturns[0].DefaultIfEmpty().PaymentTypeId;

                            if (objMaster.ReturnPaymentTypeId.ToInt() == 0)
                                objMaster.ReturnPaymentTypeId = null;
                        }
                        catch
                        {


                        }



                        txtReturnTo.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        txtReturnTo.Text = objMaster.Current.BookingReturns[0].ToAddress.ToStr().Trim();
                        txtReturnTo.TextChanged += new EventHandler(TextBoxElement_TextChanged);






                        txtReturnFrom.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                        txtReturnFrom.Text = objMaster.Current.BookingReturns[0].FromAddress.ToStr().Trim();
                        txtReturnFrom.TextChanged += new EventHandler(TextBoxElement_TextChanged);



                        try
                        {


                            numReturnBookingFee.Value = objMaster.Current.BookingReturns[0].ServiceCharges.ToDecimal();

                            if (numReturnBookingFee.Visible == false)
                            {
                                lblReturnCustFare.Visible = true;
                                numReturnBookingFee.Visible = true;


                            }

                            numCongChrgs.Tag = objMaster.Current.BookingReturns[0].CongtionCharges.ToDecimal();
                            if (objMaster.Current.CompanyId != null)
                            {

                                numParkingChrgs.Tag = objMaster.Current.BookingReturns[0].CongtionCharges.ToDecimal();
                            }
                        }
                        catch
                        {

                        }

                    }
                }







                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                {

                    //  btnSendInvoice.Visible = true;
                    btnDespatchView.Visible = false;

                    chkAllocateDriver.Enabled = false;
                    ddlDriver.Enabled = false;
                    //if (ddlReturnDriver != null)
                    //    ddlReturnDriver.Enabled = false;


                    if (AppVars.listUserRights.Count(c => c.functionId == "LOCK COMPLETED BOOKING") > 0)
                    {
                        txtFromAddress.ReadOnly = true;
                        txtToAddress.ReadOnly = true;
                        ddlCustomerName.ReadOnly = true;
                        txtCustomerMobileNo.ReadOnly = true;
                        txtCustomerPhoneNo.ReadOnly = true;
                        txtEmail.ReadOnly = true;
                        dtpPickupDate.Enabled = false;
                        dtpPickupTime.Enabled = false;

                        ddlBookingType.Enabled = false;
                        txtFromAddress.BackColor = Color.Gainsboro;
                        txtToAddress.BackColor = Color.Gainsboro;
                        ddlCustomerName.BackColor = Color.Gainsboro;
                        txtCustomerMobileNo.BackColor = Color.Gainsboro;
                        txtCustomerPhoneNo.BackColor = Color.Gainsboro;
                        txtEmail.BackColor = Color.Gainsboro;
                    }


                }



                if (this.openedFrom == 1)
                {
                    btnMultiBooking.Visible = false;
                    btnMultiVehicle.Visible = false;
                    ddlDriver.Enabled = false;
                    chkAllocateDriver.Enabled = false;
                    opt_one.Enabled = false;
                    opt_return.Enabled = false;
                    opt_waitreturn.Enabled = false;
                    chkQuotation.Enabled = false;
                }


                if (objMaster.Current.DriverId != null &&
                    (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED
                    || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.FOJ
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.PENDING_START))
                {
                    ddlDriver.Enabled = false;
                    chkAllocateDriver.Enabled = false;

                    if (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.PENDING && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.PENDING_START)
                    {
                        btnTrackDriver.Visible = true;

                        btnTrackDriver.Click += new EventHandler(btnTrackDriver_Click);

                    }
                }



                if (objMaster.Current.TipAmount.ToDecimal() != 0)
                {
                    try
                    {
                        txtPromotion.Text = "|  Updated Promotion : £" + (objMaster.Current.TipAmount.ToDecimal() < 0 ? -objMaster.Current.TipAmount.ToDecimal() : objMaster.Current.TipAmount.ToDecimal());

                        if (btnSetFares.Visible)
                            btnSetFares.Visible = false;
                    }
                    catch
                    {

                    }
                }





                txtPaymentReference.Text = objMaster.Current.PaymentComments.ToStr().Trim();
                chkQuotedPrice.Checked = objMaster.Current.IsQuotedPrice.ToBool();




                chkPermanentCustNotes.Checked = objMaster.Current.NoOfChilds.ToInt() == 1 ? true : false;


                IsDisplayingRecord = false;

                DisplayCourierSignature();





                if (objMaster.Current.DriverId != null)
                {
                    this.btnViewMapReport.Click += new System.EventHandler(this.btnJobRoutePath_Click);
                    btnViewMapReport.Visible = true;

                }

                btnAttributes.Text += objMaster.Current.AttributeValues.ToStr().Trim().Length > 0 ? Environment.NewLine + objMaster.Current.AttributeValues.ToStr().Trim().TrimStart(new char[] { ',' }).TrimEnd(new char[] { ',' }) : "";
                btnAttributes.Tag = objMaster.Current.AttributeValues.ToStr().Trim();

                btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                {
                    //   chkPermanentCustNotes.Checked = true;
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        var excludedDrvs = btnExcludeDrivers.Tag.ToStr().Trim().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);



                        var drivers = string.Join(",", (from a in db.Fleet_Drivers

                                                            // join b in excludedDrvs on a.Id equals b
                                                        where a.IsActive == true && excludedDrvs.Contains(a.Id.ToString())
                                                        select a.DriverNo).ToArray<string>());


                        btnExcludeDrivers.Text += Environment.NewLine + drivers;
                        //btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                    }
                }


                btnPasteBooking.Visible = false;
                c = new System.Windows.Forms.ContextMenuStrip();
                c.Items.Add("Job Receipt", null, JobReport_Click);
                //   c.Items.Add("Job Receipt", null, menu_JobReceipt_Click);
                btnJobInformation.ContextMenuStrip = c;







                if (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED
              || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED
              || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP)
                {
                    //     chkDisableDriverSMS.Enabled = false;
                    //    chkDisablePassengerSMS.Enabled = false;

                    chkQuotation.Enabled = false;

                    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" && (c.functionId == "LOCK BOOKING AFTER TRANSACTION")) > 0)
                    {

                        long bookingId = objMaster.Current.Id;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            if (db.Fleet_DriverCommision_Charges.Count(c => c.BookingId == bookingId) > 0 || db.DriverRent_Charges.Count(c => c.BookingId == bookingId) > 0)
                            {

                                btnPickFares.Enabled = false;
                                // btnSaveNew.Enabled = false;
                                btnCancelBooking.Enabled = false;
                                btnMultiVehicle.Enabled = false;
                                btnMultiBooking.Enabled = false;
                                btnAccountCode.Enabled = false;
                                btnCustomerLister.Enabled = false;
                                btnExcludeDrivers.Enabled = false;
                                btnAttributes.Enabled = false;
                                //btnPickAccountBooking.Enabled = false;
                                btnSearch.Enabled = false;

                                chkIsCompanyRates.Enabled = false;
                                // ddlCompany.Enabled = false;
                                ddlCompany.Validating += DdlCompany_Validating;
                                numBookingFee.Enabled = false;
                                DisableFieldsForDriverInvoice();
                                btnPickFares.Enabled = false;
                                IsAllowUpdating = false;
                                ddlPaymentType.Enabled = false;
                            }


                            if (objMaster.Current.CompanyId != null && db.Invoice_Charges.Count(c => c.BookingId == bookingId) > 0)
                            {
                                btnPickFares.Enabled = false;
                                btnSaveNew.Enabled = false;
                                btnCancelBooking.Enabled = false;
                                btnMultiVehicle.Enabled = false;
                                btnMultiBooking.Enabled = false;
                                btnAccountCode.Enabled = false;
                                btnCustomerLister.Enabled = false;
                                btnExcludeDrivers.Enabled = false;
                                btnAttributes.Enabled = false;
                                //btnPickAccountBooking.Enabled = false;
                                btnSearch.Enabled = false;

                                chkIsCompanyRates.Enabled = false;
                                ddlCompany.Enabled = false;
                                IsAllowUpdating = false;
                                numBookingFee.Enabled = false;
                                ddlPaymentType.Enabled = false;
                                DisableFieldsForCompanyInvoice();
                            }
                        }

                    }
                    else
                    {

                        if (AppVars.ShowSetFareValue == 0)
                        {

                            if (objMaster.Current.IsProcessed.ToBool())
                            {




                                ddlVehicleType.Enabled = false;
                                if (ddlReturnVehicleType != null)
                                    ddlReturnVehicleType.Enabled = false;

                                dtpPickupDate.Enabled = false;
                                dtpPickupTime.Enabled = false;


                                if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                                {
                                    dtpReturnPickupDate.Enabled = false;
                                    dtpReturnPickupTime.Enabled = false;
                                }

                                numFareRate.Enabled = false;

                                if (numCompanyFares != null)
                                    numCompanyFares.Enabled = false;
                                numBookingFee.Enabled = false;
                                numParkingChrgs.Enabled = false;
                                numWaitingChrgs.Enabled = false;
                                numExtraChrgs.Enabled = false;
                                numMeetCharges.Enabled = false;
                                numCongChrgs.Enabled = false;

                                txtFromAddress.ReadOnly = false;
                                txtToAddress.ReadOnly = false;


                                btnSaveNew.Enabled = false;
                                btnCancelBooking.Enabled = false;
                            }
                        }
                    }

                }

                chkSurge.Checked = objMaster.Current.EnableFareMeter.ToBool();


                if (chkSurge.Checked)
                {
                    if (objMaster.Current.NotesString.ToStr().IsNumeric())
                    {
                        chkSurge.Text = "Surge " + string.Format("{0:f1}", objMaster.Current.NotesString.ToDecimal()) + "X";
                        chkSurge.Tag = objMaster.Current.NotesString.ToStr();
                    }
                }
                else
                    chkSurge.Text = "Surge ";



                if (txtCustomerMobileNo.Text.Trim().Length > 0 || txtCustomerPhoneNo.Text.Trim().Length > 0)
                {
                    btnCall.Visible = AppVars.listUserRights.Count(c => c.functionId.ToUpper() == "CLICK TO CALL") > 0;
                }


                chkMiles.Checked = objMaster.Current.ApplyServiceCharges.ToBool();
                numMiles.Value = objMaster.Current.TotalTravelledMiles.ToDecimal();

                //Refund Work KonnectPay
                if ((objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP
                    || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.COMPLETED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED)
                    && ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID && objMaster.Current.BookingPayment?.PaymentGatewayId == 15)
                {
                    btnRefundKP.Visible = true;
                    btnRefundKP.BringToFront();

                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
                IsDisplayingRecord = false;

            }

        }
        public void CheckIfCardIsRegisteredKP(string customerMobileNumber)
        {
            lblCardIsRegisteredKP.Visible = false;


            if (customerMobileNumber.ToStr().Trim().Length == 0)
                return;

            // List<ClsCCDetails> ccList = new List<ClsCCDetails>();
            //Customer Customerobj = General.GetObject<Customer>(c => c.MobileNo == customerMobileNumber.ToStr());

            //if (Customerobj != null && (Customerobj?.CreditCardDetails.ToStr().Length > 0 && Customerobj.CreditCardDetails.ToStr().ToLower().StartsWith("cus_")))
            // {
            //     using (TaxiDataContext db = new TaxiDataContext())
            //     {
            //         ccList = db.ExecuteQuery<ClsCCDetails>("select RecordId=Id,CCDetails,IsDefault from Customer_CCDetails where customerId=" + Customerobj.Id).ToList();

            //     }
            //     if (ccList.Count > 0)
            //     {
            //         lblCardIsRegisteredKP.Text = "Card is registered for this customer!";
            //         lblCardIsRegisteredKP.Visible = true;
            //     }
            // }


            CheckCardDetails();
        }

        private void CheckCardDetails()
        {
            try
            {
                pic_card.Visible = false;
                if (true)
                {

                    string mobileNo = txtCustomerMobileNo.Text.Trim();
                    string phoneNo = txtCustomerPhoneNo.Text.Trim();
                    string email = txtEmail.Text.Trim();


                    if (mobileNo.Length == 0 && phoneNo.Length == 0 && email.Length == 0)
                        return;

                    if (mobileNo.Length > 0 && mobileNo.Length < 11 && phoneNo.Length == 0 && email.Length == 0)
                        return;

                    if (phoneNo.Length > 0 && phoneNo.Length < 11 && mobileNo.Length == 0 && email.Length == 0)
                        return;


                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        Customer objCust = null;

                        db.DeferredLoadingEnabled = true;


                        if (objCust == null && mobileNo.Length > 0)
                        {
                            objCust = db.Customers.Where(c => c.MobileNo == mobileNo
                            && (c.CreditCardDetails != null && c.CreditCardDetails != "")).FirstOrDefault();

                        }

                        if (objCust == null && phoneNo.Length > 0)
                        {
                            objCust = db.Customers.Where(c => c.TelephoneNo == phoneNo
                               && (c.CreditCardDetails != null && c.CreditCardDetails != "")).FirstOrDefault();

                        }


                        if (objCust == null && email.Length > 0)
                        {
                            objCust = db.Customers.Where(c => c.Email == email
                               && (c.CreditCardDetails != null && c.CreditCardDetails != "")).FirstOrDefault();

                        }


                        if (objCust == null)
                        {
                            var Ids = db.Customers.Where(c => (email.Length > 0 && c.Email == email) || (mobileNo.Length > 0 && c.MobileNo == mobileNo) || (phoneNo.Length > 0 && c.TelephoneNo == phoneNo))

                                .Select(c => c.Id).ToArray<int>();


                            if (Ids.Count() > 0)
                            {
                                string str = "(" + string.Join(",", Ids) + ")";


                                var custIds = db.ExecuteQuery<int>("select CustomerId from  CUSTOMER_ccdetails where customerId in " + str).Distinct().ToList();


                                if (custIds.Count == 0)
                                    objCust = null;
                                else
                                {
                                    foreach (var item in custIds)
                                    {
                                        objCust = db.Customers.FirstOrDefault(c => c.Id == item);

                                        if (objCust != null)
                                            break;

                                    }
                                }
                            }

                        }


                        if (objCust != null)
                        {

                            var ccList = db.ExecuteQuery<int>("select count(*) from  CUSTOMER_ccdetails where customerId=" + objCust.Id).FirstOrDefault();
                            string cardTokenDetails = objCust.CreditCardDetails.ToStr().Trim();

                            if (ccList > 0 || objCust.CreditCardDetails.ToStr().Trim().Length > 0)
                            {



                                pic_card.Visible = true;
                                this.pic_card.Image = global::Taxi_AppMain.Properties.Resources.cc3;

                                string carddetails = string.Empty;

                                if (ccList > 0)
                                {

                                    var arr = db.ExecuteQuery<string>("select distinct ccdetails from  CUSTOMER_ccdetails where customerId=" + objCust.Id).ToArray<string>();

                                    foreach (var item in arr)
                                    {
                                        if (item.ToLower().StartsWith("token"))
                                        {

                                            carddetails += (item.Split(new string[] { "<<<" }, StringSplitOptions.RemoveEmptyEntries)[3] + "," + item.Split(new string[] { "<<<" }, StringSplitOptions.RemoveEmptyEntries)[4]).Replace("lastfour|", "**").Trim().Replace("enddate|", " Expiry:") + Environment.NewLine;

                                        }
                                        else if (item.ToStr().StartsWith("KonnectPayToken"))
                                        {
                                            carddetails += (item.Split('|')[1].Remove(item.Split('|')[1].LastIndexOf(','))).Replace("last four :", "**").Trim().Replace("expiry :", " ") + Environment.NewLine;


                                        }

                                    }

                                    pic_card.Tag = carddetails;

                                    if (pic_card.Text.ToStr().Trim().Length == 0)
                                    {
                                        pic_card.Text = "1";
                                        pic_card.MouseHover += Pic_card_MouseHover;
                                        pic_card.MouseLeave += Pic_card_MouseLeave;
                                    }
                                }
                                else
                                {
                                    if (objCust.CreditCardDetails.ToStr().Trim().ToLower().StartsWith("token"))
                                    {

                                        carddetails = (objCust.CreditCardDetails.ToStr().Trim().Split(new string[] { "<<<" }, StringSplitOptions.RemoveEmptyEntries)[3] + "," + objCust.CreditCardDetails.ToStr().Trim().Split(new string[] { "<<<" }, StringSplitOptions.RemoveEmptyEntries)[4]).Replace("lastfour|", "**").Trim().Replace("enddate|", " Expiry:") + Environment.NewLine;

                                    }
                                    else if (objCust.CreditCardDetails.ToStr().Trim().ToStr().StartsWith("KonnectPayToken"))
                                    {
                                        carddetails = (objCust.CreditCardDetails.ToStr().Trim().Split('|')[1].Remove(objCust.CreditCardDetails.ToStr().Trim().Split('|')[1].LastIndexOf(','))).Replace("last four :", "**").Trim().Replace("expiry :", " ");


                                    }


                                    pic_card.Tag = carddetails;

                                    if (pic_card.Text.ToStr().Trim().Length == 0)
                                    {
                                        pic_card.Text = "1";
                                        pic_card.MouseHover += Pic_card_MouseHover;
                                        pic_card.MouseLeave += Pic_card_MouseLeave;
                                    }
                                    // carddetails = objCust.CreditCardDetails.ToStr().Trim();


                                }

                            }




                        }
                        else
                            pic_card.Visible = false;

                    }

                }

            }
            catch
            {

            }

        }

        private void Pic_card_MouseLeave(object sender, EventArgs e)
        {
            lblCardIsRegisteredKP.Text = string.Empty;
            lblCardIsRegisteredKP.Visible = false;
        }

        private void Pic_card_MouseHover(object sender, EventArgs e)
        {
            lblCardIsRegisteredKP.Text = pic_card.Tag.ToStr().Trim();
            lblCardIsRegisteredKP.Visible = true;


        }

        private void DdlCompany_Validating(object sender, CancelEventArgs e)
        {
            try
            {
                if (ddlCompany.SelectedValue.ToInt() == 0)
                {
                    MessageBox.Show("Required : Account");
                    e.Cancel = true;

                }
            }
            catch
            {

            }
        }






        private void DisplayCourierSignature()
        {


            if (objMaster.Current.Booking_CourierSignatures != null && objMaster.Current.Booking_CourierSignatures.CourierSignature.Length > 1)
            {



                if (objMaster.Current.Booking_CourierSignatures.CourierSignature != null)
                {
                    InitializeCourierPanel();


                    pic_Signature.Image = General.byteArrayToImage(objMaster.Current.Booking_CourierSignatures.CourierSignature.ToArray());


                    if (objMaster.Current.Booking_CourierSignatures.SignatureDateTime != null)
                        txtCourierSignedOn.Text = "Signed on :" + string.Format("{0:dd/MM/yyyy HH:mm}", objMaster.Current.Booking_CourierSignatures.SignatureDateTime);

                }




            }

        }



        private void InitializeCourierPanel()
        {


            this.pnlSignature = new System.Windows.Forms.Panel();
            this.tableLayoutPanel1.Controls.Add(this.pnlSignature, 1, 0);
            // 
            // pnlSignature
            // 
            this.pnlSignature.Dock = System.Windows.Forms.DockStyle.Fill;
            this.pnlSignature.Location = new System.Drawing.Point(911, 3);
            this.pnlSignature.Name = "pnlSignature";

            this.pnlSignature.Size = new System.Drawing.Size(370, 469);
            this.pnlSignature.TabIndex = 108;
            // this.tabNearestDrivers.Controls.Add(this.webBrowser1);
            //  tableLayoutPanel1.Visible = false;

            this.pic_Signature = new System.Windows.Forms.PictureBox();
            this.lblCourierHeader = new System.Windows.Forms.Label();
            this.txtCourierSignedOn = new System.Windows.Forms.Label();


            this.pnlSignature.Controls.Add(this.txtCourierSignedOn);
            this.pnlSignature.Controls.Add(this.lblCourierHeader);
            this.pnlSignature.Controls.Add(this.pic_Signature);


            ((System.ComponentModel.ISupportInitialize)(this.pic_Signature)).BeginInit();
            // 
            // pic_Signature
            // 
            this.pic_Signature.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.pic_Signature.Location = new System.Drawing.Point(5, 220);
            this.pic_Signature.Name = "pic_Signature";
            this.pic_Signature.Size = new System.Drawing.Size(278, 151);
            this.pic_Signature.SizeMode = System.Windows.Forms.PictureBoxSizeMode.StretchImage;
            this.pic_Signature.TabIndex = 266;
            //   pic_Signature.BackColor = Color.Black;
            this.pic_Signature.TabStop = false;
            // 
            // lblCourierHeader
            // 
            this.lblCourierHeader.BackColor = System.Drawing.Color.Crimson;
            this.lblCourierHeader.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.lblCourierHeader.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblCourierHeader.ForeColor = System.Drawing.Color.White;
            this.lblCourierHeader.Location = new System.Drawing.Point(5, 200);
            this.lblCourierHeader.Name = "lblCourierHeader";
            this.lblCourierHeader.Size = new System.Drawing.Size(278, 22);
            this.lblCourierHeader.TabIndex = 267;
            this.lblCourierHeader.Text = "Customer Signature";
            this.txtCourierSignedOn.TextAlign = System.Drawing.ContentAlignment.TopCenter;
            // 
            // txtCourierSignedOn
            // 
            this.txtCourierSignedOn.BackColor = System.Drawing.Color.Crimson;
            this.txtCourierSignedOn.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
            this.txtCourierSignedOn.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtCourierSignedOn.ForeColor = System.Drawing.Color.White;
            this.txtCourierSignedOn.Location = new System.Drawing.Point(5, 370);
            this.txtCourierSignedOn.Name = "txtCourierSignedOn";
            this.txtCourierSignedOn.Size = new System.Drawing.Size(278, 22);
            this.txtCourierSignedOn.TabIndex = 268;
            this.txtCourierSignedOn.Text = "Signed On :";
            this.txtCourierSignedOn.TextAlign = System.Drawing.ContentAlignment.TopCenter;


            ((System.ComponentModel.ISupportInitialize)(this.pic_Signature)).EndInit();
        }



        delegate void DisplayMilesHandler();


        private void DisplayBooking_ViaLocations()
        {
            if (objMaster.Current.Booking_ViaLocations.Count > 0)
            {
                CreateViaPanel();



                GridViewRowInfo row = null;
                foreach (var item in objMaster.Current.Booking_ViaLocations)
                {
                    row = grdVia.Rows.AddNew();
                    row.Cells["ID"].Value = item.Id;
                    row.Cells["MASTERID"].Value = item.BookingId;
                    //   row.Cells["FROMTYPELABEL"].Value = "Via";
                    row.Cells["FROMTYPELABEL"].Value = item.ViaLocTypeLabel;
                    row.Cells["FROMTYPEVALUE"].Value = item.ViaLocTypeValue;
                    row.Cells["FROMVIALOCTYPEID"].Value = item.ViaLocTypeId;

                    row.Cells["VIALOCATIONID"].Value = item.ViaLocId;
                    row.Cells["VIALOCATIONLABEL"].Value = item.ViaLocLabel;
                    row.Cells["VIALOCATIONVALUE"].Value = item.ViaLocValue;

                }

                ClearViaDetails();


                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                btnSelectVia.BackColor = Color.DarkOrange;
                //  btnSelectVia.NumberOfColors = 1;

            }

        }


        #endregion

        private void opt_JOneWay_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {



            if (CheckReturnBooking(args.NewValue) == false)
                args.Cancel = true;

            //   FocusToPassenger();
            //  FocusOnCustomer();
        }

        private void FocusToPassenger()
        {

            //num_TotalPassengers.Focus();
            num_TotalPassengers.Select();
        }




        private bool CheckReturnBooking(ToggleState toggle)
        {
            bool rtn = true;

            try
            {
                if (objMaster.PrimaryKeyValue != null && objMaster.Current.BookingReturns.Count > 0 && toggle == ToggleState.On)
                {
                    if (DialogResult.OK == MessageBox.Show("There is a Return Job '" + objMaster.Current.BookingReturns.FirstOrDefault().DefaultIfEmpty().BookingNo
                                                        + "' exist against this Job" + Environment.NewLine
                                                        + "If you press OK then Return Job will be delete" + Environment.NewLine
                                                        + "Are you sure you want to Delete its Return Job?", "Booking and Dispatch System"
                                                            , MessageBoxButtons.OKCancel, MessageBoxIcon.Warning))
                    {

                        new TaxiDataContext().stp_DeleteFullReturnBooking(objMaster.Current.BookingReturns.FirstOrDefault().DefaultIfEmpty().MasterJobId, true);

                        //  new TaxiDataContext().stp_DeleteReturnBooking(objMaster.Current.BookingReturns.FirstOrDefault().DefaultIfEmpty().MasterJobId);

                    }
                    else
                    {
                        rtn = false;

                    }


                }
            }
            catch (Exception ex)
            {
                rtn = false;
                ENUtils.ShowMessage(ex.Message);

            }

            return rtn;


        }


        private void SetJourneyWise(ToggleState toggle)
        {


            if (toggle == ToggleState.On)
            {

                if (dtpReturnPickupTime != null)
                {

                    //lblReturnDriver.Visible = false;
                    //ddlReturnDriver.Visible = false;


                    //ddlReturnDriver.Text = "";
                    //fwd00

                    lblReturnPickupDate.Visible = false;
                    lblReturnPickupTime.Visible = false;
                    dtpReturnPickupDate.Visible = false;
                    dtpReturnPickupTime.Visible = false;
                    //  dtpReturnPickupDate.Value = null;
                    //  dtpReturnPickupTime.Value = null;


                    lblReturnCustFare.Visible = false;
                    numReturnBookingFee.Visible = false;

                    if (txtReturnSpecialReq != null)
                    {
                        lblReturnSpecialReq.Visible = false;
                        txtReturnSpecialReq.Visible = false;
                    }


                    if (ddlReturnVehicleType != null)
                    {
                        lblReturnVehicle.Visible = false;
                        ddlReturnVehicleType.Visible = false;
                    }


                    if (lblRetFares != null)
                    {
                        //fwdkh
                        // lblRetFares.Visible = false;
                        //numReturnFare.Visible = false;
                        numReturnFare.Enabled = false;




                    }


                }

                if (lblRetFares != null)
                {
                    numReturnFare.Enabled = false;
                    numReturnFare.Value = 0;
                }

                if (numReturnCompanyFares != null)
                {
                    numReturnCompanyFares.Enabled = false;

                }


                //  btn_notes.Location = new Point(749, 282);
                // pnlAutoDespatch.Location = new Point(749, 332);



                ddlPickupPlot.Visible = true;
                ddlDropOffPlot.Visible = true;
                lblPickupPlot.Text = "";
                lblDropOffPlot.Text = "";
                //  btnReturnFrom.Visible = false;
                // btnReturnTo.Visible = false;

                if (txtReturnFrom != null)
                {
                    txtReturnFrom.Visible = false;
                    lblretfrom.Visible = false;
                }
                txtFromAddress.Width = 465;

                if (txtReturnTo != null)
                {
                    txtReturnTo.Visible = false;
                    lblretto.Visible = false;
                }

                txtToAddress.Width = 465;
                lblReturnAddress.Visible = false;

                if (txtOrderNo != null && txtOrderNo.Visible == true && txtPupilNo != null)
                {
                    lblPupilNo.Visible = false;
                    txtPupilNo.Visible = false;

                }

            }
            else
            {
                InitializeReturnPanel();


                //  ddlPickupPlot.Visible = false;
                //   ddlDropOffPlot.Visible = false;
                lblPickupPlot.Text = "Return To";
                lblDropOffPlot.Text = "Return From";


                //lblReturnDriver.Visible = true;
                //ddlReturnDriver.Visible = true;

                //ddlReturnDriver.Text = "";
                //fwd00

                lblReturnPickupDate.Visible = true;
                lblReturnPickupTime.Visible = true;

                dtpReturnPickupDate.Visible = true;
                dtpReturnPickupTime.Visible = true;


                if (numBookingFee.Visible)
                {
                    lblReturnCustFare.Visible = true;
                    numReturnBookingFee.Visible = true;
                }


                if (AppVars.objPolicyConfiguration.ShowBlankPickupDateAsDefault.ToBool() == false)
                {
                    dtpReturnPickupDate.Value = dtpPickupDate.Value.ToDate();
                    dtpReturnPickupTime.Value = DateTime.Now;
                }


                if (lblRetFares != null)
                {
                    numReturnFare.Enabled = true;


                    lblRetFares.Visible = true;
                    numReturnFare.Visible = true;



                }
                if (numReturnCompanyFares != null)
                {
                    numReturnCompanyFares.Enabled = true;

                    lblReturnCompanyPrice.Visible = true;
                    numReturnCompanyFares.Visible = true;
                }

                //  btn_notes.Location = new Point(749, 222);
                //  pnlAutoDespatch.Location = new Point(749, 282);


                if (txtReturnSpecialReq != null)
                {

                    lblReturnSpecialReq.Visible = true;
                    txtReturnSpecialReq.Visible = true;
                }


                if (ddlReturnVehicleType != null)
                {
                    if (ddlReturnVehicleType.DataSource == null)
                    {
                        try
                        {
                            ComboFunctions.FillCombo(Program.dtCombos.Tables[4].Copy(), ddlReturnVehicleType, "VehicleType", "Id");
                            ddlReturnVehicleType.SelectedIndex = -1;

                            if (objMaster.PrimaryKeyValue == null)
                                this.ddlReturnVehicleType.SelectedValueChanged += ddlReturnVehicleType_SelectedValueChanged;
                        }
                        catch
                        {


                        }
                    }
                    // ComboFunctions.FillVehicleTypeCombo(ddlReturnVehicleType);


                    if (ddlReturnVehicleType.SelectedValue == null)
                    {
                        if (ddlVehicleType.SelectedValue != null)
                        {
                            ddlReturnVehicleType.Tag = 1;
                            ddlReturnVehicleType.SelectedValue = ddlVehicleType.SelectedValue;
                            ddlReturnVehicleType.Tag = null;
                        }


                    }
                    lblReturnVehicle.Visible = true;
                    ddlReturnVehicleType.Visible = true;


                }


                if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {

                    if (ddlReturnFromAirport != null)
                    {

                        SetReturnFrom(ToggleState.Off);


                    }

                }
                else
                {
                    SetReturnFrom(ToggleState.Off);

                }

                if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {

                    SetReturnTo(ToggleState.Off);


                }
                else
                {

                    SetReturnTo(ToggleState.Off);
                }



                if (txtOrderNo != null && txtOrderNo.Visible == true && txtPupilNo != null)
                {
                    //lblPupilNo.Visible = true;
                    // txtPupilNo.Visible = true;

                    txtPupilNo.AutoCompleteCustomSource.Clear();
                    txtPupilNo.AutoCompleteCustomSource.AddRange(txtOrderNo.AutoCompleteCustomSource.OfType<string>().ToArray<string>());
                    txtPupilNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                    txtPupilNo.AutoCompleteSource = AutoCompleteSource.CustomSource;
                }
            }


        }

        private void chkIsCompanyRates_CheckedChanged(object sender, EventArgs args)
        {
            UseCompanyRates(chkIsCompanyRates.Checked ? ToggleState.On : ToggleState.Off);
        }

        private void UseCompanyRates(ToggleState toggle)
        {

            try
            {

                if (toggle == ToggleState.On)
                {
                    if (numCompanyFares != null)
                        numCompanyFares.Enabled = true;

                    if (numReturnCompanyFares != null)
                        numReturnCompanyFares.Enabled = true;
                    if (ddlCompany.DataSource == null)
                    {
                        if (AppVars.listUserRights.Count(x => x.functionId == "HIDE COMPANY PRICE") == 0)
                            InitializeCompanyPrice();


                        this.ddlCompany.InitializeSettings(pnlAutoDespatch);


                        if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() == false || objMaster.Current != null)
                        {

                            ComboFunctions.FillCompanyComboX(ddlCompany);
                            ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                        }
                        else
                        {
                            if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() == true && objMaster.Current == null &&
                                AppVars.listUserRights.Count(c => c.functionId == "Disable AutoSelect Account") > 0)
                            {
                                ComboFunctions.FillCompanyComboX(ddlCompany);
                                ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                            }

                        }

                    }

                    //   SetAccountPaymentType();

                    if (numCompanyFares != null)
                        numCompanyFares.Enabled = true;



                    if (AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId != null && ddlVehicleType.SelectedValue.ToInt() != AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId.ToInt())
                    {
                        SetDefaultVehicleType(AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId.ToInt());
                    }


                    EnableAccCharges(true);
                }
                else
                {
                    if (numCompanyFares != null)
                    {
                        numCompanyFares.Enabled = false;
                        numReturnCompanyFares.Enabled = false;
                    }

                    //  SetCashPaymentType();

                    if (pnlOrderNo != null)
                    {
                        txtOrderNo.Text = string.Empty;
                        txtPupilNo.Text = string.Empty;
                        pnlOrderNo.Visible = false;
                    }

                    if (numCompanyFares != null)
                    {
                        numCompanyFares.Value = 0;
                        numCompanyFares.Enabled = false;
                    }


                    if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                    {
                        if (ddlPaymentType.Enabled)
                            ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;




                    }

                    ShowAgentDetails(false);
                    ShowPaymentReference();


                    if (AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId != null && ddlVehicleType.SelectedValue.ToInt() != AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt()
                        && ddlVehicleType.SelectedValue.ToInt() == AppVars.objPolicyConfiguration.DefaultAccVehicleTypeId.ToInt())
                    {
                        SetDefaultVehicleType(AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt());
                    }

                    EnableAccCharges(false);

                }





                try
                {

                    if (toggle == ToggleState.Off)
                    {
                        ddlCompany.SelectedIndex = -1;
                        ddlCompany.SelectedIndex = -1;
                    }
                    else
                    {
                        ddlCompany.SelectedValue = ddlCompany.SelectedValue;
                    }
                }
                catch
                {

                }

                ddlCompany.Enabled = toggle == ToggleState.On;
                InstallEventHandlers(this);
            }
            catch
            {


            }
        }

        private void InitializeCompanyPrice()
        {
            if (lblCompanyPrice != null)
                return;

            try
            {

                this.lblCompanyPrice = new Label();
                this.numCompanyFares = new NumericUpDown();
                //  ((System.ComponentModel.ISupportInitialize)(this.lblCompanyPrice)).BeginInit();
                //     ((System.ComponentModel.ISupportInitialize)(this.numCompanyFares)).BeginInit();


                // 
                // lblCompanyPrice
                // 
                this.lblCompanyPrice.AutoSize = false;
                this.lblCompanyPrice.BackColor = System.Drawing.Color.Lavender;
                this.lblCompanyPrice.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
                this.lblCompanyPrice.ForeColor = System.Drawing.Color.Black;
                this.lblCompanyPrice.Location = new System.Drawing.Point(205, 8);//(716, 63);
                this.lblCompanyPrice.Name = "lblCompanyPrice";
                pnlFares.Controls.Add(lblCompanyPrice);
                // 
                // 
                // 
                //   this.lblCompanyPrice.RootElement.ForeColor = System.Drawing.Color.Black;
                this.lblCompanyPrice.Size = new System.Drawing.Size(135, 19);
                this.lblCompanyPrice.TabIndex = 242;
                this.lblCompanyPrice.Text = "&Company Price  £";
                this.lblCompanyPrice.Visible = true;
                //  lblCompanyPrice.BackColor = Color.FromArgb(233, 240, 249);
                // 
                // numCompanyFares
                // 
                this.numCompanyFares.DecimalPlaces = 2;
                //   this.numCompanyFares.EnableKeyMap = true;
                this.numCompanyFares.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numCompanyFares.ForeColor = System.Drawing.Color.Red;
                this.numCompanyFares.InterceptArrowKeys = false;
                this.numCompanyFares.Location = new System.Drawing.Point(340, 5);//(854, 61);
                this.numCompanyFares.Maximum = new decimal(new int[] { 99999999, 0, 0, 0 });
                this.numCompanyFares.Name = "numCompanyFares";
                pnlFares.Controls.Add(numCompanyFares);

                InstallEventHandlers(pnlFares);

                this.numCompanyFares.Size = new System.Drawing.Size(65, 24);
                this.numCompanyFares.TabIndex = 241;
                this.numCompanyFares.TabStop = false;
                this.numCompanyFares.Visible = true;

                //    if(AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                this.numCompanyFares.Validated += new EventHandler(numCompanyFares_Validated);

                this.numCompanyFares.Enter += new EventHandler(numCompanyFares_Enter);



                this.radPanel1.Controls.Add(this.lblCompanyPrice);
                this.radPanel1.Controls.Add(this.numCompanyFares);

                this.lblCompanyPrice.BringToFront();
                this.numCompanyFares.BringToFront();



                this.lblReturnCompanyPrice = new Label();
                this.numReturnCompanyFares = new NumericUpDown();

                this.lblReturnCompanyPrice.AutoSize = false;
                this.lblReturnCompanyPrice.BackColor = System.Drawing.Color.Lavender;
                this.lblReturnCompanyPrice.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold);
                this.lblReturnCompanyPrice.ForeColor = System.Drawing.Color.Black;
                this.lblReturnCompanyPrice.Location = new System.Drawing.Point(205, 42);//(702, 93);
                this.lblReturnCompanyPrice.Name = "lblCompanyPrice";
                pnlFares.Controls.Add(lblReturnCompanyPrice);

                this.lblReturnCompanyPrice.Size = new System.Drawing.Size(106, 37);
                this.lblReturnCompanyPrice.TabIndex = 242;
                this.lblReturnCompanyPrice.Text = "Ret. Company Price £";
                this.lblReturnCompanyPrice.Visible = false;
                // lblReturnCompanyPrice.BackColor = Color.FromArgb(233, 240, 249);
                // 
                // numCompanyFares
                // 
                this.numReturnCompanyFares.DecimalPlaces = 2;
                //    this.numReturnCompanyFares.EnableKeyMap = true;
                this.numReturnCompanyFares.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numReturnCompanyFares.ForeColor = System.Drawing.Color.Red;
                this.numReturnCompanyFares.InterceptArrowKeys = false;
                this.numReturnCompanyFares.Location = new System.Drawing.Point(339, 41);//(860, 89);
                this.numReturnCompanyFares.ForeColor = Color.Red;
                pnlFares.Controls.Add(numReturnCompanyFares);
                this.numReturnCompanyFares.Maximum = new decimal(new int[] { 99999999, 0, 0, 0 });
                this.numReturnCompanyFares.Name = "numReturnCompanyFares";
                //  this.numReturnCompanyFares.Controls[0].Visible = false;
                if (AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                    this.numReturnCompanyFares.Validated += new EventHandler(numReturnCompanyFares_Validated);




                this.numReturnCompanyFares.Size = new System.Drawing.Size(65, 24);
                this.numReturnCompanyFares.TabIndex = 241;
                this.numReturnCompanyFares.TabStop = false;
                this.numReturnCompanyFares.Visible = false;


                this.numReturnCompanyFares.Enabled = opt_return.Checked;
                InstallEventHandlers(pnlFares);



                this.radPanel1.Controls.Add(this.lblReturnCompanyPrice);
                this.radPanel1.Controls.Add(this.numReturnCompanyFares);
                InstallEventHandlers(radPanel1);
                this.lblReturnCompanyPrice.BringToFront();
                this.numReturnCompanyFares.BringToFront();
            }
            catch (Exception ex)
            {


            }

        }





        private void SetAccountPaymentType()
        {
            if (ddlPaymentType.Enabled)
                ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.BANK_ACCOUNT;



        }


        private void SetCashPaymentType()
        {

            if (ddlPaymentType.Enabled)
            {
                if (objMaster.PrimaryKeyValue == null)
                {

                    if (AppVars.objPolicyConfiguration.ShowBlankPaymentTypeAsDefault.ToBool() == false)
                        ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;


                    if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() && AppVars.listUserRights.Count(c => c.functionId == "Disable AutoSelect Account") == 0)
                    {

                        foreach (var itemX in ddlPaymentType.Items)
                        {
                            if ((itemX as DataRowView).Row[1].ToStr().ToUpper().Contains("(DEVICE)"))
                            {
                                ddlPaymentType.SelectedItem = itemX;

                            }
                        }



                    }

                }
                else
                {
                    ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CASH;

                }

            }



        }

        bool IsClickableFares = false;
        private void btnPickFares_Click(object sender, EventArgs e)
        {
            if (ddlCompany.SelectedValue.ToInt() != 2)
            {
                ENABLECMACBOOKINGCALCULATION = false;
            }
            IsClickableFares = true;
            CalculateTotalFares();
        }


        private void CalculateTotalFares()
        {

            try
            {

                int? vehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();


                int? fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();

                int? toLocTypeId = ddlToLocType.SelectedValue.ToInt();


                string fromLocName = string.Empty;
                string toLocName = string.Empty;


                if (string.IsNullOrEmpty(fromLocName))
                {
                    fromLocName = txtFromAddress.Text; //txtFromAddress.ListBoxElement.SelectedItem.ToStr().Trim();

                }

                if (string.IsNullOrEmpty(toLocName))
                {
                    toLocName = txtToAddress.Text;//txtToAddress.ListBoxElement.SelectedItem.ToStr().Trim();


                }

                string fromAddress = txtFromAddress.Text.Trim().ToUpper();
                string toAddress = txtToAddress.Text.Trim().ToUpper();
                string fromPostCode = txtFromPostCode.Text.Trim().ToUpper();
                string toPostCode = txtToPostCode.Text.Trim().ToUpper();

                string tempFromPostCode = string.Empty;
                string tempToPostCode = string.Empty;


                if (toLocName.ToStr().Trim().Length > 0 && General.GetPostCodeMatch(toLocName.ToStr().ToUpper().Trim()) == "" && txtToAddress.ListBoxElement.SelectedItem.ToStr().Length > 0 && txtToAddress.ListBoxElement.SelectedItem.ToStr().Contains(toLocName))
                {
                    toLocName = txtToAddress.ListBoxElement.SelectedItem.ToStr();
                    toAddress = toLocName;

                }
                tempFromPostCode = General.GetPostCodeMatch(fromAddress);


                if (string.IsNullOrEmpty(tempFromPostCode) && !string.IsNullOrEmpty(fromLocName))
                    tempFromPostCode = General.GetPostCodeMatch(fromLocName);





                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                {
                    tempToPostCode = General.GetPostCodeMatch(toAddress);


                    if (string.IsNullOrEmpty(tempToPostCode) && !string.IsNullOrEmpty(toLocName))
                        tempToPostCode = General.GetPostCodeMatch(toLocName);
                }
                else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    tempToPostCode = toPostCode;
                }
                else
                {
                    tempToPostCode = General.GetPostCodeMatch(toLocName);
                }


                if (objMaster.PrimaryKeyValue != null && objMaster.Current != null)
                {



                    if ((objMaster.Current.FromAddress.ToStr().ToUpper().Equals(fromAddress)
                        && objMaster.Current.ToAddress.ToStr().ToUpper().Equals(toAddress)) && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                    {

                        if (objMaster.Current.CompanyId != ddlCompany.SelectedValue.ToIntorNull())
                        {
                            IsClickableFares = true;
                        }

                        if (objMaster.Current.VehicleTypeId != ddlVehicleType.SelectedValue.ToIntorNull())
                        {
                            IsClickableFares = true;
                        }

                        if (IsClickableFares == false)
                        {
                            return;
                        }

                    }

                }

                lblMap.Text = string.Empty;

                if (ddlCompany.SelectedValue.ToInt() == 2 && ENABLECMACBOOKINGCALCULATION == true)
                {
                    IsClickableFares = true;
                }
                else
                {
                    IsClickableFares = false;
                    mileageError = false;
                }
                CalculateFares();


                if (worker_fares == null)
                {

                    string via = string.Empty;

                    if (AppVars.objPolicyConfiguration.EnableOfflineDistance.ToBool() == false && grdVia != null && grdVia.Rows.Count > 0)
                    {
                        via = "&waypoints=";
                        via += string.Join("|", grdVia.Rows.Select(c => General.GetPostCodeMatch(c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()) + ", UK").ToArray<string>());
                        estimatedTime = General.CalculateEstimatedTime(tempFromPostCode, tempToPostCode, via);
                    }

                    if (estimatedTime.ToStr().Length > 0)
                        estimatedTime = "Time :" + estimatedTime;

                    lblMap.Text = "Distance : " + string.Format("{0:#.##}", milesList.Sum()) + " miles " + estimatedTime;

                    CalculateTotalCharges();
                }

            }
            catch (Exception ex)
            {

            }
        }





        string estimatedTime = string.Empty;
        string setFareLogMsg = string.Empty;


        private bool ResetFaresOnBlankPaymentType()
        {
            if (ddlCompany.SelectedValue.ToInt() == 2 && ENABLECMACBOOKINGCALCULATION == true)
            {
                numFareRate.Value = 0.00m;
                return true;
            }
            if (ddlCompany.SelectedValue.ToInt() != 0 && ResetAllFares)
                return false;

            if (ddlVehicleType.SelectedValue == null)
                return false;

            if (ddlCompany.SelectedValue.ToInt() != 0 && ddlPaymentType.SelectedValue.ToInt() == 0)
            {

                numFareRate.Value = 0.00m;
                numBookingFee.Value = 0.00m;

                if (numCompanyFares != null)
                    numCompanyFares.Value = 0.00m;


                if (numAgentCommission != null)
                    numAgentCommission.Value = 0.00m;


                if (numReturnFare != null)
                    numReturnFare.Value = 0.00m;


                if (numReturnBookingFee != null)
                    numReturnBookingFee.Value = 0.00m;


                if (numReturnCompanyFares != null)
                    numReturnCompanyFares.Value = 0.00m;

                return false;
            }
            else
                return true;

        }


        private bool CheckCustomJourneyFares(int? fromLocTypeId, int? toLocTypeId, string fromAddress, string toAddress, int? vehicleTypeId)
        {
            //  return false;

            string fromSetFareVal = fromAddress;
            string toSetFareVal = toAddress;

            if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                fromSetFareVal = txtFromPostCode.Text;





            if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                toSetFareVal = txtToPostCode.Text;


            string via = string.Empty;
            if (grdVia != null)
            {
                via = string.Join(",", grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()).ToArray<string>());
            }


            int? tCompanyId = ddlCompany.SelectedValue.ToIntorNull();

            var objCustomFare = General.GetQueryable<Fare_CustomJourney>(c => c.VehicleTypeId == vehicleTypeId

                && (c.Pickup == fromSetFareVal && c.Destination == toSetFareVal)
                && (c.CompanyId == tCompanyId || tCompanyId == null)
                && (c.ViaPoints == via || via == string.Empty)).OrderByDescending(c => c.Id).FirstOrDefault();


            if (objCustomFare != null)
            {
                numFareRate.Value = objCustomFare.DriverFares.ToDecimal();
                numFareRate.BackColor = Color.Pink;

                string msg = "Drv Fare : " + numFareRate.Value;
                if (numReturnFare != null)
                {
                    numReturnFare.Value = objCustomFare.DriverRtnFares.ToDecimal();
                    numReturnFare.BackColor = Color.Pink;

                }

                numBookingFee.Value = objCustomFare.CustomerFares.ToDecimal();
                numBookingFee.BackColor = Color.Pink;
                msg += " , Cust Fare : " + numBookingFee.Value;

                if (numReturnBookingFee != null)
                {
                    numReturnBookingFee.Value = objCustomFare.CustomerRtnFares.ToDecimal();
                    numReturnBookingFee.BackColor = Color.Pink;
                }

                if (numCompanyFares != null)
                {
                    numCompanyFares.Value = objCustomFare.CompanyFares.ToDecimal();
                    numCompanyFares.BackColor = Color.Pink;
                    msg += " , Company Fare : " + numCompanyFares.Value;
                    if (numReturnCompanyFares != null)
                    {
                        numReturnCompanyFares.Value = objCustomFare.CompanyRtnFares.ToDecimal();
                        numReturnCompanyFares.BackColor = Color.Pink;
                    }
                }

                decimal miles = CalculateTotalDistance(fromSetFareVal, via.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToArray<string>(), toSetFareVal);

                milesList.Add(miles);
                if (objMaster.Current == null)
                {
                    setFareLogMsg = "Calculate Fares from (Set Fare : " + msg + ")";
                }
                else
                {
                    UpdateSetFareLog("Calculate Fares from (Set Fare : " + msg + ")");
                }

                return false;

            }
            else
            {
                numFareRate.BackColor = Color.White;
                if (numReturnFare != null)
                    numReturnFare.BackColor = Color.White;

                numBookingFee.BackColor = Color.White;

                if (numReturnBookingFee != null)
                    numReturnBookingFee.BackColor = Color.White;

                if (numCompanyFares != null)
                    numCompanyFares.BackColor = Color.White;

                if (numCompanyFares != null)
                    numReturnCompanyFares.BackColor = Color.White;
                return true;




            }
        }


        private bool HasFareIncrementCharges = true;


        private decimal GetFareIncrementCharges(decimal faresToIncrement, DateTime? datetime)
        {
            if (datetime == null)
                return 0.00m;

            try
            {



                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var objIncList = db.GetTable<Fare_IncrementSetting>().Where(c => c.Id != 0 && c.EnableIncrement != null && c.EnableIncrement == true);


                    int cnt = 0;
                    foreach (var objInc in objIncList.OrderBy(c => c.CriteriaBy))
                    {



                        if (objInc != null)
                        {

                            HasFareIncrementCharges = true;

                            bool IsExist = false;

                            DateTime? pickupDateTime = datetime;
                            pickupDateTime = new DateTime(datetime.Value.Year, datetime.Value.Month, datetime.Value.Day, datetime.Value.Hour, datetime.Value.Minute, 0);

                            if ((objInc.CriteriaBy.ToInt() == 1 && pickupDateTime >= objInc.FromDate && pickupDateTime <= objInc.TillDate)
                            || (objInc.CriteriaBy.ToInt() == 2 && pickupDateTime.ToDate() >= objInc.FromDate.ToDate() && pickupDateTime.ToDate() <= objInc.TillDate.ToDate())
                                )
                            {

                                IsExist = true;

                            }
                            else if (objInc.CriteriaBy.ToInt() == 3)
                            {
                                string str = pickupDateTime.ToDateTime().TimeOfDay.ToStr();

                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();

                                int time = str.ToInt();


                                str = objInc.FromDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int fromTime = str.ToInt();


                                str = objInc.TillDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int toTime = str.ToInt();


                                if (time < 1000)
                                {

                                    // PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // OFF PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                }



                                else if (time >= 1000)
                                {
                                    if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                        else if ((fromTime >= 1000 && toTime < 1000))
                                        {

                                            if (time >= fromTime)
                                            {
                                                IsExist = true;
                                            }
                                        }
                                        else if ((toTime > fromTime && time < (toTime - fromTime))
                                            || (fromTime > toTime && time > (fromTime - toTime)))
                                        {
                                            IsExist = true;

                                        }

                                    }

                                    else if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                    }

                                    else if ((fromTime >= 1000 && toTime < 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime)
                                        {
                                            IsExist = true;
                                        }

                                    }
                                }
                            }
                            else if (objInc.CriteriaBy.ToInt() == 4)
                            {

                                string fromDay = objInc.FromDate.Value.DayOfWeek.ToStr();
                                string toDay = objInc.TillDate.Value.DayOfWeek.ToStr();

                                TimeSpan fromtime = objInc.FromDate.Value.TimeOfDay;
                                TimeSpan tillTime = objInc.TillDate.Value.TimeOfDay;

                                int day = datetime.Value.DayOfWeek.ToInt();

                                if (day == 0)
                                    day = 7;

                                int fromDayId = GetDayId(fromDay);

                                int toDayId = GetDayId(toDay);


                                if ((day >= fromDayId && day <= toDayId)
                                    &&
                                       (datetime.Value.TimeOfDay >= fromtime && (datetime.Value.TimeOfDay <= tillTime))
                                    )
                                {
                                    IsExist = true;


                                }

                            }


                            if (IsExist)
                            {

                                if (objInc.IncrementType.ToLower().ToStr() == "percent")
                                {
                                    faresToIncrement = ((faresToIncrement * objInc.IncrementRate.ToDecimal()) / 100);

                                    if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                    {
                                        faresToIncrement = Math.Ceiling(faresToIncrement);
                                    }
                                }
                                else
                                {
                                    faresToIncrement = objInc.IncrementRate.ToDecimal();
                                }

                                break;
                            }
                            else
                            {

                                cnt++;

                            }
                            //else
                            //{

                            //    faresToIncrement = 0;
                            //}
                        }
                        else
                        {

                            faresToIncrement = 0;
                        }
                    }


                    if (cnt == objIncList.Count())
                    {
                        faresToIncrement = 0;

                    }
                }
            }
            catch (Exception ex)
            {

            }

            return faresToIncrement;

        }


        private void CalculateFares()
        {
            if (ResetFaresOnBlankPaymentType() == false)
                return;



            DateTime bookingDate = DateTime.Now.ToDate();
            int? vehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
            int companyId = ddlCompany.SelectedValue.ToInt();
            int? fromLocationId = null;
            int? fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();


            int? toLocTypeId = ddlToLocType.SelectedValue.ToInt();
            //int? toLocTypeId = 7;//ddlToLocType.SelectedValue.ToInt();



            int? toLocationId = null;

            //string fromLocName = ddlFromLocation.SelectedItem != null ? (ddlFromLocation.SelectedItem as RadComboBoxItem).Text.Trim() : ddlFromLocation.Text.Trim();
            //string toLocName = ddlToLocation.SelectedItem != null ? (ddlToLocation.SelectedItem as RadComboBoxItem).Text.Trim() : ddlToLocation.Text.Trim();

            string fromAddress = txtFromAddress.Text.Trim().ToUpper();
            string toAddress = txtToAddress.Text.Trim().ToUpper();




            if (toAddress.ToLower().Contains("airport"))
            {
                toLocTypeId = 1;
            }
            if (fromAddress.ToLower().Contains("airport"))
            {
                fromLocTypeId = 1;
            }



            if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS && txtFromAddress.Text != null && txtFromAddress.Text.ToStr().Contains(".") && General.GetPostCodeMatch(fromAddress).Contains(" ") == false)
            {

                fromAddress = txtFromAddress.SelectedItem.ToStr().ToUpper().Trim();
            }


            if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS && txtToAddress.Text != null && txtToAddress.Text.ToStr().Contains(".") && General.GetPostCodeMatch(toAddress).Contains(" ") == false)
            {

                toAddress = txtToAddress.SelectedItem.ToStr().ToUpper().Trim();
            }

            if (toAddress.ToStr().Trim().Length > 0 && General.GetPostCodeMatch(toAddress.ToStr().ToUpper().Trim()) == "" && txtToAddress.ListBoxElement.SelectedItem.ToStr().Length > 0 && txtToAddress.ListBoxElement.SelectedItem.ToStr().Contains(toAddress))
            {
                toAddress = txtToAddress.ListBoxElement.SelectedItem.ToStr();


            }


            string fromPostCode = txtFromPostCode.Text.Trim().ToUpper();
            string toPostCode = txtToPostCode.Text.Trim().ToUpper();

            int paymentTypeId = ddlPaymentType.SelectedValue.ToInt();

            milesList.Clear();


            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {

                if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS && string.IsNullOrEmpty(General.GetPostCodeMatch(fromAddress)) && !string.IsNullOrEmpty(txtFromAddress.ListBoxElement.Text))
                    fromAddress = txtFromAddress.ListBoxElement.Text.Trim();


                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS && string.IsNullOrEmpty(General.GetPostCodeMatch(toAddress)) && !string.IsNullOrEmpty(txtToAddress.ListBoxElement.Text))
                    toAddress = txtToAddress.ListBoxElement.Text.Trim();

            }



            if (CheckCustomJourneyFares(fromLocTypeId, toLocTypeId, fromAddress, toAddress) == false)
                return;

            //      if (CheckCustomJourneyFares(fromLocTypeId,toLocTypeId,fromAddress,toAddress,vehicleTypeId) == false)
            //         return;



            int fromZoneId = ddlPickupPlot.SelectedValue.ToInt();
            int toZoneId = ddlDropOffPlot.SelectedValue.ToInt();

            DateTime? pickupdateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
            int orderId = 2;





            int tempFromLocId = 0;
            int tempToLocId = 0;

            decimal deadMileage = AppVars.objPolicyConfiguration.DeadMileage.ToDecimal();

            estimatedTime = string.Empty;
            string errorMsg = string.Empty;
            string tempFromPostCode = string.Empty;
            string tempToPostCode = string.Empty;

            decimal fareVal = 0.00m;


            if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
            {

                if (tempToLocId == 0 && string.IsNullOrEmpty(tempToPostCode))
                {
                    tempFromLocId = fromLocationId.ToInt();

                    tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                }
                else
                {
                    tempFromLocId = tempToLocId;
                    tempFromPostCode = tempToPostCode;

                }

                tempToLocId = toLocationId.ToInt();

                tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;





                // NEW

                if (worker_fares != null && worker_fares.IsBusy)
                    worker_fares.CancelAsync();


                // InitializeFares  background worker
                InitializeFaresWorker();


                bool hasVia = false;

                if (pnlVia != null)
                    hasVia = grdVia.Rows.Count > 0;


                tempFromLocId = fromLocationId.ToInt();

                tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;


                tempToLocId = toLocationId.ToInt();

                tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;


                int defaultVehicleId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                bool IsMoreFareWise = false;



                clsfaresworker cls = new clsfaresworker();
                cls.defaultVehicleId = defaultVehicleId;
                cls.vehicleTypeId = vehicleTypeId;
                cls.fromZoneId = fromZoneId;
                cls.toZoneId = toZoneId;

                cls.IsMoreFareWise = IsMoreFareWise;
                cls.hasVia = hasVia;

                cls.tempFromPostCode = tempFromPostCode;
                cls.tempToPostCode = tempToPostCode;
                //cls.fromLocName = fromLocName;
                // cls.toLocName = toLocName;
                cls.fromPostCode = fromPostCode;
                cls.toPostCode = toPostCode;
                cls.fromLocationId = fromLocationId;
                cls.toLocationId = toLocationId;
                cls.fromLocTypeId = fromLocTypeId;
                cls.toLocTypeId = toLocTypeId;
                cls.fromAddress = fromAddress;
                cls.toAddress = toAddress;
                cls.tempFromLocId = tempFromLocId;
                cls.tempToLocId = tempToLocId;
                cls.CompanyId = companyId;
                cls.PaymentTypeId = paymentTypeId;
                cls.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;


                if (opt_return.Checked)
                {
                    cls.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
                }
                else if (opt_waitreturn.Checked)
                {

                    cls.JourneyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;
                }


                if (hasVia)
                {
                    cls.ViaLocations = (from r in grdVia.Rows
                                        select new ClsViaLocations
                                        {
                                            OrderNo = orderId++,
                                            LocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToInt(),
                                            LocId = r.Cells["VIALOCATIONID"].Value.ToInt(),
                                            ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()
                                        }).ToList();
                }

                //  cls.viaList = hasVia ? grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>() : null;
                cls.SubCompanyId = ddlSubCompany.SelectedValue.ToInt();
                cls.IsReverse = chkReverse.Checked;
                cls.pickupDateTime = dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay;

                if (opt_return.Checked && dtpReturnPickupDate != null && dtpReturnPickupDate.Value != null
                                      && dtpReturnPickupTime != null && dtpReturnPickupTime.Value != null)
                {

                    cls.returnpickupdateTime = dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay;
                    //   returnpickupTime = new TimeSpan(returnpickupdateTime.Value.TimeOfDay.Hours, returnpickupdateTime.Value.Minute, 0);
                    //  returnpickupDay = (int)pickupdateTime.Value.DayOfWeek;
                }



                if (cls.toLocTypeId == Enums.LOCATION_TYPES.ADDRESS && cls.toAddress.ToStr().Trim().ToLower() == "as directed"
                          && numJourneyTime != null)
                {

                    GetFareByJourneyTime(numJourneyTime.Value);
                }
                else
                {

                    DisableCalculateFaresButton();
                    CalculatingFares("inprogress");
                    worker_fares.RunWorkerAsync(cls);
                }

                return;


            }
            else
            {
                int defaultVehicleId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                bool IsMoreFareWise = false;

                bool hasVia = false;
                decimal returnFares = 0.00m;

                if (pnlVia != null)
                {
                    hasVia = grdVia.Rows.Count > 0;
                }


                if (tempToLocId == 0 && string.IsNullOrEmpty(tempToPostCode))
                {
                    tempFromLocId = fromLocationId.ToInt();
                    //if (tempFromLocId != 0)
                    //{
                    //    tempFromPostCode = fromLocName;
                    //}
                    //else
                    tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                }
                else
                {
                    tempFromLocId = tempToLocId;
                    tempFromPostCode = tempToPostCode;

                }

                tempToLocId = toLocationId.ToInt();
                //if (tempToLocId != 0)
                //    tempToPostCode = toLocName;
                //else
                tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;


                if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt() == 1)
                {
                    if (vehicleTypeId != defaultVehicleId)
                    {
                        vehicleTypeId = defaultVehicleId;
                        IsMoreFareWise = true;
                    }

                    if (ddlPickupPlot.SelectedValue == null)
                        fromZoneId = GetZoneId(tempFromPostCode).ToInt();
                    else
                        fromZoneId = ddlPickupPlot.SelectedValue.ToInt();


                    if (ddlDropOffPlot.SelectedValue == null)
                        toZoneId = GetZoneId(tempToPostCode).ToInt();
                    else
                        toZoneId = ddlDropOffPlot.SelectedValue.ToInt();



                    if ((fromZoneId != 0 && toZoneId != 0))
                    {

                        var objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId);

                        if (objPlotFare == null)
                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId);


                        if (objPlotFare != null)
                        {
                            fareVal = objPlotFare.Price.ToDecimal();


                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId);
                            if (objPlotFare == null)
                            {

                                returnFares = fareVal;
                            }
                            else
                                returnFares = objPlotFare.Price.ToDecimal();
                        }


                        milesList.Clear();


                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;

                        }

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                        if (hasVia)
                        {
                            var viaList = grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();
                            milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));

                            fareVal = fareVal + (viaList.Count() * 2.00m);

                        }
                        else
                        {
                            milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                        }
                    }
                    else if (hasVia == false)
                    {
                        var objVeh = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty();
                        decimal startRate = objVeh.StartRate.ToDecimal();
                        decimal startRateMiles = objVeh.StartRateValidMiles.ToDecimal();


                        milesList.Clear();
                        decimal miles = 0.00m;

                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;
                        }


                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        if ((fromZoneId != 0 && toZoneId == 0) || (fromZoneId == 0 && toZoneId != 0))
                        {

                            if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                int? locId = 0;

                                if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                                    locId = fromLocationId;

                                else if (toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                                    locId = toLocationId;


                                fareVal = General.GetObject<Fare_ChargesDetail>(c => c.DestinationId == locId).DefaultIfEmpty().Rate.ToDecimal();
                                returnFares = fareVal;

                                milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                            }
                            else
                            {




                                if ((lastOrigin.Length > 0 && lastDestination.Length > 0
                                   && tempFromPostCode == lastOrigin && tempToPostCode == lastDestination) && lastMileage > 0 && lastJourneyMileage > 0)
                                {


                                    miles = lastMileage;
                                    milesList.Add(lastJourneyMileage);
                                }
                                else
                                {
                                    decimal towntoPickup = General.CalculateDistance("CO1 1PJ", tempFromPostCode);
                                    decimal destToTown = (General.CalculateDistance(tempToPostCode, "CO1 1PJ"));


                                    decimal journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);
                                    milesList.Add(journeyMilage);

                                    //  miles = journeyMilage;
                                    //  miles += (General.CalculateDistance(tempToPostCode, General.GetPostCodeMatch(AppVars.objPolicyConfiguration.BaseAddress.ToStr().ToUpper().Trim())) / 2);

                                    //    miles = invisibileMiles + journeyMilage;

                                    if ((towntoPickup + destToTown) > journeyMilage)
                                    {


                                        miles = (towntoPickup + journeyMilage + destToTown) / 2;
                                    }
                                    else
                                    {
                                        //     miles = journeyMilage;
                                        miles = journeyMilage + ((destToTown) / 2);
                                        // miles = journeyMilage + ((destToTown) / 2);
                                    }


                                    miles = Math.Round(miles, 1);
                                }


                                var fare = new TaxiDataContext().stp_CalculateFares(vehicleTypeId, 0, miles.ToStr());
                                if (fare != null)
                                {
                                    fareVal = startRate + fare.FirstOrDefault().DefaultIfEmpty().totalFares;

                                }

                                returnFares = fareVal;


                                lastOrigin = tempFromPostCode;
                                lastDestination = tempToPostCode;
                                lastMileage = miles;
                                lastJourneyMileage = milesList.Sum();



                            }
                        }
                        else if (fromZoneId == 0 && toZoneId == 0)
                        {


                            tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                            tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                            if ((lastOrigin.Length > 0 && lastDestination.Length > 0
                             && tempFromPostCode == lastOrigin && tempToPostCode == lastDestination) && lastMileage > 0 && lastJourneyMileage > 0)
                            {


                                miles = lastMileage;
                                milesList.Add(lastJourneyMileage);
                            }
                            else
                            {


                                decimal towntoPickup = General.CalculateDistance("CO1 1PJ", tempFromPostCode);
                                decimal destToTown = (General.CalculateDistance(tempToPostCode, "CO1 1PJ"));


                                decimal journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);
                                milesList.Add(journeyMilage);



                                if ((towntoPickup + destToTown) > journeyMilage)
                                {


                                    miles = (towntoPickup + journeyMilage + destToTown) / 2;
                                }
                                else
                                {

                                    miles = journeyMilage + ((destToTown) / 2);
                                    //    miles = journeyMilage;
                                }



                                miles = Math.Round(miles, 1);


                            }

                            var fare = new TaxiDataContext().stp_CalculateFares(vehicleTypeId, 0, miles.ToStr());

                            if (fare != null)
                            {
                                fareVal = startRate + fare.FirstOrDefault().DefaultIfEmpty().totalFares;


                                lastOrigin = tempFromPostCode;
                                lastDestination = tempToPostCode;
                                lastMileage = miles;
                                lastJourneyMileage = milesList.Sum();
                            }


                            returnFares = fareVal;
                            //    }

                        }
                    }

                    else if (hasVia == true)
                    {

                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;

                        }

                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);
                        var viaList = grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();


                        milesList.Clear();

                        var objVeh = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty();
                        decimal startRate = objVeh.StartRate.ToDecimal();

                        decimal miles = 0.00m;

                        if (chkReverse.Checked)
                        {
                            string temp = tempFromPostCode;
                            tempFromPostCode = tempToPostCode;
                            tempToPostCode = temp;


                            temp = fromAddress;
                            fromAddress = toAddress;
                            toAddress = temp;

                        }


                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);


                        decimal towntoPickup = General.CalculateDistance("CO1 1PJ", tempFromPostCode);
                        decimal destToTown = (General.CalculateDistance(tempToPostCode, "CO1 1PJ"));


                        decimal journeyMilage = CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode);
                        milesList.Add(journeyMilage);



                        if ((towntoPickup + destToTown) > journeyMilage)
                        {


                            miles = (towntoPickup + journeyMilage + destToTown) / 2;
                        }
                        else
                        {
                            //  miles = journeyMilage;
                            miles = journeyMilage + ((destToTown) / 2);
                        }



                        miles = Math.Round(miles, 1);

                        var fare = new TaxiDataContext().stp_CalculateFares(vehicleTypeId, 0, miles.ToStr());


                        if (fare != null)
                        {
                            fareVal = fare.FirstOrDefault().DefaultIfEmpty().totalFares;

                            fareVal = startRate + fareVal + (viaList.Count() * 2.00m);

                        }


                        returnFares = fareVal;
                    }


                }



                else
                {
                    try
                    {

                        if (worker_fares != null && worker_fares.IsBusy)
                            worker_fares.CancelAsync();


                        // InitializeFares  background worker
                        InitializeFaresWorker();

                        if (pnlVia != null)
                            hasVia = grdVia.Rows.Count > 0;






                        tempFromLocId = fromLocationId.ToInt();
                        //if (tempFromLocId != 0)
                        //    tempFromPostCode = fromLocName;
                        //else
                        tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;


                        tempToLocId = toLocationId.ToInt();
                        //if (tempToLocId != 0)
                        //    tempToPostCode = toLocName;
                        //else
                        tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;



                        if (ddlPickupPlot.SelectedValue == null)
                            fromZoneId = GetZoneId(tempFromPostCode).ToInt();
                        else
                            fromZoneId = ddlPickupPlot.SelectedValue.ToInt();


                        if (fromZoneId == 0 && fromLocTypeId != Enums.LOCATION_TYPES.ADDRESS && fromLocationId != null && fromLocationId != 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                fromZoneId = db.Gen_Locations.FirstOrDefault(c => c.Id == fromLocationId).DefaultIfEmpty().ZoneId.ToInt();
                            }
                        }


                        if (ddlDropOffPlot.SelectedValue == null)
                            toZoneId = GetZoneId(tempToPostCode).ToInt();
                        else
                            toZoneId = ddlDropOffPlot.SelectedValue.ToInt();



                        if (toZoneId == 0 && toLocTypeId != Enums.LOCATION_TYPES.ADDRESS && toLocationId != null && toLocationId != 0)
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                toZoneId = db.Gen_Locations.FirstOrDefault(c => c.Id == toLocationId).DefaultIfEmpty().ZoneId.ToInt();
                            }
                        }

                        clsfaresworker cls = new clsfaresworker();
                        cls.defaultVehicleId = defaultVehicleId;
                        cls.vehicleTypeId = vehicleTypeId;
                        cls.returnVehicleTypeId = ddlReturnVehicleType != null ? ddlReturnVehicleType.SelectedValue.ToIntorNull() : null;
                        cls.returnActualVehicleTypeId = cls.returnVehicleTypeId;
                        cls.fromZoneId = fromZoneId;
                        cls.toZoneId = toZoneId;
                        cls.CompanyId = companyId;
                        cls.IsMoreFareWise = IsMoreFareWise;
                        cls.hasVia = hasVia;

                        cls.tempFromPostCode = tempFromPostCode;
                        cls.tempToPostCode = tempToPostCode;
                        //  cls.fromLocName = fromLocName;
                        // cls.toLocName = toLocName;
                        cls.fromPostCode = fromPostCode;
                        cls.toPostCode = toPostCode;
                        cls.fromLocationId = fromLocationId;
                        cls.toLocationId = toLocationId;
                        cls.fromLocTypeId = fromLocTypeId;
                        cls.toLocTypeId = toLocTypeId;
                        cls.fromAddress = fromAddress;
                        cls.toAddress = toAddress;
                        cls.tempFromLocId = tempFromLocId;
                        cls.tempToLocId = tempToLocId;
                        cls.manualMiles = chkMiles.Checked ? numMiles.Value : 0.00m;

                        cls.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;


                        if (opt_return.Checked)
                        {
                            cls.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
                        }
                        else if (opt_waitreturn.Checked)
                        {

                            cls.JourneyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;
                        }


                        if (hasVia)
                        {
                            cls.ViaLocations = (from r in grdVia.Rows
                                                select new ClsViaLocations
                                                {
                                                    OrderNo = orderId++,
                                                    LocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToInt(),
                                                    LocId = r.Cells["VIALOCATIONID"].Value.ToInt(),
                                                    ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()
                                                }).ToList();
                        }

                        cls.viaList = hasVia ? grdVia.Rows.Select(a => a.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>() : null;
                        cls.SubCompanyId = ddlSubCompany.SelectedValue.ToInt();
                        cls.IsReverse = chkReverse.Checked;
                        cls.pickupDateTime = (dtpPickupDate.DateTimePickerElement.Value != null ? dtpPickupDate.DateTimePickerElement.Value.ToDate() : dtpPickupDate.Value.ToDate()) + dtpPickupTime.Value.ToDateTime().TimeOfDay;

                        if (opt_return.Checked && dtpReturnPickupDate != null && dtpReturnPickupDate.Value != null
                                              && dtpReturnPickupTime != null && dtpReturnPickupTime.Value != null)
                        {

                            try
                            {
                                cls.returnpickupdateTime = dtpReturnPickupDate.DateTimePickerElement.Value.ToDate() + dtpReturnPickupTime.DateTimePickerElement.Value.ToDateTime().TimeOfDay;

                            }
                            catch
                            {
                                cls.returnpickupdateTime = cls.pickupDateTime;


                            }

                        }

                        if (cls.toLocTypeId == Enums.LOCATION_TYPES.ADDRESS && cls.toAddress.ToStr().Trim().ToLower() == "as directed"
                        && numJourneyTime != null)
                        {

                            GetFareByJourneyTime(numJourneyTime.Value);
                        }
                        else
                        {

                            DisableCalculateFaresButton();
                            CalculatingFares("inprogress");
                            worker_fares.RunWorkerAsync(cls);

                        }
                        //
                    }
                    catch
                    {

                        EnableCalculateFaresButton();

                    }

                }

            }




            //return true;
        }

        private void CalculatingFares(string tag)
        {
            btnPickFares.Tag = tag;


        }


        private void EnableCalculateFaresButton()
        {

            btnPickFares.Enabled = true;
            btnPickFares.Tag = null;
        }


        private void DisableCalculateFaresButton()
        {

            btnPickFares.Enabled = false;
        }


        private bool mileageError = false;

        private string lastOrigin = string.Empty;
        private string lastDestination = string.Empty;
        private decimal lastMileage = 0.00m;
        private decimal lastJourneyMileage = 0.00m;



        private void btnSaveNew_Click(object sender, EventArgs e)
        {






            SaveAndClose();
        }

        private void SaveAndClose()
        {
            if (CheckDefaultValidation())
            {
                if (Save())
                {
                    //  if(result!= DialogResult.Cancel)
                    Close();

                }
            }

        }


        private void UpdateAsDirected()
        {
            txtToAddress.TextChanged -= TextBoxElement_TextChanged;
            txtToAddress.Text = "AS DIRECTED";
            txtToAddress.TextChanged += TextBoxElement_TextChanged;
        }


        private void SendRegisterCardLinkKP()
        {


            if (CheckDefaultValidation())
                Save();
            else
                return;
            string resp = "false";
            try
            {

                Gen_SysPolicy_PaymentDetail obj = General.GetObject<Gen_SysPolicy_PaymentDetail>(c => c.PaymentGatewayId == 13);
                if (obj == null)
                {
                    ENUtils.ShowMessage("K0nneCT Pay Configuration is not defined in Settings!");
                    return;
                }
                int CustID = 0;// Convert.ToInt32(objMaster?.Current?.CustomerId);
                Customer Customerobj = General.GetObject<Customer>(c => c.MobileNo == objMaster.Current.CustomerMobileNo.ToStr() && c.CreditCardDetails != null && c.CreditCardDetails != "");

                if (Customerobj == null)
                {
                    ENUtils.ShowMessage("No data found against this Customer!");
                    return;
                }
                else
                {

                    if (string.IsNullOrEmpty(Customerobj?.Name) || string.IsNullOrEmpty(Customerobj?.MobileNo))
                    {
                        ENUtils.ShowMessage("Required : Mobile No and Customer Name");
                        return;
                    }
                }
                if (CustID == 0) { CustID = Customerobj.Id; }
                string baseUrl = System.Configuration.ConfigurationManager.AppSettings["huburl"].ToStr();
                string StripeCustomerID = string.Empty;
                if (Customerobj.CreditCardDetails.ToStr().ToLower().StartsWith("cus"))
                {
                    StripeCustomerID = Customerobj.CreditCardDetails.ToStr();
                }
                RegisterCardDto SpDTO = new RegisterCardDto();

                SpDTO.key = "";
                SpDTO.secret = "";
                SpDTO.countryId = obj.ApplicationId.ToInt();
                // SpDTO.description = " Registering Card ";
                SpDTO.connectedAccountId = obj.PaypalID.Trim();
                SpDTO.customerName = Customerobj?.Name.Trim() + "/" + CustID.ToString();
                SpDTO.email = objMaster?.Current?.CustomerEmail;
                SpDTO.phoneNumber = Customerobj?.MobileNo.Trim();
                SpDTO.companyName = AppVars.objSubCompany.CompanyName.ToStr();
                SpDTO.defaultClientId = AppVars.objPolicyConfiguration.DefaultClientId;
                SpDTO.location = "UK";// AppVars.objSubCompany.DefaultCounty;
                SpDTO.paymentUpdateWebhook = "";
                SpDTO.UpdatePaymentURL = baseUrl;
                SpDTO.PreAuthUrl = "";
                SpDTO.customerId = StripeCustomerID ?? "";
                SpDTO.sendLinkToCustomer = true;
                SpDTO.DBCustomerID = CustID;
                string sendResponse = SpDTO.RegisterCard(new JavaScriptSerializer().Serialize(SpDTO));
                if (!string.IsNullOrEmpty(sendResponse) && sendResponse.Contains("true"))
                {
                    MessageBox.Show("Register Card link sent to customer!");
                }
                else
                {
                    MessageBox.Show("Error in sending Register card link to customer!");
                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage("Error in Sending register card please try later!");
                resp = "false";
            }
            return;

        }


        private bool CheckDefaultValidation()
        {
            try
            {

                if (objMaster?.Current != null)
                {
                    long bookingId = objMaster.Current.Id;
                    BookingBO bookingObj = new BookingBO();
                    bookingObj.GetByPrimaryKey(bookingId);
                    if (string.IsNullOrEmpty(objMaster?.Current.CustomerCreditCardDetails) && (!string.IsNullOrEmpty(bookingObj?.Current?.CustomerCreditCardDetails) && !bookingObj.Current.CustomerCreditCardDetails.Contains("pi_")))
                    {
                        MessageBox.Show("The payment for this booking is in-process.Please close and open this booking again!");
                        return false;
                    }
                    else if (objMaster?.Current?.BookingPayment == null && ((bookingObj?.Current?.BookingPayment != null && bookingObj?.Current?.BookingPayment?.AuthCode.ToStr().Length > 0)))
                    {
                        MessageBox.Show("The payment for this booking has been successfully processed.Please close and open this booking again!");
                        return false;
                    }
                }




                if (ddlPickupPlot.SelectedValue == null && AppVars.objPolicyConfiguration.AutoCloseDrvPopup.ToBool() && ddlPickupPlot.Tag == null)
                {
                    try
                    {
                        if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
                        {
                            SetPickupZone(txtFromAddress.Text.ToStr().Trim().ToUpper());


                        }

                    }
                    catch
                    {


                    }


                }

                if (CheckOneWayDriverAllocation() == false)
                    return false;




                if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT && ddlCompany.SelectedValue == null)
                {
                    MessageBox.Show("Required : Account");
                    return false;
                }


                if (ddlCompany.SelectedValue != null && ddlPaymentType.Enabled)
                {
                    if (AppVars.listUserRights.Count(c => c.functionId == "VALIDATE ACCOUNT PAYMENT TYPE ON BOOKING") > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            int companyId = ddlCompany.SelectedValue.ToInt();

                            if (db.Gen_Company_PaymentTypes.Where(c => c.CompanyId == companyId).Count() > 0)
                            {
                                int paymenttypeId = ddlPaymentType.SelectedValue.ToInt();

                                int cnt = db.Gen_Company_PaymentTypes.Where(c => c.CompanyId == companyId && c.PaymentTypeId == paymenttypeId).Count();

                                if (cnt == 0)
                                {
                                    ENUtils.ShowMessage("This PaymentType is not available for this Account");

                                    ddlPaymentType.Focus();
                                    return false;
                                }

                            }

                        }
                    }


                }


                if (AppVars.objPolicyConfiguration.PeakTimeIncPercent.ToInt() == 1)
                {
                    if (ddlCustomerName.Text.Trim().Length == 0)
                    {
                        MessageBox.Show("Required : Passenger Name");
                        return false;
                    }
                    if (txtCustomerMobileNo.Text.Trim().Length == 0 && txtCustomerPhoneNo.Text.Trim().Length == 0)
                    {
                        MessageBox.Show("Required : Passenger Contact Number");
                        return false;

                    }
                    if (ddlFromLocType != null && ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT && txtFromFlightDoorNo.Text.Trim().Length == 0)
                    {
                        MessageBox.Show("Required : Flight No");
                        return false;

                    }
                }


                //if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "demojas!")
                //{
                //    if (grdPickupDateTime!=null && grdPickupDateTime.Rows.Count >= 3)
                //    {
                //        MessageBox.Show("Booking Limit Exceeded! You already have " + grdPickupDateTime.Rows.Count + " waiting bookings");
                //        return false;
                //    }
                //}


                if (chkQuotation.Checked && txtEmail.Text.Trim().Length == 0 && AppVars.objPolicyConfiguration.SendDirectBookingConfirmationEmail.ToBool())
                {
                    if (DialogResult.No == MessageBox.Show("Customer Email is required for Quotation Email" + Environment.NewLine + "do you still want to save a booking without Quotation Email ?", "Warning", MessageBoxButtons.YesNo))
                    {
                        return false;
                    }
                }

                if (btnSaveNew.Tag != null)
                {
                    btnSaveNew.Tag = null;
                }

                if (btnPickFares.Tag != null)
                {
                    btnSaveNew.Tag = "wait";
                    //MessageBox.Show("Please wait while system is calculating fares...", "Wait");
                    CustomMsgBox.ShowAutoClosingMessageBox("Please wait while system is calculating fares...", "Wait", 5000);

                    btnSaveNew.Tag = null;

                    if (btnPickFares.Tag != null)
                    {
                        FocusOnFare();

                        return false;
                    }





                }



                if (ddlDriver.Enabled && ddlDriver.SelectedValue != null
                    && (objMaster.Current == null || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.NOSHOW))
                {

                    if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            int driverid = ddlDriver.SelectedValue.ToInt();
                            if (db.Fleet_DriverQueueLists.Where(c => c.Status == true && c.DriverId == driverid
                            && (c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONROUTE || c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ARRIVED || c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.NOTAVAILABLE || c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.SOONTOCLEAR)).Count() > 0)
                            {
                                if (DialogResult.No == MessageBox.Show("Do you want to dispatch as FOJ ?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                                {
                                    return false;
                                }



                            }


                        }
                    }






                }


                if (chkIsCompanyRates.Checked && ddlCompany.SelectedValue.ToInt() == 0)
                {
                    MessageBox.Show("Required : Account");
                    ddlCompany.Focus();
                    return false;

                }
                else
                {
                    if (ddlCompany.SelectedValue.ToIntorNull() != null)
                    {


                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            db.DeferredLoadingEnabled = false;



                            int? companyId = ddlCompany.SelectedValue.ToIntorNull();
                            Gen_Company obj = null;

                            if (txtOrderNo != null && txtOrderNo.Visible == true && txtOrderNo.Text.ToStr().Trim().Length == 0)
                            {
                                obj = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                                if (obj.HasOrderNo.ToBool() && obj.MandatoryOrderNo.ToBool())
                                {
                                    MessageBox.Show("Required : Order No");
                                    return false;
                                }

                            }



                            if (companyId != null && txtAccountBookedBy != null)
                            {
                                if (txtAccountBookedBy.Visible == true)
                                {

                                    if (txtAccountBookedBy.Text.Trim().Length == 0)
                                    {
                                        if (obj == null)
                                            obj = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                                        if (obj.MandatoryOrderNo.ToBool())
                                        {
                                            MessageBox.Show("Required : Booked By");
                                            return false;
                                        }
                                    }
                                    else
                                    {
                                        if (txtAccountBookedBy.AutoCompleteCustomSource.Count > 0 && txtAccountBookedBy.AutoCompleteCustomSource.OfType<string>().Count(c => c.ToLower().Trim() == txtAccountBookedBy.Text.Trim().ToLower()) == 0)
                                        {

                                            MessageBox.Show("Booked By is incorrect");
                                            return false;
                                        }
                                    }

                                }
                            }




                            if (companyId != null && ddlDepartment != null && ddlDepartment.Visible && ddlDepartment.SelectedValue == null
                                && ddlDepartment.Tag != null && ddlDepartment.Tag.ToBool() == true)
                            {





                                MessageBox.Show("Required : Department");
                                return false;




                            }



                            if (companyId != null && txtOrderNo != null)
                            {
                                try
                                {
                                    if (txtOrderNo.Visible == true && txtOrderNo.Text.Length > 0)
                                    {


                                        if (txtOrderNo.AutoCompleteCustomSource.Count > 0 && txtOrderNo.AutoCompleteCustomSource.OfType<string>().Count(c => c.ToLower().Trim() == txtOrderNo.Text.Trim().ToLower()) == 0)
                                        {

                                            MessageBox.Show("Order No is incorrect");
                                            return false;
                                        }
                                    }


                                    if (txtPupilNo != null && txtPupilNo.Visible == true && txtPupilNo.Text.Length > 0)
                                    {


                                        if (txtPupilNo.AutoCompleteCustomSource.Count > 0 && txtPupilNo.AutoCompleteCustomSource.OfType<string>().Count(c => c.ToLower().Trim() == txtPupilNo.Text.Trim().ToLower()) == 0)
                                        {

                                            MessageBox.Show("Return Order No is incorrect");
                                            return false;
                                        }
                                    }
                                }
                                catch
                                {


                                }
                            }

                            if (pnlAccpassword != null && pnlAccpassword.Visible == true)
                            {



                                if (obj == null)
                                    obj = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                                if (obj != null)
                                {

                                    string AccountPassword = obj.PasswordAccount.ToStr();

                                    if (txtAccPassword.Text.ToStr().ToLower() == AccountPassword.ToStr().ToLower())
                                    {
                                        if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlCompany.SelectedValue.ToIntorNull() != null && ddlCustomerName.Text.Trim().Length == 0)
                                        {
                                            ddlCustomerName.Text = ddlCompany.Text.Trim();


                                        }

                                        return true;
                                        //  this.SaveAndClose();
                                    }
                                    else
                                    {

                                        if (objMaster.PrimaryKeyValue == null || objMaster.Current.CompanyId == null || (objMaster.Current.CompanyId != null && objMaster.Current.CompanyId != ddlCompany.SelectedValue.ToInt()))
                                        {

                                            MessageBox.Show("Please Enter Correct Company Password!");
                                            return false;
                                        }
                                    }
                                }


                            }
                        }
                    }
                }


                if (AppVars.listUserRights.Count(c => c.functionId == "VALIDATE ADDRESS") > 0)
                {

                    if (txtFromAddress.Text.Trim().Length > 0)
                    {
                        if (ddlPickupPlot.SelectedValue == null && General.GetPostCodeMatch(txtFromAddress.Text.ToUpper().Trim()).Length < 5)
                        {
                            MessageBox.Show("Invalid Pickup Address.");
                            FocusOnFromAddress();
                            return false;
                        }

                    }
                    if (txtToAddress.Text.Trim().Length > 0)
                    {
                        if (ddlDropOffPlot.SelectedValue == null && General.GetPostCodeMatch(txtToAddress.Text.ToUpper().Trim()).Length < 5)
                        {
                            MessageBox.Show("Invalid Drop-Off Address.");
                            FocusOnToAddress();
                            return false;
                        }

                    }

                    if (grdVia != null && grdVia.Rows.Count > 0)
                    {
                        foreach (var item in grdVia.Rows)
                        {

                            if (GetZoneIdOnly(item.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper().Trim()).ToInt() == 0 && General.GetPostCodeMatch(item.Cells["VIALOCATIONVALUE"].ToStr().ToUpper().Trim()).Length < 5)
                            {
                                MessageBox.Show("Invalid Via Point Address.");
                                ShowViaPoint(true);
                                return false;
                            }

                        }
                    }
                }



                if (txtToAddress.Text.Trim().Length == 0 && (opt_return.Checked == false && opt_waitreturn.Checked == false))
                {

                    //if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "CEntr@lNewl!ne")
                    //{
                    UpdateAsDirected();

                    SetDropOffZone(txtToAddress.Text.Trim().ToUpper());
                    // GetZoneIdOnly(txtToAddress.Text.Trim().ToUpper());

                    //txtToAddress.TextChanged -= TextBoxElement_TextChanged;
                    //txtToAddress.Text = "AS DIRECTED";
                    //txtToAddress.TextChanged += TextBoxElement_TextChanged;
                    //   }

                    //else if (DialogResult.Yes == MessageBox.Show("Do you want to save this booking (AS DIRECTED) ?", "Cab Treasure", MessageBoxButtons.YesNo))
                    //{

                    //    txtToAddress.TextChanged -= TextBoxElement_TextChanged;
                    //    txtToAddress.Text = "AS DIRECTED";
                    //    txtToAddress.TextChanged += TextBoxElement_TextChanged;
                    //}
                    //else
                    //{
                    //    txtToAddress.Focus();
                    //    return false;
                    //}

                }




                //if(btnPickFares.Enabled==false && ddlPaymentType.Enabled)
                //{
                //    MessageBox.Show("Please wait while system is calculating fares...");
                //    return false;


                //}

                if (chkIsCompanyRates.Tag != null && ddlCompany.SelectedValue != null)
                {
                    string pwd = (chkIsCompanyRates.Tag as CompanyContacts).AccPassword.ToStr().Trim();
                    if (pwd.Length > 0 && ddlCompany.SelectedValue.ToInt() == (chkIsCompanyRates.Tag as CompanyContacts).CompanyId.ToInt())
                    {
                        frmAdminPwd frmPwd = new frmAdminPwd(pwd);
                        frmPwd.StartPosition = FormStartPosition.CenterParent;
                        frmPwd.ShowDialog();


                        if (frmPwd.ReturnValue1.ToStr().ToUpper() != "OK" || frmPwd.ReturnValue1.ToStr().ToUpper() == "EXIT")
                        {
                            MessageBox.Show("Invalid password");
                            return false;


                        }
                    }
                }

                if (dtpPickupDate.Value == null || dtpPickupTime.Value == null)
                {
                    MessageBox.Show("Required : Pickup Date Time");
                    return false;
                }
                else
                {

                    if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
                    {
                        DateTime? pickupDateTime = dtpPickupDate.Value.ToDateorNull() + dtpPickupTime.Value.ToDateTime().TimeOfDay;
                        DateTime? returnDateTime = dtpReturnPickupDate.Value.ToDateorNull() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay;


                        if (returnDateTime != null && pickupDateTime > returnDateTime)
                        {
                            MessageBox.Show("Pickup Date/Time cannot be greater than Return Pickup Date/Time");
                            dtpReturnPickupDate.Focus();
                            return false;
                        }


                    }


                    if ((dtpPickupDate.Value.ToDateorNull() + dtpPickupTime.Value.ToDateTime().TimeOfDay) < DateTime.Now.AddMinutes(-120) && objMaster.PrimaryKeyValue == null)
                    {



                        if (DialogResult.No == MessageBox.Show("Do you want to save the booking for past date time?", "Warning", MessageBoxButtons.YesNo))
                        {

                            return false;
                        }
                        else
                        {

                            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlCompany.SelectedValue.ToIntorNull() != null && ddlCustomerName.Text.Trim().Length == 0)
                            {
                                ddlCustomerName.Text = ddlCompany.Text.Trim();


                            }

                            return true;


                        }
                    }
                    else
                    {

                        if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT && ddlCompany.SelectedValue.ToIntorNull() != null && ddlCustomerName.Text.Trim().Length == 0)
                        {
                            ddlCustomerName.Text = ddlCompany.Text.Trim();


                        }

                        return true;
                    }
                }





            }
            catch (Exception ex)
            {

                return true;
            }







        }


        Label lblViaCustName = null;
        Label lblViaCustMobName = null;
        TextBox txtViaCustName = null;
        TextBox txtViaCustMobName = null;

        private void DefaultViaPanelSize()
        {

            this.pnlVia.Size = new System.Drawing.Size(900, 220);
        }

        private void CreateViaPanel()
        {

            if (pnlVia != null)
                return;






            this.pnlVia = new Panel();

            this.label7 = new System.Windows.Forms.Label();
            this.label3 = new System.Windows.Forms.Label();
            this.txtViaAddress = new UIX.AutoCompleteTextBox();
            this.btnClear = new Button();
            this.btnAddVia = new Button();
            this.ddlViaLocation = new UI.MyDropDownList();
            this.grdVia = new Telerik.WinControls.UI.RadGridView();
            this.txtviaPostCode = new UIX.AutoCompleteTextBox();
            this.lblViaLoc = new Label();
            this.lblFromViaPoint = new Label();
            ddlViaFromLocType = new ComboBox();

            //this.ddlViaFromLocType = new UI.MyDropDownList();


            // ((System.ComponentModel.ISupportInitialize)(this.pnlVia)).BeginInit();
            this.pnlVia.SuspendLayout();
            // ((System.ComponentModel.ISupportInitialize)(this.txtViaAddress)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.btnClear)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.btnAddVia)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlViaLocation)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia)).BeginInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia.MasterTemplate)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.txtviaPostCode)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.lblViaLoc)).BeginInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.lblFromViaPoint)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlViaFromLocType)).BeginInit();



            this.pnlMain.Controls.Add(this.pnlVia);



            // Add Via Customer Name and Mobile No Controls
            lblViaCustName = new Label();
            lblViaCustMobName = new Label();
            txtViaCustName = new TextBox();
            txtViaCustMobName = new TextBox();



            this.lblViaCustName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblViaCustName.Location = new System.Drawing.Point(4, 30);
            this.lblViaCustName.Name = "lblViaCustName";
            this.lblViaCustName.Size = new System.Drawing.Size(80, 22);
            this.lblViaCustName.TabIndex = 137;
            this.lblViaCustName.Text = "Name";


            this.lblViaCustMobName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblViaCustMobName.Location = new System.Drawing.Point(4, 65);
            this.lblViaCustMobName.Name = "lblViaCustMobName";
            this.lblViaCustMobName.Size = new System.Drawing.Size(80, 22);
            this.lblViaCustMobName.TabIndex = 137;
            this.lblViaCustMobName.Text = "Mobile No";



            this.txtViaCustName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtViaCustName.Location = new System.Drawing.Point(90, 30);
            this.txtViaCustName.Name = "lblViaCustName";
            this.txtViaCustName.Size = new System.Drawing.Size(200, 22);
            this.txtViaCustName.TabIndex = 137;
            this.txtViaCustName.Text = "";


            this.txtViaCustMobName.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtViaCustMobName.Location = new System.Drawing.Point(90, 65);
            this.txtViaCustMobName.Name = "lblViaCustName";
            this.txtViaCustMobName.Size = new System.Drawing.Size(200, 22);
            this.txtViaCustMobName.TabIndex = 137;
            this.txtViaCustMobName.Text = "";


            this.pnlVia.Controls.Add(this.lblViaCustName);
            this.pnlVia.Controls.Add(this.lblViaCustMobName);
            this.pnlVia.Controls.Add(this.txtViaCustName);
            this.pnlVia.Controls.Add(this.txtViaCustMobName);


            //


            this.pnlVia.BackColor = System.Drawing.Color.GhostWhite;
            this.pnlVia.Controls.Add(this.label7);
            this.pnlVia.Controls.Add(this.label3);
            this.pnlVia.Controls.Add(this.txtViaAddress);
            this.pnlVia.Controls.Add(this.btnClear);
            this.pnlVia.Controls.Add(this.btnAddVia);
            this.pnlVia.Controls.Add(this.ddlViaLocation);
            this.pnlVia.Controls.Add(this.grdVia);
            this.pnlVia.Controls.Add(this.txtviaPostCode);
            this.pnlVia.Controls.Add(this.lblViaLoc);
            this.pnlVia.Controls.Add(this.lblFromViaPoint);
            this.pnlVia.Controls.Add(this.ddlViaFromLocType);
            this.pnlVia.Location = new System.Drawing.Point(9, 230);
            this.pnlVia.Name = "pnlVia";
            // 
            // 
            // 
            //  this.pnlVia.RootElement.Opacity = 1;
            //  this.pnlVia.Size = new System.Drawing.Size(900, 220);
            DefaultViaPanelSize();
            this.pnlVia.TabIndex = 1;
            this.pnlVia.Visible = false;
            txtViaAddress.ListBoxElement.Font = new Font("Tahoma", 11, FontStyle.Bold);
            //   ((Telerik.WinControls.UI.RadPanelElement)(this.pnlVia.GetChildAt(0))).Text = "";
            // ((Telerik.WinControls.Primitives.BorderPrimitive)(this.pnlVia.GetChildAt(0).GetChildAt(1))).Width = 2F;
            //  ((Telerik.WinControls.Primitives.BorderPrimitive)(this.pnlVia.GetChildAt(0).GetChildAt(1))).BottomWidth = 1F;
            // 
            // label7
            // 
            this.label7.BackColor = System.Drawing.Color.Navy;
            this.label7.Image = Resources.Resource1.delete; //comment
            this.label7.Location = new System.Drawing.Point(864, 0);
            this.label7.Name = "label7";
            this.label7.Size = new System.Drawing.Size(35, 24);
            this.label7.TabIndex = 8;
            this.label7.Click += new System.EventHandler(this.label7_Click);
            // 
            // label3
            // 

            if (AppVars.AppTheme != "ControlDefault")
            {

                this.label3.BackColor = System.Drawing.Color.Purple;
            }
            else
            {
                this.label3.BackColor = System.Drawing.Color.Navy;

            }
            this.label3.Dock = System.Windows.Forms.DockStyle.Top;
            this.label3.Font = new System.Drawing.Font("Segoe UI", 14.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.label3.ForeColor = System.Drawing.Color.White;
            this.label3.Location = new System.Drawing.Point(0, 0);
            this.label3.Name = "label3";
            this.label3.Size = new System.Drawing.Size(910, 25);
            this.label3.TabIndex = 7;
            this.label3.Text = "Via Locations";
            this.label3.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;




            // 
            // txtViaAddress
            // 
            this.txtViaAddress.BackColor = System.Drawing.Color.White;
            this.txtViaAddress.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper;
            this.txtViaAddress.DefaultHeight = 60;
            this.txtViaAddress.DefaultWidth = 370;
            this.txtViaAddress.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtViaAddress.ForceListBoxToUpdate = false;
            this.txtViaAddress.FormerValue = "";
            this.txtViaAddress.Location = new System.Drawing.Point(491, 38);
            this.txtViaAddress.Multiline = true;
            this.txtViaAddress.Name = "txtViaAddress";
            // 
            // 
            // 
            // this.txtViaAddress.RootElement.StretchVertically = true;
            this.txtViaAddress.SelectedItem = null;
            this.txtViaAddress.Size = new System.Drawing.Size(257, 53);
            this.txtViaAddress.TabIndex = 2;
            this.txtViaAddress.TabStop = false;
            this.txtViaAddress.Values = null;
            this.txtViaAddress.KeyDown += new System.Windows.Forms.KeyEventHandler(this.txtViaAddress_KeyDown);
            this.txtViaAddress.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.txtFromAddress_KeyPress);
            //   ((Telerik.WinControls.UI.RadTextBoxElement)(this.txtViaAddress.GetChildAt(0))).StretchVertically = true;
            ////    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).Width = 1F;
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor2 = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            ////    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor3 = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor4 = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).InnerColor = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    ((Telerik.WinControls.Primitives.BorderPrimitive)(this.txtViaAddress.GetChildAt(0).GetChildAt(2))).ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(156)))), ((int)(((byte)(189)))), ((int)(((byte)(232)))));
            //    // 
            // btnClear
            // 
            this.btnClear.Location = new System.Drawing.Point(771, 65);
            this.btnClear.Name = "btnClear";
            this.btnClear.Size = new System.Drawing.Size(82, 24);
            this.btnClear.TabIndex = 4;
            this.btnClear.Text = "Clear";
            this.btnClear.Click += new System.EventHandler(this.btnClear_Click);
            // 
            // btnAddVia
            // 
            this.btnAddVia.Image = Resources.Resource1.add;
            this.btnAddVia.Location = new System.Drawing.Point(771, 33);
            this.btnAddVia.Name = "btnAddVia";
            this.btnAddVia.Size = new System.Drawing.Size(82, 24);
            this.btnAddVia.TabIndex = 3;
            this.btnAddVia.Text = "Add";
            this.btnAddVia.TextAlign = ContentAlignment.MiddleCenter;
            this.btnAddVia.ImageAlign = ContentAlignment.MiddleLeft;
            this.btnAddVia.Click += new System.EventHandler(this.btnAddVia_Click);
            // 
            // ddlViaLocation
            // 
            this.ddlViaLocation.Caption = null;
            this.ddlViaLocation.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlViaLocation.Location = new System.Drawing.Point(491, 38);
            this.ddlViaLocation.Name = "ddlViaLocation";
            this.ddlViaLocation.Property = null;
            this.ddlViaLocation.ShowDownArrow = true;
            this.ddlViaLocation.Size = new System.Drawing.Size(250, 27);
            this.ddlViaLocation.TabIndex = 0;
            // 
            // grdVia
            // 
            this.grdVia.Location = new System.Drawing.Point(7, 93);
            this.grdVia.Name = "grdVia";
            this.grdVia.Size = new System.Drawing.Size(881, 120);
            this.grdVia.TabIndex = 5;
            this.grdVia.Text = "radGridView1";
            this.grdVia.CellDoubleClick += new Telerik.WinControls.UI.GridViewCellEventHandler(this.grdVia_CellDoubleClick);

            if (AppVars.AppTheme != "ControlDefault")
            {
                grdVia.ForeColor = Color.White;

            }


            // 
            // txtviaPostCode
            // 
            this.txtviaPostCode.BackColor = System.Drawing.Color.White;
            this.txtviaPostCode.CharacterCasing = System.Windows.Forms.CharacterCasing.Upper;
            this.txtviaPostCode.DefaultHeight = 90;
            this.txtviaPostCode.DefaultWidth = 185;
            this.txtviaPostCode.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtviaPostCode.ForceListBoxToUpdate = false;
            this.txtviaPostCode.FormerValue = "";
            this.txtviaPostCode.Location = new System.Drawing.Point(492, 40);
            this.txtviaPostCode.MaxLength = 100;
            this.txtviaPostCode.Name = "txtviaPostCode";
            this.txtviaPostCode.SelectedItem = null;
            this.txtviaPostCode.Size = new System.Drawing.Size(195, 26);
            this.txtviaPostCode.TabIndex = 0;
            this.txtviaPostCode.TabStop = false;
            this.txtviaPostCode.Values = null;
            this.txtviaPostCode.TextChanged += new System.EventHandler(this.txtviaPostCode_TextChanged);
            // 
            // lblViaLoc
            // 
            this.lblViaLoc.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblViaLoc.Location = new System.Drawing.Point(349, 41);
            this.lblViaLoc.Name = "lblViaLoc";
            this.lblViaLoc.Size = new System.Drawing.Size(90, 22);
            this.lblViaLoc.TabIndex = 138;
            this.lblViaLoc.Text = "Via Location";
            // 
            // lblFromViaPoint
            // 
            this.lblFromViaPoint.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblFromViaPoint.Location = new System.Drawing.Point(4, 42);
            this.lblFromViaPoint.Name = "lblFromViaPoint";
            this.lblFromViaPoint.Size = new System.Drawing.Size(28, 22);
            this.lblFromViaPoint.TabIndex = 137;
            this.lblFromViaPoint.Text = "Via";
            this.lblFromViaPoint.Visible = false;
            // 
            // ddlViaFromLocType
            // 
            // this.ddlViaFromLocType.Caption = null;
            this.ddlViaFromLocType.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlViaFromLocType.Location = new System.Drawing.Point(1, 2);
            this.ddlViaFromLocType.Name = "ddlViaFromLocType";
            //  this.ddlViaFromLocType.Property = null;
            // this.ddlViaFromLocType.ShowDownArrow = true;
            this.ddlViaFromLocType.Size = new System.Drawing.Size(100, 18);
            this.ddlViaFromLocType.TabIndex = 1;
            this.ddlViaFromLocType.SelectedIndexChanged += new EventHandler(ddlViaFromLocType_SelectedIndexChanged);


            txtViaAddress.ListBoxElement.Width = 750;
            txtViaAddress.ListBoxElement.Height = 180;
            this.txtViaAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            txtViaAddress.DefaultHeight = 140;

            // ((System.ComponentModel.ISupportInitialize)(this.pnlVia)).EndInit();
            this.pnlVia.ResumeLayout(false);
            this.pnlVia.PerformLayout();
            //   ((System.ComponentModel.ISupportInitialize)(this.txtViaAddress)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.btnClear)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.btnAddVia)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlViaLocation)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia.MasterTemplate)).EndInit();
            ((System.ComponentModel.ISupportInitialize)(this.grdVia)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.txtviaPostCode)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblViaLoc)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblFromViaPoint)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlViaFromLocType)).EndInit();



            FormatViaGrid();


            if (Program.dtCombos != null && Program.dtCombos.Tables.Count > 0)
            {

                ComboFunctions.FillCombo(Program.dtCombos.Tables[0].Copy(), ddlViaFromLocType, "LocationType", "Id");
            }
            else
            {
                ComboFunctions.FillLocationTypeCombo(ddlViaFromLocType);

            }
            ddlViaFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

            this.ddlViaFromLocType.BringToFront();

            pnlVia.BringToFront();
        }

        void btnViaNAT_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            if (txtViaAddress != null && txtViaAddress.Text.Trim().Length > 0 && args.ToggleState == ToggleState.On)
            {

                SearchNAT();
            }
        }

        private void SearchNAT()
        {
            try
            {

                if (EnablePOI)
                {

                    InitializeSearchPOIWorker();

                    if (POIWorker.IsBusy)
                    {
                        POIWorker.CancelAsync();
                        POIWorker.Dispose();
                        POIWorker = null;
                        GC.Collect();
                        InitializeSearchPOIWorker();

                    }


                    AddressTextChangePOI();
                }
            }
            catch
            {


            }
        }


        private void btnSelectVia_Click(object sender, EventArgs args)
        {
            btnSelectVia.Tag = btnSelectVia.Tag != null ? null : "1";


            ShowViaPoint(btnSelectVia.Tag != null ? true : false);
        }


        private void ShowViaPoint(bool show)
        {

            CreateViaPanel();

            if (show)
            {


                //btnSelectVia.Text = "Hide Via Point";
                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                pnlVia.Visible = true;
                DefaultViaPanelSize();
                //pnlBottom.Location = this.PnlNewBottomLocation;
                txtViaAddress.Select();
            }
            else
            {
                //btnSelectVia.Text = "Show Via Point";
                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                pnlVia.Visible = false;
                //    pnlMain.RootElement.Opacity = 1;
                //pnlBottom.Location = this.PnlOldBottomLocation;


                if (txtToAddress.Text.Trim().Length == 0)
                    FocusOnToAddress();
                else
                    ddlCustomerName.Select();

            }

        }

        private void FocusOnViaAddress()
        {
            txtViaAddress.Select();

        }

        private void ddlViaFromLocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillViaLocations();
        }

        private void FillViaLocations()
        {


            int locTypeId = ddlViaFromLocType.SelectedValue.ToInt();


            lblViaLoc.Text = "Via Address";
            txtViaAddress.Visible = true;

            ddlViaLocation.SelectedValue = null;
            // ddlViaLocation.Visible = false;

            // txtviaPostCode.Text = string.Empty;
            // txtviaPostCode.Visible = false;


            if (locTypeId == Enums.LOCATION_TYPES.BASE)
            {
                txtViaAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                //   txtViaAddress.Text = AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim();
                txtViaAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();

                txtViaAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
            }







        }



        private void btnAddVia_Click(object sender, EventArgs e)
        {
            AddViaPoint();
            FocusOnViAddress();
        }

        private void FocusOnViAddress()
        {
            ddlViaFromLocType.Select();
            SendKeys.Send("{TAB}");
            //txtViaAddress.Select();
        }

        private void AddViaPoint()
        {

            try
            {
                int LocTypeId = ddlViaFromLocType.SelectedValue.ToInt();

                string fromViaLabel = lblFromViaPoint.Text.Trim();
                string fromViaValue = ddlViaFromLocType.Text.Trim();

                int? toViaLocId = ddlViaLocation.SelectedValue.ToIntorNull();
                string ToViaLocLabel = lblViaLoc.Text.Trim();
                string toViaLoc = "";

                string viaCustName = txtViaCustName.Text.Trim().ToProperCase();
                string viaMobNo = txtViaCustMobName.Text.Trim();

                string msg = string.Empty;
                string msg2 = string.Empty;

                if (LocTypeId == 0)
                {
                    msg += "Required : Via Point." + Environment.NewLine;

                }
                else
                {
                    toViaLoc = txtViaAddress.Text.Trim();

                    if (toViaLoc.Length == 0)
                    {
                        //  toViaLoc = txtViaAddress.Text.Trim();
                        msg2 += "Required : Via Address." + Environment.NewLine;
                    }


                    if (string.IsNullOrEmpty(toViaLoc))
                    {
                        msg += msg2;
                    }

                }

                if (!string.IsNullOrEmpty(msg))
                {
                    ENUtils.ShowMessage(msg);
                    return;

                }





                CheckWhiteList(toViaLoc.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim());


                GridViewRowInfo row;

                if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewNewRowInfo)
                    grdVia.CurrentRow = null;


                if (grdVia.CurrentRow != null && txtViaAddress.Tag.ToStr() == "edit")
                    row = grdVia.CurrentRow;
                else
                    row = grdVia.Rows.AddNew();



                row.Cells["FROMVIALOCTYPEID"].Value = LocTypeId;
                //  row.Cells[COLS.FROMTYPELABEL].Value = fromViaLabel;
                row.Cells["FROMTYPELABEL"].Value = viaCustName;

                row.Cells["FROMTYPEVALUE"].Value = viaMobNo;

                row.Cells["VIALOCATIONID"].Value = toViaLocId;
                row.Cells["VIALOCATIONLABEL"].Value = ToViaLocLabel;
                row.Cells["VIALOCATIONVALUE"].Value = toViaLoc;





                ClearViaDetails();



                CalculateAutoFares();

                LoadNearestMap();
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void ClearViaDetails()
        {
            try
            {
                ddlViaFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                grdVia.CurrentRow = null;
                txtViaAddress.Text = string.Empty;

                ddlViaLocation.SelectedValue = null;
                txtViaCustName.Text = string.Empty;
                txtViaCustMobName.Text = string.Empty;
                txtViaAddress.Tag = null;
                DefaultViaPanelSize();
                pnlVia.Select();
                txtViaAddress.Focus();
                txtviaPostCode.Text = string.Empty;

            }
            catch
            {

            }
        }

        private void grdVia_CellDoubleClick(object sender, GridViewCellEventArgs e)
        {
            if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewDataRowInfo)
            {
                GridViewRowInfo row = grdVia.CurrentRow;

                ddlViaFromLocType.SelectedValue = row.Cells["FROMVIALOCTYPEID"].Value.ToInt();

                string locValue = row.Cells["VIALOCATIONVALUE"].Value.ToStr();

                txtViaAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                txtViaAddress.Text = locValue;
                txtViaAddress.Tag = "edit";
                txtViaAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                txtviaPostCode.TextChanged -= new EventHandler(txtviaPostCode_TextChanged);
                txtviaPostCode.Text = locValue;
                txtviaPostCode.TextChanged += new EventHandler(txtviaPostCode_TextChanged);

                ddlViaLocation.SelectedValue = row.Cells["VIALOCATIONID"].Value.ToInt();



                txtViaCustName.Text = row.Cells["FROMTYPELABEL"].Value.ToStr();
                txtViaCustMobName.Text = row.Cells["FROMTYPEVALUE"].Value.ToStr();


            }
        }



        private void btnSearch_Click(object sender, EventArgs e)
        {
            SearchBooking();

        }


        public class CompanyContacts
        {
            public int Id;
            public int? CompanyId;
            public string AccPassword;


        }

        private void SetIfLoyalityAccount()
        {

            if ((txtCustomerMobileNo.Text.Trim().Length > 0 || txtCustomerPhoneNo.Text.Trim().Length > 0 || txtEmail.Text.Trim().Length > 0)
                && AppVars.listUserRights.Count(c => c.functionId == "CHECK LOYALITY ACCOUNT") > 0)
            {


                using (TaxiDataContext db = new TaxiDataContext())
                {
                    string mobileNo = txtCustomerMobileNo.Text.Trim();
                    string email = txtEmail.Text.Trim();
                    string phone = txtCustomerPhoneNo.Text.Trim();
                    //   var details=        db.Gen_Company_Contacts.Where(c => c.MobileNo == mobileNo).Select(args =>new { args.CompanyId ,args.pa}).FirstOrDefault();
                    CompanyContacts obj = null;

                    if (mobileNo.Length > 0)
                        obj = db.ExecuteQuery<CompanyContacts>("select  Id,CompanyId,AccPassword from gen_company_contacts where mobileno='" + mobileNo + "'").FirstOrDefault();


                    if (obj == null && phone.Length > 0)
                        obj = db.ExecuteQuery<CompanyContacts>("select Id,CompanyId,AccPassword from gen_company_contacts where telephoneno='" + phone + "'  ").FirstOrDefault();


                    if (obj == null && email.Length > 0)
                        obj = db.ExecuteQuery<CompanyContacts>("select Id,CompanyId,AccPassword from gen_company_contacts where email='" + email + "'").FirstOrDefault();




                    if (obj != null)
                    {
                        chkIsCompanyRates.Checked = true;
                        ddlCompany.SelectedValue = obj.CompanyId;
                        chkIsCompanyRates.Tag = obj;
                    }
                    else
                    {
                        chkIsCompanyRates.Tag = null;
                    }
                }
            }



        }


        private void SearchBooking()
        {
            try
            {


                frmSearchBooking frm = new frmSearchBooking(ddlCustomerName.Text, txtCustomerPhoneNo.Text.Trim(), txtCustomerMobileNo.Text.Trim(), txtEmail.Text.Trim());

                frm.IsBookingEditMode = objMaster.PrimaryKeyValue == null ? false : true;
                frm.ShowDialog();


                if (frm.IsPickDetails && frm.IsSelected)
                {

                    ddlCustomerName.Text = frm.CustomerName.ToStr().Trim();
                    txtCustomerMobileNo.Text = frm.mobileNo.ToStr().Trim();
                    txtCustomerPhoneNo.Text = frm.phoneNo.ToStr().Trim();


                    SetIfLoyalityAccount();

                }


                else
                {

                    if (frm.IsSelected)
                    {

                        if (frm.SelectedCompanyId != null)
                        {
                            chkIsCompanyRates.Checked = true;
                            ddlCompany.SelectedValue = frm.SelectedCompanyId;
                        }


                        SetIfLoyalityAccount();


                        if (ddlBookingType.SelectedValue != null)
                        {

                            frm.bookingTypeId = ddlBookingType.SelectedValue.ToInt();

                        }

                        PickBookingComplete(frm.CustomerName, frm.phoneNo, frm.mobileNo, frm.fromLocTypeId, frm.toLocTypeId, frm.fromLocId, frm.toLocId, frm.from, frm.to, frm.fare, false, frm.bookingTypeId, frm.CustEmail);


                        if (AppVars.listUserRights.Count(c => c.functionId == "PICK BOOKING FEE ON SEARCH BOOKING") > 0)
                        {
                            numBookingFee.Value = frm.Fees.ToDecimal();
                        }
                        else
                            numBookingFee.Value = 0.00m;

                        if (numCompanyFares != null)
                            numCompanyFares.Value = frm.companyFare;


                        if (frm.viaString.ToStr().Trim().Length > 0)
                        {

                            if (grdVia == null)
                            {
                                CreateViaPanel();

                            }

                            string[] viaArr = frm.viaString.ToStr().Trim().Split(new char[] { ',' });

                            grdVia.Rows.Clear();

                            GridViewRowInfo row = null;
                            for (int i = 0; i < viaArr.Count(); i++)
                            {


                                row = grdVia.Rows.AddNew();
                                row.Cells["FROMVIALOCTYPEID"].Value = Enums.LOCATION_TYPES.ADDRESS;
                                row.Cells["FROMTYPELABEL"].Value = "";

                                row.Cells["FROMTYPEVALUE"].Value = "";

                                row.Cells["VIALOCATIONID"].Value = null;
                                row.Cells["VIALOCATIONLABEL"].Value = "Address";
                                row.Cells["VIALOCATIONVALUE"].Value = viaArr[i].Replace("Via " + (i + 1) + " : ", "").Trim();
                            }

                            btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                            btnSelectVia.BackColor = Color.DarkOrange;
                            //      btnSelectVia.NumberOfColors = 1;
                        }

                        if (frm.IsPermanentNotes.ToInt() == 1)
                        {
                            txtSpecialRequirements.Text = frm.SpecialReq.ToStr().Trim();
                            chkPermanentCustNotes.Checked = true;
                        }



                        //WHITELIST
                        CheckWhiteList();

                        if ((AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool()))
                        {
                            if (AppVars.listUserRights.Count(c => c.functionId == "AUTOCALCULATE FARES ON PICK BOOKING") > 0)
                                UpdateAutoCalculateFares();
                            else if (AppVars.listUserRights.Count(c => c.functionId == "AUTOCALCULATE FARES ON PICK BOOKING DETAILS") > 0)
                            {
                                UpdateAutoCalculateFares();
                            }
                        }
                    }
                }



                if (frm.special.ToStr().Length > 0)
                {
                    txtSpecialRequirements.Text = frm.special.ToStr().Trim();
                    chkPermanentCustNotes.Checked = true;
                }
                else
                {

                    if (frm.IsPermanentNotes.ToInt() == 1)
                    {
                        txtSpecialRequirements.Text = frm.SpecialReq.ToStr().Trim();
                        chkPermanentCustNotes.Checked = true;
                    }

                }


                btnExcludeDrivers.Text = "Exclude Driver(s)";
                btnExcludeDrivers.Tag = null;

                if (frm.excludeddrivers.ToStr().Trim().Length > 0)
                    btnExcludeDrivers.Tag = frm.excludeddrivers.ToStr().Trim();

                if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                {
                    //   chkPermanentCustNotes.Checked = true;
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        var excludedDrvs = btnExcludeDrivers.Tag.ToStr().Trim().Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries);



                        var drivers = string.Join(",", (from a in db.Fleet_Drivers

                                                            // join b in excludedDrvs on a.Id equals b
                                                        where a.IsActive == true && excludedDrvs.Contains(a.Id.ToString())
                                                        select a.DriverNo).ToArray<string>());


                        btnExcludeDrivers.Text += Environment.NewLine + drivers;
                        //btnExcludeDrivers.Tag = objMaster.Current.ExcludedDriverIds.ToStr().Trim();
                    }
                }

                frm.Dispose();

            }
            catch (Exception ex)
            {

            }

        }


        public void CheckWhiteList(string address = "")
        {



            new Thread(delegate ()
            {
                try
                {
                    //  txtFromAddress.Text.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim()) == false
                    // txtToAddress.Text.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim()

                    if (address.ToStr().Trim().Length > 0)
                        CheckWhiteListAddress(address);
                    else
                        CheckWhiteListAddress("all");

                }
                catch
                {

                }
            }).Start();
        }




        private void ddlDriver_SelectedIndexChanged(object sender, EventArgs e)
        {
            int? driverId = ddlDriver.SelectedValue.ToIntorNull();
            if (objMaster != null && objMaster.PrimaryKeyValue == null && driverId != null && chkAutoDespatch.Checked == false && chkAllocateDriver.Checked == false)
            {
                btnSaveNew.Text = "Save and Dispatch";

            }
            else
            {
                btnSaveNew.Text = "Save Booking    (CTRL+S)";
            }




        }

        private void btnMultiBooking_Click(object sender, EventArgs e)
        {
            ShowMultiBooking();

        }

        private void ShowMultiBooking()
        {


            string customerName = ddlCustomerName.Text.ToStr().Trim();
            string MobileNo = txtCustomerMobileNo.Text.Trim();
            string telephoneNo = txtCustomerPhoneNo.Text.Trim();




            string error = string.Empty;


            if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") == 0)
            {

                if (string.IsNullOrEmpty(customerName))
                {

                    error += "Required : Customer Name " + Environment.NewLine;
                }
                if (string.IsNullOrEmpty(MobileNo) && string.IsNullOrEmpty(telephoneNo))
                {
                    error += "Required : Phone No" + Environment.NewLine;
                }
            }

            if (ddlPaymentType.SelectedValue == null)
            {

                error += "Required : Payment Type";
            }





            // ADDED ON 19/APRIL/2016 ON REQUEST OF DOUBLE O CARS (BOOKED BY SHOULD BE MANDATORY)
            if (ddlCompany.SelectedValue != null && txtAccountBookedBy != null && txtAccountBookedBy.Text.Trim().Length == 0 && txtAccountBookedBy.Visible == true)
            {
                error += "Required : Booked By";
            }


            if (string.IsNullOrEmpty(txtFromAddress.Text))
            {
                error += "Required : Pickup Point" + Environment.NewLine;
            }

            if (string.IsNullOrEmpty(txtToAddress.Text))
            {
                error += "Required : Destination" + Environment.NewLine;
            }





            if (!string.IsNullOrEmpty(error))
            {
                ENUtils.ShowMessage(error);
                return;

            }


            if (chkIsCompanyRates.Checked && ddlCompany.SelectedValue == null)
            {
                chkIsCompanyRates.Checked = false;
            }


            Booking obj = new Booking();

            obj.BookingTypeId = ddlBookingType.SelectedValue.ToIntorNull();


            int FromlocTypeId = ddlFromLocType.SelectedValue.ToInt();
            int TolocTypeId = ddlToLocType.SelectedValue.ToInt();

            obj.SubcompanyId = ddlSubCompany.SelectedValue.ToIntorNull();

            obj.FromLocTypeId = FromlocTypeId.ToIntorNull();
            obj.ToLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
            // obj.FromLocId = ddlFromLocation.SelectedValue.ToIntorNull();
            //  obj.ToLocId = ddlToLocation.SelectedValue.ToIntorNull();
            obj.DriverId = ddlDriver.SelectedValue.ToIntorNull();
            obj.IsConfirmedDriver = chkAllocateDriver.Checked;

            obj.VehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
            obj.PaymentTypeId = ddlPaymentType.SelectedValue.ToIntorNull();
            obj.CompanyId = ddlCompany.SelectedValue.ToIntorNull();
            obj.DepartmentId = ddlDepartment != null ? ddlDepartment.SelectedValue.ToIntorNull() : null;
            obj.IsQuotation = chkQuotation.Checked;

            obj.IsCompanyWise = chkIsCompanyRates.Checked;

            obj.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";


            obj.OrderNo = txtOrderNo != null ? txtOrderNo.Text.Trim() : "";
            obj.PupilNo = txtPupilNo != null ? txtPupilNo.Text.Trim() : "";


            if (opt_one.Checked)
            {
                obj.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;
            }
            else if (opt_return.Checked)
            {
                obj.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
            }
            else if (opt_waitreturn.Checked)
            {
                obj.JourneyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;

            }


            obj.PickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();




            if (dtpReturnPickupDate != null)
            {

                if (dtpReturnPickupDate.Value != null && dtpReturnPickupTime.Value != null && opt_return.Checked)
                {
                    obj.ReturnPickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
                }
                else
                    obj.ReturnPickupDateTime = null;

                // obj.ReturnDriverId = ddlReturnDriver.SelectedValue.ToIntorNull();

                if (numReturnFare != null)
                    obj.ReturnFareRate = numReturnFare.Value.ToDecimal();

            }


            obj.FareRate = numFareRate.Value.ToDecimal();


            if (numReturnFare != null)
                obj.ReturnFareRate = numReturnFare.Value.ToDecimal();

            obj.CustomerPrice = numBookingFee.Value.ToDecimal();


            obj.CompanyPrice = numCompanyFares != null ? numCompanyFares.Value.ToDecimal() : 0.00m;

            if (lblReturnCompanyPrice != null && opt_return.Checked)
            {

                obj.WaitingMins = numReturnCompanyFares.Value;
                //   obj.ReturnCustomerPrice = numReturnCustFare.Value.ToDecimal();
            }



            obj.CustomerId = ddlCustomerName.Tag.ToIntorNull();

            obj.CustomerName = customerName;

            obj.CustomerEmail = txtEmail.Text.Trim();
            obj.CustomerPhoneNo = telephoneNo;
            obj.CustomerMobileNo = MobileNo;

            obj.SpecialRequirements = txtSpecialRequirements.Text.Trim();


            // if (FromlocTypeId == Enums.LOCATION_TYPES.ADDRESS || FromlocTypeId == Enums.LOCATION_TYPES.BASE)
            obj.FromAddress = txtFromAddress.Text.Trim();

            //else if (FromlocTypeId == Enums.LOCATION_TYPES.POSTCODE)
            //    obj.FromAddress = txtFromPostCode.Text.Trim();
            //else
            //{
            //    obj.FromAddress = ddlFromLocation.Text.Trim();
            //}



            obj.FromDoorNo = txtFromFlightDoorNo.Text.Trim();
            obj.FromStreet = txtFromStreetComing.Text.Trim();
            obj.FromPostCode = txtFromPostCode.Text.Trim();


            //if (TolocTypeId == Enums.LOCATION_TYPES.ADDRESS || TolocTypeId == Enums.LOCATION_TYPES.BASE)
            obj.ToAddress = txtToAddress.Text.Trim();

            //else if (TolocTypeId == Enums.LOCATION_TYPES.POSTCODE)
            //    obj.ToAddress = txtToPostCode.Text.Trim();
            //else
            //{
            //    obj.ToAddress = ddlToLocation.Text.Trim();
            //}


            //if (AppVars.objPolicyConfiguration.ShowAreaWithPlots.ToBool())
            //{

            if (ddlPickupPlot.SelectedValue == null)
                obj.ZoneId = GetZoneId(obj.FromAddress);
            else
                obj.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();

            if (ddlDropOffPlot.SelectedValue == null)
                obj.DropOffZoneId = GetZoneId(obj.ToAddress);
            else
                obj.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();
            //    }




            obj.ToDoorNo = txtToFlightDoorNo.Text.Trim();
            obj.ToStreet = txtToStreetComing.Text.Trim();
            obj.ToPostCode = txtToPostCode.Text.Trim();

            obj.DistanceString = lblMap.Text;
            obj.AutoDespatch = chkAutoDespatch.Checked;


            int mins = numBeforeMinutes.Value.ToInt();

            //if (mins == 0)
            //{

            //    if (obj.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
            //    {
            //        mins = AppVars.objPolicyConfiguration.AirportBookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
            //    }
            //    else
            //    {
            //        mins = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
            //    }

            //}

            //obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-mins);

            obj.AutoDespatch = chkAutoDespatch.Checked;
            obj.IsBidding = chkBidding.Checked;


            obj.CallRefNo = this.CallRefNo;



            if (chkTakenByAgent != null)
            {


                obj.AgentCommission = numAgentCommission.Value;
                obj.JobTakenByCompany = chkTakenByAgent.Checked;
                //    obj.AgentCommissionPercent = numAgentCommissionPercent.Value.ToInt();
                //    obj.FromFlightNo = ddlAgentCommissionType.Text.Trim();
            }

            //if (AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool())
            //{

            //    decimal mile = General.CalculateDistanceFromBaseFull(obj.FromAddress.ToStr());

            //    obj.DeadMileage = mile;

            //    if (mile > 0 && mile < 1)
            //    {
            //        mile = 1;
            //    }
            //    else
            //    {
            //        mile = Math.Round(mile, 0);
            //    }

            //    obj.ExtraMile = mile;

            //}




            obj.SMSType = Enums.SMSACCOUNT_TYPE.MODEMSMS;

            if (pnlVia != null)
            {
                string[] skipProperties = { "Gen_Location", "Booking", "Gen_LocationType" };
                IList<Booking_ViaLocation> savedList = obj.Booking_ViaLocations;
                List<Booking_ViaLocation> listofDetail = (from r in grdVia.Rows
                                                          select new Booking_ViaLocation
                                                          {
                                                              Id = r.Cells["ID"].Value.ToLong(),
                                                              BookingId = r.Cells["MASTERID"].Value.ToLong(),
                                                              ViaLocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToIntorNull(),
                                                              ViaLocTypeLabel = r.Cells["FROMTYPELABEL"].Value.ToStr(),
                                                              ViaLocTypeValue = r.Cells["FROMTYPEVALUE"].Value.ToStr(),

                                                              ViaLocId = r.Cells["VIALOCATIONID"].Value.ToIntorNull(),
                                                              ViaLocLabel = r.Cells["VIALOCATIONLABEL"].Value.ToStr(),
                                                              ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()

                                                          }).ToList();


                Utils.General.SyncChildCollection(ref savedList, ref listofDetail, "Id", skipProperties);
            }

            obj.ServiceCharges = numBookingFee.Visible ? numBookingFee.Value : 0.00m;

            if (chkLead.Checked)
            {
                obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt()).ToDateTime();
                obj.DeadMileage = numLead.Value;
            }




            if (chkQuotedPrice != null)
                obj.IsQuotedPrice = chkQuotedPrice.Checked;



            if (ddlEscort != null)
            {
                obj.EscortId = ddlEscort.SelectedValue.ToIntorNull();

                if (numEscortPrice != null)
                    obj.EscortPrice = numEscortPrice.Value;
            }



            obj.NoOfChilds = chkPermanentCustNotes.Checked ? 1 : 0;



            obj.AttributeValues = btnAttributes.Tag.ToStr().Trim();
            obj.ExcludedDriverIds = btnExcludeDrivers.Tag.ToStr().Trim();


            if (chkHasPriority.Visible)
            {
                if (obj.ExtraMile == 0)
                {
                    obj.ExtraMile = GetPriority(obj);
                }
            }

            obj.ApplyServiceCharges = chkMiles.Checked;

            if (chkMiles.Checked)
                obj.TotalTravelledMiles = numMiles.Value;

            frmMultiBooking frm = new frmMultiBooking(obj);
            frm.extraChargesOneWaySavedList = extraChargesOneWaySavedList;
            frm.extraChargesReturnSavedList = extraChargesReturnSavedList;

            frm.ReturnCustomerFares = numReturnBookingFee.Value.ToDecimal();

            if (txtReturnSpecialReq != null && txtReturnSpecialReq.Text.ToStr().Length > 0 && txtReturnSpecialReq.Tag != null)
                frm.ReturnExtraDrop = txtReturnSpecialReq.Tag.ToDecimal();


            frm.ReturnBookingFee = numReturnBookingFee != null && numReturnBookingFee.Visible ? numReturnBookingFee.Value : 0.00m;

            frm.CustomLead = chkLead.Checked;

            if (txtReturnSpecialReq != null)
                frm.ReturnSpecialRequirement = txtReturnSpecialReq.Text.Trim();


            if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && chkHasPriority.Visible)
            {

                frm.ReturnPriority = GetReturnPriority(obj);
                frm.ReturnParking = numCongChrgs.Tag.ToDecimal();
            }


            frm.ShowDialog();


            if (frm.Saved)
            {

                General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + frm.savedAdvanceBookingId);






                this.Close();
            }

            frm.Dispose();
            frm = null;

            GC.Collect();

        }



        private void chkAutoDespatch_ToggleStateChanging(object sender, StateChangingEventArgs args)
        {


            if (args.NewValue == ToggleState.On)
            {

                numBeforeMinutes.Enabled = true;

            }
            else
            {
                numBeforeMinutes.Enabled = false;

            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {

            ClearViaDetails();

        }















        private void radToggleButton1_ToggleStateChanged_1(object sender, StateChangedEventArgs args)
        {
            SetFromBase();
        }







        private void frmBooking_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {



                if (e.Control)
                {
                    if (e.KeyCode == Keys.S)
                    {

                        if (objMaster.Current != null && btnSaveNew.Enabled == false)
                        {
                            return;
                        }



                        SaveAndClose();
                    }
                    if (e.KeyCode == Keys.D)
                    {

                        SetAsDirected();
                    }
                    if (e.KeyCode == Keys.M)
                    {

                        MapReport();
                    }
                    if (e.KeyCode == Keys.N)
                    {

                        num_TotalPassengers.Focus();
                    }
                    if (e.KeyCode == Keys.T)
                    {

                        TrackDriver();
                    }

                    else if (e.KeyCode == Keys.A)
                    {

                        //  if (DisableAccountCheck() == false)
                        // {

                        //  }
                    }
                    else if (e.KeyCode == Keys.O)
                    {

                        //   ShowMultiVehicleBooking();

                    }
                    //if (e.KeyCode == Keys.OemQuestion && ddlCustomerName.Text.Trim().Length == 0)
                    //{
                    //    ddlCustomerName.Text = "XXX";
                    //    FocusOnCustomer();

                    //}
                }
                else if (e.Alt)
                {
                    if (e.KeyCode == Keys.A)
                    {
                        e.SuppressKeyPress = true;
                        if (chkIsCompanyRates.Checked == false)
                        {
                            chkIsCompanyRates.Checked = true;

                            ddlCompany.Select();
                        }
                        else
                        {
                            chkIsCompanyRates.Checked = false;


                        }
                    }

                    //else if (e.KeyCode == Keys.B)
                    //{
                    //    ShowAttributes();
                    //    //if (chkBidding.Checked)
                    //    //{
                    //    //    chkBidding.Checked = false;

                    //    //}
                    //    //else
                    //    //{

                    //    //    chkBidding.Checked = true;
                    //    //}

                    //}

                    else if (e.KeyCode == Keys.C)
                    {
                        if (numCompanyFares != null && numCompanyFares.Enabled)
                        {
                            e.SuppressKeyPress = true;
                            FocusOnCompanyFare();
                        }
                    }
                    else if (e.KeyCode == Keys.D)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnToAddress();
                        // SetAsDirected();
                    }
                    else if (e.KeyCode == Keys.E)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnPickupDate();

                    }
                    else if (e.KeyCode == Keys.F)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnFare();
                    }
                    else if (e.KeyCode == Keys.G)
                    {
                        e.SuppressKeyPress = true;
                        numTotalLuggages.Focus();
                    }
                    //else if (e.KeyCode == Keys.H)
                    //{

                    //    ShowExtraCharges();
                    //}
                    else if (e.KeyCode == Keys.I)
                    {
                        e.SuppressKeyPress = true;
                        ShowInfo();

                    }
                    else if (e.KeyCode == Keys.K)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnCustomer();

                    }
                    else if (e.KeyCode == Keys.L)
                    {
                        e.SuppressKeyPress = true;
                        chkLead.Checked = true;
                        numLead.Focus();

                    }

                    //else if (e.KeyCode == Keys.M)
                    //{

                    // //   ShowMultiVehicleBooking();

                    //    //if (chkAutoDespatch.Checked)
                    //    //{
                    //    //    chkAutoDespatch.Checked = false;

                    //    //}
                    //    //else
                    //    //{

                    //    //    chkAutoDespatch.Checked = true;
                    //    //}
                    //}
                    else if (e.KeyCode == Keys.N)
                    {
                        e.SuppressKeyPress = true;
                        num_TotalPassengers.Focus();
                        //  FocusOnCustomer();

                    }

                    else if (e.KeyCode == Keys.O)
                    {
                        e.SuppressKeyPress = true;
                        opt_one.Focus();

                    }
                    else if (e.KeyCode == Keys.U)
                    {
                        e.SuppressKeyPress = true;

                        opt_return.Focus();

                    }
                    else if (e.KeyCode == Keys.W)
                    {
                        e.SuppressKeyPress = true;
                        opt_waitreturn.Focus();

                    }
                    else if (e.KeyCode == Keys.P)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnFromAddress();

                    }
                    else if (e.KeyCode == Keys.Q)
                    {

                        SearchLocation();
                    }

                    else if (e.KeyCode == Keys.R)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnDriver();
                    }
                    else if (e.KeyCode == Keys.S)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnSpecialRequirement();
                    }


                    else if (e.KeyCode == Keys.T)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnPickupTime();

                    }


                    else if (e.KeyCode == Keys.V)
                    {
                        e.SuppressKeyPress = true;
                        FocusOnVehicle();


                    }


                    //else if (e.KeyCode == Keys.X)
                    //{
                    //    ShowExcludedDrivers();
                    //}
                    else if (e.KeyCode == Keys.Y)
                    {
                        e.SuppressKeyPress = true;
                        ddlPaymentType.Focus();
                    }
                }
                else if (e.Shift)
                {
                    if (e.KeyCode == Keys.F4)
                    {
                        if (IsClickableFares)
                            return;

                        IsClickableFares = true;
                        IsF4 = true;
                        UpdateAutoCalculateFares();
                        IsF4 = false;
                        //FocusOnFare();
                        //if (numFareRate.Value == 0.00m)
                        //    numFareRate.Select(0, 4);
                        //else
                        //    numFareRate.Select(0, numFareRate.Value.ToStr().Length);
                    }


                }

                else
                {

                    if (e.KeyCode == Keys.F1)
                    {
                        if (txtToAddress.Focused)
                        {
                            SetToBase();
                        }
                        else
                        {
                            SetFromBase();
                        }

                        LoadNearest();
                        UpdateAutoCalculateFares();
                    }
                    else if (e.KeyCode == Keys.F2)
                    {


                        btnSelectVia.Tag = btnSelectVia.Tag != null ? null : "1";
                        ShowViaPoint(btnSelectVia.Tag != null ? true : false);
                    }

                    else if (e.KeyCode == Keys.F3)
                    {

                        //InitializeStationsPanel();

                        //btnStations.ToggleState = btnHospital.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;
                        //ShowStations(btnStations.ToggleState);
                        ShowMap();
                    }
                    else if (e.KeyCode == Keys.F4)
                    {
                        //if (IsClickableFares)
                        //    return;

                        //IsClickableFares = true;
                        //IsF4 = true;
                        //UpdateAutoCalculateFares();
                        //IsF4 = false;
                        try
                        {
                            FocusOnFare();

                        }
                        catch
                        {

                        }
                    }


                    else if (e.KeyCode == Keys.F5)
                    {
                        //InitializeHospitalPanel();

                        //btnHospital.ToggleState = btnHospital.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;

                        //ShowHospitals(btnHospital.ToggleState);
                        AddNotes();

                    }
                    else if (e.KeyCode == Keys.F6)
                    {


                        //InitializeHotelPanel();

                        //btnHotels.ToggleState = btnHotels.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;

                        //ShowHotels(btnHotels.ToggleState);
                        if (chkQuotation.Enabled)
                            chkQuotation.Checked = !chkQuotation.Checked;


                    }
                    else if (e.KeyCode == Keys.F7)
                    {
                        SearchBooking();
                    }
                    else if (e.KeyCode == Keys.F8)
                    {
                        if (btnMultiBooking.Enabled)
                        {
                            ShowMultiBooking();
                        }
                    }
                    else if (e.KeyCode == Keys.F9)
                    {

                        if (chkReverse.Checked == false)
                        {
                            chkReverse.Checked = true;
                        }
                        else
                        {
                            chkReverse.Checked = false;
                        }



                    }
                    //else if (e.KeyCode == Keys.Insert)
                    //{
                    //    SetAsDirected();
                    //}
                    else if (e.KeyCode == Keys.F10)
                    {


                        AccountCode();
                    }
                    else if (e.KeyCode == Keys.Escape)
                    {


                        if (btnExit.Enabled)
                        {


                            if (pnlVia == null || pnlVia.Visible == false)
                            {
                                if (DialogResult.Yes == MessageBox.Show("Are you sure you want to close?? ", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                                {
                                    this.Close();
                                }
                            }
                            else
                            {

                                btnSelectVia.Tag = null;

                                if (pnlVia != null)
                                {
                                    // pnlVia.Visible = false;
                                    ShowViaPoint(false);

                                }
                            }

                        }


                    }
                    else if (e.KeyCode == Keys.F11)
                    {
                        if (CheckDefaultValidation())
                        {
                            SendEmail(true);
                        }
                    }
                    //else if (e.KeyCode == Keys.F4)
                    //{
                    //    //if (AppVars.objPolicyConfiguration.EnablePDA.ToBool())
                    //    //{
                    //    //    object o = "LoadNearestMap";
                    //    //    SendAsyncRequest(o);
                    //    //}
                    //    //  LoadNearestMap();

                    //   // InitializetownsPanel();

                    //   // btnTowns.ToggleState = btnTowns.ToggleState == ToggleState.On ? ToggleState.Off : ToggleState.On;

                    //   // Showtowns(btnTowns.ToggleState);



                    //}
                    else if (e.KeyCode == Keys.F12)
                    {

                        if (dtpPickupTime_txt.Focused || dtpPickupDate.Focused)
                        {
                            this.Tag = "f12";
                        }
                        if (radPageView1 != null)
                        {
                            if (radPageView1.SelectedTab == tabCurrentBooking)
                            {

                                radPageView1.SelectedTab = this.tabNearestDrivers;
                                LoadNearestMap();
                            }

                            else
                            {
                                radPageView1.SelectedTab = this.tabCurrentBooking;
                                if (this.Tag.ToStr() == "f12")
                                {
                                    FocusOnPickupTime();

                                    if (this.CallRefNo.ToStr().Trim().Length > 0)
                                    {
                                        this.Tag = "cli";
                                    }
                                }

                            }
                        }
                        else
                            LoadNearestMap();



                    }
                    else if (e.KeyCode == Keys.Home || e.KeyCode == Keys.End)
                    {


                        if (objMaster.Current != null && btnSaveNew.Enabled == false)
                        {
                            return;
                        }


                        //if (objMaster.Current != null && (objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.DISPATCHED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.CANCELLED || objMaster.Current.BookingStatusId.ToInt() == Enums.BOOKINGSTATUS.NOPICKUP))
                        //{
                        //    if (AppVars.listUserRights.Count(c => c.formName == "frmBooking" &&
                        //    (c.functionId == "LOCK COMPLETED BOOKING" || c.functionId == "LOCK CANCELLED BOOKING" || c.functionId == "LOCK NOFARE BOOKING")) > 0)
                        //    {

                        //        return;
                        //    }
                        //}


                        //if (objMaster.Current == null || objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.WAITING)
                        //    this.bookingstatusId = Enums.BOOKINGSTATUS.WAITING;

                        //else
                        //    ResetBookingStatusId();

                        FocusOnCustomer();



                        if (objMaster.PrimaryKeyValue == null ||
                            (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.DISPATCHED
                            && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.CANCELLED
                            && objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.NOPICKUP))
                        {



                            if (pnlAutoDespatch.Visible)
                            {

                                if (e.KeyCode == Keys.End)
                                {

                                    chkAutoDespatch.Checked = true;
                                    chkBidding.Checked = true;

                                }
                                else
                                {
                                    chkAutoDespatch.Checked = false;
                                    chkBidding.Checked = false;
                                }
                            }

                        }

                        SaveAndClose();

                    }


                }
            }
            catch
            {


            }

        }

        int lastFocusOnAccounAddress = 0;
        private void AccountCode()
        {

            try
            {
                //if (DisableAccountCheck() == false)
                //{



                if (txtFromAddress.Focused)
                {
                    lastFocusOnAccounAddress = 1;

                }
                else if (txtToAddress.Focused)
                {

                    lastFocusOnAccounAddress = 2;
                }
                else
                    lastFocusOnAccounAddress = 0;

                frmBookingAccountCode Acccode = new frmBookingAccountCode();
                Acccode.ShowDialog();

                if (Acccode.ID != 0)
                {
                    chkIsCompanyRates.Checked = true;
                    ddlCompany.SelectedValue = Acccode.ID;
                }
                Acccode.Dispose();
                //  }
            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }
        private void SetLastFocus()
        {

            if (LastFocus == 1)
            {
                FocusOnFromAddress();

            }
            else if (LastFocus == 2)
            {
                FocusOnToAddress();

            }
            else
            {
                FocusOnCustomer();

            }


        }

        private void SetAsDirected()
        {
            if (txtToAddress.Focused)
            {

                AsDirected();
            }

        }

        private void AsDirected()
        {

            txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = "AS DIRECTED";
            SetDropOffZone("AS DIRECTED");
            FocusOnCustomer();
            txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

            InitializeJourneyTimePanel();
        }

        private void InitializeJourneyTimePanel()
        {

            if (lblJourneyTime != null) return;

            this.lblJourneyTime = new Label();
            this.numJourneyTime = new NumericUpDown();


            // 
            // lblJourneyTimeMins
            // 
            this.lblJourneyTime.BackColor = this.pnlOtherCharges.BackColor;
            this.lblJourneyTime.Enabled = true;
            this.lblJourneyTime.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold);
            this.lblJourneyTime.ForeColor = System.Drawing.Color.Black;
            this.lblJourneyTime.Location = new System.Drawing.Point(989, 1);
            this.lblJourneyTime.Name = "lblJourneyTimeMins";
            this.lblJourneyTime.Size = new System.Drawing.Size(152, 20);
            this.lblJourneyTime.TabIndex = 253;
            this.lblJourneyTime.Text = "Journey Time (mins)";
            // 
            // numJourneyTime
            // 
            //   this.numJourneyTime.EnableKeyMap = true;
            this.numJourneyTime.Font = new System.Drawing.Font("Tahoma", 10.25F);
            this.numJourneyTime.InterceptArrowKeys = false;
            this.numJourneyTime.Visible = true;
            this.numJourneyTime.Location = new System.Drawing.Point(1144, 1);
            this.numJourneyTime.Maximum = new decimal(new int[] {
            99999999,
            0,
            0,
            0});
            this.numJourneyTime.Name = "numJourneyTime";
            // 
            // 
            // 
            //  this.numJourneyTime.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //  this.numJourneyTime.ShowBorder = true;
            //  this.numJourneyTime.ShowUpDownButtons = false;
            this.numJourneyTime.Size = new System.Drawing.Size(55, 24);
            this.numJourneyTime.TabIndex = 239;
            this.numJourneyTime.TabStop = false;
            this.numJourneyTime.DecimalPlaces = 0;
            this.numJourneyTime.Validated += NumJourneyTime_Validated;
            //  this.numJourneyTime.SpinElement.ValueChanging += new ValueChangingEventHandler(SpinElement_ValueChanging); //comment
            //   ((Telerik.WinControls.UI.RadSpinElement)(this.numJourneyTime.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
            //   ((Telerik.WinControls.Primitives.FillPrimitive)(this.numJourneyTime.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            // //  //((Telerik.WinControls.UI.RadTextBoxItem)(this.numJourneyTime.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0";
            //   //((Telerik.WinControls.UI.RadTextBoxItem)(this.numJourneyTime.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));


            this.radPanel3.Controls.Add(lblJourneyTime);
            this.radPanel3.Controls.Add(numJourneyTime);


            lblJourneyTime.BringToFront();
            numJourneyTime.BringToFront();

            // this.ResumeLayout(false);




        }

        private void NumJourneyTime_Validated(object sender, EventArgs e)
        {
            GetFareByJourneyTime(numJourneyTime.Value);
        }



        private void GetFareByJourneyTime(decimal journeyMins)
        {

            if (IsDisplayingRecord) return;

            try
            {

                int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();
                int companyId = ddlCompany.SelectedValue.ToInt();
                //   int subCompanyId = ddlSubCompany.SelectedValue.ToInt();

                decimal fares = 0.00m;
                decimal agentFares = 0.00m;
                decimal companyFares = 0.00m;

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    //  var objFare = db.Fares.FirstOrDefault(c => c.VehicleTypeId == vehicleTypeId && (companyId == 0 || c.CompanyId == companyId));
                    //     var objFare = db.Fares.FirstOrDefault(c => c.VehicleTypeId == vehicleTypeId && ((companyId == 0 && c.CompanyId == null) || c.CompanyId == companyId));
                    var objFare = db.Fares.FirstOrDefault(c => c.VehicleTypeId == vehicleTypeId);

                    if (objFare != null)
                    {


                        decimal charges = journeyMins * objFare.PerMinJourneyCharges.ToDecimal();

                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {

                            charges = Math.Ceiling(charges);
                        }
                        else
                        {
                            decimal roundUp2 = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                            if (roundUp2 > 0)
                            {
                                charges = (decimal)Math.Ceiling(charges / roundUp2) * roundUp2;
                            }
                        }

                        if (companyId != 0)
                        {
                            var objCompany = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);

                            if (objCompany != null)
                            {
                                if (objCompany.IsAgent.ToBool() && ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH)
                                {
                                    companyFares = charges;

                                    if (objCompany.IsAmountWiseComm.ToBool())
                                        agentFares = objCompany.CommissionPerBooking.ToDecimal();

                                    else
                                        agentFares = (charges * objCompany.CommissionPerBooking.ToDecimal()) / 100;


                                    agentFares = Math.Round(agentFares * 4, MidpointRounding.ToEven) / 4;

                                    fares = companyFares - agentFares;

                                }
                                else
                                {
                                    companyFares = charges;

                                    if (objCompany.DriverFareReductionType.ToStr().ToLower() == "percent")
                                        fares = charges - (charges * objCompany.DriverFareReductionValue.ToDecimal()) / 100;
                                    else
                                        fares = charges - objCompany.DriverFareReductionValue.ToDecimal();


                                    fares = Math.Round(fares * 4, MidpointRounding.ToEven) / 4;
                                }



                            }


                        }
                        else
                        {

                            fares = charges;

                        }


                        numFareRate.Value = fares;

                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = fares;

                        }


                        //numBookingFee.Value = fares;

                        //if (numReturnBookingFee != null)
                        //{
                        //    numReturnBookingFee.Value = fares;
                        //}


                        if (numAgentCommission != null)
                        {
                            numAgentCommission.Value = agentFares;

                        }

                        if (companyFares == 0)
                            companyFares = fares;


                        if (numCompanyFares != null)
                        {
                            numCompanyFares.Value = companyFares;

                        }

                        if (numReturnCompanyFares != null)
                        {
                            numReturnCompanyFares.Value = companyFares;

                        }



                    }


                }

            }
            catch
            {


            }


        }



        private void SetFromBase()
        {

            if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.BASE)
            {
                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
            }
            else
            {
                PickFromBase();


            }

        }


        private void SetSubCompany()
        {
            try
            {
                if (AppVars.objSubCompany == null || AppVars.objSubCompany.CompanyName.ToStr().Trim().Length == 0)
                {


                    AppVars.objSubCompany = General.GetObject<Gen_SubCompany>(c => c.Id == 1);



                }

            }
            catch
            {


            }


        }

        private void PickFromBase()
        {
            txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            SetSubCompany();
            txtFromAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
            txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


        }


        private void SetToBase()
        {

            if (ddlToLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.BASE)
            {
                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
            }
            else
            {
                PickToBase();
            }

        }


        private void PickToBase()
        {
            txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            SetSubCompany();
            txtToAddress.Text = AppVars.objSubCompany.Address.ToStr().ToUpper().Trim();
            txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

        }



        private void btnCancelBooking_Click(object sender, EventArgs e)
        {

            try
            {


                if (objMaster.Current.BookingStatusId.ToInt() != Enums.BOOKINGSTATUS.CANCELLED)
                {

                    //if (DialogResult.Yes == RadMessageBox.Show("Are you sure you want to Cancel Booking ?", "Cancel Booking", MessageBoxButtons.YesNo))
                    //{

                    if (objMaster.PrimaryKeyValue != null)
                    {

                        frmCancelReason frm = new frmCancelReason(objMaster.PrimaryKeyValue.ToLong(), objMaster.Current.CancelReason.ToStr());
                        frm.StartPosition = FormStartPosition.CenterParent;
                        frm.ShowDialog();
                        frm.Dispose();

                        GC.Collect();


                        //  RefreshBookingList();
                        //  AppVars.frmMDI.RefreshDashBoard();

                    }

                    //}
                }
                else
                {
                    if (objMaster.PrimaryKeyValue != null)
                    {

                        frmCancelReason frm = new frmCancelReason(objMaster.PrimaryKeyValue.ToLong(), objMaster.Current.CancelReason.ToStr());
                        frm.ShowDialog();
                        frm.Dispose();
                    }
                }

            }

            catch (Exception ex)
            {


            }

        }



        private void ddlFromLocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillFromLocations();

        }

        private void ddlToLocType_SelectedIndexChanged(object sender, EventArgs e)
        {
            FillToLocations();

            if (ddlBookingType.SelectedValue != null)
                SetBookingTypeDetails(ddlBookingType.SelectedValue.ToInt());
        }

        private void ddlCustomerName_Validated(object sender, EventArgs e)
        {

            PickContactDetails(ddlCustomerName.Text.ToUpper().Trim(), ddlCompany.SelectedValue.ToInt());

        }

        private void PickContactDetails(string contactName, int companyId)
        {
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.CommandTimeout = 5;

                    var obj = db.Gen_Company_Contacts.Where(c => c.CompanyId == companyId && c.ContactName.ToUpper() == contactName)
                         .Select(args => new { args.MobileNo, args.TelephoneNo, args.SpecialNotes, args.DefaultVehicleId, args.Address, args.Attributes, args.Email, args.OrderNo }).FirstOrDefault();

                    if (obj != null)
                    {

                        SetVehicleType(obj.DefaultVehicleId.ToInt());



                        if (obj.Address.ToStr().Trim().Length > 0 && txtFromAddress.Text.Trim().ToUpper() != obj.Address.ToStr().Trim().ToUpper()
                           && (txtEmail.Tag == null || txtEmail.Tag.ToStr().Trim().ToUpper() != ddlCustomerName.Text.Trim().ToUpper())



                            && DialogResult.Yes == MessageBox.Show("Do you want to use contact's default address?", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))

                        {
                            SetAddress(obj.Address.ToStr().Trim(), true);



                            if ((txtEmail.Tag == null || txtEmail.Tag.ToStr().Trim().ToUpper() != ddlCustomerName.Text.Trim().ToUpper()))
                            {

                                SetSpecialRequirement(obj.SpecialNotes.ToStr().Trim());
                                SetOrderNo(obj.OrderNo.ToStr().Trim());
                                SetCustomerDetails(obj.MobileNo.ToStr().Trim(), obj.TelephoneNo.ToStr().Trim(), obj.Email.ToStr().Trim(), obj.Attributes.ToStr().Trim());
                            }

                            txtEmail.Tag = ddlCustomerName.Text;
                        }
                        else if (txtEmail.Tag == null || txtEmail.Tag.ToStr().Trim().ToUpper() != ddlCustomerName.Text.Trim().ToUpper())
                        {

                            if ((txtEmail.Tag == null || txtEmail.Tag.ToStr().Trim().ToUpper() != ddlCustomerName.Text.Trim().ToUpper()))
                            {

                                SetSpecialRequirement(obj.SpecialNotes.ToStr().Trim());
                                SetOrderNo(obj.OrderNo.ToStr().Trim());
                                SetCustomerDetails(obj.MobileNo.ToStr().Trim(), obj.TelephoneNo.ToStr().Trim(), obj.Email.ToStr().Trim(), obj.Attributes.ToStr().Trim());
                            }

                            txtEmail.Tag = ddlCustomerName.Text;


                        }
                    }

                }
            }
            catch
            {

            }


        }

        private void SetCustomerDetails(string mobile, string telephone, string email, string attributes)
        {
            // if (mobile.ToStr().Trim().Length > 0)
            txtCustomerMobileNo.Text = mobile;

            //   if (telephone.ToStr().Trim().Length > 0)
            txtCustomerPhoneNo.Text = telephone;

            if (txtAccountBookedBy == null || txtAccountBookedBy.Text.Trim().Length == 0)
                txtEmail.Text = email;


            if (attributes.ToStr().Trim().Length > 0)
            {

                if (btnAttributes.Tag.ToStr().Trim().Length == 0)
                {

                    this.btnAttributes.Text = "Attri&butes";

                    btnAttributes.Text += Environment.NewLine + attributes.TrimStart(new char[] { ',' }).TrimEnd(new char[] { ',' });
                    btnAttributes.Tag = attributes.ToStr().Trim();
                }
                else
                {
                    this.btnAttributes.Text = "Attri&butes";

                    btnAttributes.Text += Environment.NewLine + attributes.TrimStart(new char[] { ',' }).TrimEnd(new char[] { ',' });
                    btnAttributes.Tag = btnAttributes.Tag.ToStr().TrimEnd(new char[] { ',' }) + attributes.ToStr().Trim();


                }
            }
            setvipbookingtype();
        }

        private void SetCustomerNameInProperCase(string customerName)
        {
            ddlCustomerName.Text = customerName.ToUpper();


            //  SetAccountByCustomer();

        }





        private void txtviaPostCode_TextChanged(object sender, EventArgs e)
        {

            if (MapType == Enums.MAP_TYPE.NONE) return;

            AutoCompleteTextBox viaPostCode = (AutoCompleteTextBox)sender;


            string temp = string.Empty;
            string text = viaPostCode.Text;
            //  if (text.Length > 0)
            if (text.Length > 2)
            {


                temp = text.ToUpper();



                if (viaPostCode.SelectedItem != null && viaPostCode.SelectedItem == viaPostCode.Text)
                {
                    viaPostCode.Values = null;
                    viaPostCode.ResetListBox();
                    return;


                }


                text = text.ToLower();
                viaPostCode.ListBoxElement.Items.Clear();



            }
        }

        private void btnCustomerLister_Click(object sender, EventArgs e)
        {
            SearchBooking();
        }

        private void txtFromAddress_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {

                if (e.KeyCode == Keys.Enter)
                {

                    if (txtFromAddress.Text == "BASX")
                    {
                        ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                        LoadNearest();
                    }

                    else if (AppVars.keyLocations != null && AppVars.keyLocations.Contains(txtFromAddress.Text.ToStr().ToLower().Trim()) && txtFromAddress.ListBoxElement.Items.Count == 1)
                    {
                        txtFromAddress.SelectedItem = txtFromAddress.ListBoxElement.Items[0].ToStr();
                        txtFromAddress.Text = txtFromAddress.SelectedItem;
                    }


                    e.SuppressKeyPress = true;

                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        FocusOnFromDoor();
                    }
                    else
                    {

                        FocusOnToAddress();
                    }
                }
                //if (e.KeyCode == Keys.Home)
                //{
                //    ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                //    txtFromAddress.Text = AppVars.objPolicyConfiguration.BaseAddress.ToStr().Trim();
                //}
                if (e.KeyCode == Keys.Up && !txtFromAddress.ListBoxElement.Visible)
                {
                    SendKeys.Send("{Left}");
                }
                else if (e.KeyCode == Keys.Left)
                {
                    int Position = txtFromAddress.SelectionStart;
                    if (Position == 0)
                    {

                        FocusOnFromDoor();
                    }
                }
                else if (e.KeyCode == Keys.Down && !txtFromAddress.ListBoxElement.Visible)
                {
                    e.SuppressKeyPress = true;
                    FocusOnToAddress();
                }
                else if (e.KeyCode == Keys.Right)
                {
                    if (txtFromAddress.Text.Length == 0)
                    {
                        FocusOnFromDoor();
                        // FocusOnToAddress();
                    }
                }
                else if (e.KeyCode == Keys.Insert)
                {
                    FocusOnPickupDate();
                }
                else if (e.KeyCode == Keys.Tab)
                {

                    if (txtFromAddress.Text == "BASX")
                    {
                        ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                        LoadNearest();
                    }

                    else if (AppVars.keyLocations != null && AppVars.keyLocations.Contains(txtFromAddress.Text.ToStr().ToLower().Trim()) && txtFromAddress.ListBoxElement.Items.Count == 1)
                    {
                        txtFromAddress.SelectedItem = txtFromAddress.ListBoxElement.Items[0].ToStr();
                        txtFromAddress.Text = txtFromAddress.SelectedItem;
                    }
                    else
                    {
                        if (txtFromAddress.ListBoxElement.Items.Count > 0
                            && txtFromAddress.ListBoxElement.Visible
                            && txtFromAddress.ListBoxElement.SelectedItem != null)
                        {
                            txtFromAddress.OnSelectItem();
                        }

                    }


                    e.SuppressKeyPress = true;

                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        FocusOnFromDoor();
                    }
                    else
                    {

                        FocusOnToAddress();
                    }
                }

            }
            catch (Exception ex)
            {


            }
        }




        int LastFocus = 0;

        private void txtFromAddress_Enter(object sender, EventArgs e)
        {
            LastFocus = 1;

            txtFromAddress.Tag = txtFromAddress.Text;
        }

        private void txtToAddress_Enter(object sender, EventArgs e)
        {


            if (txtToAddress.Tag == null && this.DirectBookingPopup)
            {

                SetCustomerHistoryAddresses(txtToAddress);

            }

            LastFocus = 2;
            txtToAddress.Tag = txtToAddress.Text;



        }






        private void txtToAddress_KeyDown(object sender, KeyEventArgs e)
        {

            try
            {

                if (e.KeyCode == Keys.Enter)
                {

                    if (txtToAddress.Text == "BASX")
                    {
                        ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                    }
                    else if (AppVars.keyLocations != null && AppVars.keyLocations.Contains(txtToAddress.Text.ToStr().ToLower().Trim()) && txtToAddress.ListBoxElement.Items.Count == 1)
                    {
                        txtToAddress.SelectedItem = txtToAddress.ListBoxElement.Items[0].ToStr();
                        txtToAddress.Text = txtToAddress.SelectedItem;
                    }

                    e.SuppressKeyPress = true;
                    //  ddlCustomerName.Focus();

                    if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") == 0)
                    {
                        FocusOnCustomer();
                    }
                    else
                        FocusOnDriver();
                }
                else if (e.KeyCode == Keys.Insert)
                {

                    FocusOnFromAddress();
                }

                else if (e.KeyCode == Keys.Left)
                {
                    int Position = txtToAddress.SelectionStart;
                    if (Position == 0)
                    {
                        FocusOnFromAddress();
                    }
                }
                else if (e.KeyCode == Keys.Up)
                {
                    //int Position = txtToAddress.SelectionStart;
                    //if (Position == 0)
                    //{
                    //    e.SuppressKeyPress = true;
                    //    //  FocusOnFromAddress();
                    //    SendKeys.Send("{Up}");
                    //    ////   ddlCustomerName.Focus();
                    //    //   SendKeys.Send("{Right}");
                    //}
                    //   FocusOnFromDoor();
                    // SendKeys.Send("{Up}");
                }
                //if (e.KeyCode == Keys.Up && !txtToAddress.ListBoxElement.Visible)
                //{
                //    FocusOnToDoor();
                //   // SendKeys.Send("{Up}");
                //}
                else if (e.KeyCode == Keys.Down)
                {


                    if (txtToAddress.ListBoxElement.Visible == false)
                    {
                        // int a = txtToAddress.SelectionStart = txtToAddress.Text.Length;
                        e.SuppressKeyPress = true;
                        //  ddlCustomerName.Focus();
                        FocusOnCustomer();
                    }
                }
                else if (e.KeyCode == Keys.Tab)
                {

                    if (txtToAddress.Text == "BASX")
                    {
                        ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.BASE;
                    }
                    else if (AppVars.keyLocations != null && AppVars.keyLocations.Contains(txtToAddress.Text.ToStr().ToLower().Trim()) && txtToAddress.ListBoxElement.Items.Count == 1)
                    {
                        txtToAddress.SelectedItem = txtToAddress.ListBoxElement.Items[0].ToStr();
                        txtToAddress.Text = txtToAddress.SelectedItem;
                    }
                    else
                    {
                        if (txtToAddress.ListBoxElement.Items.Count > 0
                            && txtToAddress.ListBoxElement.Visible
                            && txtToAddress.ListBoxElement.SelectedItem != null)
                        {
                            txtToAddress.OnSelectItem();
                        }

                    }

                    e.SuppressKeyPress = true;
                    //  ddlCustomerName.Focus();
                    FocusOnCustomer();
                }
                //fwdkh3

            }
            catch (Exception ex)
            {


            }
        }

        private void FocusOnVehicle()
        {
            ddlVehicleType.Focus();

        }


        private void FocusOnToDoor()
        {
            txtToFlightDoorNo.Focus();

        }

        private void btnMultiVehicle_Click(object sender, EventArgs e)
        {
            ShowMultiVehicleBooking();
        }


        private void ShowMultiVehicleBooking()
        {

            try
            {


                string customerName = ddlCustomerName.Text.ToStr().Trim();
                string MobileNo = txtCustomerMobileNo.Text.Trim();
                string telephoneNo = txtCustomerPhoneNo.Text.Trim();

                string error = string.Empty;


                if (ddlPaymentType.SelectedValue == null)
                {

                    error += "Required : Payment Type";
                }

                if (ddlVehicleType.SelectedValue == null)
                {

                    error += "Required : Vehicle Type";
                }

                // ADDED ON 19/APRIL/2016 ON REQUEST OF DOUBLE O CARS (BOOKED BY SHOULD BE MANDATORY)
                if (ddlCompany.SelectedValue != null && txtAccountBookedBy != null && txtAccountBookedBy.Text.Trim().Length == 0 && txtAccountBookedBy.Visible == true)
                {
                    error += "Required : Booked By";
                }


                if (!string.IsNullOrEmpty(error))
                {
                    ENUtils.ShowMessage(error);
                    return;

                }


                if (chkIsCompanyRates.Checked && ddlCompany.SelectedValue == null)
                {
                    chkIsCompanyRates.Checked = false;
                }

                Booking obj = new Booking();


                if (string.IsNullOrEmpty(customerName))
                {

                    customerName = "PASSENGER";
                }



                obj.SubcompanyId = ddlSubCompany.SelectedValue.ToIntorNull();
                obj.BookingTypeId = ddlBookingType.SelectedValue.ToIntorNull();

                int FromlocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int TolocTypeId = ddlToLocType.SelectedValue.ToInt();

                obj.BookingDate = DateTime.Now;

                obj.FromLocTypeId = FromlocTypeId.ToIntorNull();
                obj.ToLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                obj.FromLocId = null;
                obj.ToLocId = null;


                if (ddlReturnFromAirport != null)
                    obj.ReturnFromLocId = ddlReturnFromAirport.SelectedValue.ToIntorNull();

                obj.DriverId = ddlDriver.SelectedValue.ToIntorNull();
                obj.IsConfirmedDriver = chkAllocateDriver.Checked;

                obj.VehicleTypeId = ddlVehicleType.SelectedValue.ToIntorNull();
                obj.PaymentTypeId = ddlPaymentType.SelectedValue.ToIntorNull();
                obj.CompanyId = ddlCompany.SelectedValue.ToIntorNull();
                obj.DepartmentId = ddlDepartment != null ? ddlDepartment.SelectedValue.ToIntorNull() : null;


                obj.IsQuotation = chkQuotation.Checked;

                obj.IsCompanyWise = chkIsCompanyRates.Checked;


                obj.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";


                obj.OrderNo = txtOrderNo != null ? txtOrderNo.Text.Trim() : "";
                obj.PupilNo = txtPupilNo != null ? txtPupilNo.Text.Trim() : "";


                if (opt_one.Checked)
                {
                    obj.JourneyTypeId = Enums.JOURNEY_TYPES.ONEWAY;
                }
                else if (opt_return.Checked)
                {
                    obj.JourneyTypeId = Enums.JOURNEY_TYPES.RETURN;
                }
                else if (opt_waitreturn.Checked)
                {
                    obj.JourneyTypeId = Enums.JOURNEY_TYPES.WAITANDRETURN;

                }





                obj.PickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();




                if (dtpReturnPickupDate != null)
                {

                    if (dtpReturnPickupDate.Value != null && dtpReturnPickupTime.Value != null && opt_return.Checked)
                    {
                        obj.ReturnPickupDateTime = string.Format("{0:dd/MM/yyyy HH:mm}", dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();
                    }
                    else
                        obj.ReturnPickupDateTime = null;

                    //obj.ReturnDriverId = ddlReturnDriver.SelectedValue.ToIntorNull();

                    if (numReturnFare != null)
                        obj.ReturnFareRate = numReturnFare.Value.ToDecimal();

                }




                obj.FareRate = numFareRate.Value.ToDecimal();


                if (numCompanyFares != null)
                    obj.CompanyPrice = numCompanyFares.Value.ToDecimal();


                obj.CustomerPrice = numBookingFee.Value.ToDecimal();

                if (numReturnFare != null)
                    obj.ReturnFareRate = numReturnFare.Value.ToDecimal();


                if (lblReturnCompanyPrice != null && opt_return.Checked)
                {
                    obj.WaitingMins = numReturnCompanyFares.Value;
                    //  obj.ReturnCustomerPrice = numReturnCustFare.Value.ToDecimal();
                }

                obj.CustomerId = ddlCustomerName.Tag.ToIntorNull();




                obj.CustomerName = customerName;
                obj.CustomerPhoneNo = telephoneNo;
                obj.CustomerMobileNo = MobileNo;
                obj.CustomerEmail = txtEmail.Text.Trim();

                obj.SpecialRequirements = txtSpecialRequirements.Text.Trim();


                //    if (FromlocTypeId == Enums.LOCATION_TYPES.ADDRESS || FromlocTypeId == Enums.LOCATION_TYPES.BASE)
                obj.FromAddress = txtFromAddress.Text.Trim();

                //else if (FromlocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    obj.FromAddress = txtFromPostCode.Text.Trim();
                //else
                //{
                //    obj.FromAddress = ddlFromLocation.Text.Trim();
                //}



                obj.FromDoorNo = txtFromFlightDoorNo.Text.Trim();
                obj.FromStreet = txtFromStreetComing.Text.Trim();
                obj.FromPostCode = txtFromPostCode.Text.Trim();




                //  if (TolocTypeId == Enums.LOCATION_TYPES.ADDRESS || TolocTypeId == Enums.LOCATION_TYPES.BASE)
                obj.ToAddress = txtToAddress.Text.Trim();

                //else if (TolocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //    obj.ToAddress = txtToPostCode.Text.Trim();
                //else
                //{
                //    obj.ToAddress = ddlToLocation.Text.Trim();
                //}

                if (string.IsNullOrEmpty(obj.ToAddress))
                {
                    UpdateAsDirected();
                    obj.ToAddress = txtToAddress.Text.Trim();
                }


                //if (AppVars.objPolicyConfiguration.ShowAreaWithPlots.ToBool())
                //{

                if (ddlPickupPlot.SelectedValue == null)
                    obj.ZoneId = GetZoneId(obj.FromAddress);
                else
                    obj.ZoneId = ddlPickupPlot.SelectedValue.ToIntorNull();

                if (ddlDropOffPlot.SelectedValue == null)
                    obj.DropOffZoneId = GetZoneId(obj.ToAddress);
                else
                    obj.DropOffZoneId = ddlDropOffPlot.SelectedValue.ToIntorNull();
                //    }


                obj.ToDoorNo = txtToFlightDoorNo.Text.Trim();
                obj.ToStreet = txtToStreetComing.Text.Trim();
                obj.ToPostCode = txtToPostCode.Text.Trim();



                obj.CallRefNo = this.CallRefNo;

                obj.BookedBy = txtAccountBookedBy != null ? txtAccountBookedBy.Text.Trim() : "";


                if (chkTakenByAgent != null)
                {


                    obj.AgentCommission = numAgentCommission.Value;
                    obj.JobTakenByCompany = chkTakenByAgent.Checked;
                    //    obj.AgentCommissionPercent = numAgentCommissionPercent.Value.ToInt();
                    //     obj.FromFlightNo = ddlAgentCommissionType.Text.Trim();
                }


                if (string.IsNullOrEmpty(obj.FromAddress))
                {
                    error += "Required : Pickup Point" + Environment.NewLine;
                }





                if (!string.IsNullOrEmpty(error))
                {
                    ENUtils.ShowMessage(error);
                    return;

                }


                obj.AutoDespatch = chkAutoDespatch.Checked;


                //int mins = numBeforeMinutes.Value.ToInt();

                //if (mins == 0)
                //{

                //    if (obj.FromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                //    {
                //        mins = AppVars.objPolicyConfiguration.AirportBookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
                //    }
                //    else
                //    {
                //        mins = AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt() + AppVars.objPolicyConfiguration.AutoDespatchMinsBeforeDue.ToInt();
                //    }

                //}

                //obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-mins);

                obj.AutoDespatch = chkAutoDespatch.Checked;
                obj.IsBidding = chkBidding.Checked;

                //if (AppVars.objPolicyConfiguration.AutoBookingDueAlert.ToBool())
                //{

                //    decimal mile = General.CalculateDistanceFromBaseFull(obj.FromAddress.ToStr());

                //    obj.DeadMileage = mile;

                //    if (mile > 0 && mile < 1)
                //    {
                //        mile = 1;
                //    }
                //    else
                //    {
                //        mile = Math.Round(mile, 0);
                //    }

                //    obj.ExtraMile = mile;

                //}


                if (chkLead.Checked)
                {
                    obj.AutoDespatchTime = obj.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt()).ToDateTime();
                    obj.DeadMileage = numLead.Value;
                }


                obj.SMSType = Enums.SMSACCOUNT_TYPE.MODEMSMS;

                obj.DistanceString = lblMap.Text;

                if (pnlVia != null)
                {
                    string[] skipProperties = { "Gen_Location", "Booking", "Gen_LocationType" };
                    IList<Booking_ViaLocation> savedList = obj.Booking_ViaLocations;
                    List<Booking_ViaLocation> listofDetail = (from r in grdVia.Rows
                                                              select new Booking_ViaLocation
                                                              {
                                                                  Id = r.Cells["ID"].Value.ToLong(),
                                                                  BookingId = r.Cells["MASTERID"].Value.ToLong(),
                                                                  ViaLocTypeId = r.Cells["FROMVIALOCTYPEID"].Value.ToIntorNull(),
                                                                  ViaLocTypeLabel = r.Cells["FROMTYPELABEL"].Value.ToStr(),
                                                                  ViaLocTypeValue = r.Cells["FROMTYPEVALUE"].Value.ToStr(),

                                                                  ViaLocId = r.Cells["VIALOCATIONID"].Value.ToIntorNull(),
                                                                  ViaLocLabel = r.Cells["VIALOCATIONLABEL"].Value.ToStr(),
                                                                  ViaLocValue = r.Cells["VIALOCATIONVALUE"].Value.ToStr()

                                                              }).ToList();


                    Utils.General.SyncChildCollection(ref savedList, ref listofDetail, "Id", skipProperties);

                }


                if (chkQuotedPrice != null)
                    obj.IsQuotedPrice = chkQuotedPrice.Checked;


                if (ddlEscort != null)
                {
                    obj.EscortId = ddlEscort.SelectedValue.ToIntorNull();

                    if (numEscortPrice != null)
                        obj.EscortPrice = numEscortPrice.Value;

                }

                if (chkHasPriority.Visible)
                {
                    if (obj.ExtraMile == 0)
                    {
                        obj.ExtraMile = GetPriority(obj);
                    }
                }


                obj.CongtionCharges = numCongChrgs.Value;
                obj.ExtraDropCharges = numExtraChrgs.Value;

                obj.ServiceCharges = numBookingFee.Visible ? numBookingFee.Value : 0.00m;
                frmMultiVehicleBooking frm = new frmMultiVehicleBooking(obj);



                if (txtReturnSpecialReq != null)
                {
                    frm.ReturnSpecialReq = txtReturnSpecialReq.Text.Trim();
                    frm.ReturnCustomerFares = numReturnBookingFee.Value.ToDecimal();
                }


                frm.CustomLead = chkLead.Checked;
                frm.ReturnBookingFee = numReturnBookingFee != null && numReturnBookingFee.Visible ? numReturnBookingFee.Value : 0.00m;


                if (obj.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && chkHasPriority.Visible)
                {

                    frm.ReturnPriority = GetReturnPriority(obj);
                }

                frm.ShowDialog();


                if (frm.Saved)
                {

                    General.SendMessageToPDA("request broadcast=" + RefreshTypes.REFRESH_REQUIRED_DASHBOARD + "=" + frm.savedAdvanceBookingId);


                    // new BroadcasterData().BroadCastToAll(RefreshTypes.REFRESH_REQUIRED_DASHBOARD);
                    //   AppVars.frmMDI.RefreshRequiredDashBoard();


                    this.Close();
                }

                frm.Dispose();

                frm = null;

                GC.Collect();
            }
            catch (Exception ex)
            {


            }
        }

        private bool CheckOneWayDriverAllocation()
        {
            bool rtn = true;

            try
            {
                if (chkAllocateDriver.Checked && ddlDriver.SelectedValue.ToInt() > 0)
                {
                    int driverId = ddlDriver.SelectedValue.ToInt();
                    if (btnExcludeDrivers.Tag.ToStr().Trim().Length > 0)
                    {


                        if (btnExcludeDrivers.Tag.ToStr().Trim().Contains("," + driverId + ","))
                        {
                            MessageBox.Show("Driver exist in Excluded List");
                            rtn = false;
                            ddlDriver.Focus();

                        }
                    }



                    if (btnAttributes.Tag.ToStr().Trim().Length > 0)
                    {

                        string[] bookingAttrs = btnAttributes.Tag.ToStr().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
                        string drvAttributes = string.Empty;

                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            drvAttributes = db.Fleet_Drivers.FirstOrDefault(c => c.Id == driverId).DefaultIfEmpty().AttributeValues.ToStr().Trim();

                        }

                        //= ObjDriver.AttributeValues.ToStr() + "," + ObjDriver.Fleet_VehicleType.AttributeValues;

                        int totalAttr = bookingAttrs.Count();
                        int matchCnt = 0;
                        string unmatchedAttrValue = string.Empty;
                        string[] drvAttrsArr = drvAttributes.ToStr().Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                        foreach (var item in bookingAttrs)
                        {


                            if (drvAttrsArr.Count(c => c.ToLower() == item.ToLower()) > 0)
                            {
                                matchCnt++;

                            }
                            else
                            {

                                unmatchedAttrValue += item + ",";
                            }
                        }

                        if (matchCnt != totalAttr)
                        {

                            if (unmatchedAttrValue.EndsWith(","))
                            {
                                unmatchedAttrValue = unmatchedAttrValue.Substring(0, unmatchedAttrValue.LastIndexOf(","));

                            }

                            MessageBox.Show(("This Driver doesn't have below attributes" + Environment.NewLine + "(" + unmatchedAttrValue + ")"), "Warning");
                            rtn = false;
                            ddlDriver.Focus();



                        }
                    }


                }



            }
            catch
            {


            }

            return rtn;
        }





        bool IsAutoCalcFares = false;
        private void chkReverse_ToggleStateChanging(object sender, EventArgs args)
        {
            //  CancelWebClientAsync();



            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                IsAutoCalcFares = true;
                AppVars.objPolicyConfiguration.AutoCalculateFares = false;

            }

            SetReverseAddress(ddlFromLocType.SelectedValue.ToIntorNull(), ddlToLocType.SelectedValue.ToIntorNull(),
                            null, null, txtFromFlightDoorNo.Text.ToStr(),
                               txtFromAddress.Text.ToStr(), txtFromPostCode.Text.ToStr(), txtFromStreetComing.Text.ToStr(), txtToFlightDoorNo.Text.ToStr(), txtToAddress.Text.ToStr(),
                               txtToStreetComing.Text.ToStr(), txtToPostCode.Text.ToStr());



            AppVars.objPolicyConfiguration.AutoCalculateFares = IsAutoCalcFares;




            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                CalculateAutoFares();

            }
            LoadNearestMap();
        }




        private void SetReverseAddress(int? fromLocTypeId, int? toLocTypeId, int? fromLocId, int? toLocId, string fromDoorNo, string fromAddress, string fromPostCode,
                                        string fromStreet, string toDoorNo, string toAddress, string toStreet, string toPostCode)
        {

            fromLocTypeId = fromLocTypeId ^ toLocTypeId;
            toLocTypeId = toLocTypeId ^ fromLocTypeId;
            fromLocTypeId = fromLocTypeId ^ toLocTypeId;

            if (fromLocId != null && toLocId != null)
            {

                fromLocId = fromLocId ^ toLocId;
                toLocId = toLocId ^ fromLocId;
                fromLocId = fromLocId ^ toLocId;
            }

            if (fromLocId == null)
                fromLocId = toLocId;

            if (toLocId == null)
                toLocId = fromLocId;

            string temp = fromAddress;
            fromAddress = toAddress;
            toAddress = temp;


            temp = fromDoorNo;
            fromDoorNo = toDoorNo;
            toDoorNo = temp;


            temp = fromStreet;
            fromStreet = toStreet;
            toStreet = temp;


            temp = fromPostCode;
            fromPostCode = toPostCode;
            toPostCode = temp;


            ddlFromLocType.SelectedValue = fromLocTypeId;
            ddlToLocType.SelectedValue = toLocTypeId;

            //if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            txtFromFlightDoorNo.Text = fromDoorNo;
            txtFromStreetComing.Text = fromStreet;
            this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtFromAddress.Text = fromAddress;
            txtFromFlightDoorNo.Text = fromDoorNo;

            SetPickupZone(fromAddress.ToStr().ToUpper());
            this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
            //{
            //  ddlFromLocation.SelectedValue = fromLocId;
            //  txtFromFlightDoorNo.Text = fromDoorNo;
            //  txtFromStreetComing.Text = fromStreet;
            // }
            //else if (fromLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{

            //    txtFromPostCode.Text = fromPostCode;
            //    SetPickupZone(fromPostCode.ToStr().ToUpper());


            //    txtFromFlightDoorNo.Text = fromDoorNo;
            //    txtFromStreetComing.Text = fromStreet;

            //}
            //else
            //{
            //    ddlFromLocation.SelectedValue = fromLocId;
            //}


            //if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId.ToInt() == Enums.LOCATION_TYPES.BASE)
            //{
            this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
            txtToAddress.Text = toAddress;
            SetDropOffZone(toAddress.ToStr().ToUpper());
            this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


            txtToFlightDoorNo.Text = toDoorNo;
            txtToStreetComing.Text = toStreet;

            //   }
            //else if (toLocTypeId.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
            //{

            //    txtToPostCode.Text = toPostCode;

            //    SetDropOffZone(toPostCode);
            //    txtToFlightDoorNo.Text = toDoorNo;
            //    txtToStreetComing.Text = toStreet;
            //}
            //else
            //{
            //    ddlToLocation.SelectedValue = toLocId;
            //}




            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }



        private void txtToFlightDoorNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();



                string flight = string.Empty;

                if (dtpReturnPickupDate != null && dtpReturnPickupDate.Value != null && AppVars.listUserRights.Count(c => c.functionId == "SEARCH FLIGHT NO") > 0)
                {

                    if (lblToDoorFlightNo.Text.ToLower().Contains("flight"))
                    {

                        flight = txtToFlightDoorNo.Text;
                        if (flight.Length >= 3)
                        {
                            frmFlightTracking frm = new frmFlightTracking(flight, dtpReturnPickupDate.Value);
                            frm.StartPosition = FormStartPosition.CenterParent;
                            frm.ShowDialog();



                            List<object[]> obj1 = null;
                            obj1 = frm.ListofData;

                            int AllowanceMins = 0;

                            if (obj1 != null && obj1.Count > 0)
                            {

                                //string airportPostCode = General.GetPostCodeMatch(txtToAddress.Text).ToStr().Trim();



                                try
                                {

                                    if ((AppVars.listUserRights.Count(c => c.functionId == "CHANGE ADDRESS FROM FLIGHT DETAILS") > 0) && obj1[0][5].ToStr().Contains(","))
                                    {
                                        string[] arr = obj1[0][5].ToStr().Split(',');

                                        if (arr.Count() == 2 && arr[0].ToStr().Trim().Length > 0)
                                        {
                                            string airportCode = arr[0].ToStr().Trim().ToUpper();
                                            string airport = string.Empty;
                                            using (TaxiDataContext db = new TaxiDataContext())
                                            {

                                                if (airportCode == "LHR")
                                                {
                                                    string terminal = obj1[0][4].ToStr().Trim().ToStr();


                                                    airport = db.Gen_Locations.Where(c => c.City == airportCode && c.LocationName.EndsWith(terminal))
                                                        .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();

                                                }
                                                else if (airportCode == "LGW")
                                                {
                                                    string terminal = obj1[0][4].ToStr().Trim().ToStr();

                                                    if (terminal == "N")
                                                        terminal = "NORTH";
                                                    else if (terminal == "S")
                                                        terminal = "SOUTH";




                                                    airport = db.Gen_Locations.Where(c => c.City == airportCode && c.LocationName.EndsWith(terminal))
                                                        .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();

                                                }
                                                else
                                                    airport = db.Gen_Locations.Where(c => c.City == airportCode)
                                                            .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();




                                            }


                                            if (airport.ToStr().Trim().Length > 0)

                                            {
                                                if (txtReturnFrom != null && txtReturnFrom.Visible)
                                                {
                                                    //xxra
                                                    //SetAddress(airport, false, true);
                                                    txtReturnFrom.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                                                    txtReturnFrom.Text = airport;
                                                    txtReturnFrom.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                                                }


                                                else if (airport.ToStr().Trim().ToUpper().Replace("  ", " ").Replace(",", "") != txtToAddress.Text.ToStr().Trim().ToUpper().Replace("  ", " ").Replace(",", ""))
                                                {

                                                    SetAddress(airport, false, true);

                                                    LoadNearestMap();
                                                    UpdateAutoCalculateFares();
                                                }


                                            }
                                            else
                                            {
                                                MessageBox.Show("Check flight number.Arrival airport doesn’t match");
                                            }


                                        }


                                    }


                                    //  }
                                }
                                catch
                                {

                                }

                                DateTime scheduledDate = obj1[0][2].ToDateTime();
                                DateTime arrivaldatetime = obj1[0][2].ToDateTime();


                                DateTime arrivalMins = DateTime.Now;

                                if (obj1[0][2].ToStr().Length == 0)
                                {
                                    arrivalMins = obj1[0][1].ToDateTime();
                                    arrivaldatetime = obj1[0][1].ToDateTime();
                                }
                                else
                                {
                                    arrivalMins = obj1[0][2].ToDateTime();
                                }


                                try
                                {

                                    string city = obj1[0][3].ToStr();
                                    string Terminal = obj1[0][4].ToStr();

                                    dtpReturnPickupDate.Value = arrivalMins.ToDate();
                                    dtpReturnPickupTime.Value = arrivalMins;


                                    txtToStreetComing.Text = "Arriving at " + string.Format("{0:HHmm}", arrivalMins) + " from " + city + " in T" + Terminal;


                                    arrivalMins = arrivalMins.AddMinutes(AllowanceMins);
                                    dtpReturnPickupDate.Value = arrivalMins.ToDate();
                                    dtpReturnPickupTime.Value = arrivalMins;





                                }
                                catch
                                {

                                }


                                flight = "exist";


                            }
                            frm.Dispose();
                        }
                    }

                }




                if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                {

                    FocusOnCustomer();
                }

                else
                {

                    FocusOnCustomer();
                }

            }
            else if (e.KeyCode == Keys.Left)
            {
                if (txtToFlightDoorNo.SelectionStart == 0)
                    FocusOnToAddress();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtFromFlightDoorNo.Focus();

            }
            else if (e.KeyCode == Keys.Down)
            {
                FocusOnCustomer();
            }

        }




        private void FocusOnCustomer()
        {
            ddlCustomerName.Focus();
            if (ddlCustomerName.Text.Trim().Length > 0)
                ddlCustomerName.Select(0, ddlCustomerName.Text.Trim().ToStr().Length);
        }

        private void FocusOnToStreet()
        {
            txtToStreetComing.Focus();

        }

        private void FocusOnFromStreet()
        {
            txtFromStreetComing.Focus();

        }

        private void FocusOnFromDoor()
        {

            txtFromFlightDoorNo.Focus();


        }


        FlightData flightInfo = null;

        private void txtFromFlightDoorNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                int? LocTypeId = ddlFromLocType.SelectedValue.ToIntorNull();

                string flight = string.Empty;

                if (AppVars.listUserRights.Count(c => c.functionId == "SEARCH FLIGHT NO") > 0)
                {

                    if (LocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        flight = txtFromFlightDoorNo.Text;


                        if (flight.Length >= 3)
                        {
                            frmFlightTracking frm = new frmFlightTracking(flight, dtpPickupDate.Value);
                            frm.StartPosition = FormStartPosition.CenterParent;
                            frm.ShowDialog();
                            //  FlightData   flightInfo = frm.data;
                            flightInfo = frm.data;


                            List<object[]> obj1 = null;
                            obj1 = frm.ListofData;

                            int AllowanceMins = 0;

                            if (obj1 != null && obj1.Count > 0)
                            {

                                string airportPostCode = General.GetPostCodeMatch(txtFromAddress.Text).ToStr().Trim();

                                //if (airportPostCode.Length > 0)
                                //{
                                //    using (TaxiDataContext db = new TaxiDataContext())
                                //    {
                                //        AllowanceMins = db.Gen_SysPolicy_AirportPickupCharges.Where(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode)
                                //        .Select(c => c.AllownceMins).FirstOrDefault().DefaultIfEmpty().ToInt();
                                //    }
                                //}

                                try
                                {

                                    if ((AppVars.listUserRights.Count(c => c.functionId == "CHANGE ADDRESS FROM FLIGHT DETAILS") > 0) && obj1[0][5].ToStr().Contains(","))
                                    {
                                        string[] arr = obj1[0][5].ToStr().Split(',');

                                        if (arr.Count() == 2 && arr[0].ToStr().Trim().Length > 0)
                                        {
                                            string airportCode = arr[0].ToStr().Trim().ToUpper();
                                            string airport = string.Empty;
                                            using (TaxiDataContext db = new TaxiDataContext())
                                            {

                                                if (airportCode == "LHR")
                                                {
                                                    string terminal = obj1[0][4].ToStr().Trim().ToStr();


                                                    airport = db.Gen_Locations.Where(c => c.City == airportCode && c.LocationName.EndsWith(terminal))
                                                        .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();

                                                }
                                                else if (airportCode == "LGW")
                                                {
                                                    string terminal = obj1[0][4].ToStr().Trim().ToStr();

                                                    if (terminal == "N")
                                                        terminal = "NORTH";
                                                    else if (terminal == "S")
                                                        terminal = "SOUTH";




                                                    airport = db.Gen_Locations.Where(c => c.City == airportCode && c.LocationName.EndsWith(terminal))
                                                        .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();

                                                }
                                                else if (airportCode == "MAN")
                                                {
                                                    string terminal = obj1[0][4].ToStr().Trim().ToStr();

                                                    if (terminal == "1")
                                                        terminal = "1";
                                                    else if (terminal == "2")
                                                        terminal = "2";
                                                    else if (terminal == "3")
                                                        terminal = "3";


                                                    if (terminal.Length > 0)
                                                        airport = db.Gen_Locations.Where(c => c.City == airportCode && c.LocationName.EndsWith(terminal))
                                                            .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();
                                                    else
                                                        airport = db.Gen_Locations.Where(c => c.City == airportCode)
                                                           .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();
                                                }
                                                else
                                                    airport = db.Gen_Locations.Where(c => c.City == airportCode)
                                                            .Select(c => c.FullLocationName).FirstOrDefault().ToStr().Trim();




                                            }


                                            if (airport.ToStr().Trim().Length > 0)

                                            {
                                                if (airport.ToStr().Trim().ToUpper().Replace("  ", " ").Replace(",", "") != txtFromAddress.Text.ToStr().Trim().ToUpper().Replace("  ", " ").Replace(",", ""))
                                                {

                                                    SetAddress(airport, true, true);

                                                    LoadNearestMap();
                                                    UpdateAutoCalculateFares();
                                                }


                                            }
                                            else
                                            {
                                                MessageBox.Show("Check flight number.Arrival airport doesn’t match");
                                            }


                                        }


                                    }


                                    //  }
                                }
                                catch
                                {

                                }

                                DateTime scheduledDate = obj1[0][2].ToDateTime();
                                DateTime arrivaldatetime = obj1[0][2].ToDateTime();


                                DateTime arrivalMins = DateTime.Now;

                                if (obj1[0][2].ToStr().Length == 0)
                                {
                                    arrivalMins = obj1[0][1].ToDateTime();
                                    arrivaldatetime = obj1[0][1].ToDateTime();
                                }
                                else
                                {
                                    arrivalMins = obj1[0][2].ToDateTime();
                                }


                                try
                                {
                                    //  IsCalculatingFares = true;
                                    string city = obj1[0][3].ToStr();
                                    string Terminal = obj1[0][4].ToStr();

                                    dtpPickupDate.Value = arrivalMins.ToDate();
                                    SetPickupTimeHourAndMin(arrivalMins);
                                    //if(arrivalMins.AddMinutes(-AllowanceMins).Date!=dtpPickupDate.Value)
                                    // txtFromStreetComing.Text = "Arriving at " + dtpPickupTime_txt.Text + " " + dtpPickupDate.Value.ToDateTime().ToShortDateString() + " from " + city + " in T" + Terminal;
                                    //else
                                    txtFromStreetComing.Text = "Arriving at " + dtpPickupTime_txt.Text + " from " + city + " in T" + Terminal;


                                    arrivalMins = arrivalMins.AddMinutes(AllowanceMins);
                                    dtpPickupDate.Value = arrivalMins.ToDate();
                                    SetPickupTimeHourAndMin(arrivalMins);

                                    dtpPickupTime.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, dtpPickupTime_txt.Text.Substring(0, 2).ToInt(), dtpPickupTime_txt.Text.Substring(2).ToInt(), 0);




                                }
                                catch
                                {

                                }
                                //   IsCalculatingFares = false;

                                flight = "exist";



                                //try
                                //{
                                //      FlightTrackerdll.FlightDetail.
                                //}
                                //catch
                                //{

                                //}

                            }
                            frm.Dispose();
                        }
                    }

                }





                int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                if ((LocTypeId == Enums.LOCATION_TYPES.ADDRESS || LocTypeId == Enums.LOCATION_TYPES.BASE || LocTypeId == Enums.LOCATION_TYPES.AIRPORT))
                {
                    // SetPickupZone(txtFromAddress.Text);



                    // FocusToPassenger();
                    if (LocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        if (flight == "exist")
                            FocusOnToAddress();
                        else
                            FocusOnFromStreet();
                    }

                    else if ((toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE))
                    {


                        FocusOnToAddress();

                    }
                    else if ((toLocTypeId == Enums.LOCATION_TYPES.POSTCODE))
                    {
                        FocusOnToPostCode();

                    }



                }



                else
                {
                    //  SetPickupZone(txtFromAddress.Text);

                    FocusToPassenger();


                }

            }
            else if (e.KeyCode == Keys.Right)
            {
                if (txtFromFlightDoorNo.SelectionStart == txtFromFlightDoorNo.Text.Length)
                    txtToFlightDoorNo.Focus();
            }
            else if (e.KeyCode == Keys.Left)
            {
                if (txtFromFlightDoorNo.SelectionStart == 0)
                    txtFromAddress.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                FocusOnToDoor();
            }

        }

        private void FocusOnToAddress()
        {
            txtToAddress.Focus();

        }





        private void FocusOnToPostCode()
        {
            txtToPostCode.Focus();

        }

        private void txtFromStreetComing_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                int? LocTypeId = ddlFromLocType.SelectedValue.ToIntorNull();
                int? toLocTypeId = ddlToLocType.SelectedValue.ToIntorNull();
                if (LocTypeId == Enums.LOCATION_TYPES.AIRPORT || LocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                {
                    if (toLocTypeId == Enums.LOCATION_TYPES.ADDRESS || toLocTypeId == Enums.LOCATION_TYPES.BASE)
                    {
                        FocusOnToAddress();
                    }
                    else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                    {
                        FocusOnToPostCode();
                    }


                    else if (LocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                    {
                        FocusOnToAddress();
                    }


                }

            }
        }

        private void txtToPostCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnToDoor();

            }
        }

        private void txtToStreetComing_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnCustomer();

            }
        }

        private void txtFromPostCode_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnFromDoor();

            }
        }

        private void ddlCustomerName_KeyDown(object sender, KeyEventArgs e)
        {
            try
            {

                if (e.KeyCode == Keys.Enter)
                {

                    FocusOnTelNo();


                }
                else if (e.KeyCode == Keys.Insert)
                {
                    FocusOnToAddress();


                }
                else if (e.KeyCode == Keys.Up)
                {

                    if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                    {

                        txtToAddress.Focus();
                    }
                    else if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.POSTCODE)
                    {
                        FocusOnToPostCode();
                    }
                    else
                    {
                        FocusOnToDoor();

                    }
                }
                else if (e.KeyCode == Keys.Left)
                {

                    int Position = ddlCustomerName.SelectionStart;
                    if (Position == 0)
                    {
                        ddlVehicleType.Focus();
                    }
                }
                //else if (e.KeyCode == Keys.ShiftKey)
                //{
                //    FocusOnToAddress();

                //}
                else if (e.KeyCode == Keys.Down)
                {
                    txtCustomerPhoneNo.Focus();
                }
            }
            catch
            {


            }


        }

        private void FocusOnTelNo()
        {
            txtCustomerPhoneNo.Focus();

        }

        private void FocusOnMobNo()
        {
            txtCustomerMobileNo.Focus();

        }

        private void FocusOnPickupDate()
        {
            dtpPickupDate.Focus();

        }

        private void FocusOnPickupTime()
        {
            dtpPickupTime_txt.Focus();
            //dtpPickupTime.Focus();

        }

        private void FocusOnReturnPickupTime()
        {
            if (dtpReturnPickupTime != null)
                dtpReturnPickupTime.Focus();

        }


        private void FocusOnFare()
        {
            try
            {
                numFareRate.Focus();
                if (numFareRate.Value == 0.00m)
                    numFareRate.Select(0, 4);
                else
                    numFareRate.Select(0, numFareRate.Value.ToStr().Length);
            }
            catch
            {

            }
        }


        private void FocusOnCompanyFare()
        {
            try
            {
                numCompanyFares.Focus();
                if (numCompanyFares.Value == 0.00m)
                    numCompanyFares.Select(0, 4);
                else
                    numCompanyFares.Select(0, numCompanyFares.Value.ToStr().Length);
            }
            catch
            {

            }
        }

        private void FocusOnDriver()
        {
            ddlDriver.Focus();

        }

        private void txtCustomerPhoneNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                string telNo = txtCustomerPhoneNo.Text.ToStr().Trim();
                string mobNo = txtCustomerMobileNo.Text.ToStr().Trim();

                if (!string.IsNullOrEmpty(telNo) && !string.IsNullOrEmpty(mobNo))
                {

                    FocusOnVehicle();
                }
                else if (string.IsNullOrEmpty(telNo) && string.IsNullOrEmpty(mobNo))
                {
                    FocusOnMobNo();
                }
                else if (!string.IsNullOrEmpty(telNo) && string.IsNullOrEmpty(mobNo))
                {
                    FocusOnVehicle();
                }

                else if (string.IsNullOrEmpty(telNo) && !string.IsNullOrEmpty(mobNo))
                {
                    FocusOnVehicle();
                }

            }
            else if (e.KeyCode == Keys.Up)
            {
                FocusOnCustomer();
                //  ddlCustomerName.Focus();
            }
            else if (e.KeyCode == Keys.Down)
            {
                txtCustomerMobileNo.Focus();
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    FocusOnCustomer();
            //}
        }

        private void txtCustomerMobileNo_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {

                // FocusOnPickupDate();
                txtEmail.Focus();
            }
            else if (e.KeyCode == Keys.Up)
            {
                txtCustomerPhoneNo.Focus();
            }

            else if (e.KeyCode == Keys.Left)
            {
                if (txtCustomerMobileNo.SelectionStart == 0)
                {
                    numTotalLuggages.Focus();
                }

            }
            else if (e.KeyCode == Keys.Down)
            {
                txtEmail.Focus();
            }
            //else if (e.KeyCode == Keys.ShiftKey)
            //{
            //    txtCustomerPhoneNo.Focus();

            //}
        }

        private void dtpPickupDate_KeyDown(object sender, KeyEventArgs e)
        {



            if (e.KeyCode == Keys.Enter)
            {
                // FocusOnPickupTime();
                FocusOnFromAddress();
                SetReturnPickupDate();
                dtpPickupDate.Tag = null;

            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnPickupTime();

            }




            else if (e.KeyCode == Keys.Up)
            {
                try
                {
                    if (dtpPickupDate.DateTimePickerElement.Value.Value.Day == 1 && (dtpPickupDate.Tag == null || dtpPickupDate.Tag.ToDate().Day != 1))
                    {

                        if (dtpPickupDate.DateTimePickerElement.Value.Value.Month < 12 && (dtpPickupDate.Tag == null || dtpPickupDate.Tag.ToDate().Month == dtpPickupDate.DateTimePickerElement.Value.Value.Month))
                            dtpPickupDate.Value = dtpPickupDate.DateTimePickerElement.Value.Value.AddMonths(1);
                        else if (dtpPickupDate.DateTimePickerElement.Value.Value.Month == 12)
                        {
                            dtpPickupDate.Value = new DateTime(dtpPickupDate.DateTimePickerElement.Value.Value.Year + 1, 1, 1);
                        }
                    }
                    else
                    {
                        if ((dtpPickupDate.DateTimePickerElement.Value.Value.Day == 1 && dtpPickupDate.DateTimePickerElement.Value.Value.Month == 12))
                        {
                            if ((dtpPickupDate.Tag == null && dtpPickupDate.Value.Value.Year == dtpPickupDate.DateTimePickerElement.Value.Value.Year)
                                || (dtpPickupDate.Tag != null && dtpPickupDate.Tag.ToDate().Year == dtpPickupDate.DateTimePickerElement.Value.Value.Year &&
                                dtpPickupDate.Tag.ToDate().Month == dtpPickupDate.DateTimePickerElement.Value.Value.Month)
                                )

                                dtpPickupDate.Value = new DateTime(dtpPickupDate.DateTimePickerElement.Value.Value.Year + 1, 1, 1);
                        }

                    }

                    try
                    {

                        int start = dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.SelectionStart;
                        if (start > 4)
                            dtpPickupDate.DateTimePickerElement.Tag = 1;
                        else
                            dtpPickupDate.DateTimePickerElement.Tag = 0;
                    }
                    catch
                    {

                    }

                }
                catch
                {

                }

            }
            else if (e.KeyCode == Keys.Left)
            {
                try
                {
                    string text = dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.SelectedText;
                    int start = dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.SelectionStart;


                    if (dtpPickupDate.DateTimePickerElement.Tag != null && dtpPickupDate.DateTimePickerElement.Tag.ToInt() == 0 && start <= 4)
                    {

                        FocusOnPickupTime();
                    }
                    else
                    {
                        try
                        {


                            if (start > 4)
                                dtpPickupDate.DateTimePickerElement.Tag = 1;
                            else
                                dtpPickupDate.DateTimePickerElement.Tag = 0;
                        }
                        catch
                        {

                        }
                    }



                }
                catch
                {

                }
            }
            else if (e.KeyCode == Keys.Down)
            {


                try
                {

                    int start = dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.SelectionStart;
                    if (start > 4)
                        dtpPickupDate.DateTimePickerElement.Tag = 1;
                    else
                        dtpPickupDate.DateTimePickerElement.Tag = 0;
                }
                catch
                {

                }
            }
            else
            {
                try
                {

                    int start = dtpPickupDate.DateTimePickerElement.TextBoxElement.TextBoxItem.SelectionStart;
                    if (start > 4)
                        dtpPickupDate.DateTimePickerElement.Tag = 1;
                    else
                        dtpPickupDate.DateTimePickerElement.Tag = 0;
                }
                catch
                {

                }
            }

            dtpPickupDate.Tag = dtpPickupDate.DateTimePickerElement.Value;
        }



        private void FocusOnSpecialRequirement()
        {

            txtSpecialRequirements.Focus();
        }





        private void FocusOnSave()
        {
            btnSaveNew.Focus();

            //btnSaveNew.ButtonElement.Focus();

        }

        private void ddlDriver_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {


                ddlDriver.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.None;



                if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") == 0)
                {



                    FocusOnFare();
                }
                else
                {
                    if (ddlDriver.SelectedValue != null)
                    {
                        FocusOnSave();
                    }


                }


                //  dropdown.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;



            }


        }






        void TextBoxItem_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                //if ((sender as NumericUpDown).Name == "numFareRate")
                //{
                //    FocusOnSpecialRequirement();
                //    return;
                //}

                if (sender is TextBox && (sender as TextBox).Name == "txtCustomerMobileNo")
                {
                    txtEmail.Focus();

                }
                //  FocusOnDriver();
            }
            else if (e.KeyCode == Keys.Up)
            {

                FocusOnPickupTime();
                // ddlCustomerName.Focus();

            }


        }







        decimal companyPricePercentage = 0;
        bool companyPriceAdditionType;
        decimal drvFareReductionValue = 0.00m;
        string drvFareReductionType = "Amount";




        private void ShowPaymentReference()
        {
            if (AppVars.objPolicyConfiguration.BookingPaymentDetailsType.ToInt() == 1)
            {

                txtPaymentReference.Visible = true;
                lblPaymentRef.Visible = true;

            }
        }

        private void ClearBookedByDataSource()
        {

            if (txtAccountBookedBy != null)
            {
                txtAccountBookedBy.AutoCompleteCustomSource.Clear();


            }

        }


        private void ClearOrderNoDataSource()
        {

            if (txtOrderNo != null)
            {
                txtOrderNo.AutoCompleteCustomSource.Clear();


                if (txtPupilNo != null)
                {
                    txtPupilNo.AutoCompleteCustomSource.Clear();
                }

            }

        }


        private void SetPaymentTypeByAccount(List<Gen_Company_PaymentType> listofPaymentTypes)
        {
            if (listofPaymentTypes.Count > 0)
            {


                try
                {
                    if (listofPaymentTypes.Count == 1)
                    {
                        ddlPaymentType.SelectedValue = listofPaymentTypes[0].PaymentTypeId;


                    }

                }
                catch
                {

                }


            }


        }


        private void EnableAllPaymentTypes(bool enable)
        {
            //foreach (var item in ddlPaymentType.Items)
            //{
            //    item.Enabled = enable;
            //}


        }


        private void EnableAccCharges(bool enabled)
        {
            lblAccParkingCharges.Enabled = enabled;
            lblAccWaitingCharges.Enabled = enabled;
            numParkingChrgs.Enabled = enabled;
            numWaitingChrgs.Enabled = enabled;


            if (enabled == false)
            {
                numParkingChrgs.Value = 0;
                numWaitingChrgs.Value = 0;

            }

        }

        private void SetSpecialRequirement(string value)
        {
            if (value.ToStr().Trim().Length > 0)
            {
                try
                {



                    if (txtSpecialRequirements.Text.Trim().Length > 0)
                        txtSpecialRequirements.Text = (value.ToStr().Trim() + Environment.NewLine + txtSpecialRequirements.Text).Trim();
                    else
                        txtSpecialRequirements.Text = value.ToStr().Trim();


                    //   txtSpecialRequirements.Tag = value.ToStr().Trim();
                }
                catch
                {

                }


            }
        }


        private void SetOrderNo(string value)
        {
            if (value.ToStr().Trim().Length > 0 && txtOrderNo != null)
            {
                txtOrderNo.Text = value.ToStr().Trim();

            }
        }


        private void SetAddress(string address, bool applyOnPickup = false, bool dontChangeLocType = false)
        {
            try
            {
                if (address.Contains(","))
                {
                    address = address.Replace(",", "").Trim().Replace("  ", " ").Trim();

                }

                if (applyOnPickup == false)
                {
                    if (dontChangeLocType == false)
                        ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                    txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtToAddress.Text = address;
                    txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    SetDropOffZone(txtToAddress.Text.ToStr().ToUpper().Trim());

                }
                else
                {
                    if (dontChangeLocType == false)
                        ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                    txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtFromAddress.Text = address;
                    txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                    SetPickupZone(txtFromAddress.Text.ToStr().Trim().ToUpper());
                }
            }
            catch
            { }
        }


        private bool ResetAllFares = false;
        private void ddlCompany_SelectedValueChanged(object sender, EventArgs e)
        {
            try
            {

                if (txtPupilNo != null)
                {
                    txtPupilNo.Visible = false;
                    lblPupilNo.Visible = false;
                }
                ResetAllFares = false;
                if (numCompanyFares != null && IsDisplayingRecord == false)
                    numCompanyFares.Value = 0.00m;



                if (chkIsCompanyRates.Checked)
                {


                    int? companyId = ddlCompany.SelectedValue.ToIntorNull();
                    if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() == false)
                    {
                        btnAccountInformation.Visible = true;


                    }
                    if (companyId == null)
                    {
                        HideOrderNoPanel();
                        ClearDepartment();

                        //fwdxyz txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 78);
                        txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 61);
                        //fwdxyz   lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 59);




                        //    txtCompanyCreditCardNo.Text = string.Empty;
                        ResetFareReductionValues();

                        UpdateAutoCalculateFares();

                        ClearOrderNoDataSource();
                        ddlCompany.Tag = false;
                        //   EnableRoomCharges(false);
                        EnableAllPaymentTypes(true);
                    }
                    else
                    {


                        Gen_Company obj = General.GetObject<Gen_Company>(c => c.Id == companyId);
                        if (obj != null)
                        {

                            //if (ddlSubCompany != null && obj.SubCompanyId != null)
                            //    ddlSubCompany.SelectedValue = obj.SubCompanyId;

                            if (ddlSubCompany != null && obj.SubCompanyId != null)
                            {

                                if (IsDisplayingRecord == false)
                                    ddlSubCompany.SelectedValue = obj.SubCompanyId;

                                if (ddlSubCompany.SelectedValue == null)
                                {
                                    try
                                    {
                                        if (ddlSubCompany.Items.Count > 0)
                                        {
                                            ddlSubCompany.SelectedItem = ddlSubCompany.Items[0];
                                        }

                                    }
                                    catch
                                    {


                                    }

                                }

                            }

                            if (IsDisplayingRecord == false && AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool())
                            {


                                SetVehicleType(obj.DefaultVehicleId.ToInt());
                                SetSpecialRequirement(obj.SpecialNotes.ToStr().Trim());
                                //if(obj.SpecialNotes.ToStr().Trim().Length>0)
                                //{
                                //    txtSpecialRequirements.Text = obj.SpecialNotes.ToStr().Trim();

                                //}

                                FillCompanyContacts();

                            }
                            else
                            {
                                if (IsDisplayingRecord == false)
                                {
                                    SetVehicleType(obj.DefaultVehicleId.ToInt());
                                    SetSpecialRequirement(obj.SpecialNotes.ToStr().Trim());
                                }

                            }


                            //       txtCompanyCreditCardNo.Text = obj.CreditCardDetails.ToStr().Trim();

                            if (obj.HasEscort.ToBool())
                            {
                                InitializeEscort();

                                lblEscort.Visible = true;
                                ddlEscort.Visible = true;


                                lblEscortPrice.Visible = true;
                                numEscortPrice.Visible = true;

                                FillEscortsCombo();

                                if (obj.IsAgent.ToBool())
                                {

                                    txtPaymentReference.Visible = false;
                                    lblPaymentRef.Visible = false;
                                }
                                else
                                {
                                    ShowPaymentReference();

                                    // txtPaymentReference.Visible = true;
                                    // lblPaymentRef.Visible = true;
                                }





                                if (ddlDepartment != null)
                                {
                                    lblDepartment.Visible = false;
                                    ddlDepartment.Visible = false;

                                }

                                //fwdxyz   txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 100);
                                txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 40);
                                //fwdxyz lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 85);



                            }
                            else
                            {

                                if (lblEscort != null)
                                {

                                    lblEscort.Visible = false;
                                    ddlEscort.Visible = true;


                                    lblEscortPrice.Visible = false;
                                    numEscortPrice.Visible = false;
                                }




                                if (obj.IsAgent.ToBool())
                                {

                                    txtPaymentReference.Visible = false;
                                    lblPaymentRef.Visible = false;
                                }
                                else
                                {

                                    ShowPaymentReference();
                                    //  txtPaymentReference.Visible = true;
                                    //  lblPaymentRef.Visible = true;
                                }



                                //fwdxyz txtPaymentReference.Location = new Point(txtPaymentReference.Location.X, 78);
                                txtPaymentReference.Size = new Size(txtPaymentReference.Size.Width, 61);
                                //fwdxyz    lblPaymentRef.Location = new Point(lblPaymentRef.Location.X, 59);

                            }



                            InitializeDepartmentCombo();

                            FillDepartmentsCombo(obj.Id);

                            if (ddlDepartment != null)
                            {
                                try
                                {
                                    if (ddlDepartment.DataSource == null || (ddlDepartment.DataSource as List<Gen_Company_Department>).Count == 0)
                                    {
                                        lblDepartment.Visible = false;
                                        ddlDepartment.Visible = false;
                                    }
                                    else
                                    {

                                        lblDepartment.Visible = true;
                                        ddlDepartment.Visible = true;
                                    }

                                    ddlDepartment.Tag = obj.HasDepartment.ToBool();
                                }
                                catch
                                {


                                }

                            }



                            companyPricePercentage = obj.CompanyPricePercent.ToInt();
                            // FillCostCentersCombo(obj.Id);
                            try
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    decimal companyPrice = db.ExecuteQuery<decimal>("Select CompanyPrice From Gen_Company Where Id=" + ddlCompany.SelectedValue.ToInt()).FirstOrDefault().DefaultIfEmpty();
                                    if (companyPrice > 0)
                                    {
                                        companyPricePercentage = companyPrice;
                                    }
                                }
                            }
                            catch (Exception ex)
                            {

                            }

                            companyPriceAdditionType = obj.HasRoomCharge.ToBool();
                            drvFareReductionType = obj.DriverFareReductionType.ToStr().Trim().ToLower();
                            drvFareReductionValue = obj.DriverFareReductionValue.ToDecimal();

                            bool orderNo = obj.HasOrderNo.ToBool();
                            bool pupilNo = obj.HasPupilNo.ToBool();
                            bool HasSingleOrderNo = obj.HasSingleOrderNo.ToBool();


                            if (orderNo || pupilNo)
                            {



                                InitializeOrderNoPanel();
                                //fwdkh0
                                InitializePupilNo();
                                pnlOrderNo.Visible = false;
                                if (orderNo == false || HasSingleOrderNo)
                                {
                                    lblOrderNo.Visible = false;
                                    txtOrderNo.Visible = false;

                                }


                                ClearOrderNoDataSource();

                                if (orderNo == true)
                                {
                                    lblOrderNo.Visible = true;
                                    txtOrderNo.Visible = true;

                                    txtOrderNo.AutoCompleteCustomSource.AddRange(obj.Gen_Company_OrderNumbers.Select(c => c.OrderNo).ToArray<string>());
                                    txtOrderNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                    txtOrderNo.AutoCompleteSource = AutoCompleteSource.CustomSource;
                                    //   txtOrderNo.TextChanged += TxtOrderNo_TextChanged;

                                    if (txtPupilNo != null && txtPupilNo.Visible)
                                    {
                                        txtPupilNo.AutoCompleteCustomSource.AddRange(obj.Gen_Company_OrderNumbers.Select(c => c.OrderNo).ToArray<string>());
                                        txtPupilNo.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                                        txtPupilNo.AutoCompleteSource = AutoCompleteSource.CustomSource;

                                    }

                                }


                                if (opt_return.Checked)
                                {
                                    // lblPupilNo.Visible = true;
                                    // txtPupilNo.Visible = true;

                                }
                                else
                                {
                                    lblPupilNo.Visible = false;
                                    txtPupilNo.Visible = false;

                                }

                                //fwdkh0  pnlOrderNo.Visible = true;

                                //  txtSpecialRequirements.Location = new Point(111, 488);
                                // txtSpecialRequirements.Size = new Size(240, 80);

                            }
                            else
                            {
                                HideOrderNoPanel();

                            }

                            if (obj.HasComcabCharges.ToBool())
                            {
                                HideOrderNoPanel();
                                //   ShowHideCostCenter();
                                ShowComcabCharges(true);
                            }
                            else
                            {
                                ShowComcabCharges(false);

                            }

                            if (obj.CompanyName.ToStr().ToLower().Contains("pre authorised card") || obj.CompanyName.ToStr().ToLower().Contains("prepaid by card"))
                            {
                                SetCashAccount(3);
                            }
                            else
                            {

                                SetCashAccount(obj.AccountTypeId.ToInt());
                            }

                            InitializeAccPassowrdPanel();


                            if (obj.PasswordEnable.ToBool())
                            {
                                pnlAccpassword.Visible = true;

                                radLabel33.Visible = true;
                                txtAccPassword.Visible = true;
                            }
                            else
                            {
                                pnlAccpassword.Visible = false;

                                radLabel33.Visible = false;
                                txtAccPassword.Visible = false;

                            }

                            //pnlAccpassword.Visible = obj.PasswordEnable.ToBool();

                            //radLabel33.Visible = pnlAccpassword.Visible;
                            //txtAccPassword.Visible = pnlAccpassword.Visible;



                            string[] bookedByDataSource = null;

                            if (obj.HasBookedBy.ToBool())
                            {
                                bookedByDataSource = obj.Gen_Company_BookedBies.Select(c => c.BookedBy).ToArray<string>();

                            }



                            InitializeAccountBookedBy(obj.HasBookedBy.ToBool(), bookedByDataSource);


                            if (obj.IsAgent.ToBool())
                            {
                                InitializeAgentPanel();

                                //  ddlAgentCommissionType.SelectedIndex = 1;

                            }


                            ShowAgentDetails(obj.IsAgent.ToBool(), obj.IsAmountWiseComm.ToBool());

                            // EnableRoomCharges(obj.HasRoomCharge.ToBool());

                            SetPaymentTypeByAccount(obj.Gen_Company_PaymentTypes.ToList());







                            if (AppVars.listUserRights.Count(c => c.functionId == "HIDE ACCOUNT FARES") > 0 && obj.DisableCompanyFaresForController.ToBool() == false || AppVars.listUserRights.Count(c => c.functionId == "HIDE COMPANY PRICE") > 0)
                            {


                                if (numCompanyFares != null)
                                {
                                    lblCompanyPrice.Visible = false;
                                    numCompanyFares.Visible = false;
                                    lblTotalCharges.Visible = false;
                                    numTotalChrgs.Visible = false;
                                }

                                if (numReturnCompanyFares != null)
                                {
                                    lblReturnCompanyPrice.Visible = false;
                                    numReturnCompanyFares.Visible = false;

                                }
                            }
                            else
                            {
                                if (numCompanyFares != null)
                                {
                                    lblCompanyPrice.Visible = true;
                                    numCompanyFares.Visible = true;
                                    lblTotalCharges.Visible = true;
                                    numTotalChrgs.Visible = true;
                                }

                                if (numReturnCompanyFares != null)
                                {

                                    if (dtpReturnPickupDate != null && dtpReturnPickupDate.Visible)
                                    {

                                        lblReturnCompanyPrice.Visible = true;
                                        numReturnCompanyFares.Visible = true;
                                    }
                                    else
                                    {

                                        lblReturnCompanyPrice.Visible = false;
                                        numReturnCompanyFares.Visible = false;

                                    }
                                }


                            }

                            if (obj.ShowExtraCharges.ToBool())
                            {

                                //   numWaitingChrgs.Enabled = false;
                                //   numParkingChrgs.Enabled = false;
                                // numExtraChrgs.Enabled = false;

                                foreach (var item in obj.Gen_Company_ExtraCharges)
                                {
                                    if (item.Charges.ToInt() == 2)
                                    {
                                        numWaitingChrgs.Enabled = true;

                                    }
                                    else if (item.Charges.ToInt() == 3)
                                    {
                                        numParkingChrgs.Enabled = true;

                                    }
                                    else if (item.Charges.ToInt() == 4)
                                    {
                                        numExtraChrgs.Enabled = true;

                                    }
                                }
                            }




                            if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                            {

                                if (obj.ResetAllFares.ToBool())
                                {
                                    ResetAllFares = true;
                                    numFareRate.Value = 0.00m;

                                    if (numReturnFare != null)
                                        numReturnFare.Value = 0.00m;

                                    numBookingFee.Value = 0.00m;
                                    if (numReturnBookingFee != null)
                                    {
                                        numReturnBookingFee.Value = 0.00m;
                                    }

                                    if (numCompanyFares != null)
                                    {
                                        numCompanyFares.Value = 0.00m;

                                        if (numReturnCompanyFares != null)
                                        {

                                            numReturnCompanyFares.Value = 0.00m;
                                        }
                                        ddlCompany.Tag = true;
                                    }


                                }
                                else
                                {
                                    ddlCompany.Tag = false;
                                    UpdateAutoCalculateFares();

                                }
                            }



                            if (IsDisplayingRecord == false)
                            {

                                if (obj.CompanyInformation.ToStr().Trim().Length > 0)
                                {

                                    frmInformation frmInfo = new frmInformation(obj.Id, obj.CompanyName, obj.CompanyInformation.ToStr().Trim());
                                    frmInfo.StartPosition = FormStartPosition.CenterScreen;
                                    frmInfo.ShowDialog();

                                    frmInfo.Dispose();
                                }

                                if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool() && obj.Gen_Company_Addresses.Count > 0)
                                {



                                    if (obj.Gen_Company_Addresses.Count == 1)
                                    {
                                        string newAddress = obj.Gen_Company_Addresses.Select(args => args.Address).FirstOrDefault().ToStr().Trim().ToUpper();

                                        if (txtFromAddress.Text.Trim().Length > 0 && newAddress.Length > 0 && txtFromAddress.Text.Trim().ToUpper() != newAddress
                                        )
                                        {

                                            if (AppVars.listUserRights.Count(c => c.functionId == "OPTION TO SELECT DEFAULT ACCOUNT ADDRESS") > 0)
                                            {
                                                if (DialogResult.Yes == MessageBox.Show("Do you want to use default address?", ""
                                           , MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                                                    SetAddress(newAddress, true);
                                            }
                                        }
                                        else
                                            SetAddress(newAddress, true);
                                        // SetAddress(obj.Gen_Company_Addresses.Select(args => args.Address).FirstOrDefault(), true);

                                    }
                                    else
                                    {
                                        txtFromAddress.ListBoxElement.Items.Clear();
                                        txtFromAddress.ListBoxElement.Items.AddRange(obj.Gen_Company_Addresses.Select(args => args.Address).ToArray<string>());
                                        txtFromAddress.ShowListBox();
                                        txtFromAddress.BringToFront();
                                    }

                                }
                            }


                            ddlCompany.BackColor = Color.Red;
                            ddlCompany.ForeColor = Color.White;
                        }
                    }
                }
                else
                {

                    HideOrderNoPanel();
                    ClearDepartment();

                    ShowComcabCharges(false);




                    ResetFareReductionValues();

                    ddlCompany.Tag = false;


                    EnableAllPaymentTypes(true);

                    UpdateAutoCalculateFares();
                    btnAccountInformation.Visible = false;
                    lblTotalCharges.Visible = true;
                    numTotalChrgs.Visible = true;
                }
            }
            catch (Exception ex)
            {


            }

            InstallEventHandlers(pnlCustomer);

        }



        private void SetVehicleType(int vehicleTypeId)
        {
            if (vehicleTypeId == 0)
                return;

            if (ddlVehicleType.Items.OfType<DataRowView>().Count(c => c.Row["Id"].ToInt() == vehicleTypeId) > 0)
                ddlVehicleType.SelectedValue = vehicleTypeId;



        }


        private void SetDefaultVehicleType(int vehicleTypeId)
        {
            if (IsDisplayingRecord)
                return;

            ddlVehicleType.SelectedValueChanged -= new EventHandler(ddlVehicleType_SelectedValueChanged);
            ddlVehicleType.SelectedValue = vehicleTypeId;
            ddlVehicleType.SelectedValueChanged += new EventHandler(ddlVehicleType_SelectedValueChanged);

        }

        private void ResetFareReductionValues()
        {

            companyPricePercentage = 0;
            drvFareReductionType = "amount";
            drvFareReductionValue = 0.00m;
        }



        UI.MyDropDownList ddlEscort = null;
        private void InitializeEscort()
        {
            if (lblEscort != null)
                return;

            this.lblEscort = new Label();
            this.ddlEscort = new UI.MyDropDownList();

            this.lblEscortPrice = new Label();
            this.numEscortPrice = new NumericUpDown();

            // ((System.ComponentModel.ISupportInitialize)(this.lblEscort)).BeginInit();
            //     ((System.ComponentModel.ISupportInitialize)(this.ddlEscort)).BeginInit();


            this.pnlCustomer.Controls.Add(this.lblEscort);
            this.pnlCustomer.Controls.Add(this.ddlEscort);

            this.pnlFares.Controls.Add(this.numEscortPrice);
            this.pnlFares.Controls.Add(this.lblEscortPrice);
            //  pnlFares.Size = new Size(409, 120);
            //  ((System.ComponentModel.ISupportInitialize)(this.lblEscortPrice)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.numEscortPrice)).BeginInit();


            // 
            // lblEscort
            // 
            this.lblEscort.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblEscort.Location = new System.Drawing.Point(6, 237);
            this.lblEscort.Name = "lblEscort";
            this.lblEscort.Size = new System.Drawing.Size(49, 22);
            this.lblEscort.TabIndex = 271;
            this.lblEscort.Text = "Escort";
            // 
            // ddlEscort
            // 
            this.ddlEscort.Caption = null;
            this.ddlEscort.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlEscort.Location = new System.Drawing.Point(115, 235);
            this.ddlEscort.Name = "ddlDepartment";
            this.ddlEscort.Property = null;
            this.ddlEscort.ShowDownArrow = true;
            this.ddlEscort.Size = new System.Drawing.Size(208, 26);
            this.ddlEscort.TabIndex = 241;
            this.ddlEscort.KeyDown += new KeyEventHandler(ddlEscort_KeyDown);




            // 
            // lblEscortPrice
            // 
            this.lblEscortPrice.AutoSize = true;
            this.lblEscortPrice.BackColor = Color.Transparent;
            this.lblEscortPrice.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Bold);
            this.lblEscortPrice.ForeColor = System.Drawing.Color.Black;
            this.lblEscortPrice.Location = new System.Drawing.Point(2, 70);
            this.lblEscortPrice.Name = "lblEscortPrice";
            // 
            // 
            // 
            //   this.lblEscortPrice.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblEscortPrice.Size = new System.Drawing.Size(80, 40);
            this.lblEscortPrice.TabIndex = 245;
            this.lblEscortPrice.Text = "Escort Price £";
            // this.lblEscortPrice.TextAlignment = System.Drawing.ContentAlignment.MiddleLeft;
            // 
            // numEscortPrice
            // 
            this.numEscortPrice.DecimalPlaces = 2;
            //  this.numEscortPrice.EnableKeyMap = true;
            this.numEscortPrice.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.numEscortPrice.ForeColor = System.Drawing.Color.Red;
            this.numEscortPrice.InterceptArrowKeys = false;
            this.numEscortPrice.Location = new System.Drawing.Point(98, 67);
            this.numEscortPrice.Maximum = new decimal(new int[] {
            99999999,
            0,
            0,
            0});
            this.numEscortPrice.Name = "numEscortPrice";
            lblEscortPrice.BringToFront();
            numEscortPrice.BringToFront();
            // 
            // 
            // 
            //  this.numEscortPrice.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //  this.numEscortPrice.RootElement.ForeColor = System.Drawing.Color.Red;
            ////   this.numEscortPrice.ShowBorder = true;
            //   this.numEscortPrice.ShowUpDownButtons = false;
            this.numEscortPrice.Size = new System.Drawing.Size(65, 35);
            this.numEscortPrice.TabIndex = 244;
            this.numEscortPrice.TabStop = false;
            //   ((Telerik.WinControls.UI.RadSpinElement)(this.numEscortPrice.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
            //   ((Telerik.WinControls.Primitives.FillPrimitive)(this.numEscortPrice.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            //   //((Telerik.WinControls.UI.RadTextBoxItem)(this.numEscortPrice.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0.00";
            //   //((Telerik.WinControls.UI.RadTextBoxItem)(this.numEscortPrice.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));




            // ((System.ComponentModel.ISupportInitialize)(this.lblEscort)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.ddlEscort)).EndInit();


            //    ((System.ComponentModel.ISupportInitialize)(this.lblEscortPrice)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.numEscortPrice)).EndInit();
        }


        private void InitializeDepartmentCombo()
        {
            if (lblDepartment != null)
                return;

            this.lblDepartment = new Label();
            this.ddlDepartment = new UI.MyDropDownList();

            //  ((System.ComponentModel.ISupportInitialize)(this.lblDepartment)).BeginInit();
            // ((System.ComponentModel.ISupportInitialize)(this.ddlDepartment)).BeginInit();


            //////fwdkh  this.pnlMain.Controls.Add(this.lblDepartment);
            //////  this.pnlMain.Controls.Add(this.ddlDepartment);



            // 
            // lblDepartment
            // 
            this.lblDepartment.BackColor = System.Drawing.Color.Transparent;
            this.lblDepartment.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblDepartment.ForeColor = System.Drawing.Color.Black;
            this.lblDepartment.Location = new System.Drawing.Point(405, 150);//(417, 324);//(5, 354);
            this.lblDepartment.Name = "lblDepartment";
            // 
            // 
            // 
            //  this.lblDepartment.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblDepartment.Size = new System.Drawing.Size(84, 22);
            this.lblDepartment.TabIndex = 250;
            this.lblDepartment.Text = "Department";
            lblDepartment.BringToFront();
            pnlCustomer.Controls.Add(lblDepartment);
            lblDepartment.BringToFront();
            // 
            // ddlDepartment
            // 
            this.ddlDepartment.Caption = null;
            this.ddlDepartment.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.ddlDepartment.Location = new System.Drawing.Point(487, 147);//(505, 324);//(111, 353);
            this.ddlDepartment.Name = "ddlDepartment";
            this.ddlDepartment.Property = null;
            this.ddlDepartment.ShowDownArrow = true;
            this.ddlDepartment.Size = new System.Drawing.Size(208, 26);
            this.ddlDepartment.TabIndex = 241;
            this.ddlDepartment.KeyDown += new KeyEventHandler(ddlDepartment_KeyDown);


            this.ddlDepartment.SelectedIndexChanged += DdlDepartment_SelectedIndexChanged;
            pnlCustomer.Controls.Add(ddlDepartment);
            ddlDepartment.BringToFront();

            // ((System.ComponentModel.ISupportInitialize)(this.lblDepartment)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlDepartment)).EndInit();
        }


        private bool IsShown = false;
        private void DdlDepartment_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            try
            {
                if (IsShown == false)
                    return;


                int deptId = ddlDepartment.SelectedValue.ToInt();



                if (deptId > 0)
                {



                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.CommandTimeout = 4;
                        db.DeferredLoadingEnabled = false;

                        var objDept = db.Gen_Company_Departments.FirstOrDefault(c => c.Id == deptId);

                        if (objDept != null)
                        {
                            if (objDept.ComapanyFromAddress.ToStr().Trim().Length > 0)
                            {
                                ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                                txtFromAddress.Text = objDept.ComapanyFromAddress.ToStr().Trim();

                            }

                            if (objDept.ComapnyToAddress.ToStr().Trim().Length > 0)
                            {
                                ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                                txtToAddress.Text = objDept.ComapnyToAddress.ToStr().Trim();

                            }


                        }
                    }



                }

            }
            catch
            {


            }
        }


        private void InitializeAccountBookedBy(bool hasBookedBy, string[] bookedByDataSource)
        {
            try
            {
                if (hasBookedBy)
                {

                    if (lblAccountBookedBy != null)
                    {
                        lblAccountBookedBy.Visible = true;
                        txtAccountBookedBy.Visible = true;


                        if (pnlAccpassword != null)
                        {

                            this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);
                            this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);


                        }
                        else
                        {
                            this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);
                            this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);
                        }

                        // txtSpecialRequirements.Location = new Point(111, 458);
                        //  txtSpecialRequirements.Location = new Point(111, 488);
                        //  txtSpecialRequirements.Size = new Size(240, 50);
                    }
                    else
                    {

                        if (this.lblAccountBookedBy == null)
                        {

                            this.lblAccountBookedBy = new Label();
                            this.txtAccountBookedBy = new TextBox();


                            //    ((System.ComponentModel.ISupportInitialize)(this.lblAccountBookedBy)).BeginInit();
                            //   ((System.ComponentModel.ISupportInitialize)(this.txtAccountBookedBy)).BeginInit();

                            // 
                            // lblAccountBookedBy
                            // 
                            this.lblAccountBookedBy.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                            this.lblAccountBookedBy.Name = "lblAccountBookedBy";
                            this.lblAccountBookedBy.Size = new System.Drawing.Size(74, 22);
                            this.lblAccountBookedBy.TabIndex = 267;
                            this.lblAccountBookedBy.Text = "Booked By";
                            // 
                            // txtAccountBookedBy
                            // 
                            this.txtAccountBookedBy.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));

                            this.txtAccountBookedBy.MaxLength = 30;
                            this.txtAccountBookedBy.Name = "txtAccountBookedBy";
                            this.txtAccountBookedBy.Size = new System.Drawing.Size(208, 24);
                            this.txtAccountBookedBy.TabIndex = 266;
                            this.txtAccountBookedBy.TabStop = false;
                            if (AppVars.objPolicyConfiguration.PickCompanyAddressOnBooking.ToBool())
                            {
                                this.txtAccountBookedBy.KeyDown += TxtAccountBookedBy_KeyDown;
                                this.txtAccountBookedBy.Validated += TxtAccountBookedBy_Validated;
                            }
                            // ((System.ComponentModel.ISupportInitialize)(this.lblAccountBookedBy)).EndInit();
                            // ((System.ComponentModel.ISupportInitialize)(this.txtAccountBookedBy)).EndInit();


                            this.pnlMain.Controls.Add(this.lblAccountBookedBy);
                            this.pnlMain.Controls.Add(this.txtAccountBookedBy);
                        }




                        //if (pnlAccpassword != null)
                        //{

                        this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);//438
                        this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);//437


                        //}
                        //else
                        //{
                        //    this.lblAccountBookedBy.Location = new System.Drawing.Point(6, 328);//(6, 385);
                        //    this.txtAccountBookedBy.Location = new System.Drawing.Point(136, 328);//(112, 384);
                        //}




                        // txtSpecialRequirements.Location = new Point(111, 458);
                        //txtSpecialRequirements.Location = new Point(111, 488);
                        //  txtSpecialRequirements.Size = new Size(240, 50);
                    }


                    if (bookedByDataSource != null)
                    {
                        txtAccountBookedBy.AutoCompleteCustomSource.Clear();
                        txtAccountBookedBy.AutoCompleteCustomSource.AddRange(bookedByDataSource);
                        txtAccountBookedBy.AutoCompleteMode = AutoCompleteMode.SuggestAppend;
                        txtAccountBookedBy.AutoCompleteSource = AutoCompleteSource.CustomSource;
                    }
                    else
                    {
                        ClearBookedByDataSource();

                    }

                }
                else if (hasBookedBy == false && lblAccountBookedBy != null)
                {



                    lblAccountBookedBy.Visible = false;
                    txtAccountBookedBy.Visible = false;

                    txtAccountBookedBy.Text = string.Empty;

                    ClearBookedByDataSource();

                    //txtSpecialRequirements.Location = new Point(111, 458);
                    //  txtSpecialRequirements.Size = new Size(240, 90);


                }

                if (lblAccountBookedBy != null)
                {
                    this.lblAccountBookedBy.Location = new System.Drawing.Point(411, 199);
                    this.txtAccountBookedBy.Location = new System.Drawing.Point(487, 197);
                    pnlCustomer.Controls.Add(lblAccountBookedBy);
                    pnlCustomer.Controls.Add(txtAccountBookedBy);
                }
            }
            catch (Exception ex)
            {


            }

        }

        private void TxtAccountBookedBy_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
                FocusOnSpecialRequirement();
        }

        private void TxtAccountBookedBy_Validated(object sender, EventArgs e)
        {
            try
            {
                if (txtAccountBookedBy.AutoCompleteCustomSource.Count > 0
                    &&
                    txtAccountBookedBy.AutoCompleteCustomSource.OfType<string>()
                    .Count(c => c.ToLower().Trim() == txtAccountBookedBy.Text.Trim().ToLower()) > 0)
                {
                    string email = string.Empty;
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        email = db.Gen_Company_BookedBies.Where(c => c.CompanyId == ddlCompany.SelectedValue.ToInt() && c.BookedBy.ToLower() == txtAccountBookedBy.Text.Trim().ToLower())
                           .Select(args => args.EmailAddress).FirstOrDefault();


                        email = email.ToStr();

                    }
                    txtEmail.Text = email;
                }
            }
            catch
            {

            }


        }
        private void ShowAgentDetails(bool IsAgent, bool amountwiseagentcomm = false)
        {
            if (chkTakenByAgent != null)
            {

                //if (IsAgent == true && ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                //    IsAgent = false;

                chkTakenByAgent.Visible = IsAgent;
                radLabel32.Visible = IsAgent;
                //    radLabel34.Visible = IsAgent;
                //     numAgentCommissionPercent.Visible = IsAgent;
                numAgentCommission.Visible = IsAgent;
                //    ddlAgentCommissionType.Visible = IsAgent;

                numAgentCharge.Visible = IsAgent;
                lblagentcharge.Visible = IsAgent;

                if (IsAgent == false && ddlCompany.SelectedValue != null)
                {
                    numAgentCommission.Value = 0.00m;
                }

                //if(IsAgent && (amountwiseagentcomm || ddlAgentCommissionType.SelectedText=="Amount"))
                //{
                // //   numAgentCommissionPercent.Visible = false;
                // //   ddlAgentCommissionType.Visible = false;
                //    radLabel34.Visible = false;
                //}

            }
        }

        private void ShowComcabCharges(bool show)
        {
            //if (pnlComcab == null)
            //    InitializeComCabCharges();

            //pnlComcab.Visible = show;
        }


        void InitializeReturnFareControls()
        {
            this.lblRetFares = new Label();
            this.numReturnFare = new NumericUpDown();
            this.lblRetFares.BackColor = System.Drawing.Color.Lavender;
            this.lblRetFares.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
            this.lblRetFares.ForeColor = System.Drawing.Color.Black;
            this.pnlFares.Controls.Add(this.lblRetFares);
            this.lblRetFares.Location = new System.Drawing.Point(1, 38);//(525, 92);
            this.lblRetFares.Name = "lblRetFares";

            // 
            // 
            // 
            //       this.lblRetFares.RootElement.ForeColor = System.Drawing.Color.Black;
            this.lblRetFares.Size = new System.Drawing.Size(91, 20);
            this.lblRetFares.TabIndex = 239;
            this.lblRetFares.Text = "Ret. Fares £";

            // lblRetFares.BackColor = Color.FromArgb(233, 240, 249);
            // 
            // numReturnFare
            // 
            this.numReturnFare.DecimalPlaces = 2;
            this.numReturnFare.Enabled = false;
            // this.numReturnFare.EnableKeyMap = true;
            this.numReturnFare.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.numReturnFare.InterceptArrowKeys = false;
            this.pnlFares.Controls.Add(numReturnFare);
            this.numReturnFare.ForeColor = Color.Red;
            this.numReturnFare.Location = new System.Drawing.Point(98, 36);//(620, 89);
            this.numReturnFare.Maximum = new decimal(new int[] {
            99999999,
            0,
            0,
            0});
            this.numReturnFare.Name = "numReturnFare";
            numReturnFare.Enabled = false;
            // 
            // 
            // 
            // this.numReturnFare.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //   this.numReturnFare.ShowBorder = true;
            //   this.numReturnFare.ShowUpDownButtons = false;
            this.numReturnFare.Size = new System.Drawing.Size(65, 26);

            this.numReturnFare.TabIndex = 238;
            this.numReturnFare.Validated += new EventHandler(numReturnFare_Validated);
            this.numReturnFare.TabStop = false;
            //this.lblRetFares.BringToFront();
            //////fwdkh2  this.radPanel1.Controls.Add(this.lblRetFares);
            this.pnlFares.Controls.Add(this.lblRetFares);
            //////fwdkh2  this.radPanel1.Controls.Add(this.numReturnFare);
            this.pnlFares.Controls.Add(this.numReturnFare);


            if (lblRetFares != null)
            {
                this.lblRetFares.BringToFront();
                this.numReturnFare.BringToFront();
            }

            //if (numReturnFare != null)
            //    numReturnFare.Enabled = true;

        }
        private void InitializeReturnPanel()
        {

            if (lblReturnPickupDate != null)
                return;


            // this.lblReturnDriver = new Label();
            // this.ddlReturnDriver = new UI.MyDropDownList();
            this.lblReturnPickupDate = new Label();
            this.dtpReturnPickupDate = new UI.MyDatePicker();
            this.dtpReturnPickupDate.KeyDown += new KeyEventHandler(dtpReturnPickupDate_KeyDown);
            this.dtpReturnPickupDate.Enter += new EventHandler(dtpReturnPickupDate_Enter);
            this.dtpReturnPickupDate.Leave += new EventHandler(dtpReturnPickupDate_Leave);
            this.dtpReturnPickupTime = new UI.MyDatePicker();
            this.lblReturnPickupTime = new Label();

            //////fwdkh2  this.lblRetFares = new Label();
            ////////this.numReturnFare = new NumericUpDown();

            this.lblReturnVehicle = new Label();
            this.ddlReturnVehicleType = new ComboBox();

            //this.ddlReturnVehicleType = new UI.MyDropDownList();

            this.lblReturnFromAirport = new Label();
            this.ddlReturnFromAirport = new ComboBox();

            this.panel2.Controls.Add(this.lblReturnPickupDate);
            this.panel2.Controls.Add(this.dtpReturnPickupDate);
            this.panel2.Controls.Add(this.dtpReturnPickupTime);
            this.panel2.Controls.Add(this.lblReturnPickupTime);
            //this.pnlFares.Controls.Add(this.lblReturnVehicle);
            this.pnlCustomer.Controls.Add(this.lblReturnVehicle);
            // this.pnlFares.Controls.Add(this.ddlReturnVehicleType);
            this.pnlCustomer.Controls.Add(this.ddlReturnVehicleType);
            this.panel2.Controls.Add(this.lblReturnFromAirport);
            this.panel2.Controls.Add(this.ddlReturnFromAirport);

            this.lblReturnPickupDate.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnPickupDate.Font = new System.Drawing.Font("Tahoma", 10.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnPickupDate.Location = new System.Drawing.Point(565, 44);//(528, 41);//(603, 396);// new System.Drawing.Point(380, 41);//(362, 396);
            this.lblReturnPickupDate.Name = "lblReturnPickupDate";
            this.lblReturnPickupDate.Size = new System.Drawing.Size(41, 22);
            this.lblReturnPickupDate.TabIndex = 159;
            this.lblReturnPickupDate.Text = "Date";
            this.lblReturnPickupDate.ForeColor = Color.Red;

            panel2.Controls.Add(lblReturnPickupDate);
            // 
            // dtpReturnPickupDate
            // 
            //  this.dtpReturnPickupDate.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpReturnPickupDate.CustomFormat = "ddd dd/MM/yyyy";
            this.dtpReturnPickupDate.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpReturnPickupDate.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpReturnPickupDate.Location = new System.Drawing.Point(610, 40);//(649, 39);//(650, 393);// new System.Drawing.Point(502, 39);//(495, 393);
            this.dtpReturnPickupDate.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpReturnPickupDate.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupDate.Name = "dtpReturnPickupDate";
            //this.dtpReturnPickupDate.NullDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupDate.Size = new System.Drawing.Size(135, 25);//(105, 24);
            this.dtpReturnPickupDate.TabIndex = 21;
            this.dtpReturnPickupDate.TabStop = false;
            panel2.Controls.Add(dtpReturnPickupDate);
            //  this.dtpReturnPickupDate.Text = "myDatePicker1";
            //   this.dtpReturnPickupDate.Value = null;
            // 
            // dtpReturnPickupTime
            // 
            //  this.dtpReturnPickupTime.Culture = new System.Globalization.CultureInfo("en-GB");
            this.dtpReturnPickupTime.CustomFormat = "HH:mm";
            this.dtpReturnPickupTime.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.dtpReturnPickupTime.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dtpReturnPickupTime.Location = new System.Drawing.Point(493, 40);//(495, 39);//(432, 39);//(495, 393);//new System.Drawing.Point(649, 39);//(650, 393);
            this.dtpReturnPickupTime.MaxDate = new System.DateTime(9998, 12, 31, 0, 0, 0, 0);
            this.dtpReturnPickupTime.MinDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupTime.Name = "dtpReturnPickupTime";
            // this.dtpReturnPickupTime.NullDate = new System.DateTime(1753, 1, 1, 0, 0, 0, 0);
            this.dtpReturnPickupTime.ShowUpDown = true;
            this.dtpReturnPickupTime.Size = new System.Drawing.Size(73, 25);
            this.dtpReturnPickupTime.TabIndex = 22;
            this.dtpReturnPickupTime.TabStop = false;



            panel2.Controls.Add(dtpReturnPickupTime);
            // this.dtpReturnPickupTime.TabIndexChanged += new EventHandler(dtpReturnPickupTime_TabIndexChanged);
            //  this.dtpReturnPickupTime.Text = "myDatePicker2";

            //  this.dtpReturnPickupTime.Value = null;

            this.dtpReturnPickupTime.Leave += new EventHandler(dtpPickupTime_Leave);
            // this.dtpReturnPickupTime.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
            this.dtpReturnPickupTime.DateTimePickerElement.TextBoxElement.TextBoxItem.KeyPress += new KeyPressEventHandler(dtpPickupTime_KeyPress);
            // 
            // lblReturnPickupTime
            // 
            this.lblReturnPickupTime.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnPickupTime.Font = new System.Drawing.Font("Tahoma", 10.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnPickupTime.Location = new System.Drawing.Point(367, 44);//(370, 44);//(389, 41);// new System.Drawing.Point(604, 41);//(603, 396);
            this.lblReturnPickupTime.Name = "lblReturnPickupTime";
            this.lblReturnPickupTime.Size = new System.Drawing.Size(135, 22);
            this.lblReturnPickupTime.TabIndex = 161;
            this.lblReturnPickupTime.Text = "Ret. Pickup Time";
            this.lblReturnPickupTime.ForeColor = Color.Red;

            panel2.Controls.Add(lblReturnPickupTime);//pnlMain

            // ((System.ComponentModel.ISupportInitialize)(this.lblReturnDriver)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.ddlReturnDriver)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.lblReturnPickupDate)).EndInit();
            // ((System.ComponentModel.ISupportInitialize)(this.dtpReturnPickupDate)).EndInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.dtpReturnPickupTime)).EndInit();
            //   ((System.ComponentModel.ISupportInitialize)(this.lblReturnPickupTime)).EndInit();


            this.lblReturnSpecialReq = new Label();
            this.txtReturnSpecialReq = new TextBox();


            //   ((System.ComponentModel.ISupportInitialize)(this.lblReturnSpecialReq)).BeginInit();
            //  ((System.ComponentModel.ISupportInitialize)(this.txtReturnSpecialReq)).BeginInit();

            this.radPanel1.Controls.Add(this.lblReturnSpecialReq);
            this.radPanel1.Controls.Add(this.txtReturnSpecialReq);


            // 
            // lblReturnSpecialReq
            // 
            this.lblReturnSpecialReq.AutoSize = false;
            this.lblReturnSpecialReq.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnSpecialReq.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));



            this.lblReturnSpecialReq.Name = "lblReturnSpecialReq";
            this.lblReturnSpecialReq.Size = new System.Drawing.Size(85, 62);
            this.lblReturnSpecialReq.TabIndex = 267;
            this.lblReturnSpecialReq.Text = "Return Special Requirments";
            // 
            // txtReturnSpecialReq
            // 
            this.txtReturnSpecialReq.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.txtReturnSpecialReq.MaxLength = 500;
            this.txtReturnSpecialReq.Multiline = true;
            this.txtReturnSpecialReq.Name = "txtReturnSpecialReq";
            // 
            // 
            // 
            //   this.txtReturnSpecialReq.RootElement.StretchVertically = true;
            this.txtReturnSpecialReq.ScrollBars = System.Windows.Forms.ScrollBars.Both;
            this.txtReturnSpecialReq.Size = new System.Drawing.Size(200, 75);
            this.txtReturnSpecialReq.TabIndex = 266;
            this.txtReturnSpecialReq.TabStop = false;
            this.txtReturnSpecialReq.ForeColor = Color.Red;



            this.lblReturnSpecialReq.Location = new System.Drawing.Point(383, 163);
            this.txtReturnSpecialReq.Location = new System.Drawing.Point(475, 163);




            // 
            // lblReturnVehicle
            // 
            this.lblReturnVehicle.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnVehicle.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold);
            this.lblReturnVehicle.Location = new System.Drawing.Point(ddlVehicleType.Location.X + 110, ddlVehicleType.Location.Y + 5);//(405, 58);//(3, 241);
            this.lblReturnVehicle.Name = "lblReturnVehicle";
            this.lblReturnVehicle.Size = new System.Drawing.Size(22, 20);
            this.lblReturnVehicle.TabIndex = 274;
            this.lblReturnVehicle.Text = "Rt";
            this.lblReturnVehicle.Visible = false;
            //this.Size = new Size(this.Size.Width, 835);
            // 
            // ddlReturnVehicleType
            // 
            //this.ddlReturnVehicleType.Caption = null;
            this.ddlReturnVehicleType.Font = new System.Drawing.Font("Tahoma", 11F);
            this.ddlReturnVehicleType.Location = new System.Drawing.Point(ddlVehicleType.Location.X + 130, ddlVehicleType.Location.Y);//(515, 58);//(113, 240);
            this.ddlReturnVehicleType.Name = "ddlReturnVehicleType";
            //this.ddlReturnVehicleType.Property = null;
            // this.ddlReturnVehicleType.ShowDownArrow = true;
            this.ddlReturnVehicleType.Size = new System.Drawing.Size(95, ddlVehicleType.Size.Height);//(124, 24);
            this.ddlReturnVehicleType.TabIndex = 273;
            this.ddlReturnVehicleType.Visible = false;

            ddlVehicleType.Size = new Size(115, 26);
            ddlVehicleType.Location = new Point(ddlVehicleType.Location.X - 5, ddlVehicleType.Location.Y);
            btnMultiVehicle.Text = "Multi Veh";
            btnMultiVehicle.Location = new Point(btnMultiVehicle.Location.X + 20, btnMultiVehicle.Location.Y);
            btnMultiVehicle.Size = new Size(60, btnMultiVehicle.Size.Height);
            // 
            // lblReturnFromAirport
            // 
            this.lblReturnFromAirport.BackColor = System.Drawing.Color.Transparent;
            this.lblReturnFromAirport.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.lblReturnFromAirport.Location = new System.Drawing.Point(363, 68);
            this.lblReturnFromAirport.Name = "lblReturnFromAirport";
            this.lblReturnFromAirport.Size = new System.Drawing.Size(98, 22);
            this.lblReturnFromAirport.TabIndex = 209;
            //   this.lblReturnFromAirport.Text = "Return From ";
            this.lblReturnFromAirport.Text = "";
            this.lblReturnFromAirport.Visible = false;
            // 
            // ddlReturnFromAirport
            // 
            this.ddlReturnFromAirport.BackColor = System.Drawing.Color.White;
            this.ddlReturnFromAirport.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            //  this.ddlReturnFromAirport.Location = new System.Drawing.Point(496, 69);
            this.ddlReturnFromAirport.Location = ddlDropOffPlot.Location;
            this.ddlReturnFromAirport.Name = "ddlReturnFromAirport";
            //  this.ddlReturnFromAirport.NewValue = null;
            //   this.ddlReturnFromAirport.OldValue = null;
            // 
            // 
            // 
            // this.ddlReturnFromAirport.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
            //    this.ddlReturnFromAirport.ShowDropDownArrow = Telerik.WinControls.ElementVisibility.Visible;
            this.ddlReturnFromAirport.Size = new System.Drawing.Size(215, 23);
            this.ddlReturnFromAirport.TabIndex = 208;
            this.ddlReturnFromAirport.TabStop = false;
            this.ddlReturnFromAirport.Visible = false;




            InitializeReturnFareControls();

            InstallEventHandlers(panel2);


        }

        void dtpReturnPickupTime_TabIndexChanged(object sender, EventArgs e)
        {
            txtFromAddress.Focus();
        }


        void dtpReturnPickupDate_Enter(object sender, EventArgs e)
        {
            lastReturnPickupDate = dtpReturnPickupDate.Value;
        }

        void numReturnFare_Validated(object sender, EventArgs e)
        {
            CalculateServiceCharges(null);

            //if (numReturnFare.Value > 0 && numReturnBookingFee != null)
            //    numReturnBookingFee.Value = numReturnFare.Value;
        }

        DateTime? lastReturnPickupDate;
        void dtpReturnPickupDate_Leave(object sender, EventArgs e)
        {
            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true)
            {
                try
                {

                    if (lastReturnPickupDate == null || (dtpReturnPickupDate.Value != null && dtpReturnPickupDate.DateTimePickerElement.Value != null && lastReturnPickupDate != dtpReturnPickupDate.DateTimePickerElement.Value))
                    {

                        UpdateAutoCalculateFares();
                    }
                }
                catch
                {


                }
            }
        }

        void dtpReturnPickupDate_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                FocusOnFromAddress();
            }
        }






        private void InitializeAgentPanel()
        {
            if (chkTakenByAgent == null)
            {

                this.chkTakenByAgent = new CheckBox();
                this.numAgentCommission = new NumericUpDown();
                this.numAgentCharge = new NumericUpDown();

                this.radLabel32 = new Label();
                this.lblagentcharge = new Label();

                //      this.numAgentCommissionPercent = new NumericUpDown();
                //    this.radLabel34 = new Label();
                //    this.ddlAgentCommissionType = new UI.MyDropDownList();


                this.radPanel1.Controls.Add(this.chkTakenByAgent);
                //   this.radPanel1.Controls.Add(this.radLabel34);
                //  this.radPanel1.Controls.Add(this.numAgentCommissionPercent);
                this.radPanel1.Controls.Add(this.radLabel32);
                this.radPanel1.Controls.Add(this.lblagentcharge);


                //  this.radPanel1.Controls.Add(this.radLabel30);
                this.radPanel1.Controls.Add(this.numAgentCommission);
                this.radPanel1.Controls.Add(this.numAgentCharge);
                //      this.radPanel1.Controls.Add(this.ddlAgentCommissionType);


                // 
                // chkTakenByAgent
                // 
                //   this.chkTakenByAgent.BackColor = System.Drawing.Color.Transparent;
                this.chkTakenByAgent.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.chkTakenByAgent.ForeColor = System.Drawing.Color.Black;
                this.chkTakenByAgent.Location = new System.Drawing.Point(932, 64);
                this.chkTakenByAgent.Name = "chkTakenByAgent";
                // 
                // 
                // 
                //   this.chkTakenByAgent.RootElement.ForeColor = System.Drawing.Color.Black;
                this.chkTakenByAgent.Size = new System.Drawing.Size(157, 22);
                this.chkTakenByAgent.TabIndex = 266;
                this.chkTakenByAgent.Text = "Payment Taken By Agent";
                //   this.chkTakenByAgent.TextWrap = true;
                this.chkTakenByAgent.Visible = true;
                // 
                // numAgentCommission
                // 
                //   this.numAgentCommission.BackColor = System.Drawing.Color.Transparent;
                this.numAgentCommission.DecimalPlaces = 2;
                this.numAgentCommission.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numAgentCommission.Location = new System.Drawing.Point(1101, 91);
                this.numAgentCommission.Name = "numAgentCommission";
                this.numAgentCommission.Maximum = 1000;
                this.numAgentCommission.Validated += new EventHandler(numAgentCommission_Validated);
                // 
                // 
                // 
                // this.numAgentCommission.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
                // this.numAgentCommission.ShowBorder = true;
                //  this.numAgentCommission.ShowUpDownButtons = false;
                this.numAgentCommission.Size = new System.Drawing.Size(75, 24);
                this.numAgentCommission.TabIndex = 267;
                this.numAgentCommission.TabStop = false;
                // ((Telerik.WinControls.UI.RadSpinElement)(this.numAgentCommission.GetChildAt(0))).Padding = new System.Windows.Forms.Padding(0, 2, 0, 1);
                //  ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //  ((Telerik.WinControls.Primitives.BorderPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // //(Telerik.WinControls.Layouts.BoxLayout)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0))).Visibility = Telerik.WinControls.ElementVisibility.Collapsed;
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(0).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(0).GetChildAt(0))).SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(1).GetChildAt(0))).Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // ((Telerik.WinControls.Primitives.FillPrimitive)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(0).GetChildAt(1).GetChildAt(0))).SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.None;
                //   //((Telerik.WinControls.UI.RadTextBoxItem)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Text = "0.00";
                //   //((Telerik.WinControls.UI.RadTextBoxItem)(this.numAgentCommission.GetChildAt(0).GetChildAt(2).GetChildAt(1))).Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                // 



                //   this.numAgentCommission.BackColor = System.Drawing.Color.Transparent;
                this.numAgentCharge.DecimalPlaces = 2;
                this.numAgentCharge.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.numAgentCharge.Location = new System.Drawing.Point(1101, 120);
                this.numAgentCharge.Name = "numAgentCharge";
                this.numAgentCharge.Maximum = 1000;
                this.numAgentCharge.Validated += new EventHandler(numAgentCharge_Validated);

                this.numAgentCharge.Size = new System.Drawing.Size(75, 24);
                this.numAgentCharge.TabIndex = 267;
                this.numAgentCharge.TabStop = false;





                // radLabel32
                // 
                this.radLabel32.AutoSize = false;
                //   this.radLabel32.BackColor = System.Drawing.Color.Transparent;
                this.radLabel32.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
                this.radLabel32.ForeColor = System.Drawing.Color.Black;
                this.radLabel32.Location = new System.Drawing.Point(932, 93);
                this.radLabel32.Name = "radLabel32";
                // 
                // 
                // 
                // this.radLabel32.RootElement.ForeColor = System.Drawing.Color.Black;
                this.radLabel32.Size = new System.Drawing.Size(140, 22);
                this.radLabel32.TabIndex = 268;
                this.radLabel32.Text = "Hotel Comm.";



                // 
                this.lblagentcharge.AutoSize = false;
                //   this.radLabel32.BackColor = System.Drawing.Color.Transparent;
                this.lblagentcharge.Font = new System.Drawing.Font("Tahoma", 10.25F, System.Drawing.FontStyle.Bold);
                this.lblagentcharge.ForeColor = System.Drawing.Color.Black;
                this.lblagentcharge.Location = new System.Drawing.Point(932, 120);
                this.lblagentcharge.Name = "radLabel32";
                // 
                // 
                // 
                // this.radLabel32.RootElement.ForeColor = System.Drawing.Color.Black;
                this.lblagentcharge.Size = new System.Drawing.Size(140, 22);
                this.lblagentcharge.TabIndex = 268;
                this.lblagentcharge.Text = "Office Charges";




                // 
                //// numAgentCommissionPercent
                //// 
                ////   this.numAgentCommissionPercent.BackColor = System.Drawing.Color.Transparent;
                //this.numAgentCommissionPercent.Font = new System.Drawing.Font("Tahoma", 9.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //this.numAgentCommissionPercent.Location = new System.Drawing.Point(1026, 92);
                //this.numAgentCommissionPercent.Name = "numAgentCommissionPercent";
                //// 
                //// 
                //// 
                ////   this.numAgentCommissionPercent.RootElement.AutoSizeMode = Telerik.WinControls.RadAutoSizeMode.WrapAroundChildren;
                ////   this.numAgentCommissionPercent.ShowBorder = true;
                //// this.numAgentCommissionPercent.ShowUpDownButtradLabel34ons = false;
                //this.numAgentCommissionPercent.Size = new System.Drawing.Size(36, 24);
                //this.numAgentCommissionPercent.TabIndex = 269;
                //this.numAgentCommissionPercent.TabStop = false;
                //this.numAgentCommissionPercent.Validated += new EventHandler(numAgentCommissionPercent_Validated);

                //// 
                // radLabel34
                // 
                //   this.radLabel34.BackColor = System.Drawing.Color.Transparent;
                //this.radLabel34.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //this.radLabel34.Location = new System.Drawing.Point(1063, 93);
                //this.radLabel34.Name = "radLabel34";
                //this.radLabel34.Size = new System.Drawing.Size(26, 22);
                //this.radLabel34.TabIndex = 270;
                //this.radLabel34.Text = "%";



                //// 
                //// ddlAgentCommissionType
                //// 
                //this.ddlAgentCommissionType.Caption = null;
                //this.ddlAgentCommissionType.DropDownStyle = RadDropDownStyle.DropDown; //ComboBoxStyle.DropDown;
                //this.ddlAgentCommissionType.Enabled = false;
                //this.ddlAgentCommissionType.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                //this.ddlAgentCommissionType.ForeColor = System.Drawing.Color.Black;

                //Telerik.WinControls.UI.RadListDataItem radListDataItem1 = new Telerik.WinControls.UI.RadListDataItem();
                //Telerik.WinControls.UI.RadListDataItem radListDataItem2 = new Telerik.WinControls.UI.RadListDataItem();
                //radListDataItem1.Text = "Percent";
                //radListDataItem1.TextWrap = true;
                //radListDataItem2.Text = "Amount";
                //radListDataItem2.TextWrap = true;
                //this.ddlAgentCommissionType.Items.Add(radListDataItem1);
                //this.ddlAgentCommissionType.Items.Add(radListDataItem2);
                //this.ddlAgentCommissionType.Location = new System.Drawing.Point(1000, 117);
                //this.ddlAgentCommissionType.Name = "ddlAgentCommissionType";
                //this.ddlAgentCommissionType.Property = null;
                //// 
                //// 
                //// 
                ////   this.ddlAgentCommissionType.RootElement.ForeColor = System.Drawing.Color.Black;
                //this.ddlAgentCommissionType.ShowDownArrow = true;
                //this.ddlAgentCommissionType.Size = new System.Drawing.Size(108, 26);
                //this.ddlAgentCommissionType.TabIndex = 243;

                //// Added on 15 sept 2014
                ////  this.ddlAgentCommissionType.SelectedIndex = 1;
                ////

                //ddlAgentCommissionType.SelectedIndexChanged += DdlAgentCommissionType_SelectedIndexChanged;//new EventHandler(ddlAgentCommissionType_SelectedIndexChanged);
                //this.ddlAgentCommissionType.Enabled = true;


            }
        }

        private void DdlAgentCommissionType_SelectedIndexChanged(object sender, Telerik.WinControls.UI.Data.PositionChangedEventArgs e)
        {
            try
            {

                //if (ddlAgentCommissionType.Text.Trim() == "Percent")
                //{
                //    numAgentCommissionPercent.Enabled = false;
                //    numAgentCommission.Enabled = false;
                //}
                //else
                //{
                //    numAgentCommissionPercent.Enabled = false;
                //    numAgentCommission.Enabled = true;

                //}

            }
            catch (Exception ex)
            {


            }
        }

        void numAgentCommission_Validated(object sender, EventArgs e)
        {
            if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == false)
            {

                CalculateDriverFaresAndWOTopOfAgentCompanyPrice();
            }
            else
            {
                CalculateTotalCharges();
            }
        }


        void numAgentCharge_Validated(object sender, EventArgs e)
        {
            if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == false)
            {

                CalculateDriverFaresAndWOTopOfAgentCompanyPrice();
            }
            else
            {
                CalculateTotalCharges();
            }
        }

        void numAgentCommissionPercent_Validated(object sender, EventArgs e)
        {
            CalculateDriverFaresAndCompanyPrice();
            // CalculationAgentCommissionPercent();
        }


        private void CalculationAgentCommissionPercent()
        {
            //try
            //{
            //    if (numAgentCommission != null)
            //    {

            //        numAgentCommission.Value = (numCompanyFares.Value * numAgentCommissionPercent.Value) / 100;

            //        if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == true)
            //        {
            //            CalculateDriverFaresAndCompanyPrice();
            //        }

            //    }
            //}
            //catch (Exception ex)
            //{


            //}
        }



        void ddlAgentCommissionType_SelectedIndexChanged(object sender, EventArgs e)
        {


            //try
            //{

            //    if (ddlAgentCommissionType.Text.Trim() == "Percent")
            //    {
            //        numAgentCommissionPercent.Enabled = false;
            //        numAgentCommission.Enabled = false;
            //    }
            //    else
            //    {
            //        numAgentCommissionPercent.Enabled = false;
            //        numAgentCommission.Enabled = true;

            //    }

            //}
            //catch (Exception ex)
            //{


            //}

        }

        private void InitializeAccPassowrdPanel()
        {
            if (pnlAccpassword != null)
                return;

            try
            {



                this.pnlAccpassword = new System.Windows.Forms.Panel();
                this.txtAccPassword = new TextBox();
                this.radLabel33 = new Label();

                // this.pnlAccpassword.SuspendLayout();
                //  ((System.ComponentModel.ISupportInitialize)(this.txtAccPassword)).BeginInit();
                //  ((System.ComponentModel.ISupportInitialize)(this.radLabel33)).BeginInit();



                // 
                // pnlAccpassword
                // 
                this.pnlAccpassword.BackColor = System.Drawing.Color.Transparent;
                // this.pnlAccpassword.Controls.Add(this.txtAccPassword);
                //this.pnlAccpassword.Controls.Add(this.radLabel33);
                this.pnlAccpassword.Location = new System.Drawing.Point(7, 372);
                this.pnlAccpassword.Name = "pnlAccpassword";
                this.pnlAccpassword.Size = new System.Drawing.Size(322, 1);
                this.pnlAccpassword.TabIndex = 221;
                this.pnlAccpassword.Visible = false;
                // 
                // txtAccPassword
                // 

                pnlCustomer.Controls.Add(txtAccPassword);
                this.txtAccPassword.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.txtAccPassword.Location = new System.Drawing.Point(487, 221);//(104, 3);
                this.txtAccPassword.MaxLength = 50;
                this.txtAccPassword.Name = "txtAccPassword";
                this.txtAccPassword.PasswordChar = '*';
                this.txtAccPassword.Size = new System.Drawing.Size(208, 21);
                this.txtAccPassword.TabIndex = 215;
                this.txtAccPassword.TabStop = false;
                // 
                // radLabel33
                // 
                this.radLabel33.BackColor = System.Drawing.Color.Transparent;
                this.radLabel33.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.radLabel33.ForeColor = System.Drawing.Color.Black;
                this.radLabel33.Location = new System.Drawing.Point(411, 222);//(1, 3);
                this.radLabel33.Name = "radLabel33";
                // 
                // 
                // 
                // this.radLabel33.RootElement.ForeColor = System.Drawing.Color.Black;
                this.radLabel33.Size = new System.Drawing.Size(83, 22);
                this.radLabel33.TabIndex = 214;
                this.radLabel33.Text = "Password";
                pnlCustomer.Controls.Add(radLabel33);

                this.pnlMain.Controls.Add(this.pnlAccpassword);

                //   this.pnlAccpassword.ResumeLayout(false);
                this.pnlAccpassword.PerformLayout();


                pnlAccpassword.BringToFront();

                //  ((System.ComponentModel.ISupportInitialize)(this.txtAccPassword)).EndInit();
                //  ((System.ComponentModel.ISupportInitialize)(this.radLabel33)).EndInit();
            }
            catch (Exception ex)
            {

            }
        }





        private void InitializeOrderNoPanel()
        {

            if (this.pnlOrderNo != null)
            {
                return;
            }

            try
            {


                this.pnlOrderNo = new System.Windows.Forms.Panel();
                //fwdkh9  pnlOrderNo.Visible = false;
                this.lblOrderNo = new Label();

                this.txtOrderNo = new TextBox();



                this.pnlOrderNo.SuspendLayout();
                // ((System.ComponentModel.ISupportInitialize)(this.lblOrderNo)).BeginInit();

                //     ((System.ComponentModel.ISupportInitialize)(this.txtOrderNo)).BeginInit();


                this.pnlMain.Controls.Add(this.pnlOrderNo);

                // 
                // pnlOrderNo
                // 
                // this.pnlOrderNo.Controls.Add(this.lblOrderNo);
                pnlCustomer.Controls.Add(lblOrderNo);

                //this.pnlOrderNo.Controls.Add(this.txtOrderNo);
                pnlCustomer.Controls.Add(txtOrderNo);

                this.pnlOrderNo.Location = new System.Drawing.Point(6, 408);
                this.pnlOrderNo.Name = "pnlOrderNo";
                this.pnlOrderNo.Size = new System.Drawing.Size(345, 29);
                this.pnlOrderNo.TabIndex = 205;
                pnlOrderNo.Visible = false;

                // 
                // lblOrderNo
                // 
                this.lblOrderNo.BackColor = System.Drawing.Color.Transparent;
                this.lblOrderNo.Font = new System.Drawing.Font("Tahoma", 9.5F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.lblOrderNo.Location = new System.Drawing.Point(411, 174);//(16, 3);
                this.lblOrderNo.Name = "lblOrderNo";
                this.lblOrderNo.Size = new System.Drawing.Size(70, 22);
                this.lblOrderNo.TabIndex = 202;
                this.lblOrderNo.Text = "Order No";


                // 
                // txtOrderNo
                // 
                this.txtOrderNo.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                this.txtOrderNo.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.CustomSource;
                this.txtOrderNo.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.txtOrderNo.Location = new System.Drawing.Point(487, 172);//(104, 2);
                this.txtOrderNo.MaxLength = 50;
                this.txtOrderNo.Name = "txtOrderNo";
                this.txtOrderNo.Size = new System.Drawing.Size(208, 22);
                this.txtOrderNo.TabIndex = 201;
                this.txtOrderNo.TabStop = false;



                this.pnlOrderNo.ResumeLayout(false);
                this.pnlOrderNo.PerformLayout();
                //  ((System.ComponentModel.ISupportInitialize)(this.lblOrderNo)).EndInit();

                //   ((System.ComponentModel.ISupportInitialize)(this.txtOrderNo)).EndInit();


                pnlOrderNo.BringToFront();

            }
            catch (Exception ex)
            {


            }

        }



        private void InitializePupilNo()
        {
            try
            {

                if (pnlOrderNo == null)
                {

                    this.pnlOrderNo = new System.Windows.Forms.Panel();
                    this.pnlOrderNo.SuspendLayout();

                    this.pnlOrderNo.Location = new System.Drawing.Point(8, 410);
                    this.pnlOrderNo.Name = "pnlOrderNo";
                    this.pnlOrderNo.Size = new System.Drawing.Size(345, 54);
                    this.pnlOrderNo.TabIndex = 205;


                    this.pnlMain.Controls.Add(this.pnlOrderNo);


                    this.pnlOrderNo.ResumeLayout(false);
                    this.pnlOrderNo.PerformLayout();
                }




                if (this.txtPupilNo == null)
                {

                    this.txtPupilNo = new TextBox();

                    this.lblPupilNo = new Label();


                    //    ((System.ComponentModel.ISupportInitialize)(this.txtPupilNo)).BeginInit();
                    //    ((System.ComponentModel.ISupportInitialize)(this.lblPupilNo)).BeginInit();



                    // 
                    // pnlOrderNo
                    // 


                    //  this.pnlOrderNo.Controls.Add(this.txtPupilNo);
                    this.pnlCustomer.Controls.Add(this.txtPupilNo);

                    // this.pnlOrderNo.Controls.Add(this.lblPupilNo);
                    this.pnlCustomer.Controls.Add(this.lblPupilNo);

                    lblPupilNo.BringToFront();
                    // 
                    // lblOrderNo
                    // 


                    // 
                    // txtPupilNo
                    // 
                    this.txtPupilNo.AutoCompleteMode = System.Windows.Forms.AutoCompleteMode.SuggestAppend;
                    this.txtPupilNo.AutoCompleteSource = System.Windows.Forms.AutoCompleteSource.CustomSource;
                    this.txtPupilNo.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    this.txtPupilNo.Location = new System.Drawing.Point(133, 407);//(105, 28);
                    this.txtPupilNo.MaxLength = 10;
                    this.txtPupilNo.Name = "txtPupilNo";
                    this.txtPupilNo.Size = new System.Drawing.Size(208, 24);
                    this.txtPupilNo.TabIndex = 203;
                    this.txtPupilNo.TabStop = false;
                    // 
                    // txtOrderNo
                    // 

                    // 
                    // lblPupilNo
                    // 
                    this.lblPupilNo.BackColor = System.Drawing.Color.Transparent;
                    this.lblPupilNo.Font = new System.Drawing.Font("Tahoma", 11.25F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                    this.lblPupilNo.Location = new System.Drawing.Point(19, 406);//(1, 29);14, 410
                    this.lblPupilNo.Name = "lblPupilNo";
                    this.lblPupilNo.Size = new System.Drawing.Size(64, 22);
                    this.lblPupilNo.TabIndex = 204;
                    this.lblPupilNo.Text = "Rt. Order No";

                    //  ((System.ComponentModel.ISupportInitialize)(this.txtPupilNo)).EndInit();

                    //   ((System.ComponentModel.ISupportInitialize)(this.lblPupilNo)).EndInit();



                }


                //   pnlOrderNo.BringToFront();
            }
            catch (Exception ex)
            {


            }
        }




        private void SetCashAccount(int accTypeId)
        {

            if (accTypeId == 3)
            {
                SetCreditCardPaymentType();
            }
            if (accTypeId == 2)
            {
                SetCashPaymentType();
            }

            else
            {

                SetAccountPaymentType();


            }

        }


        private void SetCreditCardPaymentType()
        {
            if (ddlPaymentType.Enabled)
                ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CREDIT_CARD;
        }

        private void ClearDepartment()
        {
            if (ddlDepartment != null)
                ddlDepartment.DataSource = null;
        }


        private void FillDepartmentsCombo(int companyId)
        {

            try
            {


                ddlDepartment.SelectedIndexChanged -= DdlDepartment_SelectedIndexChanged;
                ComboFunctions.FillCompanyDepartmentCombo(ddlDepartment, c => c.CompanyId == companyId);
                this.ddlDepartment.SelectedIndexChanged += DdlDepartment_SelectedIndexChanged;
                //    if (ddlDepartment.SelectedIndex == 0)
                //     ddlDepartment.SelectedIndex = -1;

            }
            catch
            {

            }
        }


        private void FillEscortsCombo()
        {

            if (ddlEscort.DataSource == null)
                ComboFunctions.FillEscortCombo(ddlEscort, null);
        }



        private void HideOrderNoPanel()
        {
            if (pnlOrderNo == null)
                return;

            pnlOrderNo.Visible = false;
            txtOrderNo.Text = string.Empty;
            txtPupilNo.Text = string.Empty;



            //if (txtSpecialRequirements.Location.Y != 458)
            //{
            //     txtSpecialRequirements.Location = new Point(111, 458);
            //     txtSpecialRequirements.Size = new Size(240,50);
            //}
        }




        private void btnExitForm_Click(object sender, EventArgs e)
        {
            try
            {

                if (IsAllowExit() == false)
                    return;

                if (pnlVia == null || pnlVia.Visible == false)
                {
                    if (DialogResult.Yes == MessageBox.Show("Are you sure you want to close?? ", "", MessageBoxButtons.YesNo, MessageBoxIcon.Question))
                    {
                        this.Close();
                    }
                }
                else
                {

                    btnSelectVia.Tag = null;



                    if (pnlVia != null)
                    {

                        ShowViaPoint(false);

                    }
                }
            }
            catch
            {


            }
        }

        private void btnPrintJob_Click(object sender, EventArgs e)
        {
            Print();
        }

        private void Print()
        {

            if (objMaster.Current == null) return;


            long id = objMaster.Current.Id;


            ShowAuditLogReport();







        }

        private List<Booking_Note> listofNotesCopied = null;

        private void JobReport_Click(object sender, EventArgs e)
        {
            try
            {
                TaxiDataContext db = new TaxiDataContext();

                var list = db.Vu_BookingDetails.Where(c => c.Id == objMaster.Current.Id || c.MasterJobId == objMaster.Current.Id).ToList();



                UM_Form_Template objReport = General.GetObject<UM_Form_Template>(c => c.UM_Form.FormName == "rptfrmJobDetails" && c.IsDefault == true);
                rptfrmJobDetails frm = null;
                rptfrmJobDetails2 frm2 = null;
                rptfrmJobDetails3 frm3 = null;
                rptfrmJobDetails4 frm4 = null;
                if (objReport != null)
                {
                    switch (objReport.TemplateValue)
                    {
                        case "rptfrmJobDetails":
                            frm = new rptfrmJobDetails();
                            frm.DataSource = list;
                            frm.GenerateReport();

                            break;


                        case "rptfrmJobDetails2":
                            frm2 = new rptfrmJobDetails2();
                            frm2.DataSource = list;
                            frm2.GenerateReport();

                            break;
                        case "rptfrmJobDetails3":
                            frm3 = new rptfrmJobDetails3();
                            frm3.DataSource = list;
                            frm3.GenerateReport();

                            break;


                        case "rptfrmJobDetails4":
                            frm4 = new rptfrmJobDetails4();
                            frm4.DataSource = list;
                            frm4.GenerateReport();

                            break;

                    }
                }





                if (frm != null)
                {
                    frm.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm.Size = new Size(800, 800);
                    frm.ControlBox = true;
                    frm.MaximizeBox = true;
                    frm.MinimizeBox = true;
                    frm.ShowDialog();

                    frm.Dispose();
                }
                else if (frm2 != null)
                {
                    frm2.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm2.Size = new Size(850, 800);
                    frm2.ControlBox = true;
                    frm2.MaximizeBox = true;
                    frm2.MinimizeBox = true;
                    frm2.ShowDialog();

                    frm2.Dispose();


                }
                else if (frm3 != null)
                {
                    frm3.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm3.Size = new Size(850, 800);
                    frm3.ControlBox = true;
                    frm3.MaximizeBox = true;
                    frm3.MinimizeBox = true;
                    frm3.ShowDialog();

                    frm3.Dispose();


                }

                else if (frm4 != null)
                {
                    frm4.FormBorderStyle = FormBorderStyle.FixedSingle;
                    frm4.Size = new Size(850, 800);
                    frm4.ControlBox = true;
                    frm4.MaximizeBox = true;
                    frm4.MinimizeBox = true;
                    frm4.ShowDialog();

                    frm4.Dispose();


                }
            }
            catch
            {


            }

        }

        private void opt_JOneWay_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetJourneyWise(args.ToggleState);

            if (args.ToggleState == ToggleState.On && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }




        private void btnDespatchView_Click(object sender, EventArgs e)
        {


            ShowRouteSuggesstion();
        }


        private void ShowRouteSuggesstion()
        {
            try
            {

                string FromAddress = "";
                string ToAddress = "";
                string[] via = new string[0];

                if (pnlVia != null)
                {
                    via = grdVia.Rows.Select(c => General.GetPostCodeMatch(c.Cells["VIALOCATIONVALUE"].Value.ToStr())).ToArray<string>();
                }


                int fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();


                FromAddress = txtFromAddress.Text.ToStr().Trim();
                int toLocTypeId = ddlToLocType.SelectedValue.ToInt();


                ToAddress = txtToAddress.Text.ToStr().Trim();


                if (string.IsNullOrEmpty(FromAddress) || string.IsNullOrEmpty(ToAddress))
                {

                    ENUtils.ShowMessage("Required FromAddress or ToAddress");
                    return;
                }



                int? VehicleId = ddlVehicleType.SelectedValue.ToInt();
                int? CompanyId = ddlCompany.SelectedValue.ToInt();







                string viaStr = "**";

                if (via != null && via.Count() > 0)
                {
                    viaStr = string.Join(">>>", via);

                    viaStr = viaStr.Replace(" ", "**").Trim();

                }


                string connString = Application.StartupPath + "\\TreasureRouteMap.exe";




                DateTime? pickupdatetime = dtpPickupTime.Value;

                if (pickupdatetime == null)
                    pickupdatetime = DateTime.Now;



                System.Diagnostics.Process proc = System.Diagnostics.Process.GetProcesses().FirstOrDefault(c => c.ProcessName.Contains("TreasureRouteMap"));

                if (proc != null)
                {
                    proc.Kill();
                    proc.CloseMainWindow();
                    proc.Close();
                }



                string conn = System.Configuration.ConfigurationSettings.AppSettings["ConnectionString"].ToStr().Replace(" ", "**");




                FromAddress = General.GetPostCodeMatch(FromAddress) + ", UK";
                ToAddress = General.GetPostCodeMatch(ToAddress) + ", UK";



                string arg = "frmroutsuggestions" + " " + conn + " " + FromAddress.Replace(" ", "**") + " " + ToAddress.Replace(" ", "**") + " " + viaStr + " " + VehicleId + " " + CompanyId + " " + fromLocTypeId.ToStr() + " " + string.Format("{0:dd/MM/yyyy HH:mm}", pickupdatetime).Replace(" ", "**");
                System.Diagnostics.Process.Start(connString, arg);



            }
            catch (Exception ex)
            {


            }


        }









        private void chkQuotation_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetQuotation(args.ToggleState);
        }

        private void SetQuotation(ToggleState toggle)
        {
            if (toggle == ToggleState.On)
            {
                ddlDriver.Enabled = false;
                chkAllocateDriver.Enabled = false;

                //if (ddlReturnDriver != null)
                //    ddlReturnDriver.Enabled = false;


                btnSaveNew.Text = "Save Quotation";

                if (objMaster.PrimaryKeyValue != null)
                {
                    btnCancelBooking.Visible = false;
                    //       btnConfirmBooking.Visible = true;
                    // btnCancelBooking.SendToBack();
                    //      btnConfirmBooking.BringToFront();
                }
            }
            else
            {
                btnSaveNew.Text = "Save Booking    (CTRL+S)";


                ddlDriver.Enabled = true;
                chkAllocateDriver.Enabled = true;
                //if (ddlReturnDriver != null)
                //    ddlReturnDriver.Enabled = true;

            }

        }


        private void btnSendEmail_Click(object sender, EventArgs e)
        {

            //if(Debugger.IsAttached)
            //{
            //    ClsSendReceipt c = new ClsSendReceipt();
            //    c.SendEmailTemplate(objMaster.Current.Id);

            //}


            if (CheckDefaultValidation())
            {
                SendEmail(true);


            }


        }


        private void SendEmail(bool saveBooking)
        {
            try
            {

                if (saveBooking)
                    Save();
                if (objMaster.PrimaryKeyValue != null)
                {



                    frmEmailBooking frm = new frmEmailBooking(objMaster.Current);
                    frm.IsOpenedFromBooking = true;
                    frm.StartPosition = FormStartPosition.CenterScreen;
                    frm.ShowDialog();


                }
            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }
        }
        private void AutoSendConfirmationEmail(string actionType)
        {
            try
            {


                if (objMaster.PrimaryKeyValue != null)
                {



                    frmEmailBooking frm = new frmEmailBooking(objMaster.Current, true, actionType);
                    //,result== DialogResult.Yes?true:false);
                    frm.IsOpenedFromBooking = true;

                    frm.Dispose();
                }
            }
            catch (Exception ex)
            {
                //  ENUtils.ShowMessage(ex.Message);

            }
        }


        bool changepaymenttype = false;
        private void ddlPaymentType_SelectedValueChanged(object sender, EventArgs e)
        {
            try
            {
                if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD)
                {
                    btnPayment.Visible = true;

                    ShowAgentDetails(true);
                }
                else
                {
                    btnPayment.Visible = false;


                    if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CASH && chkIsCompanyRates.Checked)
                    {
                        if (ddlCompany.SelectedValue != null)
                        {
                            if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool())
                            {


                                if (objMaster.Current != null && objMaster.Current.CompanyId.ToInt() == ddlCompany.SelectedValue.ToInt() &&
                                    (objMaster.Current.Gen_Company.Gen_Company_PaymentTypes.Count(c =>
                                                    c.PaymentTypeId == ddlPaymentType.SelectedValue.ToInt()) == 0))
                                //objMaster.Current.Gen_Company.DefaultIfEmpty().AccountTypeId.ToInt() == Enums.ACCOUNT_TYPE.ACCOUNT)
                                {
                                    ddlCompany.SelectedValue = null;
                                    chkIsCompanyRates.Checked = false;

                                }
                                else
                                {

                                    if (General.GetQueryable<Gen_Company_PaymentType>(null).Count(c => c.CompanyId == ddlCompany.SelectedValue.ToInt() &&
                                                    c.PaymentTypeId == ddlPaymentType.SelectedValue.ToInt()) == 0)
                                    {
                                        ddlCompany.SelectedValue = null;
                                        chkIsCompanyRates.Checked = false;

                                    }

                                }
                            }
                        }
                        else
                        {
                            chkIsCompanyRates.Checked = false;
                        }


                        ShowAgentDetails(true);
                    }
                    else
                    {



                        if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.ROOM_CHARGE && chkIsCompanyRates.Checked)
                        {

                            ShowAgentDetails(true);

                            if (chkTakenByAgent != null && chkTakenByAgent.Visible)
                            {

                                chkTakenByAgent.Checked = true;
                            }

                        }
                        else if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.BANK_ACCOUNT)
                        {

                            ShowAgentDetails(true);

                            // General.GetObject<Gen_Company>(c => c.Id == ddlCompany.SelectedValue.ToInt());

                        }
                    }

                }



                if (IsDisplayingRecord == false && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                {
                    if (numAgentCommission != null && numAgentCommission.Visible == true && numAgentCommission.Value > 0
                        && (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT ||
                        ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT))
                    {
                        changepaymenttype = true;
                    }
                    else
                        changepaymenttype = false;
                }
                else
                    changepaymenttype = false;


                if (ddlPaymentType.Enabled)
                    UpdateAutoCalculateFares();

            }
            catch
            {


            }
        }
        bool IsSave = false;




        public string GetMobileNo()
        {

            return txtCustomerMobileNo.Text.Trim();
        }

        public string GetSubCompanyName()
        {

            return ddlSubCompany.Text.Trim();
        }

        public string GetUniqueRef()
        {

            return ddlCustomerName.Text + string.Format("{0:HH:mm}", dtpPickupTime.Value);

        }

        public string GetEmail()
        {

            return txtEmail.Text.Trim();
        }

        public BookingBO GetBookingObject()
        {

            return objMaster;
        }

        private bool SaveFromPayment = false;



        public bool Savefrompayment(string mobileNo, bool preauth = false, bool includeReturnPayment = false)
        {
            SaveFromPayment = true;

            if (mobileNo.ToStr().Trim().Length > 0)
            {
                txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);


                txtCustomerMobileNo.Text = mobileNo;

                txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);


            }




            if (CheckDefaultValidation())
            {
                chkAutoDespatch.Checked = false;
                chkBidding.Checked = false;


            }


            if (includeReturnPayment == false)
                ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CASH;

            bool issave = this.Save();

            if (preauth == false)
                SaveFromPayment = false;


            return issave;
        }




        private void btnPayment_Click(object sender, EventArgs e)
        {
            // MakePayment();
            if (objMaster?.Current == null)
            {
                if (DialogResult.Yes == MessageBox.Show("Booking will save " + Environment.NewLine + "Do you want to Proceed?", "", MessageBoxButtons.YesNo))
                {
                    MakePayment();
                }
            }
            else if (objMaster?.Current != null)
            {
                long bookingId = objMaster.Current.Id;
                BookingBO bookingObj = new BookingBO();
                bookingObj.GetByPrimaryKey(bookingId);
                if (string.IsNullOrEmpty(bookingObj?.Current?.PaymentComments) || !bookingObj.Current.PaymentComments.Contains("pi_"))
                {
                    MakePayment();
                }
                else
                {
                    // MessageBox.Show("The payment for this booking has been successfully processed.Please close and open this booking again!");
                    // this.Close();
                    if (string.IsNullOrEmpty(objMaster?.Current.CustomerCreditCardDetails) && (!string.IsNullOrEmpty(bookingObj?.Current?.CustomerCreditCardDetails) && !bookingObj.Current.CustomerCreditCardDetails.Contains("pi_")))
                    {
                        MessageBox.Show("The payment for this booking is in-process.Please close and open this booking again!");

                    }
                    else if (objMaster?.Current?.BookingPayment == null && ((bookingObj?.Current?.BookingPayment != null && bookingObj?.Current?.BookingPayment?.AuthCode.ToStr().Length > 0)))
                    {
                        MessageBox.Show("The payment for this booking has been successfully processed.Please close and open this booking again!");

                    }

                }

            }
        }


        private void MakePayment()
        {
            try
            {
                List<Gen_SysPolicy_PaymentDetail> objMerchantInfo = General.GetQueryable<Gen_SysPolicy_PaymentDetail>(c => c.PaymentGatewayId != 9).ToList();
                if (objMerchantInfo.Count == 0)
                {

                    ENUtils.ShowMessage("Merchant Details is not defined in Settings.");
                    return;

                }

                if (objMaster.Current != null && objMaster.Current.BookingPayment != null)
                {
                    objBookingPayment = objMaster.Current.BookingPayment;
                }
                else
                {

                    objBookingPayment = new Booking_Payment();

                }



                if (btnPickFares.Enabled == false && ddlPaymentType.Enabled)
                {
                    //MessageBox.Show("Please wait while system is calculating fares...", "Wait");
                    CustomMsgBox.ShowAutoClosingMessageBox("Please wait while system is calculating fares...", "Wait", 5000);
                    return;
                }





                Thread.Sleep(1000);



                if (new TaxiDataContext().Gen_SysPolicy_PaymentDetails.Where(c => (c.PaymentGatewayId == Enums.PAYMENT_GATEWAY.STRIPE && c.ApiCertificate != null && (c.ApiCertificate == "1" || c.ApiCertificate == "2")) || (c.PaymentGatewayId == 15)).Count() > 0)
                {

                    if (txtCustomerMobileNo.Text.ToStr().Trim().Length == 0)
                    {
                        ENUtils.ShowMessage("Required : Mobile No");
                        return;
                    }
                    if (CheckDefaultValidation())
                    {
                        chkAutoDespatch.Checked = false;
                        chkBidding.Checked = false;


                    }
                    bool issave = this.Save();
                    if (issave == false)
                        return;

                }
                else
                {

                    if (CheckDefaultValidation() == false)
                        return;
                }

                if (objMaster.Current != null)
                {

                    string BookingNO = objMaster.Current.BookingNo.ToStr();
                    int? BookingId = objMaster.Current.Id.ToInt();

                    decimal returnFares = 0.00m;

                    if (objMaster.Current.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN)
                    {
                        if (numReturnFare != null)
                        {



                            if (ddlCompany.SelectedValue.ToInt() > 0)
                                returnFares = numReturnCompanyFares.Value + numParkingChrgs.Tag.ToDecimal() + numWaitingChrgs.Value + numExtraChrgs.Value + numReturnBookingFee.Value;
                            else
                                returnFares = numReturnFare.Value + numCongChrgs.Tag.ToDecimal() + numMeetCharges.Value + numExtraChrgs.Value + numReturnBookingFee.Value;
                        }

                    }

                    //if (IsSave == true)
                    //{
                    string token = string.Empty;

                    if (objMaster.Current.CustomerCreditCardDetails.ToStr().Trim().Length > 0)
                    {
                        token = objMaster.Current.CustomerCreditCardDetails.ToStr().Trim();

                    }


                    decimal otherCharges = 0.00m;



                    if (ddlCompany.SelectedValue.ToInt() > 0)
                        otherCharges = numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numExtraChrgs.Value + numBookingFee.Value;
                    else
                        otherCharges = numFareRate.Value + numCongChrgs.Value + numMeetCharges.Value + numExtraChrgs.Value + numBookingFee.Value;


                    // bool IsTransactionProcessed = false;
                    frmBookingPayment2 frm = new frmBookingPayment2(objBookingPayment, objMerchantInfo, otherCharges, returnFares, objMaster.Current.JourneyTypeId.ToInt(), BookingNO, BookingId, token, this);
                    frm.otherCharges = otherCharges;
                    frm.FormBorderStyle = FormBorderStyle.FixedSingle;

                    frm.StartPosition = FormStartPosition.CenterScreen;
                    frm.ShowDialog();


                    if (frm.TransactionID.ToStr().Trim().Length > 0)
                    {
                        //   AppVars.objPolicyConfiguration.AutoCalculateFares = false;
                        try
                        {


                            int compId = ddlCompany.SelectedValue.ToInt();

                            if (compId == 0)
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    compId = db.Gen_Companies.Where(c => c.CompanyName.ToLower() == "paid by card").Select(c => c.Id).FirstOrDefault();


                                }

                            }

                            if (compId > 0)
                            {
                                objMaster.Current.CompanyId = compId;
                                objMaster.Current.IsCompanyWise = true;

                                //if (frm.txtAmount.Enabled)
                                //{
                                //    if (frm.TotalAmount > 0)
                                //    {
                                //        objMaster.Current.CompanyPrice = frm.TotalAmount;
                                //        objMaster.Current.FareRate = frm.NetFares;
                                //        numFareRate.Value = objMaster.Current.FareRate.ToDecimal();
                                //    }
                                //    else
                                objMaster.Current.CompanyPrice = objMaster.Current.FareRate.ToDecimal();

                                //   }

                                chkIsCompanyRates.Checked = true;
                                ddlCompany.SelectedValue = compId;
                                chkIsCompanyRates.Enabled = false;
                                ddlCompany.Enabled = false;

                                //if (frm.txtAmount.Enabled)
                                //{
                                numCompanyFares.Value = objMaster.Current.CompanyPrice.ToDecimal();

                                //  }

                                chkIsCompanyRates.Enabled = false;
                                ddlCompany.Enabled = false;
                            }
                            else
                            {
                                if (frm.txtAmount.Enabled)
                                {
                                    if (frm.TotalAmount > 0)
                                    {

                                        objMaster.Current.FareRate = frm.NetFares;
                                        numFareRate.Value = objMaster.Current.FareRate.ToDecimal();
                                    }
                                }
                            }
                        }
                        catch
                        {
                        }





                        ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CREDIT_CARD_PAID;
                        ddlPaymentType.Enabled = false;
                        txtPaymentReference.Text = frm.paymentInstructions.ToStr();
                        txtPaymentReference.Enabled = false;

                        //if (objMaster.Current.CustomerCreditCardDetails.ToStr().Trim().Length == 0)
                        //{
                        chkQuotedPrice.Enabled = false;
                        chkQuotedPrice.Checked = true;
                        // }

                        numFareRate.Enabled = false;

                        if (numCompanyFares != null)
                            numCompanyFares.Enabled = false;

                        if (frm.chkIncludeReturnBooking.Checked)
                        {
                            ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CREDIT_CARD_PAID;

                        }
                        else
                        {
                            if (ddlCompany.SelectedValue != null)
                                ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.BANK_ACCOUNT;
                            else
                                ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CASH;

                        }
                        //   IsTransactionProcessed = true;
                        btnPayment.Tag = true;
                    }
                    else
                    {
                        //if (frm.chkIncludeReturnBooking.Checked)
                        //{
                        //    ReturnBookingPaymentTypeId = ddlPaymentType.SelectedValue.ToInt();
                        //}



                        if (frm.chkIncludeReturnBooking.Checked)
                        {
                            ReturnBookingPaymentTypeId = ddlPaymentType.SelectedValue.ToInt();

                        }
                        else
                        {

                            if (SaveFromPayment == false && frm.chkIncludeReturnBooking.Checked == false)
                            {
                                //if (ddlCompany.SelectedValue != null)
                                //    ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.BANK_ACCOUNT;
                                //else
                                ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CASH;


                            }
                        }


                    }

                    try
                    {
                        bool isemailSent = false;
                        // if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "MoUNtCaRsLTd")
                        //{
                        isemailSent = frm.isemailsent;


                        if (isemailSent)
                        {
                            chkAutoDespatch.Checked = false;
                            chkBidding.Checked = false;
                            txtPaymentReference.Text = "Pending Payment";
                            btnPayment.Tag = true;
                        }
                        //else
                        //{
                        //    if(frm.isstripepaid)
                        //    {
                        //        btnPayment.Tag = true;
                        //        txtPaymentReference.Text = "Pending Payment";
                        //    }

                        //}
                    }
                    catch
                    {

                    }
                    //    }



                    frm.Dispose();




                    GC.Collect();




                    if (btnPayment.Tag.ToBool() == true)
                    {
                        SaveAndClose();
                    }
                    //   }
                }
                else
                {

                    int journeyTypeId = Enums.JOURNEY_TYPES.ONEWAY;

                    if (opt_return.Checked)
                        journeyTypeId = 2;
                    else if (opt_waitreturn.Checked)
                        journeyTypeId = 3;

                    string Cardtoken = string.Empty;

                    if (ddlPaymentType.Tag != null)
                    {
                        objBookingPayment = (Booking_Payment)ddlPaymentType.Tag;
                        Cardtoken = objBookingPayment.OrderDescription.ToStr().Trim();

                    }

                    decimal charges = 0.00m;
                    decimal bookingFee = 0.00m;
                    if (numBookingFee != null && numBookingFee.Visible)
                    {
                        charges = numBookingFee.Value;
                        bookingFee = numBookingFee.Value;
                    }

                    if (ddlCompany.SelectedValue.ToInt() > 0)
                        charges += numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numExtraChrgs.Value;
                    else
                        charges += numFareRate.Value + numCongChrgs.Value + numMeetCharges.Value + numExtraChrgs.Value;




                    frmBookingPayment2 frm = new frmBookingPayment2(objBookingPayment, objMerchantInfo, charges, numReturnFare != null ? numReturnFare.Value : 0.00m, journeyTypeId, "", 0, Cardtoken, this);
                    frm.FormBorderStyle = FormBorderStyle.FixedSingle;

                    frm.otherCharges = charges;
                    frm.customerMobile = txtCustomerMobileNo.Text.Trim();
                    frm.customerTel = txtCustomerPhoneNo.Text.Trim();
                    frm.customerName = ddlCustomerName.Text.Trim();
                    frm.customerEmail = txtEmail.Text.Trim();
                    frm.StartPosition = FormStartPosition.CenterScreen;
                    frm.ShowDialog();


                    if (frm.TransactionID.ToStr().Trim().Length > 0)
                    {
                        //   AppVars.objPolicyConfiguration.AutoCalculateFares = false;
                        try
                        {


                            this.ControlBox = false;
                            btnExit.Enabled = false;
                            btnExitForm.Enabled = false;
                            int compId = ddlCompany.SelectedValue.ToInt();

                            if (compId == 0)
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    compId = db.Gen_Companies.Where(c => c.CompanyName.ToLower() == "paid by card").Select(c => c.Id).FirstOrDefault();


                                }

                            }

                            if (compId > 0)
                            {

                                if (objMaster != null && objMaster.Current != null)
                                {
                                    objMaster.Current.CompanyId = compId;
                                    objMaster.Current.IsCompanyWise = true;
                                }

                                //if (frm.txtAmount.Enabled)
                                //{

                                //    if (frm.TotalAmount > 0)
                                //    {
                                //        numCompanyFares.Value = frm.TotalAmount;
                                //        numFareRate.Value = frm.NetFares;

                                //    }
                                //    else
                                numCompanyFares.Value = numFareRate.Value;

                                //   }


                                chkIsCompanyRates.Checked = true;
                                ddlCompany.SelectedValue = compId;
                                chkIsCompanyRates.Enabled = false;
                                ddlCompany.Enabled = false;


                                // numCompanyFares.Value = objMaster.Current.CompanyPrice.ToDecimal();



                                chkIsCompanyRates.Enabled = false;
                                ddlCompany.Enabled = false;
                            }
                            else
                            {

                                if (frm.txtAmount.Enabled)
                                {
                                    if (frm.NetFares > 0)
                                    {


                                        numFareRate.Value = frm.NetFares;

                                    }
                                }
                            }
                        }
                        catch
                        {
                        }




                        ddlPaymentType.SelectedValueChanged -= ddlPaymentType_SelectedValueChanged;
                        ddlPaymentType.Enabled = false;
                        ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CREDIT_CARD_PAID;

                        txtPaymentReference.Text = frm.paymentInstructions.ToStr();
                        txtPaymentReference.Enabled = false;

                        //if (objMaster.Current.CustomerCreditCardDetails.ToStr().Trim().Length == 0)
                        //{
                        chkQuotedPrice.Enabled = false;
                        chkQuotedPrice.Checked = true;
                        // }

                        //numFareRate.Enabled = false;

                        //if (numCompanyFares != null)
                        //    numCompanyFares.Enabled = false;

                        //if (frm.chkIncludeReturnBooking.Checked)
                        //{
                        //    ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CREDIT_CARD_PAID;

                        //}
                        //else
                        //{
                        //    if (ddlCompany.SelectedValue != null)
                        //        ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.BANK_ACCOUNT;
                        //    else
                        //        ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CASH;

                        //}
                        numFareRate.Enabled = false;
                        numCongChrgs.Enabled = false;
                        numMeetCharges.Enabled = false;
                        numExtraChrgs.Enabled = false;
                        numDrvWaitingMins.Enabled = false;

                        if (numBookingFee != null)
                            numBookingFee.Enabled = false;

                        if (numCompanyFares != null)
                            numCompanyFares.Enabled = false;

                        if (frm.chkIncludeReturnBooking.Checked)
                        {
                            ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CREDIT_CARD_PAID;


                            if (opt_return.Checked)
                            {

                                if (numReturnBookingFee != null)
                                    numReturnBookingFee.Enabled = false;

                                if (numReturnFare != null)
                                    numReturnFare.Enabled = false;

                                if (numReturnCompanyFares != null && numReturnCompanyFares.Visible)
                                    numReturnCompanyFares.Enabled = false;


                            }
                        }
                        else
                        {
                            //if (ddlCompany.SelectedValue != null)
                            //    ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.BANK_ACCOUNT;
                            //else
                            ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CASH;

                        }




                    }
                    else
                    {



                        if (frm.chkIncludeReturnBooking.Checked)
                        {
                            ReturnBookingPaymentTypeId = ddlPaymentType.SelectedValue.ToInt();

                        }
                        else
                        {

                            if (SaveFromPayment == false && frm.chkIncludeReturnBooking.Checked == false)
                            {
                                //if (ddlCompany.SelectedValue != null)
                                //    ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.BANK_ACCOUNT;
                                //else
                                ReturnBookingPaymentTypeId = Enums.PAYMENT_TYPES.CASH;


                            }
                        }




                    }




                    //try
                    //{
                    //    bool isemailSent = false;
                    //    // if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "MoUNtCaRsLTd")
                    //    //{
                    //    isemailSent = frm.isemailsent;


                    //    if (frm.isemailsent && SaveFromPayment)
                    //    {
                    //        chkAutoDespatch.Checked = false;
                    //        chkBidding.Checked = false;
                    //        txtPaymentReference.Text = "Pending Payment";
                    //        btnPayment.Tag = true;
                    //    }

                    //}
                    //catch
                    //{

                    //}
                    ////    }



                    //frm.Dispose();
                    //GC.Collect();




                    //if (btnPayment.Tag.ToBool() == true)
                    //{
                    //    SaveAndClose();
                    //}


                    //if (btnPayment.Tag==null)
                    //{
                    //    if (frm.ObjPayment != null)
                    //    {
                    //        frm.ObjPayment.OrderDescription = frm.cardTokenDetails;


                    //        frm.ObjPayment.AuthCode = frm.TransactionID.ToStr().Trim();
                    //        if (ddlPaymentType.Tag == null)
                    //            ddlPaymentType.Tag = frm.ObjPayment;


                    //    }
                    //    else
                    //    {
                    //        if (ddlPaymentType.Tag == null)
                    //            ddlPaymentType.Tag = frm.cardTokenDetails;

                    //    }
                    //}



                    if (btnPayment.Tag == null)
                    {
                        if (frm.ObjPayment != null)
                        {
                            frm.ObjPayment.OrderDescription = frm.cardTokenDetails;


                            frm.ObjPayment.AuthCode = frm.TransactionID.ToStr().Trim();
                            if (ddlPaymentType.Tag == null)
                                ddlPaymentType.Tag = frm.ObjPayment;

                            //10bee
                            //10
                        }
                        else
                        {
                            if (ddlPaymentType.Tag == null)
                                ddlPaymentType.Tag = frm.cardTokenDetails;

                        }
                    }



                    bool isautoclose = false;
                    if (frm.isemailsent && SaveFromPayment)
                    {
                        chkAutoDespatch.Checked = false;
                        chkBidding.Checked = false;
                        txtPaymentReference.Text = "Pending Payment";
                        isautoclose = true;
                    }

                    frm.Dispose();
                    GC.Collect();

                    if (isautoclose)
                    {
                        SaveAndClose();
                    }


                }
                //   }

            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);

            }
        }

        private int? ReturnBookingPaymentTypeId;

        private void numFareRate_Validated(object sender, EventArgs e)
        {
            CalculateServiceCharges(null);
            CalculateTotalCharges();


        }

        private void CalculateTotalCharges(bool disableChangeAccFare = false)
        {
            try
            {
                if (ddlCompany.SelectedValue != null && numCompanyFares != null)
                {
                    if (numCompanyFares.Value == 0 || numFareRate.Tag.ToDecimal() != numFareRate.Value)
                    {

                        decimal fare = numFareRate.Value.ToDecimal();

                        if (companyPricePercentage != 0)
                        {

                            if (companyPriceAdditionType == true)
                            {
                                fare += (companyPricePercentage);

                            }
                            else
                            {

                                fare += (fare * companyPricePercentage) / 100;

                                if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                {

                                    fare = Math.Ceiling(fare);
                                }
                                else
                                {
                                    decimal roundUp2 = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                                    if (roundUp2 > 0)
                                    {
                                        fare = (decimal)Math.Ceiling(fare / roundUp2) * roundUp2;
                                    }
                                }
                            }
                        }

                        if (fare > 0 && disableChangeAccFare == false)
                        {
                            if (ENABLECMACBOOKINGCALCULATION == true)
                            {
                                if (objMaster.Current != null)
                                {
                                    numCompanyFares.Value = objMaster.Current.CompanyPrice.ToDecimal();
                                }
                                else
                                {

                                    numCompanyFares.Value = fare;
                                }
                            }
                            else
                            {
                                numCompanyFares.Value = fare;

                                if (companyPricePercentage > 0 && AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                {

                                    numCompanyFares.Value = Math.Ceiling(numCompanyFares.Value);

                                }
                            }
                        }
                    }

                    if (pnlBookingFees.Visible)
                    {
                        numTotalChrgs.Value = numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numBookingFee.Value + numExtraChrgs.Value;
                    }
                    else
                    {

                        numTotalChrgs.Value = numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numExtraChrgs.Value;
                    }
                }
                else
                {


                    numTotalChrgs.Value = numFareRate.Value + numExtraChrgs.Value + numCongChrgs.Value + numMeetCharges.Value;

                    if (pnlBookingFees.Visible)
                    {
                        numTotalChrgs.Value = numTotalChrgs.Value + numBookingFee.Value;
                    }

                }


                if (numAgentCommission != null && numAgentCommission.Visible)
                    numTotalChrgs.Value += numAgentCommission.Value;


                if (numAgentCharge != null && numAgentCharge.Visible)
                    numTotalChrgs.Value += numAgentCharge.Value;


                if (fareCalculateBy > 0 && lastCalculatedFares != numFareRate.Value)
                {
                    fareCalculateBy = 0;
                    if (lblMap.Text.Contains("PlotToPlot"))
                        lblMap.Text = lblMap.Text.Replace("PlotToPlot", "").Trim();
                    else if (lblMap.Text.Contains("Normal"))
                        lblMap.Text = lblMap.Text.Replace("Normal", "").Trim();
                    else if (lblMap.Text.Contains("RTF"))
                        lblMap.Text = lblMap.Text.Replace("RTF", "").Trim();

                }





            }
            catch (Exception ex)
            {


            }

        }






        private void btnPickCustomerAddress_Click(object sender, EventArgs e)
        {
            PickCustomerAddress(txtCustomerPhoneNo.Text.Trim(), txtCustomerMobileNo.Text.Trim());

        }


        private void PickCustomerAddress(string phoneNo, string MobNo)
        {
            try
            {

                if (string.IsNullOrEmpty(phoneNo) && string.IsNullOrEmpty(MobNo))
                    return;



                Customer cust = General.GetObject<Customer>(c => ((!string.IsNullOrEmpty(phoneNo) && c.TelephoneNo == phoneNo)
                                                              || (!string.IsNullOrEmpty(MobNo) && c.MobileNo == MobNo)));


                if (cust != null)
                {
                    ddlFromLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;

                    txtFromFlightDoorNo.Text = cust.DoorNo.ToStr();

                    txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtFromAddress.Text = cust.Address1.ToStr();
                    txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                }

            }
            catch (Exception ex)
            {


            }

        }






        int i = 0;
        private void dtpPickupTime_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {

                i++;

                //   RadMaskedEditBox
                RadTextBoxItem editItem = (RadTextBoxItem)sender;

                if (i == 2)
                {
                    SendKeys.Send("{right}");
                    i = 0;
                }


                if (editItem.SelectionStart > 2)
                {
                    i = 0;
                }

            }
            catch (Exception ex)
            {


            }
        }



        private void dtpPickupDate_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {

                if (e.KeyChar == '\r')
                {
                    pnlCustomer.Select();
                    FocusOnCustomer();

                }
            }
            catch (Exception ex)
            {


            }
        }





        private void btnJobRoutePath_Click(object sender, EventArgs e)
        {
            MapReport();
        }

        private void MapReport()
        {
            try
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {

                    if (objMaster.PrimaryKeyValue != null && db.Booking_RoutePaths.Count(c => c.BookingId == objMaster.Current.Id) > 0)
                    {



                        rptJobRouthPathGoogle rptRoute = new rptJobRouthPathGoogle(objMaster.Current, false);
                        rptRoute.StartPosition = FormStartPosition.CenterScreen;
                        rptRoute.ShowDialog();
                        //    rptRoute.Dispose();
                    }
                    else
                    {
                        ENUtils.ShowMessage("Map Route Details not found");

                    }
                }
            }
            catch (Exception ex)
            {

            }

        }

        private void btnLogDetail_Click(object sender, EventArgs e)
        {
            ShowAuditLogReport();
        }


        private void ShowAuditLogReport()
        {
            try
            {
                rptfrmJobLog jobLog = new rptfrmJobLog(txtBookingNo.Text);
                jobLog.FormBorderStyle = FormBorderStyle.FixedSingle;
                jobLog.StartPosition = FormStartPosition.CenterScreen;
                jobLog.ShowDialog();
                jobLog.Dispose();
            }
            catch (Exception ex)
            {


            }

        }

        private void btnSms_Click(object sender, EventArgs e)
        {
            try
            {
                frmSMSAll sms = new frmSMSAll(txtCustomerMobileNo.Text);
                sms.ShowDialog();
                sms.Dispose();

            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);
            }
        }

        private void btn_notes_Click(object sender, EventArgs e)
        {
            AddNotes();
        }

        private void AddNotes()
        {

            try
            {


                if (pnlAccpassword != null && pnlAccpassword.Visible == true)
                {
                    int? companyId = ddlCompany.SelectedValue.ToIntorNull();

                    Gen_Company obj = General.GetObject<Gen_Company>(c => c.Id == companyId);
                    string AccountPassword = obj.PasswordAccount.ToStr();

                    if (txtAccPassword.Text.ToStr().ToLower() == AccountPassword.ToStr().ToLower())
                    {
                        this.Save();
                        if (IsSave == true)
                        {

                            if (listofNotesCopied != null)
                                listofNotesCopied = null;

                            frmBookingNotes Note = new frmBookingNotes(objMaster.PrimaryKeyValue.ToInt());
                            Note.ShowDialog();
                            btn_notes.Text = "Notes(" + Note.notesCnt + ") [F5]";
                            Note.Dispose();
                        }
                    }
                    else
                    {
                        RadMessageBox.Show("Please Enter Correct Company Password!");
                    }
                }
                else
                {
                    this.Save();
                    if (IsSave == true)
                    {

                        if (listofNotesCopied != null)
                            listofNotesCopied = null;

                        frmBookingNotes Note = new frmBookingNotes(objMaster.PrimaryKeyValue.ToInt());
                        Note.ShowDialog();
                        btn_notes.Text = "Notes(" + Note.notesCnt + ") [F5]";
                        Note.Dispose();
                    }
                }
            }
            catch
            {

            }

        }

        private void FocusOnJourney()
        {

            opt_one.Focus();

        }





        private void ddlVehicleType_KeyDown(object sender, KeyEventArgs e)
        {




            if (e.KeyCode == Keys.Enter)
            {
                if (opt_return.Checked && ddlReturnVehicleType != null)
                {
                    ddlReturnVehicleType.Focus();
                }
                else
                {
                    if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") == 0)
                    {
                        FocusOnFare();

                    }
                    else
                    {
                        FocusOnDriver();

                    }

                }
            }
            else if (e.KeyCode == Keys.Insert)
            {
                txtEmail.Focus();
            }
            else if (e.KeyCode == Keys.Right)
            {
                FocusOnCustomer();
                // ddlCustomerName.Focus();
            }
            else if (e.KeyCode == Keys.Left)
            {

                if (ddlVehicleType.SelectionStart == 0)
                {
                    FocusOnFromAddress();
                }
            }


        }





        void child_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
            {
                numTotalLuggages.Focus();
            }
            //else if (e.KeyCode == Keys.Up || e.KeyCode == Keys.ShiftKey)
            //{
            //    ddlVehicleType.Focus();
            //}
            else if (e.KeyCode == Keys.Right)
            {
                //comment
                //if (num_TotalPassengers.SpinElement.TextBoxItem.SelectionStart == num_TotalPassengers.SpinElement.TextBoxItem.Text.Length)
                //{
                //    numTotalLuggages.Focus();
                //}            
            }
            else if (e.KeyCode == Keys.Down)
            {
                //comment
                //if (num_TotalPassengers.TextBoxItem.SelectionStart == num_TotalPassengers.SpinElement.TextBoxItem.Text.Length)
                //{
                txtSpecialRequirements.Focus();
                //}

            }

        }
        void totalLugg_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                txtSpecialRequirements.Focus();


            }


        }

        private void ddlCompany_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendKeys.Send("{Tab}");
            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnCustomer();
            }
            if (ddlDepartment != null)
                ddlDepartment.SendToBack();
        }

        private void ddlEscort_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendKeys.Send("{Tab}");
            }
        }

        private void ddlDepartment_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendKeys.Send("{Tab}");
            }
        }

        private void txtSpecialRequirements_KeyDown(object sender, KeyEventArgs e)
        {



            if (e.KeyCode == Keys.Enter)
            {


                FocusOnPaymentRef();
            }

            else if (e.KeyCode == Keys.Insert)
            {

                FocusOnFare();
            }
            else if (e.KeyCode == Keys.Left)
            {
                int position = txtSpecialRequirements.SelectionStart;
                if (position == 0)
                {
                    FocusOnCustomer();
                    // ddlCustomerName.Focus();
                }
            }
            else if (e.KeyCode == Keys.Up)
            {
                int position = txtSpecialRequirements.SelectionStart;
                if (position == 0)
                {
                    SendKeys.Send("{Enter}");
                    // ddlCustomerName.Focus();
                }
            }


        }

        private void FocusOnPaymentRef()
        {
            txtPaymentReference.Focus();
        }

        private void TxtPaymentReference_KeyDown(object sender, KeyEventArgs e)
        {

            if (e.KeyCode == Keys.Enter)
                FocusOnPickupTime();
            else if (e.KeyCode == Keys.Insert)
                FocusOnSpecialRequirement();

        }

        private void FocusOnReturnSpecial()
        {
            txtReturnSpecialReq.Focus();
        }


        private void txtFromAddress_KeyPress(object sender, KeyPressEventArgs e)
        {
            try
            {

                if (e.KeyChar == '1' || e.KeyChar == '2' || e.KeyChar == '3' || e.KeyChar == '4'
                    || e.KeyChar == '5' || e.KeyChar == '6' || e.KeyChar == '7'
                    || e.KeyChar == '8' || e.KeyChar == '9')
                {




                    UIX.AutoCompleteTextBox txtData = (UIX.AutoCompleteTextBox)sender;
                    if (txtData.Text.StartsWith("W1"))
                        return;



                    if (txtData.Text.Length > 4 && txtData.ListBoxElement.Visible == true && txtData.ListBoxElement.Items.Count < 10)
                    {



                        try
                        {
                            string idx = e.KeyChar.ToStr();


                            if (txtData.ListBoxElement.Items.Count >= idx.ToInt())
                            {

                                string item = txtData.ListBoxElement.Items[idx.ToInt() - 1].ToStr();

                                string doorNo = string.Empty;
                                for (int i = 0; i <= 2; i++)
                                {
                                    if (char.IsNumber(txtData.FormerValue[i]))
                                        doorNo += txtData.FormerValue[i];
                                    else
                                        break;

                                }

                                txtData.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

                                //if (AppVars.objPolicyConfiguration.StripDoorNoOnAddress.ToBool())
                                //{
                                txtData.Text = (item.Remove(0, item.IndexOf('.') + 1).Trim()).Trim();
                                //}
                                //else
                                //{

                                //    txtData.Text = (doorNo + " " + item.Remove(0, item.IndexOf('.') + 1).Trim()).Trim();
                                //}


                                if (txtData.Name == "txtFromAddress")
                                {
                                    SetPickupZone(txtData.Text);
                                    FocusOnFromDoor();
                                }
                                else if (txtData.Name == "txtToAddress")
                                {
                                    SetDropOffZone(txtData.Text);
                                    FocusOnToDoor();
                                }
                                else if (txtData.Name == "txtViaAddress")
                                {
                                    txtData.ResetListBox();
                                    AddViaPoint();

                                }

                                txtData.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                                e.Handled = true;

                                aTxt.ResetListBox();
                                aTxt.ListBoxElement.Items.Clear();


                                UpdateAutoCalculateFares();


                            }
                        }
                        catch
                        {


                        }
                        //   txtViaAddress.Focus();
                    }



                }
            }
            catch
            {


            }
        }

        private void label7_Click(object sender, EventArgs e)
        {
            try
            {
                //comment
                btnSelectVia.Tag = null;

                btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                pnlVia.Visible = false;


                ddlCustomerName.Select();
            }
            catch
            {

            }
        }

        private void txtViaAddress_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter && txtViaAddress.ListBoxElement.SelectedIndex == -1)
            {
                if (txtViaAddress.Text.Trim() == Environment.NewLine)
                    txtViaAddress.Text = string.Empty;

                e.SuppressKeyPress = true;
                if (txtViaAddress != null && txtViaAddress.Text.Trim().Length > 0)
                {



                    AddViaPoint();
                    FocusOnViAddress();
                }
            }
            else if (e.KeyCode == Keys.Insert)
            {
                FocusOnToAddress();


            }
            else if (e.KeyCode == Keys.Tab)
            {
                if (txtViaAddress.Text.Trim() == Environment.NewLine)
                    txtViaAddress.Text = string.Empty;


                if (txtViaAddress != null && txtViaAddress.Text.Trim().Length > 0 && txtViaAddress.ListBoxElement.Visible
                    && txtViaAddress.ListBoxElement.Items.Count > 0 && txtViaAddress.ListBoxElement.SelectedItem != null)
                {

                    txtViaAddress.OnSelectItem();

                    //AddViaPoint();
                    //FocusOnViAddress();
                }
                e.SuppressKeyPress = true;
            }
        }


        #region VIA POINT REVERSE
        private void AddReverceFromColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 70;

            col.Name = "ColRervP";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Reverse P";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

            grid.NewRowEnterKeyMode = RadGridViewNewRowEnterKeyMode.EnterMovesToNextRow;
        }
        private void AddReverceDestinationColumn(RadGridView grid)
        {
            GridViewCommandColumn col = new GridViewCommandColumn();
            col.Width = 70;

            col.Name = "ColRervD";
            col.UseDefaultText = true;
            col.ImageLayout = System.Windows.Forms.ImageLayout.Center;
            col.DefaultText = "Reverse D";
            col.TextAlignment = System.Drawing.ContentAlignment.MiddleCenter;

            grid.Columns.Add(col);

            grid.NewRowEnterKeyMode = RadGridViewNewRowEnterKeyMode.EnterMovesToNextRow;
        }



        void ReverceToPickUpPoint()
        {
            try
            {
                // for via variables
                string viapointText = grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value.ToString();
                int viaLocTypeId = grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value.ToInt();
                string viapointLabel = grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value.ToString();

                // for Top Variables

                string FromAddress = "";
                int FromLocationId = grdVia.CurrentRow.Cells["VIALOCATIONID"].Value.ToInt();
                //if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                //{
                FromAddress = txtFromAddress.Text.ToStr();
                // }
                //else
                //{
                //    FromAddress = ddlFromLocation.Text.ToStr();
                //    FromLocationId = ddlFromLocation.SelectedValue.ToInt();
                //}

                ReverseVia(viapointText, viaLocTypeId, viapointLabel, FromAddress, ddlFromLocType.Text.ToStr(), ddlFromLocType.SelectedValue.ToIntorNull(), true, FromLocationId);

            }
            catch (Exception ex)
            {
                ENUtils.ShowErrorMessage(ex.Message);
            }
        }
        void ReverceToDestination()
        {
            try
            {

                // for via variables
                string viapointText = grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value.ToString();
                int viaLocTypeId = grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value.ToInt();
                string viapointLabel = grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value.ToString();

                // for Top Variables

                string ToAddress = "";
                int ToLocationId = grdVia.CurrentRow.Cells["VIALOCATIONID"].Value.ToInt();
                //if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.ADDRESS || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.BASE)
                //{
                ToAddress = txtToAddress.Text.ToStr();
                //}
                //else
                //{
                //    ToAddress = ddlToLocation.Text.ToStr();
                //    ToLocationId = ddlToLocation.SelectedValue.ToInt();
                //}

                ReverseVia(viapointText, viaLocTypeId, viapointLabel, ToAddress, ddlToLocType.Text.ToStr(), ddlToLocType.SelectedValue.ToIntorNull(), false, ToLocationId);


            }
            catch (Exception ex)
            {
                ENUtils.ShowErrorMessage(ex.Message);
            }
        }
        void ReverseVia(string viaText, int viaLoctypeId, string viaLabel, string FromAddress, string fromLocType, int? fromlocTypeId, bool IsFrom, int locationId)
        {
            try
            {

                string ViaTextTemp = viaText;
                string FromAddressTemp = FromAddress;
                int? fromLocIdTemp = fromlocTypeId;
                int VialocIdTemp = viaLoctypeId;




                if (IsFrom == true)
                {
                    this.txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);


                    //if (VialocIdTemp == Enums.LOCATION_TYPES.ADDRESS || VialocIdTemp == Enums.LOCATION_TYPES.BASE)
                    //{
                    txtFromAddress.Text = ViaTextTemp;
                    ddlFromLocType.SelectedValue = VialocIdTemp;

                    SetPickupZone(txtFromAddress.Text);
                    //   }
                    //else
                    //{
                    //    ddlFromLocType.SelectedValue = VialocIdTemp;
                    //    ddlFromLocation.SelectedValue = locationId;
                    //}

                    GridViewRowInfo row;

                    if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewNewRowInfo)
                        grdVia.CurrentRow = null;


                    if (grdVia.CurrentRow != null)
                    {

                        row = grdVia.CurrentRow;
                    }

                    grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value = FromAddressTemp;
                    grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value = fromLocIdTemp;

                    grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value = fromLocType;


                    if (locationId != 0)
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = locationId;
                    else
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = null;



                    this.txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);
                }
                else
                {
                    this.txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);

                    //if (VialocIdTemp == Enums.LOCATION_TYPES.ADDRESS || VialocIdTemp == Enums.LOCATION_TYPES.BASE)
                    //{
                    txtToAddress.Text = ViaTextTemp;
                    ddlToLocType.SelectedValue = VialocIdTemp;
                    SetDropOffZone(txtToAddress.Text);
                    //}
                    //else
                    //{
                    //    ddlToLocType.SelectedValue = VialocIdTemp;
                    //    ddlToLocation.SelectedValue = locationId;
                    //}

                    GridViewRowInfo row;

                    if (grdVia.CurrentRow != null && grdVia.CurrentRow is GridViewNewRowInfo)
                        grdVia.CurrentRow = null;


                    if (grdVia.CurrentRow != null)
                    {
                        row = grdVia.CurrentRow;
                    }
                    else
                    {

                    }

                    grdVia.CurrentRow.Cells["VIALOCATIONVALUE"].Value = FromAddressTemp;
                    grdVia.CurrentRow.Cells["FROMVIALOCTYPEID"].Value = fromLocIdTemp;

                    grdVia.CurrentRow.Cells["FROMTYPEVALUE"].Value = fromLocType;


                    if (locationId != 0)
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = locationId;
                    else
                        grdVia.CurrentRow.Cells["VIALOCATIONID"].Value = null;




                    this.txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                }

            }
            catch (Exception ex)
            {
                ENUtils.ShowErrorMessage(ex.Message);
            }
        }


        #endregion






        #region



        private void ddlMilesDrvs2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (this.IsHandleCreated == false)
                return;

            ShowMapAndNearestDrivers();
        }



        private void ShowMapAndNearestDrivers()
        {

            if (btnExit.Focused)
                return;

            //object o = "LoadNearestMap";
            //SendAsyncRequest(o);

            LoadNearestMap();

        }

        public void LoadNearestMap()
        {
            new Thread(new ThreadStart(LoadNearestJobDrivers)).Start();

        }


        delegate void UIDelegate();
        private void LoadNearestJobDrivers()
        {

            try
            {

                if (this.InvokeRequired)
                {

                    UIDelegate d = new UIDelegate(LoadNearest);
                    this.BeginInvoke(d);
                }
                else
                {
                    LoadNearest();

                }




            }
            catch (Exception ex)
            {


            }

        }





        #endregion



        private void btnNearestDrv_Click(object sender, EventArgs e)
        {
            //object o = "LoadNearestMap";
            //SendAsyncRequest(o);
            LoadNearestMap();
        }


        private bool is_in_circle(double circle_x, double circle_y, double r, double x, double y)
        {

            double d = new DotNetCoords.LatLng(Convert.ToDouble(circle_x), Convert.ToDouble(circle_y)).DistanceMiles(new DotNetCoords.LatLng(Convert.ToDouble(x), Convert.ToDouble(y)));

            //double d = Math.Sqrt(((circle_x - x) * (circle_x - x)) + ((circle_y - y) * (circle_y - y)));
            return d <= r;
        }



        private bool FindPoint(double pointLat, double pointLng, List<Gen_Zone_PolyVertice> PontosPolig)
        {//                             X               y               
            int sides = PontosPolig.Count();
            int j = sides - 1;
            bool pointStatus = false;


            if (sides == 1)
            {

                double radius = Convert.ToDouble(PontosPolig[0].Diameter) / 2;
                double lat = Convert.ToDouble(PontosPolig[0].Latitude);
                double lng = Convert.ToDouble(PontosPolig[0].Longitude);


                //double temp = ((lat - pointLat) * (lat - pointLat)) + ((lng - pointLng) * (lng - pointLng));

                //double dist = SqrRoot(temp);

                pointStatus = is_in_circle(pointLat, pointLng, radius, lat, lng);
                //  pointStatus = is_in_circle(lat, lng, radius, pointLat, pointLng);

                //if (dist <= radius)
                //    pointStatus = true;
            }
            else
            {

                for (int i = 0; i < sides; i++)
                {
                    if (PontosPolig[i].Longitude < pointLng && PontosPolig[j].Longitude >= pointLng ||
                        PontosPolig[j].Longitude < pointLng && PontosPolig[i].Longitude >= pointLng)
                    {
                        if (PontosPolig[i].Latitude + (pointLng - PontosPolig[i].Longitude) /
                            (PontosPolig[j].Longitude - PontosPolig[i].Longitude) * (PontosPolig[j].Latitude - PontosPolig[i].Latitude) < pointLat)
                        {
                            pointStatus = !pointStatus;
                        }
                    }
                    j = i;
                }
            }
            return pointStatus;
        }

        public static double SqrRoot(double t)
        {

            double lb = 0, ub = t, temp = 0;
            int count = 50;

            while (count != 0)
            {
                temp = (lb + ub) / 2;

                if (temp * temp == t)
                {

                    return temp;
                }
                else if (temp * temp > t)
                {
                    ub = temp;
                }
                else
                {

                    lb = temp;

                }



                count--;
            }

            return temp;


        }





        private void btnConfirmationSMS_Click(object sender, EventArgs e)
        {
            SendConfirmationSMS();
        }


        private void SendConfirmationSMS()
        {
            try
            {
                if (objMaster.PrimaryKeyValue != null)
                {

                    if (CheckDefaultValidation())
                    {



                        if (Save())
                        {


                            string custNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();

                            if (!string.IsNullOrEmpty(custNo))
                            {

                                // Send To Driver

                                EuroSMS objSMS = new EuroSMS();

                                string smsError2 = "";
                                string msg = string.Empty;

                                int idx = -1;
                                if (custNo.StartsWith("044") == true)
                                {
                                    idx = custNo.IndexOf("044");
                                    custNo = custNo.Substring(idx + 3);
                                    custNo = custNo.Insert(0, "+44");
                                }

                                if (custNo.StartsWith("07"))
                                {
                                    custNo = custNo.Substring(1);
                                }

                                if (custNo.StartsWith("044") == false || custNo.StartsWith("+44") == false)
                                    custNo = custNo.Insert(0, "+44");


                                string confirmationSMS = string.Empty;

                                confirmationSMS = AppVars.objPolicyConfiguration.ConfirmationSMSText.ToStr().Trim();


                                msg += GetMessage(confirmationSMS);

                                objSMS.ToNumber = custNo;
                                objSMS.Message = msg;

                                new Thread(delegate ()
                                {
                                    try
                                    {
                                        objSMS.Send(ref smsError2);


                                        if (objMaster.Current.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN && objMaster.Current.BookingReturns.Count > 0)
                                        {
                                            msg = GetMessage(confirmationSMS, objMaster.Current.BookingReturns[0]);

                                            objSMS.ToNumber = custNo;
                                            objSMS.Message = msg;
                                            objSMS.Send(ref smsError2);
                                        }
                                    }
                                    catch
                                    {

                                    }
                                }).Start();

                                // General.SaveSentSMS("Confirmation Text : " + msg, custNo);


                                Thread.Sleep(1000);




                                RadDesktopAlert alert = new RadDesktopAlert();
                                alert.AutoCloseDelay = 5;
                                alert.FadeAnimationType = FadeAnimationType.None;
                                alert.FixedSize = new Size(320, 130);
                                alert.CaptionText = "Confirmation SMS has been sent Successfully";
                                alert.ContentText = msg;
                                alert.Show();
                                // }

                            }

                        }


                    }


                }

            }
            catch (Exception ex)
            {


            }
        }


        private string GetMessage(string message, Booking objBook = null)
        {
            try
            {



                if (AppVars.listofSMSTags == null || AppVars.listofSMSTags.Count == 0)
                {
                    AppVars.listofSMSTags = General.GetQueryable<SMSTag>(c => c.Id != 0).ToList();

                }

                string msg = message;


                if (objBook == null)
                    objBook = objMaster.Current;

                object propertyValue = string.Empty;
                foreach (var tag in AppVars.listofSMSTags.Where(c => msg.Contains(c.TagMemberValue)))
                {


                    switch (tag.TagObjectName)
                    {
                        case "booking":

                            if (tag.TagPropertyValue.Contains('.'))
                            {

                                string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                object parentObj = objBook.GetType().GetProperty(val[0]).GetValue(objBook, null);

                                if (parentObj != null)
                                {
                                    propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                }
                                else
                                    propertyValue = string.Empty;


                                break;
                            }
                            else
                            {
                                if (!string.IsNullOrEmpty(tag.ConditionNotNull) && objBook.GetType().GetProperty(tag.ConditionNotNull) != null)
                                {

                                    propertyValue = tag.ConditionNotNullReplacedValue.ToStr();
                                }
                                else
                                {

                                    propertyValue = objBook.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBook, null);
                                }
                            }


                            if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                            {
                                propertyValue = objBook.GetType().GetProperty(tag.TagPropertyValue2).GetValue(objBook, null);
                            }
                            break;

                        case "Booking_ViaLocations":
                            if (tag.TagPropertyValue == "ViaLocValue")
                            {


                                string[] VilLocs = null;
                                int cnt = 1;
                                VilLocs = objBook.Booking_ViaLocations.Select(c => cnt++.ToStr() + ". " + c.ViaLocValue).ToArray();
                                if (VilLocs.Count() > 0)
                                {

                                    string Locations = "VIA POINT(s) : \n" + string.Join("\n", VilLocs);
                                    propertyValue = Locations;
                                }
                                else
                                    propertyValue = string.Empty;

                            }
                            break;


                        case "driver":

                            if (objBook.DriverId != null)
                            {
                                var ObjDriver = objBook.Fleet_Driver.DefaultIfEmpty();

                                if (tag.TagPropertyValue.Contains('.'))
                                {

                                    string[] val = tag.TagPropertyValue.Split(new char[] { '.' });

                                    object parentObj = ObjDriver.GetType().GetProperty(val[0]).GetValue(ObjDriver, null);

                                    if (parentObj != null)
                                    {
                                        propertyValue = parentObj.GetType().GetProperty(val[1]).GetValue(parentObj, null);
                                    }
                                    else
                                        propertyValue = string.Empty;


                                    break;
                                }

                                else
                                {
                                    propertyValue = ObjDriver.GetType().GetProperty(tag.TagPropertyValue).GetValue(ObjDriver, null);
                                }

                                if (string.IsNullOrEmpty(propertyValue.ToStr()) && !string.IsNullOrEmpty(tag.TagPropertyValue2))
                                {
                                    propertyValue = ObjDriver.GetType().GetProperty(tag.TagPropertyValue2).GetValue(ObjDriver, null);
                                }
                            }
                            else
                            {

                                propertyValue = " - ";

                            }
                            break;



                        default:
                            if (objBook.SubcompanyId == null)
                                propertyValue = AppVars.objSubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(AppVars.objSubCompany, null);
                            else
                                propertyValue = objBook.Gen_SubCompany.GetType().GetProperty(tag.TagPropertyValue).GetValue(objBook.Gen_SubCompany, null);
                            break;

                    }




                    msg = msg.Replace(tag.TagMemberValue,
                        tag.TagPropertyValuePrefix.ToStr() + string.Format(tag.TagDataFormat, propertyValue) + tag.TagPropertyValueSuffix.ToStr());

                }


                return msg.Replace("\n\n", "\n");
            }
            catch (Exception ex)
            {
                // ENUtils.ShowMessage(ex.Message);
                return "";
            }
        }






        private void LockUnLockShuttleGroupDetails(bool locked)
        {
            ddlBookingType.Enabled = !locked;
            ddlToLocType.Enabled = !locked;
            chkReverse.Enabled = !locked;
            // ddlToLocation.Enabled = !locked;
            ddlVehicleType.Enabled = !locked;
            num_TotalPassengers.Enabled = !locked;

        }



        private void btnSendInvoice_Click(object sender, EventArgs e)
        {
            SendInvoice();



        }

        private void SendInvoice()
        {

            if (objMaster.Current == null)
                return;

            try
            {






                if (objMaster.Current.CompanyId != null && objMaster.Current.Gen_Company.PreferredEmails.ToBool() == false)
                {
                    SendCompanyInvoice();
                }
                else
                {

                    SendCustomerInvoice();
                }





            }
            catch (Exception ex)
            {

                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void SendCustomerInvoice()
        {

            long jobId = objMaster.Current.Id;

            var obj = General.GetObject<Invoice_Charge>(c => c.BookingId == jobId);

            if (obj != null)
            {

                if (General.GetQueryable<Invoice_Charge>(c => c.InvoiceId == obj.InvoiceId).Count() <= 2)
                {
                    SendCustomerEmail(obj.InvoiceId.ToLong(), obj.Invoice.DefaultIfEmpty().InvoiceNo.ToStr().Trim());
                }

            }
            else
            {

                int? customerId = objMaster.Current.CustomerId;
                if (customerId == null)
                {
                    string customerName = ddlCustomerName.Text.ToStr().Trim();
                    string mobNo = txtCustomerMobileNo.Text.ToStr().Trim();
                    string telNo = txtCustomerPhoneNo.Text.ToStr().Trim();


                    if (string.IsNullOrEmpty(mobNo) && string.IsNullOrEmpty(telNo))
                    {
                        ENUtils.ShowMessage("Please enter Telephone or Mobile No");
                        return;
                    }


                    var objCust = General.GetObject<Customer>(c => c.Name.ToUpper() == customerName &&
                      ((c.MobileNo == mobNo || mobNo == string.Empty) || (c.TelephoneNo == telNo)));

                    if (objCust != null)
                    {

                        customerId = objCust.Id;
                    }
                    else
                    {
                        CustomerBO objCustBO = new CustomerBO();
                        objCustBO.New();
                        objCustBO.Current.Name = customerName;
                        objCustBO.Current.Email = txtEmail.Text.Trim();
                        objCustBO.Current.Address1 = txtFromAddress.Text.Trim();

                        if (string.IsNullOrEmpty(objCustBO.Current.Email.ToStr()))
                            objCustBO.Current.Email = "abc@xyz.com";

                        objCustBO.Save();


                        customerId = objCustBO.Current.Id;

                    }
                }

                InvoiceBO invBO = new InvoiceBO();
                try
                {


                    invBO.New();

                    invBO.Current.InvoiceDate = DateTime.Now.ToDate();
                    invBO.Current.CustomerId = customerId;
                    invBO.Current.InvoiceTypeId = Enums.INVOICE_TYPE.CUSTOMER;

                    decimal invoiceTotal = objMaster.Current.FareRate.ToDecimal();


                    invoiceTotal += objMaster.Current.CongtionCharges.ToDecimal() + objMaster.Current.MeetAndGreetCharges.ToDecimal() + objMaster.Current.ExtraDropCharges.ToDecimal();

                    invBO.Current.InvoiceTotal = invoiceTotal;

                    invBO.Current.Invoice_Charges.Add(new Invoice_Charge
                    {
                        BookingId = jobId


                    });


                    invBO.Save();


                    SendCustomerEmail(invBO.Current.Id, invBO.Current.InvoiceNo.ToStr());
                }
                catch (Exception ex)
                {
                    if (invBO.Errors.Count > 0)
                    {
                        ENUtils.ShowMessage(invBO.ShowErrors());

                    }
                    else
                    {

                        ENUtils.ShowMessage(ex.Message);
                    }


                }

            }

        }

        private void SendCompanyInvoice()
        {
            long jobId = objMaster.Current.Id;

            var obj = General.GetObject<Invoice_Charge>(c => c.BookingId == jobId);

            if (obj != null)
            {

                if (General.GetQueryable<Invoice_Charge>(c => c.InvoiceId == obj.InvoiceId).Count() <= 2)
                {
                    SendCompanyEmail(obj.InvoiceId.ToLong(), obj.Invoice.DefaultIfEmpty().InvoiceNo.ToStr().Trim());
                }

            }
            else
            {

                int? companyId = objMaster.Current.CompanyId;


                InvoiceBO invBO = new InvoiceBO();
                try
                {


                    invBO.New();

                    invBO.Current.InvoiceDate = DateTime.Now.ToDate();
                    invBO.Current.CompanyId = companyId;
                    invBO.Current.InvoiceTypeId = Enums.INVOICE_TYPE.ACCOUNT;

                    decimal invoiceTotal = objMaster.Current.CompanyPrice.ToDecimal();

                    if (numBookingFee != null && numBookingFee.Visible)
                    {
                        invoiceTotal += objMaster.Current.ParkingCharges.ToDecimal() + objMaster.Current.WaitingCharges.ToDecimal() + objMaster.Current.ExtraDropCharges.ToDecimal() + objMaster.Current.ServiceCharges.ToDecimal();

                    }
                    else
                        invoiceTotal += objMaster.Current.ParkingCharges.ToDecimal() + objMaster.Current.WaitingCharges.ToDecimal() + objMaster.Current.ExtraDropCharges.ToDecimal();

                    invBO.Current.InvoiceTotal = invoiceTotal;

                    invBO.Current.Invoice_Charges.Add(new Invoice_Charge
                    {
                        BookingId = jobId


                    });


                    invBO.Save();


                    SendCompanyEmail(invBO.Current.Id, invBO.Current.InvoiceNo.ToStr());
                    //  SendCustomerEmail(invBO.Current.Id, invBO.Current.InvoiceNo.ToStr());
                }
                catch (Exception ex)
                {
                    if (invBO.Errors.Count > 0)
                    {
                        ENUtils.ShowMessage(invBO.ShowErrors());

                    }
                    else
                    {

                        ENUtils.ShowMessage(ex.Message);
                    }


                }

            }

        }

        private void SendCompanyEmail(long invoiceId, string invoiceNo)
        {
            try
            {


                if (invoiceId == 0)
                    return;

                frmInvoiceReport frm = new frmInvoiceReport();
                var list = General.GetQueryable<vu_Invoice>(a => a.Id == invoiceId).ToList();
                int count = list.Count;
                frm.DataSource = list;
                frm.reportViewer1.Tag = "invoice";
                frm.ObjInvoice = General.GetObject<Invoice>(c => c.Id == invoiceId);
                frm.GenerateReport();
                frm.SendEmail(invoiceNo, objMaster.Current.Gen_Company.DefaultIfEmpty().Email.ToStr().Trim());


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }


        private void SendCustomerEmail(long invoiceId, string invoiceNo)
        {
            try
            {


                if (invoiceId == 0)
                    return;
                //CC 22/07/19
                rptfrmCustomerInvoice frm = new rptfrmCustomerInvoice(invoiceId);
                var list = General.GetQueryable<vu_Invoice>(a => a.Id == invoiceId).ToList();
                int count = list.Count;
                frm.DataSource = list;
                frm.reportViewer1.Tag = "invoice";
                frm.GenerateReport();
                frm.SendEmail(invoiceNo, txtEmail.Text.Trim(), objMaster.Current.Gen_SubCompany);


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);

            }

        }

        private void btnPickAccountBooking_Click(object sender, EventArgs e)
        {
            SearchAccountBooking();
        }

        private void SearchAccountBooking()
        {
            try
            {
                int companyId = ddlCompany.SelectedValue.ToInt();

                if (companyId != 0)
                {

                    frmSearchBooking frm = new frmSearchBooking(companyId);
                    frm.ShowDialog();



                    if (frm.IsSelected)
                    {

                        txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);
                        txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);

                        PickBookingComplete(frm.CustomerName, frm.phoneNo, frm.mobileNo, frm.fromLocTypeId, frm.toLocTypeId, frm.fromLocId, frm.toLocId, frm.from, frm.to, frm.fare, false, frm.bookingTypeId, frm.CustEmail);

                        txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                        txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);


                        if (AppVars.listUserRights.Count(c => c.functionId == "PICK BOOKING FEE ON SEARCH BOOKING") > 0)
                        {
                            numBookingFee.Value = frm.Fees.ToDecimal();
                        }
                        else
                            numBookingFee.Value = 0.00m;



                        if (numCompanyFares != null)
                            numCompanyFares.Value = frm.companyFare;

                        //
                        if (frm.viaString.ToStr().Trim().Length > 0)
                        {

                            if (grdVia == null)
                            {
                                CreateViaPanel();

                            }

                            string[] viaArr = frm.viaString.ToStr().Trim().Split(new char[] { ',' });

                            grdVia.Rows.Clear();

                            GridViewRowInfo row = null;
                            for (int i = 0; i < viaArr.Count(); i++)
                            {


                                row = grdVia.Rows.AddNew();
                                row.Cells["FROMVIALOCTYPEID"].Value = Enums.LOCATION_TYPES.ADDRESS;
                                row.Cells["FROMTYPELABEL"].Value = "";

                                row.Cells["FROMTYPEVALUE"].Value = "";

                                row.Cells["VIALOCATIONID"].Value = null;
                                row.Cells["VIALOCATIONLABEL"].Value = "Address";
                                row.Cells["VIALOCATIONVALUE"].Value = viaArr[i];
                            }

                            btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                            btnSelectVia.BackColor = Color.DarkOrange;
                            //    btnSelectVia.NumberOfColors = 1;
                        }

                    }


                    frm.Dispose();
                }

            }
            catch (Exception ex)
            {

            }

        }

        private void btnTrackDriver_Click(object sender, EventArgs e)
        {
            TrackDriver();
        }


        private void TrackDriver()
        {

            try
            {
                if (objMaster.PrimaryKeyValue != null && objMaster.Current != null)
                {


                    rptJobRouthPathGoogle rpt = new rptJobRouthPathGoogle(General.GetObject<Booking>(c => c.Id == objMaster.Current.Id), true);
                    rpt.ShowDialog();

                    rpt.Dispose();


                }
            }
            catch (Exception ex)
            {


            }
        }









        private void btnPasteBooking_Click(object sender, EventArgs e)
        {



            if (AppVars.objCopyBooking != null)
            {

                try
                {


                    txtVehicleNo.Text = AppVars.objCopyBooking.Fleet_Master.DefaultIfEmpty().Plateno.ToStr();

                    ddlSubCompany.SelectedValue = AppVars.objCopyBooking.SubcompanyId.ToInt();

                    //  ddlBookingType.SelectedValue = AppVars.objCopyBooking.BookingTypeId;


                    chkQuotation.Checked = AppVars.objCopyBooking.IsQuotation.ToBool();
                    WasQuotiation = chkQuotation.Checked;





                    ddlFromLocType.SelectedValue = AppVars.objCopyBooking.FromLocTypeId;
                    ddlToLocType.SelectedValue = AppVars.objCopyBooking.ToLocTypeId;



                    ddlVehicleType.SelectedValue = AppVars.objCopyBooking.VehicleTypeId;


                    ddlCustomerName.Text = AppVars.objCopyBooking.CustomerName;

                    txtCustomerMobileNo.TextChanged -= new EventHandler(txtCustomerMobileNo_TextChanged);
                    txtCustomerPhoneNo.TextChanged -= new EventHandler(txtCustomerPhoneNo_TextChanged);




                    txtCustomerMobileNo.Text = AppVars.objCopyBooking.CustomerMobileNo;
                    txtCustomerPhoneNo.Text = AppVars.objCopyBooking.CustomerPhoneNo;
                    txtEmail.Text = AppVars.objCopyBooking.CustomerEmail.ToStr().Trim();
                    //  numBookingFee.Value = AppVars.objCopyBooking.CustomerPrice.ToDecimal();

                    txtCustomerMobileNo.TextChanged += new EventHandler(txtCustomerMobileNo_TextChanged);
                    txtCustomerPhoneNo.TextChanged += new EventHandler(txtCustomerPhoneNo_TextChanged);



                    txtSpecialRequirements.Text = AppVars.objCopyBooking.SpecialRequirements;


                    int journeyTypeId = AppVars.objCopyBooking.JourneyTypeId.ToInt();

                    opt_one.CheckedChanged -= opt_one_CheckedChanged;
                    // opt_JOneWay.ToggleStateChanging -= opt_JOneWay_ToggleStateChanging;


                    if (journeyTypeId == Enums.JOURNEY_TYPES.ONEWAY)
                        opt_one.Checked = true;
                    // opt_JOneWay.ToggleState = Telerik.WinControls.Enumerations.ToggleState.On;
                    else if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                    {
                        opt_return.Checked = true;
                        // opt_JReturnWay.ToggleState = Telerik.WinControls.Enumerations.ToggleState.On;


                    }
                    else if (journeyTypeId == Enums.JOURNEY_TYPES.WAITANDRETURN)
                    {
                        opt_waitreturn.Checked = true;
                        //   opt_WaitandReturn.ToggleState = ToggleState.On;
                    }

                    if (ddlReturnFromAirport != null)
                        ddlReturnFromAirport.SelectedValue = AppVars.objCopyBooking.ReturnFromLocId;



                    opt_one.CheckedChanged += new EventHandler(opt_one_CheckedChanged);
                    // opt_JOneWay.ToggleStateChanging += new StateChangingEventHandler(opt_JOneWay_ToggleStateChanging);



                    chkIsCompanyRates.Checked = AppVars.objCopyBooking.IsCompanyWise.ToBool();




                    if (AppVars.objCopyBooking.CompanyId != null && AppVars.objCopyBooking.Gen_Company.IsClosed.ToBool())
                    {

                        ddlCompany.SelectedValueChanged -= new EventHandler(ddlCompany_SelectedValueChanged);
                        ComboFunctions.FillCompanyComboX(ddlCompany, AppVars.objCopyBooking.CompanyId.ToInt());
                        ddlCompany.SelectedIndex = -1;
                        ddlCompany.SelectedValueChanged += new EventHandler(ddlCompany_SelectedValueChanged);
                    }


                    ddlCompany.SelectedValue = AppVars.objCopyBooking.CompanyId;


                    if (AppVars.objCopyBooking.PaymentTypeId.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD_PAID)
                        ddlPaymentType.SelectedValue = Enums.PAYMENT_TYPES.CREDIT_CARD;
                    else
                        ddlPaymentType.SelectedValue = AppVars.objCopyBooking.PaymentTypeId;



                    if (pnlOrderNo != null)
                    {

                        txtOrderNo.Text = AppVars.objCopyBooking.OrderNo.ToStr();
                        txtPupilNo.Text = AppVars.objCopyBooking.PupilNo.ToStr();

                    }

                    if (txtAccountBookedBy != null)
                    {
                        txtAccountBookedBy.Text = AppVars.objCopyBooking.BookedBy.ToStr().Trim();
                    }


                    if (chkTakenByAgent != null)
                    {

                        chkTakenByAgent.Checked = AppVars.objCopyBooking.JobTakenByCompany.ToBool();
                        //    numAgentCommissionPercent.Value = AppVars.objCopyBooking.AgentCommissionPercent.ToInt();
                        //    ddlAgentCommissionType.SelectedIndex = AppVars.objCopyBooking.FromFlightNo.ToStr().Trim() == "Percent" ? 0 : 1;
                        numAgentCommission.Value = AppVars.objCopyBooking.AgentCommission.ToDecimal();
                    }

                    if (ddlDepartment != null && AppVars.objCopyBooking.DepartmentId != null)
                        ddlDepartment.SelectedValue = AppVars.objCopyBooking.DepartmentId;



                    dtpPickupDate.Value = AppVars.objCopyBooking.PickupDateTime.ToDate();
                    dtpPickupTime.Value = AppVars.objCopyBooking.PickupDateTime;
                    SetPickupTimeHourAndMin(dtpPickupTime.Value.ToDateTime());

                    if (dtpReturnPickupDate != null)
                    {
                        dtpReturnPickupDate.Value = AppVars.objCopyBooking.ReturnPickupDateTime.ToDateorNull();
                        dtpReturnPickupTime.Value = AppVars.objCopyBooking.ReturnPickupDateTime.ToDateTimeorNull();

                    }

                    if (txtReturnSpecialReq != null)
                    {
                        if (AppVars.objCopyBooking.BookingReturns.Count > 0)
                        {
                            txtReturnSpecialReq.Text = AppVars.objCopyBooking.BookingReturns[0].DefaultIfEmpty().SpecialRequirements.ToStr();

                            if (ddlReturnVehicleType != null)
                                ddlReturnVehicleType.SelectedValue = AppVars.objCopyBooking.BookingReturns[0].DefaultIfEmpty().VehicleTypeId;
                        }
                    }





                    num_TotalPassengers.Value = AppVars.objCopyBooking.NoofPassengers.ToDecimal();
                    numTotalLuggages.Value = AppVars.objCopyBooking.NoofLuggages.ToDecimal();

                    numFareRate.Value = AppVars.objCopyBooking.FareRate.ToDecimal();

                    if (numReturnFare != null)
                        numReturnFare.Value = AppVars.objCopyBooking.ReturnFareRate.ToDecimal();

                    if (numCompanyFares != null)
                    {
                        numCompanyFares.Value = AppVars.objCopyBooking.CompanyPrice.ToDecimal();

                        if (journeyTypeId == Enums.JOURNEY_TYPES.RETURN)
                        {
                            numReturnCompanyFares.Value = AppVars.objCopyBooking.WaitingMins.ToDecimal();

                        }


                    }

                    numParkingChrgs.Value = AppVars.objCopyBooking.ParkingCharges.ToDecimal();
                    numWaitingChrgs.Value = AppVars.objCopyBooking.WaitingCharges.ToDecimal();
                    numExtraChrgs.Value = AppVars.objCopyBooking.ExtraDropCharges.ToDecimal();
                    numMeetCharges.Value = AppVars.objCopyBooking.MeetAndGreetCharges.ToDecimal();
                    numCongChrgs.Value = AppVars.objCopyBooking.CongtionCharges.ToDecimal();

                    numTotalChrgs.Value = AppVars.objCopyBooking.TotalCharges.ToDecimal();




                    txtFromAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtFromAddress.Text = AppVars.objCopyBooking.FromAddress.ToStr();
                    txtFromAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);

                    txtFromFlightDoorNo.Text = AppVars.objCopyBooking.FromDoorNo.ToStr();
                    txtFromStreetComing.Text = AppVars.objCopyBooking.FromStreet.ToStr();

                    txtFromPostCode.Text = AppVars.objCopyBooking.FromPostCode.ToStr();

                    txtToAddress.TextChanged -= new EventHandler(TextBoxElement_TextChanged);
                    txtToAddress.Text = AppVars.objCopyBooking.ToAddress.ToStr();
                    txtToAddress.TextChanged += new EventHandler(TextBoxElement_TextChanged);


                    txtToFlightDoorNo.Text = AppVars.objCopyBooking.ToDoorNo.ToStr();
                    txtToStreetComing.Text = AppVars.objCopyBooking.ToStreet.ToStr();

                    txtToPostCode.Text = AppVars.objCopyBooking.ToPostCode.ToStr();





                    chkAutoDespatch.Checked = AppVars.objCopyBooking.AutoDespatch.ToBool();
                    DateTime? pickUpDate = AppVars.objCopyBooking.PickupDateTime;






                    int fromLocTypeId = AppVars.objCopyBooking.FromLocTypeId.ToInt();

                    //if (fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS)
                    txtFromAddress.Focus();
                    //else if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                    //    txtFromPostCode.Focus();
                    //else
                    //    ddlFromLocation.Focus();


                    if (AppVars.objCopyBooking.ZoneId != null)
                        ddlPickupPlot.SelectedValue = AppVars.objCopyBooking.ZoneId.ToIntorNull();

                    if (AppVars.objCopyBooking.DropOffZoneId != null)
                        ddlDropOffPlot.SelectedValue = AppVars.objCopyBooking.DropOffZoneId.ToIntorNull();


                    if (ddlRoute != null && AppVars.objCopyBooking.BoundType.ToStr().Trim().Length > 0)
                        ddlRoute.Text = AppVars.objCopyBooking.BoundType.ToStr().Trim();

                    txtFaresPostedFrom.Text = AppVars.objCopyBooking.FaresPostedFrom.ToStr();

                    chkQuotedPrice.Checked = AppVars.objCopyBooking.IsQuotedPrice.ToBool();


                    //txtPaymentReference.Text = AppVars.objCopyBooking.PaymentComments.ToStr();



                    if (ddlBabyseat1 != null && ddlbabyseat2 != null)
                    {
                        string babyseats = AppVars.objCopyBooking.BabySeats.ToStr();
                        if (!string.IsNullOrEmpty(babyseats) && babyseats.Contains("<<<"))
                        {

                            string[] arr = babyseats.Split(new string[] { "<<<" }, StringSplitOptions.None);

                            if (arr.Count() == 2)
                            {
                                ddlBabyseat1.SelectedItem = arr[0].ToStr().Trim();
                                ddlbabyseat2.SelectedItem = arr[1].ToStr().Trim();

                            }
                        }
                    }



                    lblMap.Text = AppVars.objCopyBooking.DistanceString.ToStr();



                    if (AppVars.objCopyBooking.Booking_ViaLocations.Count > 0)
                    {
                        CreateViaPanel();


                        GridViewRowInfo row = null;
                        foreach (var item in AppVars.objCopyBooking.Booking_ViaLocations)
                        {
                            row = grdVia.Rows.AddNew();
                            row.Cells["ID"].Value = item.Id;
                            row.Cells["MASTERID"].Value = item.BookingId;
                            row.Cells["FROMTYPELABEL"].Value = "Via";
                            // row.Cells[COLS.FROMTYPELABEL].Value = item.ViaLocTypeLabel;
                            row.Cells["FROMTYPEVALUE"].Value = item.ViaLocTypeValue;
                            row.Cells["FROMVIALOCTYPEID"].Value = item.ViaLocTypeId;

                            row.Cells["VIALOCATIONID"].Value = item.ViaLocId;
                            row.Cells["VIALOCATIONLABEL"].Value = item.ViaLocLabel;
                            row.Cells["VIALOCATIONVALUE"].Value = item.ViaLocValue;

                        }

                        ClearViaDetails();


                        btnSelectVia.Text = "+Via (" + grdVia.Rows.Count + ") [ F2 ]";
                    }



                    foreach (var item in AppVars.objCopyBooking.Booking_Notes)
                    {
                        if (listofNotesCopied == null)
                            listofNotesCopied = new List<Booking_Note>();

                        listofNotesCopied.Add(new Booking_Note { notes = item.notes, AddOn = item.AddOn, AddBy = item.AddBy });

                    }

                    if (listofNotesCopied != null && listofNotesCopied.Count > 0)
                        btn_notes.Text = "Notes(" + listofNotesCopied.Count + ") [F5]";

                }
                catch
                {


                }


            }



        }



        private void btnReturnTo_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetReturnTo(args.ToggleState);
        }



        private void SetReturnTo(ToggleState toggle)
        {

            if (dtpReturnPickupDate != null)
            {
                lblReturnAddress.Visible = true;
                txtReturnTo.Visible = true;
                lblretto.Visible = true;
                //465
                //236
                txtToAddress.Width = 232;

                // txtFromAddress.ListBoxElement.Width = 370;
                //txtToAddress.ListBoxElement.Width = 370;
            }
            else
            {
                lblReturnAddress.Visible = false;
                txtReturnTo.Visible = false;
                lblretto.Visible = false;
                txtToAddress.Width = 465;

            }

        }

        private void SetReturnFrom(ToggleState toggle)
        {

            if (dtpReturnPickupDate != null)
            {

                txtReturnFrom.Visible = true;
                lblretfrom.Visible = true;

                txtFromAddress.Width = 232;


            }
            else
            {
                txtReturnFrom.Visible = false;
                lblretfrom.Visible = false;
                txtFromAddress.Width = 465;
            }

        }

        private void btnReturnFrom_ToggleStateChanged(object sender, StateChangedEventArgs args)
        {
            SetReturnFrom(args.ToggleState);
        }





        private void btnExit_Click(object sender, EventArgs e)
        {

            if (IsAllowExit())
                this.Close();
        }


        private bool IsAllowExit()
        {
            if (ddlPaymentType.Tag != null && ddlPaymentType.Enabled == false)
            {
                MessageBox.Show("You cannot close this Booking as card payment is taken");
                return false;

            }
            return true;

        }





        public void SelectMileageFromRouteSugg(decimal fares, string milesString)
        {

            this.selectedFaresR = fares;
            this.selectedMilesR = milesString;
            UpdateUI();

        }



        private decimal selectedFaresR;
        private string selectedMilesR;

        private void UpdateUI()
        {
            if (this.InvokeRequired)
            {
                this.BeginInvoke(new UIDelegate(UpdateUI), null);

            }
            else
            {

                numFareRate.Value = this.selectedFaresR;
                lblMap.Text = this.selectedMilesR.ToStr();
            }

        }



        Font f = null;
        public long PickupTimeAsc;
        public long PickupTimeDesc;




        #region Fares

        decimal oldCompanyFare = 0.00m;

        void numCompanyFares_Enter(object sender, EventArgs e)
        {
            oldCompanyFare = numCompanyFares.Value;
        }

        void numCompanyFares_Validated(object sender, EventArgs e)
        {
            try
            {

                // only for gbc cars
                if (AppVars.objPolicyConfiguration.SendBookingCompletionEmail.ToBool())
                {
                    if (numCompanyFares.Text.Trim().Length > 0 && numCompanyFares.Text.Trim().ToDecimal() > 0)
                    {

                        //if (numCompanyFares.Value > 0)
                        //{
                        decimal serviceCharge = 0.00m;


                        decimal price = numBookingFee.Value;

                        if (ddlCompany.SelectedValue != null)
                            price = numCompanyFares.Text.Trim().ToDecimal();

                        Gen_ServiceCharge objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => (price >= c.FromValue && price <= c.ToValue)
                        && (ddlCompany.SelectedValue.ToInt() == 0 || (c.IsAccount != null && c.IsAccount == true)));

                        if (objServiceCharge != null)
                        {

                            if (objServiceCharge.AmountWise.ToBool())
                            {
                                serviceCharge = objServiceCharge.ServiceChargeAmount.ToDecimal();
                            }
                            else
                            {
                                if (ddlCompany.SelectedValue != null)
                                    serviceCharge = (price * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;
                                else
                                    serviceCharge = (numBookingFee.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;



                            }

                            if (ddlCompany.SelectedValue != null)
                                numFareRate.Value = price - serviceCharge;
                            else
                                numFareRate.Value = numBookingFee.Value - serviceCharge;
                        }
                    }

                }


                if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool() == true)
                {

                    //if (oldCompanyFare == 0 || oldCompanyFare != numCompanyFares.Value)
                    //{

                    //    CalculateAgentFeesAndDriverFares();
                    //}

                }

                CalculateTotalCharges(true);
            }
            catch
            {

            }
        }


        void numReturnCompanyFares_Validated(object sender, EventArgs e)
        {
            try
            {
                if (numReturnCompanyFares.Text.Trim().Length > 0 && numReturnCompanyFares.Text.Trim().ToDecimal() > 0)
                {

                    //if (numReturnCompanyFares.Value > 0)
                    //{
                    decimal serviceCharge = 0.00m;


                    decimal price = numReturnBookingFee.Value;

                    if (ddlCompany.SelectedValue != null)
                        price = numReturnCompanyFares.Text.Trim().ToDecimal();

                    Gen_ServiceCharge objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => (price >= c.FromValue && price <= c.ToValue) && (ddlCompany.SelectedValue.ToInt() == 0 || (c.IsAccount != null && c.IsAccount == true)));

                    if (objServiceCharge != null)
                    {

                        if (objServiceCharge.AmountWise.ToBool())
                        {
                            serviceCharge = objServiceCharge.ServiceChargeAmount.ToDecimal();
                        }
                        else
                        {
                            if (ddlCompany.SelectedValue != null)
                                serviceCharge = (price * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;
                            else
                                serviceCharge = (numReturnBookingFee.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;



                        }

                        if (ddlCompany.SelectedValue != null)
                            numReturnFare.Value = price - serviceCharge;
                        else
                            numReturnFare.Value = numReturnBookingFee.Value - serviceCharge;
                    }
                }

                //}
            }
            catch
            {


            }

        }


        private void CalculateAgentFeesAndDriverFares()
        {

            //if (numAgentCommission != null && numAgentCommission.Visible == true)
            //{

            //    if (ddlAgentCommissionType.Text.ToStr().ToLower() == "percent")
            //    {
            //        numAgentCommission.Value = (numCompanyFares.Value * numAgentCommissionPercent.Value.ToInt()) / 100;

            //        if (numAgentCommission.Value > 0)
            //        {
            //            //     numAgentCommission.Value = (decimal)(Math.Ceiling(Convert.ToDouble(numAgentCommission.Value) / 0.25) * 0.25);
            //            numAgentCommission.Value = Math.Round(numAgentCommission.Value * 4, MidpointRounding.ToEven) / 4;

            //        }
            //    }
            //    if (numCompanyFares.Value - numAgentCommission.Value >= 0)
            //    {

            //        numFareRate.Value = numCompanyFares.Value - numAgentCommission.Value;
            //        //numBookingFee.Value = numFareRate.Value;
            //    }
            //}
        }


        private void CalculateDriverFaresAndCompanyPrice()
        {
            CalculateDriverFaresAndWOTopOfAgentCompanyPrice();
            //if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool())
            //    return;


            //if (numAgentCommission != null && numAgentCommission.Visible == true)
            //{



            //    if (numCompanyFares.Value - numAgentCommission.Value >= 0)
            //    {
            //        numCompanyFares.Value = numCompanyFares.Value + numAgentCommission.Value;
            //        numFareRate.Value = numCompanyFares.Value - numAgentCommission.Value;
            //        numBookingFee.Value = numFareRate.Value;
            //    }
            //}
        }
        private void CalculateDriverFaresAndWOTopOfAgentCompanyPrice()
        {

            //if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool())
            //    return;


            if (numAgentCommission != null && numAgentCommission.Visible == true)
            {



                if (numCompanyFares.Value - numAgentCommission.Value >= 0)
                {

                    numFareRate.Value = numCompanyFares.Value - numAgentCommission.Value;

                }
            }
        }
        private void CalculateAgentFees()
        {


            if (AppVars.objPolicyConfiguration.DisableDriverCommissionTick.ToBool())
                return;

            //if (numAgentCommission != null && numAgentCommissionPercent.Value.ToInt() > 0)
            //{
            //    numAgentCommission.Value = (numCompanyFares.Value * numAgentCommissionPercent.Value.ToInt()) / 100;

            //    if (numAgentCommission.Value > 0)
            //    {

            //        numAgentCommission.Value = Math.Round(numAgentCommission.Value * 4, MidpointRounding.ToEven) / 4;
            //    }
            //}
        }

        #endregion




        #region fare backgroundworker
        private BackgroundWorker worker_fares;

        private void InitializeFaresWorker()
        {
            if (worker_fares == null)
            {
                worker_fares = new BackgroundWorker();
                worker_fares.DoWork += new DoWorkEventHandler(worker_fares_DoWork);
                worker_fares.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_fares_RunWorkerCompleted);
                worker_fares.WorkerSupportsCancellation = true;
            }

        }

        void worker_fares_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {
            try
            {
                EnableCalculateFaresButton();
                if (e.Result == null || e.Cancelled)
                    return;

                if (IsAllowUpdating == false)
                {
                    try
                    {
                        DisableCalculateFaresButton();
                        return;
                    }
                    catch
                    {

                    }
                }

                clsfaresworker cls = (clsfaresworker)e.Result;

                cls.fareVal += cls.ExtraViaCharges;

                if (cls.returnfares > 0)
                    cls.returnfares += cls.ExtraViaCharges;


                if (cls.ExtraViaCharges > 0)
                {

                    if (cls.companyPrice > 0)
                        cls.companyPrice += cls.ExtraViaCharges;
                    else
                        cls.dd += cls.ExtraViaCharges;

                }

                decimal airportPickupChrgs = cls.airportPickupChrgs;
                decimal airportDropOffChrgs = cls.airportDropOffChrgs;

                if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                {
                    cls.fareVal += airportPickupChrgs;
                    cls.returnfares += airportPickupChrgs;


                    if (cls.companyPrice == 0)
                        cls.companyPrice = cls.fareVal;
                    else
                        cls.companyPrice += airportPickupChrgs;
                }


                if (cls.toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                {
                    cls.fareVal += airportDropOffChrgs;


                    cls.returnfares += airportDropOffChrgs;

                    cls.companyPrice += airportDropOffChrgs;
                }



                if (cls.fromZoneId != 0 && ddlPickupPlot.SelectedValue == null)
                    ddlPickupPlot.SelectedValue = cls.fromZoneId;

                if (cls.toZoneId != 0 && ddlDropOffPlot.SelectedValue == null)
                    ddlDropOffPlot.SelectedValue = cls.toZoneId;




                decimal dd = cls.dd;
                decimal returnFares = cls.returnfares;


                if (ddlPaymentType.SelectedValue.ToInt() == Enums.PAYMENT_TYPES.CREDIT_CARD && AppVars.objPolicyConfiguration.CreditCardExtraCharges.ToDecimal() > 0)
                {
                    if (AppVars.objPolicyConfiguration.CreditCardChargesType == 1)
                    {
                        numFareRate.Value = cls.fareVal + AppVars.objPolicyConfiguration.CreditCardExtraCharges.ToDecimal();
                    }
                    else
                    {
                        var charges = cls.fareVal * AppVars.objPolicyConfiguration.CreditCardExtraCharges.ToDecimal() / 100;
                        numFareRate.Value = cls.fareVal + charges;
                    }

                }
                else
                {
                    numFareRate.Value = cls.fareVal;
                }

                numCompanyFares.Tag = null;
                if (numReturnCompanyFares != null)
                    numCompanyFares.Tag = null;

                decimal increasedCompanyPrice = 0.00m;
                if (cls.CompanyId != 0 && numCompanyFares != null)
                {

                    decimal CActualPrice = cls.companyPrice;

                    if (CActualPrice == 0)
                        CActualPrice = dd;

                    if (companyPricePercentage != 0)
                    {
                        if (companyPriceAdditionType == true)
                        {
                            dd = (dd + companyPricePercentage);
                            increasedCompanyPrice = (companyPricePercentage);
                        }
                        else
                        {



                            dd += (dd * companyPricePercentage) / 100;




                            increasedCompanyPrice = (CActualPrice * companyPricePercentage) / 100;
                        }

                    }



                    if (cls.companyPrice.ToDecimal() > 0)
                    {
                        numCompanyFares.Tag = cls.companyPrice.ToDecimal();
                        numCompanyFares.Value = cls.companyPrice.ToDecimal() + increasedCompanyPrice;


                    }
                    else
                    {
                        numCompanyFares.Tag = CActualPrice;
                        numCompanyFares.Value = dd;
                    }


                    if (increasedCompanyPrice > 0 && AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                    {


                        numCompanyFares.Value = Math.Ceiling(numCompanyFares.Value);






                    }

                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                    if (roundUp > 0)
                    {
                        if (ENABLECMACBOOKINGCALCULATION == true)
                        {
                            if (objMaster.Current != null)
                            {
                                numCompanyFares.Value = objMaster.Current.CompanyPrice.ToDecimal();
                            }
                            else
                            {
                                if (numCompanyFares.Value == 0 || (fareCalculateBy != 1 && fareCalculateBy != 4))
                                    numCompanyFares.Value = (decimal)Math.Ceiling(numCompanyFares.Value / roundUp) * roundUp;
                            }
                        }
                        else
                        {
                            if (numCompanyFares.Value == 0 || (fareCalculateBy != 1 && fareCalculateBy != 4))
                                numCompanyFares.Value = (decimal)Math.Ceiling(numCompanyFares.Value / roundUp) * roundUp;
                        }


                    }

                }

                if (opt_return.Checked && numReturnFare != null)
                {

                    numReturnFare.Value = returnFares;

                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        numReturnFare.Value -= airportPickupChrgs;
                        numReturnFare.Value += airportDropOffChrgs;


                    }

                    else if (ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                    {

                        numReturnFare.Value += airportPickupChrgs;
                        numReturnFare.Value -= airportDropOffChrgs;

                    }

                    if (cls.CompanyId != 0 && numReturnCompanyFares != null)
                    {

                        if (numCompanyFares.Value == numFareRate.Value)
                        {
                            numReturnCompanyFares.Value = 0;
                        }
                        else
                        {
                            numReturnCompanyFares.Tag = numCompanyFares.Tag.ToDecimal();
                            numReturnCompanyFares.Value = numCompanyFares.Tag.ToDecimal() + increasedCompanyPrice;

                            if (increasedCompanyPrice > 0)
                            {
                                if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                {

                                    numReturnCompanyFares.Value = Math.Ceiling(numReturnCompanyFares.Value);
                                }
                                else
                                {
                                    decimal roundUp2 = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                                    if (roundUp2 > 0)
                                    {
                                        numReturnCompanyFares.Value = (decimal)Math.Ceiling(numReturnCompanyFares.Value / roundUp2) * roundUp2;
                                    }
                                }

                            }


                        }


                        if (numReturnCompanyFares.Value == 0)
                            numReturnCompanyFares.Value = numReturnFare.Value;
                        else
                        {

                            if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                            {
                                numReturnCompanyFares.Value -= airportPickupChrgs;
                                numReturnCompanyFares.Value += airportDropOffChrgs;

                            }
                        }


                        decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                        if (roundUp > 0)
                        {
                            numReturnCompanyFares.Value = (decimal)Math.Ceiling(numReturnCompanyFares.Value / roundUp) * roundUp;
                        }


                    }


                }

                else if (opt_waitreturn.Checked)
                {
                    decimal discountRate = numFareRate.Value + numExtraChrgs.Value;

                    if (AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt() > 0)
                    {

                        if (AppVars.objPolicyConfiguration.WaitAndReturnDiscountType.ToInt() == 2)
                        {
                            discountRate = AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt();
                        }
                        else
                        {
                            discountRate = (discountRate * AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt()) / 100;
                        }
                    }
                    else
                    {


                        if (AppVars.DisableWaitandreturnAsVia.ToBool() == false)
                        {

                            discountRate = 0.00m;
                        }

                    }


                    numFareRate.Value = numFareRate.Value + discountRate;


                    if (cls.CompanyId != 0 && numCompanyFares != null)
                    {
                        numCompanyFares.Value = numCompanyFares.Value + discountRate;
                    }
                }
                else
                {
                    if (numReturnFare != null)
                        numReturnFare.Value = 0;
                }
                //

                if (cls.CompanyId != 0 && numAgentCommission != null && numAgentCommission.Visible)
                {
                    try
                    {
                        if (cls.IsAmountWiseAgentFees.ToBool())
                        {
                            numAgentCommission.Value = cls.agentPrice.ToDecimal();

                            numAgentCharge.Value = cls.agentcharge.ToDecimal();
                            //     ddlAgentCommissionType.SelectedIndex = 1;
                            //   radLabel34.Visible = false;
                            //     ddlAgentCommissionType.Visible = false;
                            //      numAgentCommissionPercent.Visible = false;
                        }
                        else
                        {
                            if (btnSetFares.Tag.ToStr() != "frmAlertShowFares")
                            {
                                //  radLabel34.Visible = true;
                                //      ddlAgentCommissionType.Visible = true;
                                //   numAgentCommissionPercent.Visible = true;

                                //     numAgentCommissionPercent.Value = cls.agentPercent;
                                numAgentCommission.Value = (numCompanyFares.Value * cls.agentPrice) / 100;
                                //    ddlAgentCommissionType.SelectedIndex = 0;

                                CalculateDriverFaresAndCompanyPrice();
                            }
                        }



                    }
                    catch
                    {


                    }


                }


                string via = string.Empty;

                if (AppVars.objPolicyConfiguration.EnableOfflineDistance.ToBool() == false && cls.hasVia && AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
                {
                    via = "&waypoints=";
                    via += string.Join("|", grdVia.Rows.Select(c => General.GetPostCodeMatch(c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()) + ", UK").ToArray<string>());
                    estimatedTime = General.CalculateEstimatedTime(cls.tempFromPostCode, cls.tempToPostCode, via);
                }

                if (estimatedTime.ToStr().Length > 0)
                    estimatedTime = "Time :" + estimatedTime;


                string prefix = string.Empty;


                lastCalculatedFares = numFareRate.Value;

                if (fareCalculateBy > 0)
                {

                    lblMap.Font = new Font("Tahoma", 9, FontStyle.Bold);
                    if (fareCalculateBy == 1)
                        prefix = "PlotToPlot ";
                    else if (fareCalculateBy == 2)
                        prefix = "Normal ";
                    else if (fareCalculateBy == 3)
                        prefix = "RTF ";
                    else if (fareCalculateBy == 4)
                        prefix = "Fixed ";

                }

                int waitAndReturnMileage = opt_waitreturn.Checked ? 2 : 1;

                decimal totalMileage = milesList.Sum();


                if (AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt() == 0)
                    waitAndReturnMileage = 1;

                lblMap.Text = prefix + " - Distance : " + string.Format("{0:#.##}", totalMileage * waitAndReturnMileage) + " miles " + estimatedTime;


                if (drvFareReductionType.ToStr() != "" && drvFareReductionValue > 0)
                {

                    if (drvFareReductionType.ToStr().ToLower() == "percent")
                    {
                        // Math.Round(fares * 4, MidpointRounding.ToEven) / 4;
                        numFareRate.Value = numCompanyFares.Tag.ToDecimal() - ((numCompanyFares.Tag.ToDecimal() * drvFareReductionValue) / 100);

                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = numReturnCompanyFares.Tag.ToDecimal() - ((numReturnCompanyFares.Tag.ToDecimal() * drvFareReductionValue) / 100);

                        }

                        decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                        if (roundUp > 0)
                        {
                            numFareRate.Value = (decimal)Math.Ceiling(numFareRate.Value / roundUp) * roundUp;
                            if (numReturnFare != null)
                            {
                                numReturnFare.Value = (decimal)Math.Ceiling(numReturnFare.Value / roundUp) * roundUp;
                            }
                        }
                    }
                    else
                    {
                        numFareRate.Value = numCompanyFares.Value - drvFareReductionValue;

                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = numReturnCompanyFares.Value - drvFareReductionValue;

                        }

                    }

                }

                numCongChrgs.Tag = null;
                numParkingChrgs.Tag = null;

                //if (cls.TotalSurchargeParking > 0)
                //{

                //    if (cls.CompanyId.ToInt() > 0)
                //    {
                //        numParkingChrgs.Value = cls.TotalSurchargeParking ;
                //        numCongChrgs.Value = cls.TotalSurchargeParking ;

                //    }
                //    else
                //    {
                //        numCongChrgs.Value = cls.TotalSurchargeParking;
                //    }
                //}
                //else
                //{
                //    numCongChrgs.Value = 0.00m;
                //    numParkingChrgs.Value = 0.00m;


                //}



                if (cls.TotalSurchargeParking > 0)
                {

                    if (cls.CompanyId.ToInt() > 0)
                    {
                        numParkingChrgs.Value = cls.TotalSurchargeParking + cls.OtherParking;
                        numCongChrgs.Value = 0.00m;

                    }
                    else
                    {
                        numCongChrgs.Value = cls.TotalSurchargeParking + cls.OtherParking;
                    }
                }
                else
                {
                    numCongChrgs.Value = 0.00m;
                    numParkingChrgs.Value = 0.00m;
                    numCongChrgs.Value = cls.OtherParking - cls.ReturnOtherParking;
                    numCongChrgs.Tag = cls.ReturnOtherParking;

                    if (cls.CompanyId != null)
                    {
                        numParkingChrgs.Value = cls.OtherParking - cls.ReturnOtherParking;
                        numParkingChrgs.Tag = cls.ReturnOtherParking;

                    }
                }



                if (numExtraChrgs.Tag != null)
                    numExtraChrgs.Value = numExtraChrgs.Tag.ToDecimal();

                if (cls.TotalSurchargeExtra > 0)
                {

                    if (numExtraChrgs.Tag == null)
                    {
                        numExtraChrgs.Value = cls.TotalSurchargeExtra;

                    }
                    else
                        numExtraChrgs.Value += cls.TotalSurchargeExtra;

                }
                else
                {
                    numExtraChrgs.Value = 0.00m;


                    if (numExtraChrgs.Tag != null)
                        numExtraChrgs.Value = numExtraChrgs.Tag.ToDecimal();
                }

                if (cls.Congestion > 0)
                {

                    if (AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "MoUNtCaRsLTd" || AppVars.listUserRights.Count(c => c.functionId == "APPLY CONGESTION ON PARKING") > 0)
                    {
                        numParkingChrgs.Value = cls.Congestion;
                        numCongChrgs.Value = cls.Congestion;
                    }
                    else
                    {

                        numFareRate.Value += cls.Congestion;

                        if (cls.CompanyId.ToInt() > 0)
                            numCompanyFares.Value += cls.Congestion;

                        if (cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN)
                        {
                            numReturnFare.Value += cls.Congestion;

                            if (cls.CompanyId.ToInt() > 0)
                                numReturnCompanyFares.Value += cls.Congestion;

                        }
                    }

                }

                if (cls.peakFactorX > 0)
                {
                    numFareRate.Value = numFareRate.Value * cls.peakFactorX;

                    if (cls.CompanyId.ToInt() > 0)
                        numCompanyFares.Value = numCompanyFares.Value * cls.peakFactorX;

                    if (cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN)
                    {
                        numReturnFare.Value = numReturnFare.Value * cls.peakFactorX;

                        if (cls.CompanyId.ToInt() > 0)
                            numReturnCompanyFares.Value = numReturnCompanyFares.Value * cls.peakFactorX;

                    }
                    chkSurge.Checked = true;
                    chkSurge.Text = "Surge " + string.Format("{0:f1}", cls.peakFactorX) + "X";
                    chkSurge.Tag = cls.peakFactorX;
                }
                else
                {
                    chkSurge.Checked = false;
                    chkSurge.Text = "Surge";
                    chkSurge.Tag = null;

                }




                CalculateServiceCharges(cls.objServiceCharge);


                if (numCompanyFares.Value > 0 && (fareCalculateBy == 1 || fareCalculateBy == 4))
                {
                    CalculateTotalCharges(true);
                }
                else
                    CalculateTotalCharges();


                if (chkQuotedPrice != null && chkQuotedPrice.Visible)
                {


                    if (prefix.ToStr().ToLower().Trim() != "plottoplot" && prefix.ToStr().ToLower().Trim() != "fixed")
                    {

                        if (AppVars.setrtfpriceasquotedjob == null)
                        {
                            try
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    AppVars.setrtfpriceasquotedjob = db.ExecuteQuery<string>("select SetVal from appsettings where setkey='setrtfpriceasquotedjob'").FirstOrDefault().ToBool();
                                }
                            }
                            catch
                            {

                            }
                        }
                    }

                    if (prefix.ToStr().ToLower().Trim() == "plottoplot" || prefix.ToStr().ToLower().Trim() == "fixed" || (prefix.ToStr().ToLower().Trim() == "rtf" && AppVars.setrtfpriceasquotedjob.ToBool()))
                    {
                        chkQuotedPrice.Checked = true;
                    }
                    else
                    {
                        chkQuotedPrice.Checked = false;

                    }
                }



                if (AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt() > 0 && numFareRate.Value <= AppVars.objPolicyConfiguration.AutoDespatchASAPMins.ToInt())
                {
                    chkAutoDespatch.Checked = false;


                }

                if (chkETA.Visible == false)
                    chkETA.Visible = true;



                if (totalMileage > 0 && (fareCalculateBy > 0 || chkQuotedPrice.Checked == false))
                {
                    string mileageText = string.Empty;

                    if (fareCalculateBy == 0 && chkQuotedPrice.Checked == false)
                        fareCalculateBy = 2;

                    if (fareCalculateBy == 2)
                    {
                        mileageText = "Mileage Tariff : £" + string.Format("{0:f2}", numTotalChrgs.Value) + Environment.NewLine + "Miles : " + totalMileage;

                    }
                    else if (fareCalculateBy == 3)
                    {
                        mileageText = "RTF Mileage Tariff : £" + string.Format("{0:f2}", numTotalChrgs.Value) + Environment.NewLine + "Miles : " + totalMileage;

                    }
                    else
                    {

                        mileageText = "Fixed Tariff : £" + string.Format("{0:f2}", numTotalChrgs.Value) + Environment.NewLine + "Miles : " + totalMileage;


                    }

                    if (chkETA.Tag.ToStr().Length > 0)
                        chkETA.Text = chkETA.Tag.ToStr() + Environment.NewLine + mileageText;
                    else
                        chkETA.Text = mileageText;




                    this.chkETA.Font = new System.Drawing.Font("Tahoma", 10F, System.Drawing.FontStyle.Bold);

                    if (chkETA.AutoSize == false)
                        chkETA.AutoSize = true;


                    if (chkETA.Tag == null)
                    {

                        chkETA.BringToFront();
                    }
                }

                if (btnSaveNew.Tag != null)
                    SendKeys.Send("{ESC}");
            }
            catch (Exception ex)
            {



            }
            finally
            {


            }
        }


        private void CalculateServiceCharges(Gen_ServiceCharge objServiceCharge)
        {
            if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool() == false)
                return;

            if (AppVars.listUserRights.Count(c => c.functionId == "APPLY BOOKINGFEE ON ONLINE BOOKINGS") > 0)
            {
                if (ddlBookingType.SelectedValue.ToInt() != Enums.BOOKING_TYPES.ONLINE && ddlBookingType.SelectedValue.ToInt() != Enums.BOOKING_TYPES.WEB)
                    return;
            }

            try
            {
                //if (objServiceCharge == null)
                //    objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => c.Id != 0);
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    if (AppVars.BookingFeeRange.ToBool())
                    {
                        objServiceCharge = db.Gen_ServiceCharges.Where(c => c.SubCompanyId == ddlSubCompany.SelectedValue.ToInt() && (numFareRate.Value >= c.FromValue && numFareRate.Value <= c.ToValue)).FirstOrDefault();
                    }
                    else
                        objServiceCharge = General.GetObject<Gen_ServiceCharge>(c => c.Id != 0);
                }

                if (objServiceCharge != null)
                {
                    if (objServiceCharge.IsAccount.ToBool() == true ||
                        (objServiceCharge.IsAccount.ToBool() == false && ddlPaymentType.SelectedValue.ToInt() != Enums.PAYMENT_TYPES.BANK_ACCOUNT))
                    {


                        if (objServiceCharge.ServiceChargeAmount.ToDecimal() == 0)
                        {
                            try
                            {

                                int fromZoneId = ddlPickupPlot.SelectedValue.ToInt();
                                int toZoneId = ddlDropOffPlot.SelectedValue.ToInt();
                                using (TaxiDataContext db = new TaxiDataContext())
                                {

                                    objServiceCharge.ServiceChargeAmount = db.Gen_Zones.Where(c => c.Id == fromZoneId || c.Id == toZoneId).Select(c => c.BookingFee).Max();


                                }
                            }
                            catch
                            {

                            }

                        }

                        if (objServiceCharge.AmountWise.ToBool())
                        {
                            bool isappied = false;

                            if (numFareRate.Value >= objServiceCharge.FromValue.ToDecimal())
                            {
                                numBookingFee.Value = objServiceCharge.ServiceChargeAmount.ToDecimal();
                                isappied = true;
                            }
                            else
                                numBookingFee.Value = 0.00m;

                            if (pnlBookingFees.Visible)
                            {
                                if (numReturnFare != null && numReturnFare.Value >= objServiceCharge.FromValue.ToDecimal())
                                {
                                    numReturnBookingFee.Value = objServiceCharge.ServiceChargeAmount.ToDecimal();
                                    isappied = true;
                                }
                                else
                                    numReturnBookingFee.Value = 0.00m;
                            }


                            if (isappied)
                            {
                                if (objServiceCharge.DifferentAirportBookingFee.ToBool())
                                {
                                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                                    {

                                        numBookingFee.Value = objServiceCharge.AirportBookingFee.ToDecimal();

                                        if (numReturnBookingFee != null && numReturnBookingFee.Visible)
                                            numReturnBookingFee.Value = objServiceCharge.AirportBookingFee.ToDecimal();

                                    }
                                }
                            }

                        }
                        else
                        {
                            bool isappied = false;

                            if (numFareRate.Value >= objServiceCharge.FromValue.ToDecimal())
                            {
                                numBookingFee.Value = (numFareRate.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;

                                isappied = true;

                                decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                                if (roundUp > 0)
                                {
                                    numBookingFee.Value = (decimal)Math.Ceiling(numBookingFee.Value / roundUp) * roundUp;

                                }
                            }
                            else
                                numBookingFee.Value = 0.00m;

                            if (pnlBookingFees.Visible && numReturnBookingFee != null)
                            {
                                if (numReturnFare.Value >= objServiceCharge.FromValue.ToDecimal())
                                {
                                    isappied = true;
                                    numReturnBookingFee.Value = (numReturnFare.Value * objServiceCharge.ServiceChargePercent.ToDecimal()) / 100;

                                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                                    if (roundUp > 0)
                                    {

                                        if (numReturnBookingFee != null && numReturnBookingFee.Visible)
                                            numReturnBookingFee.Value = (decimal)Math.Ceiling(numReturnBookingFee.Value / roundUp) * roundUp;

                                    }
                                }
                                else
                                    numReturnBookingFee.Value = 0.00m;
                            }





                            if (isappied)
                            {
                                if (objServiceCharge.DifferentAirportBookingFee.ToBool())
                                {
                                    if (ddlFromLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT || ddlToLocType.SelectedValue.ToInt() == Enums.LOCATION_TYPES.AIRPORT)
                                    {
                                        numBookingFee.Value = objServiceCharge.AirportBookingFee.ToDecimal();

                                        if (numReturnBookingFee != null && numReturnBookingFee.Visible)
                                            numReturnBookingFee.Value = objServiceCharge.AirportBookingFee.ToDecimal();

                                    }
                                }
                            }


                        }


                    }
                    else
                    {
                        numBookingFee.Value = 0.00m;
                        if (pnlBookingFees.Visible && numReturnBookingFee != null)
                        {
                            numReturnBookingFee.Value = 0.00m;

                        }


                    }

                }
            }
            catch
            {

            }
        }

        private decimal lastCalculatedFares = 0;


        private int GetDayId(string dayName)
        {
            dayName = dayName.ToStr().Trim();

            if (dayName.ToLower().StartsWith("mon"))
                return 1;
            else if (dayName.ToLower().StartsWith("tue"))
                return 2;
            else if (dayName.ToLower().StartsWith("wed"))
                return 3;
            else if (dayName.ToLower().StartsWith("thurs"))
                return 4;
            else if (dayName.ToLower().StartsWith("fri"))
                return 5;
            else if (dayName.ToLower().StartsWith("sat"))
                return 6;
            else if (dayName.ToLower().StartsWith("sun"))
                return 7;
            else return 0;


        }

        private int GetDayIdByFullName(string dayName)
        {
            dayName = dayName.ToStr().Trim();

            if (dayName.ToLower() == "monday")
                return 1;
            else if (dayName.ToLower() == "tuesday")
                return 2;
            else if (dayName.ToLower() == "wednesday")
                return 3;
            else if (dayName.ToLower() == "thursday")
                return 4;
            else if (dayName.ToLower() == "friday")
                return 5;
            else if (dayName.ToLower() == "saturday")
                return 6;
            else if (dayName.ToLower() == "sunday")
                return 7;
            else return 0;


        }

        void worker_fares_DoWork(object sender, DoWorkEventArgs e)
        {




            clsfaresworker cls = (clsfaresworker)e.Argument;

            if (cls.JourneyTypeId == Enums.JOURNEY_TYPES.WAITANDRETURN &&
                      AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt() > 0 && cls.ViaLocations != null && cls.ViaLocations.Count > 0)
            {
                try
                {
                    ClsViaLocations objClsVia = cls.ViaLocations[0];


                    cls.toAddress = objClsVia.ViaLocValue.ToStr().ToUpper().Trim();
                    cls.tempToPostCode = cls.toAddress;




                    cls.toPostCode = General.GetPostCodeMatch(cls.toAddress);
                    cls.toZoneId = GetZoneIdOnly(cls.toAddress).ToInt();

                    cls.ViaLocations.Remove(objClsVia);


                    if (cls.ViaLocations.Count == 0)
                    {

                        cls.hasVia = false;
                        cls.ViaLocations = new List<ClsViaLocations>();
                    }
                }
                catch
                { }

            }




            int? vehicleTypeId = cls.vehicleTypeId;
            int defaultVehicleId = cls.defaultVehicleId;
            bool IsMoreFareWise = cls.IsMoreFareWise;
            int fromZoneId = cls.fromZoneId;
            int toZoneId = cls.toZoneId;
            string tempFromPostCode = cls.tempFromPostCode;
            string tempToPostCode = cls.tempToPostCode;
            decimal fareVal = 0.00m;
            decimal returnFares = 0.00m;
            bool hasVia = cls.hasVia;
            int? fromLocTypeId = cls.fromLocTypeId;
            int? toLocTypeId = cls.toLocTypeId;
            int? fromLocationId = cls.fromLocationId;
            int? toLocationId = cls.toLocationId;
            string[] listofvia = cls.viaList;
            string fromAddress = cls.fromAddress;
            string toAddress = cls.toAddress;
            int tempToLocId = cls.tempToLocId;
            int tempFromLocId = cls.tempFromLocId;
            string fromLocName = cls.fromLocName;
            string toLocName = cls.toLocName;
            string fromPostCode = cls.fromPostCode;
            string toPostCode = cls.toPostCode;
            int companyId = cls.CompanyId.ToInt();
            bool IsCompanyFareExist = false;

            DateTime? pickupdateTime = cls.pickupDateTime;
            bool IsZoneWise = true;
            decimal deadMileage = 0.00m;
            int subCompanyId = cls.SubCompanyId;
            bool IsReverse = cls.IsReverse;

            string errorMsg = string.Empty;
            decimal companyPrice = 0.00m;
            decimal agentComm = 0.00m, agentcharge = 0.00m;


            bool surchargeRateFromAmountWise = false;
            bool surchargeRateToAmountWise = false;

            bool Fromoutoftown = false;
            bool Tooutoftown = false;

            decimal surchargeRateFrom = 0.00m;
            decimal surchargeRateFromParking = 0.00m;
            decimal surchargeRateFromExtra = 0.00m;

            decimal surchargeRateTo = 0.00m;
            decimal surchargeRateToParking = 0.00m;
            decimal surchargeRateToExtra = 0.00m;

            bool surchargeRateViaAmountWise = false;
            decimal surchargeRateVia = 0.00m;
            decimal surchargeRateViaParking = 0.00m;
            decimal surchargeRateViaExtra = 0.00m;
            bool Viaoutoftown = false;



            if (fromZoneId.ToInt() > 0)
            {


                surchargeRateFrom = General.GetSurchargeRate("", fromZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateFromAmountWise, ref surchargeRateFromParking, ref surchargeRateFromExtra, ref Fromoutoftown);

            }

            if (toZoneId.ToInt() > 0)
            {




                surchargeRateTo = General.GetSurchargeRate("", toZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateToAmountWise, ref surchargeRateToParking, ref surchargeRateToExtra, ref Tooutoftown);


                if (fromZoneId == toZoneId)
                {
                    surchargeRateTo = 0;

                }

            }


            decimal viaSurg = 0.00m;

            decimal viaExtra = 0.00m;
            List<decimal> listOfViaSurg = null;
            string viaPlots = string.Empty;
            if (hasVia)
            {
                try
                {
                    listOfViaSurg = new List<decimal>();

                    foreach (var item in cls.ViaLocations.Select(c => c.ViaLocValue).ToArray<string>())
                    {
                        int viaPlotId = GetZoneIdOnly(item.ToStr().ToUpper()).ToInt();

                        if (viaPlotId > 0)
                        {
                            viaPlots += viaPlotId + ",";

                            //if (skipSurchargeTo == false)
                            //{
                            listOfViaSurg.Add(General.GetSurchargeRate("", viaPlotId, cls.pickupDateTime.ToDateTime(), ref surchargeRateViaAmountWise, ref surchargeRateViaParking, ref surchargeRateViaExtra, ref Viaoutoftown));
                            surchargeRateFromParking += surchargeRateViaParking;
                            viaExtra += surchargeRateViaExtra;
                        }
                        //    }
                    }

                    if (listOfViaSurg.Count > 0)
                        viaSurg = listOfViaSurg.Max();
                    surchargeRateFromExtra += viaExtra;
                }
                catch
                {

                }
            }


            if (surchargeRateFrom > 0 && surchargeRateTo > 0)
            {
                if (surchargeRateFrom >= surchargeRateTo)
                    surchargeRateTo = 0.00m;

                else if (surchargeRateTo >= surchargeRateFrom)
                    surchargeRateFrom = 0.00m;


                if (viaSurg > 0)
                {
                    if (surchargeRateFrom >= viaSurg)
                        viaSurg = 0.00m;

                    else if (viaSurg >= surchargeRateFrom)
                        surchargeRateFrom = 0.00m;
                }
            }
            else if (viaSurg > 0)
            {
                if (surchargeRateFrom > 0)
                {
                    if (surchargeRateFrom >= viaSurg)
                        viaSurg = 0.00m;


                }
                else if (surchargeRateTo > 0)
                {
                    if (surchargeRateTo >= viaSurg)
                        viaSurg = 0.00m;

                }
                else
                {
                    surchargeRateFrom = viaSurg;
                    surchargeRateFromAmountWise = surchargeRateViaAmountWise;
                    viaSurg = 0;
                }
            }


            if (viaSurg > 0)
            {
                if (surchargeRateFrom > 0)
                {
                    surchargeRateFrom = viaSurg;
                    surchargeRateFromAmountWise = surchargeRateViaAmountWise;

                }
                else if (surchargeRateTo > 0)
                {
                    surchargeRateTo = viaSurg;
                    surchargeRateToAmountWise = surchargeRateViaAmountWise;
                }

                viaSurg = 0.00m;

            }

            // pick hightest surcharge only
            if (Fromoutoftown && Tooutoftown)
            {
                if (surchargeRateFromExtra > 0 && surchargeRateToExtra > 0)
                {
                    if (surchargeRateFromExtra >= surchargeRateToExtra)
                    {

                        surchargeRateToExtra = 0;

                    }
                    else
                        surchargeRateFromExtra = 0;

                }
                //else
                //{
                //    surchargeRateFromExtra = 0;
                //    surchargeRateToExtra = 0;

                //}
            }

            if ((Fromoutoftown == true && Tooutoftown == false) || (Fromoutoftown == false && Tooutoftown == true))
            {
                surchargeRateFromExtra = 0;
                surchargeRateToExtra = 0;


            }




            if (hasVia)
            {
                try
                {
                    if (AppVars.viaPointExtrasFormula == null)
                        using (TaxiDataContext db = new TaxiDataContext())
                            AppVars.viaPointExtrasFormula = db.ExecuteQuery<string>("select setval from appsettings where setkey='viapointmixedfare'").FirstOrDefault().ToStr().ToBool();
                }
                catch
                {
                    AppVars.viaPointExtrasFormula = false;
                }

            }

            //if (Debugger.IsAttached)
            //{

            //    viaPointExtrasFormula = true;
            //}



            #region VIAFORMULA

            decimal wholeJourneyMiles = 0.00m;
            List<string> newViaList = new List<string>();
            List<ChargesList> chargesList = new List<ChargesList>();
            if (hasVia)
            {
                listofvia = cls.ViaLocations.Select(c => c.ViaLocValue).ToArray<string>();

                if (cls.ViaLocations != null && cls.ViaLocations.Count() == 0)
                    hasVia = false;
                else
                {

                    //new via work
                    using (TaxiDataContext db = new TaxiDataContext())
                    {


                        List<string> destinations = new List<string>();
                        destinations.Add(tempToPostCode.ToStr());
                        destinations.Add(listofvia[0].ToStr().ToUpper());


                        // a to b to c
                        for (int i = 0; i < destinations.Count; i++)
                        {



                            string from = tempFromPostCode.ToStr(); // a
                            string to = destinations[i].ToStr(); // c


                            int totalvia = listofvia.Count();
                            int? fromTempZoneId = 0, toTempZoneId = 0;

                            fromTempZoneId = fromZoneId;
                            toTempZoneId = toZoneId;

                            if (i > 0)
                            {
                                toTempZoneId = General.GetZoneId(to);

                                tempToPostCode = to;
                            }

                            string fromSingleHalfPostCode = string.Empty;
                            string fromHalfPostCode = string.Empty;
                            string startFromPostCode = "";

                            string ToSingleHalfPostCode = string.Empty;
                            string toHalfPostCode = string.Empty;
                            string startToPostCode = "";

                            try
                            {
                                if (!string.IsNullOrEmpty(General.GetPostCodeMatch(tempFromPostCode)))
                                {
                                    string[] fromArr = General.GetPostCodeMatch(tempFromPostCode).Split(new char[] { ' ' });
                                    startFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                                    fromHalfPostCode = fromArr[0];
                                    startFromPostCode = General.CheckIfSpecialPostCode(startFromPostCode);
                                    fromSingleHalfPostCode = fromArr[0] + " " + fromArr[1][0];
                                }

                                if (!string.IsNullOrEmpty(tempToPostCode))
                                {
                                    string[] toArr = General.GetPostCodeMatch(tempToPostCode).Split(new char[] { ' ' });
                                    startToPostCode = General.GetPostCodeMatch(tempToPostCode);
                                    toHalfPostCode = toArr[0];
                                    startToPostCode = General.CheckIfSpecialPostCode(startToPostCode);
                                    ToSingleHalfPostCode = toArr[0] + " " + toArr[1][0];
                                }
                            }
                            catch
                            {

                            }


                            decimal journeyMiles = General.CalculateDistance(from, to);

                            Fare_ChargesDetail objFixedFare = null;
                            Fare_ZoneWisePricing objPlot = null;
                            if (companyId > 0 && db.Fares.Count(c => (c.VehicleTypeId == vehicleTypeId && c.CompanyId == companyId && c.SubCompanyId == subCompanyId)) > 0)
                            {

                                objFixedFare = db.Fare_ChargesDetails.Where(c => c.Fare.VehicleTypeId == vehicleTypeId
                                              && c.Fare.CompanyId == companyId)
                                              .Where(c =>

                                             (

                                                            (
                                                            (c.FromAddress.ToLower().EndsWith(startFromPostCode.ToLower()) || c.FromAddress.ToLower().Equals(tempFromPostCode.ToLower()) || c.FromAddress.Equals(fromSingleHalfPostCode))

                                                                                                      && ((c.ToAddress.ToLower().EndsWith(startToPostCode.ToLower()) || c.ToAddress.ToLower().Equals(tempToPostCode.ToLower()) || c.ToAddress.Equals(ToSingleHalfPostCode) || c.ToAddress.Equals(toHalfPostCode)))

                                                            )

                                                ||


                                            ((c.ToAddress.ToLower().ToLower().EndsWith(startFromPostCode.ToLower()) || c.ToAddress.ToLower().Equals(tempFromPostCode) || c.ToAddress.Equals(fromSingleHalfPostCode) || c.ToAddress.Equals(fromHalfPostCode))
                                                                                      && ((c.FromAddress.ToLower().EndsWith(startToPostCode.ToLower()) || c.FromAddress.ToLower().Equals(tempToPostCode.ToLower()) || c.FromAddress.Equals(ToSingleHalfPostCode) || c.FromAddress.Equals(toHalfPostCode)))


                                                                                        )
                                       )


                             ).FirstOrDefault();



                                if (objFixedFare == null)
                                {
                                    objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == fromTempZoneId && c.ToZoneId == toTempZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);

                                    if (objPlot == null)
                                        objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == toTempZoneId && c.ToZoneId == fromTempZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);
                                }
                            }

                            if (objPlot == null)
                            {


                                if (startToPostCode.Length == 0 && ToSingleHalfPostCode.Length == 0 && toHalfPostCode.Length == 0)
                                {
                                    objFixedFare = db.Fare_ChargesDetails.Where(c => c.Fare.VehicleTypeId == vehicleTypeId
                                                   && c.Fare.CompanyId == null)
                                                   .Where(c =>

                                                  (

                                                                 (
                                                                 (c.FromAddress.ToLower().EndsWith(startFromPostCode.ToLower()) || c.FromAddress.ToLower().Equals(tempFromPostCode.ToLower()) || c.FromAddress.Equals(fromSingleHalfPostCode))

                                                                                                           && (c.ToAddress.ToLower().Equals(tempToPostCode.ToLower()))

                                                                 )

                                                     ||


                                                 ((c.ToAddress.ToLower().ToLower().EndsWith(startFromPostCode.ToLower()) || c.ToAddress.ToLower().Equals(tempFromPostCode) || c.ToAddress.Equals(fromSingleHalfPostCode) || c.ToAddress.Equals(fromHalfPostCode))
                                                                                           && ((c.FromAddress.ToLower().Equals(tempToPostCode.ToLower())))


                                                                                             )
                                            )


                                  ).FirstOrDefault();


                                }
                                else
                                {

                                    objFixedFare = db.Fare_ChargesDetails.Where(c => c.Fare.VehicleTypeId == vehicleTypeId
                                                      && c.Fare.CompanyId == null)
                                                      .Where(c =>

                                                     (

                                                                    (
                                                                    (c.FromAddress.ToLower().EndsWith(startFromPostCode.ToLower()) || c.FromAddress.ToLower().Equals(tempFromPostCode.ToLower()) || c.FromAddress.Equals(fromSingleHalfPostCode))

                                                                                                              && ((c.ToAddress.ToLower().EndsWith(startToPostCode.ToLower()) || c.ToAddress.ToLower().Equals(tempToPostCode.ToLower()) || c.ToAddress.Equals(ToSingleHalfPostCode) || c.ToAddress.Equals(toHalfPostCode)))

                                                                    )

                                                        ||


                                                    ((c.ToAddress.ToLower().ToLower().EndsWith(startFromPostCode.ToLower()) || c.ToAddress.ToLower().Equals(tempFromPostCode) || c.ToAddress.Equals(fromSingleHalfPostCode) || c.ToAddress.Equals(fromHalfPostCode))
                                                                                              && ((c.FromAddress.ToLower().EndsWith(startToPostCode.ToLower()) || c.FromAddress.ToLower().Equals(tempToPostCode.ToLower()) || c.FromAddress.Equals(ToSingleHalfPostCode) || c.FromAddress.Equals(toHalfPostCode)))


                                                                                                )
                                               )


                                     ).FirstOrDefault();

                                }


                                if (objFixedFare == null)
                                {
                                    objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == fromTempZoneId && c.ToZoneId == toTempZoneId)
                                                 && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);

                                    if (objPlot == null)
                                        objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == toTempZoneId && c.ToZoneId == fromTempZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);
                                }

                            }





                            decimal fixedFare = 0.00m;

                            if (objPlot != null)
                            {
                                // chargesList.Add(new ChargesList { driverPrice = objPlot.Price.ToDecimal(), IsFixedFare = true, accountPrice = objPlot.CompanyRate.ToDecimal(), pickup = from, destination = to, mileage = journeyMiles });
                                fixedFare = objPlot.Price.ToDecimal();
                            }
                            else if (objFixedFare != null)
                            {
                                //  chargesList.Add(new ChargesList { driverPrice = objFixedFare.Rate.ToDecimal(), IsFixedFare = true, accountPrice = objFixedFare.CompanyRate.ToDecimal(), pickup = from, destination = to, mileage = journeyMiles });

                                fixedFare = objFixedFare.Rate.ToDecimal();
                            }

                            decimal journeyMilage = journeyMiles;
                            if (AppVars.objPolicyConfiguration.DeadMileageType.ToInt() > 0)
                            {


                                decimal deadMileageX = AppVars.objPolicyConfiguration.DeadMileage.ToDecimal();
                                int DeadMileageType = AppVars.objPolicyConfiguration.DeadMileageType.ToInt();
                                string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();

                                decimal deadmileagepercent = 65m;
                                bool fromBoundary = false;
                                if (cls.SubCompanyId == AppVars.objSubCompany.Id)
                                {
                                    basePostCode = AppVars.objSubCompany.DefaultCounty.ToStr();
                                    DeadMileageType = AppVars.objSubCompany.DeadMileageType.ToInt();
                                    deadMileageX = AppVars.objSubCompany.DeadMileage.ToDecimal();
                                    deadmileagepercent = AppVars.objSubCompany.DeadMileagePercent.ToDecimal();
                                    fromBoundary = AppVars.objSubCompany.ApplyDeadMileageFromBoundary.ToBool();

                                }
                                else
                                {

                                    var objSub = db.Gen_SubCompanies.Where(c => c.Id == cls.SubCompanyId).Select(args => new { args.DeadMileage, args.DeadMileageType, args.DefaultCounty, args.DeadMileagePercent, args.ApplyDeadMileageFromBoundary }).FirstOrDefault();
                                    basePostCode = objSub.DefaultCounty.ToStr();
                                    DeadMileageType = objSub.DeadMileageType.ToInt();
                                    deadMileageX = objSub.DeadMileage.ToDecimal();
                                    deadmileagepercent = objSub.DeadMileagePercent.ToDecimal();
                                    fromBoundary = objSub.ApplyDeadMileageFromBoundary.ToBool();


                                }

                                //if (cls.SubCompanyId == AppVars.objSubCompany.Id)
                                //{
                                //    basePostCode = AppVars.objSubCompany.DefaultCounty.ToStr();
                                //    DeadMileageType = AppVars.objSubCompany.DeadMileageType.ToInt();
                                //    deadMileageX = AppVars.objSubCompany.DeadMileage.ToDecimal();

                                //}
                                //else
                                //{

                                //        var objSub = db.Gen_SubCompanies.Where(c => c.Id == cls.SubCompanyId).Select(args => new { args.DeadMileage, args.DeadMileageType, args.DefaultCounty }).FirstOrDefault();
                                //        basePostCode = objSub.DefaultCounty.ToStr();
                                //        DeadMileageType = objSub.DeadMileageType.ToInt();
                                //        deadMileageX = objSub.DeadMileage.ToDecimal();


                                //}


                                if (DeadMileageType > 0)
                                {
                                    decimal towntoPickup = General.CalculateDistance(basePostCode, from);
                                    decimal destToTown = 0.00m;


                                    if (DeadMileageType == 3)
                                        destToTown = deadMileageX + 1;
                                    else
                                        destToTown = (General.CalculateDistance(to, basePostCode));


                                    var viaList = listofvia;
                                    //journeyMilage =General.CalculateDistance(tempFromPostCode, tempToPostCode);






                                    if (deadMileageX == 0
                                      || (towntoPickup > deadMileageX
                                        && destToTown > deadMileageX)

                                        )
                                    {
                                        if (i == 0)
                                        {

                                            wholeJourneyMiles = CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode);
                                        }

                                        if (DeadMileageType == 1)    //METHOD 1
                                        {
                                            journeyMilage = (towntoPickup + journeyMilage + destToTown) / 2;
                                        }
                                        else if (DeadMileageType == 2)    //METHOD 2
                                        {
                                            journeyMilage = ((towntoPickup / 2) + journeyMilage + (destToTown / 2));
                                        }
                                        else if (DeadMileageType == 3)   //METHOD 3
                                        {
                                            journeyMilage = (towntoPickup + journeyMilage);
                                        }
                                        else if (DeadMileageType == 4)   //METHOD 4
                                        {
                                            journeyMilage = ((towntoPickup / 2) + journeyMilage);
                                        }
                                        else if (DeadMileageType == 5)   //METHOD 5
                                        {
                                            if (towntoPickup < destToTown)
                                            {

                                                if (fromBoundary)
                                                {
                                                    towntoPickup = towntoPickup - deadMileageX;

                                                    if (towntoPickup < 0)
                                                        towntoPickup = 0;
                                                }

                                                journeyMilage = (((towntoPickup * deadmileagepercent) / 100) + journeyMilage);



                                                if (i == 0)
                                                {
                                                    wholeJourneyMiles = (((towntoPickup * deadmileagepercent) / 100) + wholeJourneyMiles);




                                                }
                                            }
                                            else
                                            {
                                                if (fromBoundary)
                                                {
                                                    destToTown = destToTown - deadMileageX;

                                                    if (destToTown < 0)
                                                        destToTown = 0;
                                                }

                                                journeyMilage = (((destToTown * deadmileagepercent) / 100) + journeyMilage);




                                                if (i == 0)
                                                {
                                                    wholeJourneyMiles = (((destToTown * deadmileagepercent) / 100) + wholeJourneyMiles);



                                                }
                                            }



                                        }


                                        //fareCalculateBy = 3;
                                    }
                                    //else
                                    //    fareCalculateBy = 2;




                                    journeyMilage = Math.Round(journeyMilage, 1);
                                    wholeJourneyMiles = Math.Round(wholeJourneyMiles, 1);


                                }
                                else
                                {
                                    var viaList = listofvia;
                                    milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));
                                    //fareCalculateBy = 2;
                                }
                            }
                            else
                                journeyMilage = General.CalculateDistance(from, to);



                            Clsstp_CalculateGeneralFaresBySubCompany objFare = null;

                            decimal mileageFares = 0.00m;

                            int MVEhicle = vehicleTypeId.ToInt();

                            if (vehicleTypeId.ToInt() != AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt() && db.Fares.Where(c => c.VehicleTypeId == vehicleTypeId).Count() == 0)
                                MVEhicle = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();


                            try
                            {
                                objFare = db.ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5},{6}"
                                 , MVEhicle, companyId, journeyMilage, cls.pickupDateTime, subCompanyId, false, fromZoneId.ToInt().ToStr()).FirstOrDefault();
                            }
                            catch
                            {


                                objFare = db.ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5}"
                              , MVEhicle, companyId, journeyMilage, cls.pickupDateTime, subCompanyId, false).FirstOrDefault();


                            }




                            if (objFare != null)
                            {
                                var f = objFare;


                                if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    mileageFares = f.totalFares.ToDecimal();



                                    if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                    {


                                        if (mileageFares > 0)
                                        {


                                            mileageFares = Math.Ceiling(mileageFares);

                                        }



                                    }
                                    else
                                    {
                                        decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                                        if (roundUp > 0)
                                        {
                                            mileageFares = (decimal)Math.Ceiling(mileageFares / roundUp) * roundUp;

                                        }
                                    }
                                }

                            }

                            bool preferredMileagefare = AppVars.objPolicyConfiguration.PreferredMileageFares.ToBool();
                            if (preferredMileagefare && objPlot != null)
                            {
                                try
                                {

                                    if (fromZoneId > 0 && toZoneId > 0)
                                    {
                                        preferredMileagefare = db.Gen_Zones.Where(c => (c.Id == fromZoneId || c.Id == toZoneId)).Count(c => c.CappedFare != null && c.CappedFare == true) == 0;
                                    }
                                    else if (fromZoneId > 0 && toZoneId == 0)
                                    {
                                        preferredMileagefare = db.Gen_Zones.Where(c => (c.Id == fromZoneId)).Count(c => c.CappedFare != null && c.CappedFare == true) == 0;

                                    }
                                    else if (fromZoneId == 0 && toZoneId > 0)
                                    {
                                        preferredMileagefare = db.Gen_Zones.Where(c => (c.Id == toZoneId)).Count(c => c.CappedFare != null && c.CappedFare == true) == 0;

                                    }

                                }
                                catch
                                {

                                }

                            }


                            if (preferredMileagefare)
                            {
                                if (fixedFare == 0 || mileageFares > fixedFare)
                                {



                                    chargesList.Add(new ChargesList { driverPrice = mileageFares, IsFixedFare = false, accountPrice = mileageFares, pickup = from, destination = to, mileage = journeyMilage });

                                }
                                else
                                {
                                    chargesList.Add(new ChargesList { driverPrice = fixedFare, IsFixedFare = true, accountPrice = fixedFare, pickup = from, destination = to, mileage = journeyMilage });

                                }

                            }
                            else
                            {


                                if (fixedFare == 0)
                                {
                                    chargesList.Add(new ChargesList { driverPrice = mileageFares, IsFixedFare = false, accountPrice = mileageFares, pickup = from, destination = to, mileage = journeyMilage });

                                }
                                else
                                {
                                    chargesList.Add(new ChargesList { driverPrice = fixedFare, IsFixedFare = true, accountPrice = fixedFare, pickup = from, destination = to, mileage = journeyMilage });

                                }


                            }











                        }

                    }


                    tempToPostCode = cls.tempToPostCode;

                }
            }




            //if (hasVia && viaPointExtrasFormula)
            //{
            //    //  listofvia = newViaList.ToArray<string>();
            //    listofvia = cls.ViaLocations.Select(c => c.ViaLocValue).ToArray<string>();

            //    if (cls.ViaLocations != null && cls.ViaLocations.Count() == 0)
            //        hasVia = false;
            //    else
            //    {
            //        using (TaxiDataContext db = new TaxiDataContext())
            //        {


            //            // a to b to c

            //            string from = tempFromPostCode.ToStr(); // a
            //            string to = tempToPostCode.ToStr(); // c


            //            int totalvia = cls.ViaLocations.Count();
            //            int? fromTempZoneId = 0, toTempZoneId = 0;


            //            fromTempZoneId = fromZoneId;
            //            toTempZoneId = toZoneId;

            //            decimal journeyMiles = 0.00m;


            //            Fare_ZoneWisePricing objPlot = null;
            //            if (companyId > 0 && db.Fares.Count(c => (c.VehicleTypeId == vehicleTypeId && c.CompanyId == companyId && c.SubCompanyId == subCompanyId)) > 0)
            //            {

            //                objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == fromTempZoneId && c.ToZoneId == toTempZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);

            //                if (objPlot == null)
            //                    objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == toTempZoneId && c.ToZoneId == fromTempZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);

            //            }

            //            if (objPlot == null)
            //            {
            //                objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == fromTempZoneId && c.ToZoneId == toTempZoneId)
            //                         && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);

            //                if (objPlot == null)
            //                    objPlot = db.Fare_ZoneWisePricings.FirstOrDefault(c => (c.FromZoneId == toTempZoneId && c.ToZoneId == fromTempZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);
            //            }

            //            if (objPlot != null)
            //            {
            //                journeyMiles = General.CalculateDistance(from, to);
            //                chargesList.Add(new ChargesList { driverPrice = objPlot.Price.ToDecimal(), IsFixedFare = true, accountPrice = objPlot.CompanyRate.ToDecimal(), pickup = from, destination = to, mileage = journeyMiles });


            //            }
            //            else
            //            {

            //                decimal accPrice = 0.00m;


            //                int checkVehicleTypeId = vehicleTypeId.ToInt();
            //                if (checkVehicleTypeId != AppVars.objPolicyConfiguration.DefaultVehicleTypeId)
            //                {
            //                    if (db.Fares.Count(c => c.VehicleTypeId == vehicleTypeId && c.SubCompanyId == cls.SubCompanyId) == 0)
            //                    {
            //                        checkVehicleTypeId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();

            //                    }
            //                }

            //                decimal fare = General.GetFixFareRateOnly(companyId, checkVehicleTypeId, cls.fromLocationId.ToInt(), cls.toLocationId.ToInt(), from, to, cls.pickupDateTime, cls.fromLocTypeId.ToInt(), cls.toLocTypeId.ToInt(), cls.SubCompanyId, ref accPrice);

            //                if (fare > 0)
            //                {
            //                    journeyMiles = General.CalculateDistance(from, to);

            //                    chargesList.Add(new ChargesList { driverPrice = fare, IsFixedFare = true, accountPrice = accPrice, pickup = from, destination = to, mileage = journeyMiles });


            //                }
            //            }

            //        }
            //    }
            //}



            bool excludeStartRate = false;
            decimal viaMiles = 0.00m;
            decimal overallMiles = 0.00m;




            decimal congestion = 0.00m;
            using (TaxiDataContext db = new TaxiDataContext())
            {
                foreach (var item in db.Gen_SysPolicy_CongestionCharges)
                {

                    if (item.ZoneId == cls.fromZoneId || item.ZoneId == cls.toZoneId
                        || (viaPlots.Length > 0 && viaPlots.Contains(item.ZoneId.ToStr() + ","))
                        )
                    {

                        DateTime? fromtime = item.FromDateTime;

                        DateTime? tilltime = item.TillDateTime;
                        if (item.IsDayWise.ToBool())
                        {

                            string fromday = item.FromDay.ToStr();

                            string toDay = item.TillDay.ToStr();




                            int day = cls.pickupDateTime.Value.DayOfWeek.ToInt();

                            if (day == 0)
                                day = 7;

                            int fromDayId = GetDayId(fromday);

                            int toDayId = GetDayId(toDay);


                            if ((day >= fromDayId && day <= toDayId)
                                &&
                                   (cls.pickupDateTime.Value.TimeOfDay >= fromtime.ToDateTime().TimeOfDay && (cls.pickupDateTime.Value.TimeOfDay <= tilltime.ToDateTime().TimeOfDay))
                                )
                            {
                                congestion += item.Amount.ToDecimal();

                                break;
                            }

                        }
                        else
                        {
                            fromtime = cls.pickupDateTime.ToDate() + item.FromDateTime.Value.TimeOfDay;
                            tilltime = cls.pickupDateTime.ToDate() + item.TillDateTime.Value.TimeOfDay;
                            if (cls.pickupDateTime.Value >= fromtime && cls.pickupDateTime.Value <= tilltime)
                            {
                                congestion += item.Amount.ToDecimal();
                                break;
                            }
                        }
                    }
                }




                cls.Congestion = congestion;




                try
                {
                    if (objMaster.PrimaryKeyValue == null)
                        cls.peakFactorX = db.ExecuteQuery<decimal>("select SurgeValue from gen_surgepricing where enablesurge=1 and surgetext='ASAP' and excludedplots not like '%," + cls.fromZoneId + ",%'").FirstOrDefault().DefaultIfEmpty();
                    else
                    {
                        if (chkSurge.Tag.ToDecimal() > 0)
                            cls.peakFactorX = chkSurge.Tag.ToDecimal();

                    }

                }
                catch (Exception ex)
                {

                }


            }

            if (cls.JourneyTypeId.ToInt() != Enums.JOURNEY_TYPES.WAITANDRETURN)
                cls.ExtraViaCharges = listofvia != null ? listofvia.Count() * AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal() : 0.00m;


            if (AppVars.viaPointExtrasFormula.ToBool() && chargesList.Count > 0 && listofvia != null && listofvia.Count() > 0 && chargesList.Count(c => c.IsFixedFare == true) > 0)
            {


                try
                {
                    var minCharges = chargesList.OrderByDescending(c => c.driverPrice).FirstOrDefault();

                    cls.ExtraViaCharges += minCharges.driverPrice.ToDecimal();
                    milesList.Clear();

                    if (wholeJourneyMiles == 0)
                        milesList.Add(General.CalculateDistanceByIncludingVia(tempFromPostCode, tempToPostCode, listofvia));
                    else
                        milesList.Add(wholeJourneyMiles);






                    overallMiles = milesList.Sum(c => c).ToDecimal();
                    viaMiles = milesList.Sum();


                    if (viaMiles - minCharges.mileage > 0)
                    {
                        excludeStartRate = true;
                        viaMiles = viaMiles - minCharges.mileage.ToDecimal();
                        //overallMiles = viaMiles;

                        milesList.Clear();
                        milesList.Add(viaMiles);

                    }
                    else
                    {

                        excludeStartRate = true;
                        viaMiles = 0;
                        milesList.Clear();
                        milesList.Add(0);

                    }

                    listofvia = null;


                    hasVia = false;
                    cls.hasVia = false;

                    cls.ViaLocations = null;
                    IsZoneWise = excludeStartRate;
                }
                catch
                {


                }

            }

            #endregion


            if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
            {




                List<ClsViaLocations> viaLocs = cls.ViaLocations;






                if (viaLocs != null && viaLocs.Count() > 0)
                {

                    for (int i = 0; i < viaLocs.Count(); i++)
                    {
                        var item = viaLocs[i];

                        if (item.OrderNo == 2)
                        {
                            tempFromLocId = fromLocationId.ToInt();
                            if (tempFromLocId != 0)
                            {
                                tempFromPostCode = fromLocName;
                            }
                            else
                                tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                        }
                        else
                        {
                            tempFromLocId = viaLocs[i - 1].LocId.ToInt();
                            tempFromPostCode = viaLocs[i - 1].ViaLocValue;

                        }

                        tempToLocId = item.LocId.ToInt();
                        tempToPostCode = item.ViaLocValue;

                        estimatedTime = " ";

                        fareVal += General.GetFareRate(subCompanyId, companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime);

                        if (errorMsg == "Error")
                            break;

                    }
                }





                if (viaLocs != null && viaLocs.Count() > 0)
                {

                    if (tempToLocId == 0 && string.IsNullOrEmpty(tempToPostCode))
                    {
                        tempFromLocId = fromLocationId.ToInt();
                        if (tempFromLocId != 0)
                        {
                            tempFromPostCode = fromLocName;
                        }
                        else
                            tempFromPostCode = fromAddress != string.Empty ? fromAddress : fromPostCode;

                    }
                    else
                    {
                        tempFromLocId = tempToLocId;
                        tempFromPostCode = tempToPostCode;

                    }

                    tempToLocId = toLocationId.ToInt();
                    if (tempToLocId != 0)
                        tempToPostCode = toLocName;
                    else
                        tempToPostCode = toAddress != string.Empty ? toAddress : toPostCode;
                }



                fareVal += General.GetFareRate(subCompanyId, companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, false, excludeStartRate, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, ref companyPrice, fromZoneId, toZoneId, ref agentComm, ref agentcharge);




                returnFares = fareVal;
                if (excludeStartRate)
                {
                    milesList.Clear();
                    milesList.Add(overallMiles);

                    if (AppVars.objPolicyConfiguration.EnableZoneWiseFares.ToBool() == false)
                    {

                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            if (db.Gen_SysPolicy_FaresSettings.Where(c => c.SysPolicyId != null && c.VehicleTypeId == vehicleTypeId && (c.Amount > 0 || c.Percentage > 0)).Count() > 0)
                            {
                                IsMoreFareWise = true;


                            }
                        }
                    }

                }

                if (fareCalculateBy == 1 || fareCalculateBy == 4 || excludeStartRate || errorMsg.ToStr().Trim().ToLower() == "fixed")
                {
                    surchargeRateFrom = 0;

                    if (errorMsg.ToStr().Trim().ToLower() == "fixed")
                        surchargeRateTo = 0;
                }

                if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == false)
                {

                    decimal totalSurchargePercentage = surchargeRateFrom + surchargeRateTo;

                    decimal fareSurchargePercent = (fareVal * totalSurchargePercentage) / 100;
                    //fareVal = fareVal + fareSurchargePercent;

                    cls.TotalSurcharge = fareSurchargePercent;
                    cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                    cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;


                    fareSurchargePercent = (returnFares * totalSurchargePercentage) / 100;

                    fareVal = fareVal + cls.TotalSurcharge;
                    returnFares = returnFares + cls.TotalSurcharge;

                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                    if (roundUp > 0)
                    {
                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                        if (returnFares > 0)
                        {
                            returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                        }
                    }

                }
                else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == true)
                {

                    // fareVal = fareVal + surchargeRateFrom + surchargeRateTo;
                    // returnFares = returnFares + surchargeRateFrom + surchargeRateTo;

                    cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;
                    cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                    cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;

                    fareVal = fareVal + cls.TotalSurcharge;
                    returnFares = returnFares + cls.TotalSurcharge;

                }
                else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == false)
                {
                    surchargeRateTo = (fareVal * surchargeRateTo) / 100;
                    // fareVal = fareVal + surchargeRateFrom + surchargeRateTo;

                    cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;

                    surchargeRateTo = (returnFares * surchargeRateTo) / 100;
                    // returnFares = returnFares + surchargeRateFrom + surchargeRateTo;
                    cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                    cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;

                    fareVal = fareVal + cls.TotalSurcharge;
                    returnFares = returnFares + cls.TotalSurcharge;


                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                    if (roundUp > 0)
                    {
                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                        if (returnFares > 0)
                        {
                            returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                        }
                    }
                }
                else if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == true)
                {
                    surchargeRateFrom = (fareVal * surchargeRateFrom) / 100;

                    cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;

                    surchargeRateFrom = (returnFares * surchargeRateFrom) / 100;
                    cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                    cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;

                    fareVal = fareVal + cls.TotalSurcharge;
                    returnFares = returnFares + cls.TotalSurcharge;

                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                    if (roundUp > 0)
                    {
                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                        if (returnFares > 0)
                        {
                            returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                        }
                    }
                }



                if (errorMsg.ToStr().Trim().ToLower() == "fixed")
                    fareCalculateBy = 4;
                else
                    fareCalculateBy = 0;


                if (estimatedTime.ToStr().Trim().Length > 0 && estimatedTime.IsNumeric())
                {
                    estimatedTime += " mins";
                }







            }
            else
            {



                if (AppVars.objPolicyConfiguration.ZoneWiseFareType.ToInt() == 4)
                {
                    int defaultVehicleTypeId = AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt();
                    if (vehicleTypeId.ToInt() != AppVars.objPolicyConfiguration.DefaultVehicleTypeId.ToInt())
                    {
                        IsMoreFareWise = true;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            if (db.Fares.Count(c => c.VehicleTypeId == vehicleTypeId && c.SubCompanyId == subCompanyId) == 0)
                            {
                                vehicleTypeId = defaultVehicleTypeId;
                            }
                            else
                            {
                                if (db.Gen_SysPolicy_FaresSettings.Where(c => c.SysPolicyId != null && c.VehicleTypeId == vehicleTypeId && (c.Amount > 0 || c.Percentage > 0)).Count() == 0)
                                {
                                    IsMoreFareWise = false;


                                }

                            }
                        }


                    }


                    fareCalculateBy = 0;






                    //bool surchargeRateFromAmountWise = false;
                    //bool surchargeRateToAmountWise = false;

                    //decimal surchargeRateFrom = 0.00m;
                    //decimal surchargeRateTo = 0.00m;

                    //if ((fromZoneId.ToInt() > 0) && (fromLocTypeId != Enums.LOCATION_TYPES.TOWN))
                    //{
                    //    tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                    //    surchargeRateFrom = General.GetSurchargeRate(tempFromPostCode, fromZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateFromAmountWise);
                    //}

                    //if ((toZoneId.ToInt() > 0) && (toLocTypeId != Enums.LOCATION_TYPES.TOWN))
                    //{
                    //    tempToPostCode = General.GetPostCodeMatch(tempToPostCode);
                    //    surchargeRateTo = General.GetSurchargeRate(tempToPostCode, toZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateToAmountWise);


                    //    if (fromZoneId == toZoneId)
                    //    {
                    //        surchargeRateTo = 0;

                    //    }
                    //}
                    ////
                    //bool surchargeRateFromAmountWise = false;
                    //bool surchargeRateToAmountWise = false;

                    //decimal surchargeRateFrom = 0.00m;
                    //decimal surchargeRateFromParking = 0.00m;
                    //decimal surchargeRateFromExtra = 0.00m;

                    //decimal surchargeRateTo = 0.00m;
                    //decimal surchargeRateToParking = 0.00m;
                    //decimal surchargeRateToExtra = 0.00m;

                    //if ((fromZoneId.ToInt() > 0) && (fromLocTypeId != Enums.LOCATION_TYPES.TOWN))
                    //{
                    //    //tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                    //    surchargeRateFrom = General.GetSurchargeRate(tempFromPostCode, fromZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateFromAmountWise, ref surchargeRateFromParking, ref surchargeRateFromExtra);

                    //}

                    //if ((toZoneId.ToInt() > 0) && (toLocTypeId != Enums.LOCATION_TYPES.TOWN))
                    //{



                    //   // tempToPostCode = General.GetPostCodeMatch(tempToPostCode);
                    //    surchargeRateTo = General.GetSurchargeRate(tempToPostCode, toZoneId, cls.pickupDateTime.ToDateTime(), ref surchargeRateToAmountWise, ref surchargeRateToParking, ref surchargeRateToExtra);


                    //    if (fromZoneId == toZoneId)
                    //    {
                    //        surchargeRateTo = 0;

                    //    }

                    //}
                    if (hasVia
                   && AppVars.listUserRights.Count(c => c.functionId == "DISABLE VIA FARES") > 0
                   && new TaxiDataContext().Fare_OtherCharges.Count(c => c.Fare.VehicleTypeId == vehicleTypeId) == 0)
                    {
                        hasVia = false;

                    }

                    if (excludeStartRate == false)
                        milesList.Clear();

                    if (hasVia == false && ((fromZoneId != 0 && toZoneId != 0) || excludeStartRate))
                    {

                        Fare_ZoneWisePricing objPlotFare = null;
                        if (excludeStartRate == false)
                        {
                            if (companyId > 0 && General.GetObject<Fare>(c => (c.VehicleTypeId == vehicleTypeId && c.CompanyId == companyId && c.SubCompanyId == subCompanyId)) != null)
                            {

                                objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);

                                if (objPlotFare == null)
                                    objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);



                                if (objPlotFare != null)
                                {
                                    fareVal = objPlotFare.Price.ToDecimal();


                                    var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);
                                    if (objPlotFare2 == null)
                                    {

                                        returnFares = fareVal;
                                    }
                                    else
                                        returnFares = objPlotFare2.Price.ToDecimal();
                                }
                                else if (IsMoreFareWise && fareVal == 0)
                                {
                                    objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);

                                    if (objPlotFare == null)
                                        objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);



                                    if (objPlotFare != null)
                                    {
                                        fareVal = objPlotFare.Price.ToDecimal();


                                        var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.CompanyId == companyId && c.Fare.SubCompanyId == subCompanyId);
                                        if (objPlotFare2 == null)
                                        {

                                            returnFares = fareVal;
                                        }
                                        else
                                            returnFares = objPlotFare2.Price.ToDecimal();
                                    }
                                    else
                                    {

                                        objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.CompanyId == null && c.Fare.SubCompanyId == subCompanyId);

                                        if (objPlotFare == null)
                                            objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.CompanyId == null && c.Fare.SubCompanyId == subCompanyId);



                                        if (objPlotFare != null)
                                        {
                                            fareVal = objPlotFare.Price.ToDecimal();


                                            var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.CompanyId == null && c.Fare.SubCompanyId == subCompanyId);
                                            if (objPlotFare2 == null)
                                            {

                                                returnFares = fareVal;
                                            }
                                            else
                                                returnFares = objPlotFare2.Price.ToDecimal();
                                        }

                                    }
                                }
                                else
                                {
                                    objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);

                                    if (objPlotFare == null)
                                        objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);


                                    if (objPlotFare != null)
                                    {
                                        fareVal = objPlotFare.Price.ToDecimal();


                                        var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);
                                        if (objPlotFare2 == null)
                                        {

                                            returnFares = fareVal;
                                        }
                                        else
                                            returnFares = objPlotFare2.Price.ToDecimal();
                                    }


                                }



                            }
                            else
                            {

                                objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);

                                if (objPlotFare == null)
                                    objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);


                                if (objPlotFare != null)
                                {
                                    fareVal = objPlotFare.Price.ToDecimal();


                                    var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);
                                    if (objPlotFare2 == null)
                                    {

                                        returnFares = fareVal;
                                    }
                                    else
                                        returnFares = objPlotFare2.Price.ToDecimal();
                                }
                                else if (IsMoreFareWise && fareVal == 0)
                                {


                                    objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == fromZoneId && c.ToZoneId == toZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);

                                    if (objPlotFare == null)
                                        objPlotFare = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);


                                    if (objPlotFare != null)
                                    {
                                        fareVal = objPlotFare.Price.ToDecimal();


                                        var objPlotFare2 = General.GetObject<Fare_ZoneWisePricing>(c => (c.FromZoneId == toZoneId && c.ToZoneId == fromZoneId) && c.Fare.VehicleTypeId == defaultVehicleTypeId && c.Fare.SubCompanyId == subCompanyId && c.Fare.CompanyId == null);
                                        if (objPlotFare2 == null)
                                        {

                                            returnFares = fareVal;
                                        }
                                        else
                                            returnFares = objPlotFare2.Price.ToDecimal();
                                    }
                                }

                            }

                        }


                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        //TEMPORARY REMOVED=> PUT IT BACK ,  JUST COMMENT THESE LINES BECAUSE OF MOUNT CARS
                        //if (AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal() > 0)
                        //{
                        //    tempFromPostCode = fromAddress.ToStr().ToUpper();
                        //    tempToPostCode = toAddress.ToStr().ToUpper();
                        //}
                        //else
                        //{

                        if (tempFromPostCode.ToStr().Length == 0 || tempFromPostCode.ToStr().Contains(" ") == false)
                        {

                            tempFromPostCode = fromAddress.ToStr().ToUpper();
                        }

                        if (tempToPostCode.ToStr().Length == 0 || tempToPostCode.ToStr().Contains(" ") == false)
                        {

                            tempToPostCode = toAddress.ToStr().ToUpper();
                        }


                        //  }


                        decimal journeyMilage = 0.00m;

                        if (AppVars.objPolicyConfiguration.DeadMileageType.ToInt() == 0
                            &&
                                (lastOrigin.Length > 0 && lastDestination.Length > 0
                                      && tempFromPostCode == lastOrigin && tempToPostCode == lastDestination)
                                      && lastMileage > 0 && lastJourneyMileage > 0)
                        {

                            //
                            journeyMilage = lastMileage;
                            milesList.Add(lastJourneyMileage);
                        }
                        else
                        {






                            if (AppVars.objPolicyConfiguration.DeadMileageType.ToInt() > 0 && excludeStartRate == false)
                            {

                                decimal deadMileageX = AppVars.objPolicyConfiguration.DeadMileage.ToDecimal();
                                int DeadMileageType = AppVars.objPolicyConfiguration.DeadMileageType.ToInt();
                                string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();
                                decimal deadmileagepercent = 65m;
                                bool fromBoundary = false;
                                if (cls.SubCompanyId == AppVars.objSubCompany.Id)
                                {
                                    basePostCode = AppVars.objSubCompany.DefaultCounty.ToStr();
                                    DeadMileageType = AppVars.objSubCompany.DeadMileageType.ToInt();
                                    deadMileageX = AppVars.objSubCompany.DeadMileage.ToDecimal();
                                    deadmileagepercent = AppVars.objSubCompany.DeadMileagePercent.ToDecimal();
                                    fromBoundary = AppVars.objSubCompany.ApplyDeadMileageFromBoundary.ToBool();
                                }
                                else
                                {
                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        var objSub = db.Gen_SubCompanies.Where(c => c.Id == cls.SubCompanyId).Select(args => new { args.DeadMileage, args.DeadMileageType, args.DefaultCounty, args.DeadMileagePercent, args.ApplyDeadMileageFromBoundary }).FirstOrDefault();
                                        basePostCode = objSub.DefaultCounty.ToStr();
                                        DeadMileageType = objSub.DeadMileageType.ToInt();
                                        deadMileageX = objSub.DeadMileage.ToDecimal();
                                        deadmileagepercent = objSub.DeadMileagePercent.ToDecimal();


                                        fromBoundary = objSub.ApplyDeadMileageFromBoundary.ToBool();
                                    }
                                }

                                if (DeadMileageType > 0)
                                {
                                    decimal towntoPickup = General.CalculateDistance(basePostCode, tempFromPostCode);
                                    decimal destToTown = 0.00m;


                                    if (DeadMileageType == 3)
                                        destToTown = deadMileageX + 1;
                                    else
                                        destToTown = (General.CalculateDistance(tempToPostCode, basePostCode));

                                    if (excludeStartRate)
                                    {
                                        journeyMilage = overallMiles;
                                    }
                                    else
                                    {

                                        //needtofix=> if via then total journey miles should include via
                                        // journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);
                                        if (cls.hasVia && cls.viaList != null && cls.viaList.Count() > 0)
                                        {
                                            journeyMilage = General.CalculateDistanceByIncludingVia(tempFromPostCode, tempToPostCode, cls.viaList);
                                        }
                                        else
                                            journeyMilage = General.CalculateDistance(tempFromPostCode, tempToPostCode);
                                    }



                                    if (deadMileageX == 0
                                      || (towntoPickup > deadMileageX
                                        && destToTown > deadMileageX)

                                        )
                                    {
                                        //
                                        if (DeadMileageType == 1)    //METHOD 1
                                        {
                                            journeyMilage = (towntoPickup + journeyMilage + destToTown) / 2;
                                        }
                                        else if (DeadMileageType == 2)    //METHOD 2
                                        {
                                            journeyMilage = ((towntoPickup / 2) + journeyMilage + (destToTown / 2));
                                        }
                                        else if (DeadMileageType == 3)   //METHOD 3
                                        {
                                            journeyMilage = (towntoPickup + journeyMilage);
                                        }
                                        else if (DeadMileageType == 4)   //METHOD 4
                                        {
                                            journeyMilage = ((towntoPickup / 2) + journeyMilage);
                                        }
                                        else if (DeadMileageType == 5)   //METHOD 5
                                        {



                                            if (towntoPickup < destToTown)
                                            {
                                                if (fromBoundary)
                                                {
                                                    towntoPickup = towntoPickup - deadMileageX;

                                                    if (towntoPickup < 0)
                                                        towntoPickup = 0;
                                                }

                                                journeyMilage = (((towntoPickup * deadmileagepercent) / 100) + journeyMilage);



                                            }
                                            else
                                            {

                                                if (fromBoundary)
                                                {
                                                    destToTown = destToTown - deadMileageX;

                                                    if (destToTown < 0)
                                                        destToTown = 0;
                                                }

                                                journeyMilage = (((destToTown * deadmileagepercent) / 100) + journeyMilage);

                                            }



                                        }


                                        fareCalculateBy = 3;
                                    }
                                    else
                                        fareCalculateBy = 2;


                                    journeyMilage = Math.Round(journeyMilage, 1);
                                    milesList.Add(journeyMilage);

                                }
                                else
                                {

                                    milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                                    fareCalculateBy = 1;
                                }
                            }
                            else
                            {

                                if (excludeStartRate)
                                {
                                    milesList.Clear();
                                    milesList.Add(overallMiles);

                                }
                                else
                                {

                                    milesList.Add(General.CalculateDistance(tempFromPostCode, tempToPostCode));
                                }
                                fareCalculateBy = 1;
                            }



                            lastOrigin = tempFromPostCode;
                            lastDestination = tempToPostCode;
                            lastMileage = journeyMilage;
                            lastJourneyMileage = milesList.Sum();
                        }


                        if (objPlotFare == null && excludeStartRate == false)
                        {

                            // decimal accPrice = 0.00m;

                            fareVal = General.GetFixFareRate(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, fromAddress, toAddress, ref errorMsg, ref milesList, true, IsZoneWise, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist
                                , ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, ref fareCalculateBy, subCompanyId, ref companyPrice);
                            returnFares = fareVal;



                        }


                        decimal totalMiles = milesList.Sum();

                        if (AppVars.objPolicyConfiguration.RoundJourneyMiles.ToDecimal() > 0)
                        {

                            totalMiles = Math.Ceiling(totalMiles / AppVars.objPolicyConfiguration.RoundJourneyMiles.ToDecimal()) * AppVars.objPolicyConfiguration.RoundJourneyMiles.ToDecimal();

                        }


                        if (excludeStartRate)
                        {
                            totalMiles = viaMiles;



                        }


                        if (cls.manualMiles > 0)
                            totalMiles = cls.manualMiles;

                        decimal mileageFares = 0.00m;

                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            if (IsMoreFareWise && fareVal > 0 && fareCalculateBy != 4 && (objPlotFare == null || objPlotFare.Fare.VehicleTypeId == cls.vehicleTypeId))
                                IsMoreFareWise = false;
                            else if (IsMoreFareWise && fareVal == 0)
                            {



                                if (vehicleTypeId != defaultVehicleTypeId)
                                {
                                    if (db.Fare_OtherCharges.Where(c => c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == cls.SubCompanyId).Count() == 0)
                                        vehicleTypeId = defaultVehicleTypeId;
                                    else
                                        IsMoreFareWise = false;
                                }
                                if (cls.returnpickupdateTime != null && cls.returnVehicleTypeId.ToInt() > 0 && cls.returnVehicleTypeId.ToInt() != defaultVehicleTypeId)
                                {
                                    if (db.Fare_OtherCharges.Where(c => c.Fare.VehicleTypeId == cls.returnVehicleTypeId && c.Fare.SubCompanyId == cls.SubCompanyId).Count() == 0)
                                        cls.returnVehicleTypeId = defaultVehicleTypeId;
                                    else
                                        IsMoreFareWise = false;
                                }

                            }




                            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool())
                            {
                                //var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, cls.SubCompanyId);

                                //if (objFare != null)
                                //{
                                Clsstp_CalculateGeneralFaresBySubCompany objFare = null;
                                //    if(Debugger.IsAttached)




                                try
                                {
                                    objFare = db.ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5},{6}"
                                     , vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, subCompanyId, excludeStartRate, fromZoneId.ToInt().ToStr()).FirstOrDefault();
                                }
                                catch
                                {
                                    objFare = db.ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5}"
                                  , vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, subCompanyId, excludeStartRate).FirstOrDefault();


                                }
                                //                     else
                                //                     {
                                //                         objFare = new TaxiDataContext().ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5},{6}"
                                //, vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, subCompanyId, excludeStartRate).FirstOrDefault();

                                //                     }




                                if (objFare != null)
                                {
                                    var f = objFare;



                                    //    var f = objFare.FirstOrDefault();

                                    if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                    {
                                        mileageFares = f.totalFares.ToDecimal();
                                    }
                                    else
                                        errorMsg = "Error";
                                }
                                else
                                    errorMsg = "Error";


                                decimal retMileageFare = 0.00m;
                                if (cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN && cls.returnpickupdateTime != null)
                                {

                                    if (cls.returnVehicleTypeId != null && cls.returnVehicleTypeId.ToInt() > 0 && cls.returnVehicleTypeId != vehicleTypeId && cls.returnVehicleTypeId != defaultVehicleTypeId && cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN && cls.returnpickupdateTime != null && General.GetQueryable<Fare>(c => c.VehicleTypeId == cls.returnVehicleTypeId).Count() == 0)
                                    {
                                        cls.returnVehicleTypeId = vehicleTypeId;
                                    }
                                    if (cls.returnVehicleTypeId.ToInt() == 0)
                                        cls.returnVehicleTypeId = vehicleTypeId;


                                    try
                                    {
                                        objFare = db.ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5},{6}"
                                   , cls.returnVehicleTypeId, companyId, totalMiles, cls.returnpickupdateTime, subCompanyId, excludeStartRate, toZoneId.ToInt()).FirstOrDefault();
                                    }
                                    catch
                                    {

                                        objFare = db.ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5}"
                                , cls.returnVehicleTypeId, companyId, totalMiles, cls.returnpickupdateTime, subCompanyId, excludeStartRate).FirstOrDefault();

                                    }
                                    //      objFare = new TaxiDataContext().ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5}"
                                    //, vehicleTypeId, companyId, totalMiles, cls.returnpickupdateTime, subCompanyId, excludeStartRate).FirstOrDefault();

                                    if (objFare != null)
                                    {
                                        var f = objFare;

                                        //objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(cls.returnVehicleTypeId.ToInt(), companyId, totalMiles, cls.returnpickupdateTime, cls.SubCompanyId);

                                        //if (objFare != null)
                                        //{
                                        //    var f = objFare.FirstOrDefault();

                                        if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                        {
                                            retMileageFare = f.totalFares.ToDecimal();

                                            if (objPlotFare == null && returnFares == 0)
                                                returnFares = retMileageFare;

                                        }
                                        else
                                            errorMsg = "Error";
                                    }
                                    else
                                        errorMsg = "Error";


                                }
                            }
                            else
                            {
                                var objFare = db.stp_CalculateGeneralFares(vehicleTypeId, companyId, totalMiles, DateTime.Now);



                                if (objFare != null)
                                {
                                    var f = objFare.FirstOrDefault();

                                    if ((f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                    {
                                        mileageFares = f.totalFares.ToDecimal();
                                    }
                                    else
                                        errorMsg = "Error";
                                }
                                else
                                    errorMsg = "Error";


                            }

                            //  AppVars.objPolicyConfiguration.

                        }
                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {

                            //decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                            //if (startRateTillMiles > 0 && totalMiles > startRateTillMiles)
                            //{
                            if (totalMiles > 0)
                            {

                                //  rtnFare = Math.Ceiling((rtnFare);
                                mileageFares = Math.Ceiling(mileageFares);
                                if (fareVal == 0)
                                {
                                    returnFares = Math.Ceiling(returnFares);
                                }
                            }



                        }
                        else
                        {
                            decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                            if (roundUp > 0)
                            {
                                mileageFares = (decimal)Math.Ceiling(mileageFares / roundUp) * roundUp;
                                if (fareVal == 0)
                                {
                                    returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                                }
                            }
                        }

                        bool preferredMileagefare = AppVars.objPolicyConfiguration.PreferredMileageFares.ToBool();
                        if (preferredMileagefare && objPlotFare != null)
                        {
                            try
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    if (fromZoneId > 0 && toZoneId > 0)
                                    {
                                        preferredMileagefare = db.Gen_Zones.Where(c => (c.Id == fromZoneId || c.Id == toZoneId)).Count(c => c.CappedFare != null && c.CappedFare == true) == 0;
                                    }
                                    else if (fromZoneId > 0 && toZoneId == 0)
                                    {
                                        preferredMileagefare = db.Gen_Zones.Where(c => (c.Id == fromZoneId)).Count(c => c.CappedFare != null && c.CappedFare == true) == 0;

                                    }
                                    else if (fromZoneId == 0 && toZoneId > 0)
                                    {
                                        preferredMileagefare = db.Gen_Zones.Where(c => (c.Id == toZoneId)).Count(c => c.CappedFare != null && c.CappedFare == true) == 0;

                                    }



                                }
                            }
                            catch
                            {

                            }

                        }


                        if (preferredMileagefare)
                        {
                            if (fareVal == 0 || mileageFares > fareVal)
                            {

                                if (fareCalculateBy == 3)
                                    fareCalculateBy = 3;
                                else
                                    fareCalculateBy = 2;


                                fareVal = mileageFares;
                                returnFares = fareVal;
                            }
                            else
                            {
                                if (fareCalculateBy != 4)
                                    fareCalculateBy = 1;
                            }

                        }
                        else
                        {


                            if (fareVal == 0)
                            {
                                fareVal = mileageFares;
                                if (returnFares == 0)
                                    returnFares = fareVal;

                                if (fareCalculateBy != 3)
                                    fareCalculateBy = 2;
                            }
                            else
                            {
                                if (fareCalculateBy != 4)
                                    fareCalculateBy = 1;
                            }


                        }


                    }
                    else if (hasVia == false)
                    {

                        if (tempToPostCode.ToStr() == "AS DIRECTED")
                        {
                            fareVal = 0.00m;
                            returnFares = 0.00m;
                        }
                        else
                        {
                            if (excludeStartRate == false)
                            {
                                if (cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN)
                                {
                                    fareVal = General.GetSimpleFareRateWithRoundTrip(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, excludeStartRate, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, ref fareCalculateBy, subCompanyId, cls.returnpickupdateTime, cls.returnVehicleTypeId.ToInt(), ref returnFares, ref companyPrice, cls.manualMiles);

                                    if (returnFares == 0)
                                        returnFares = fareVal;
                                }
                                else
                                {
                                    fareVal = General.GetSimpleFareRateWithRoundTrip(companyId, vehicleTypeId.ToInt(), tempFromLocId, tempToLocId, tempFromPostCode, tempToPostCode, ref errorMsg, ref milesList, true, excludeStartRate, pickupdateTime, ref deadMileage, fromLocTypeId.ToInt(), toLocTypeId.ToInt(), ref IsCompanyFareExist, ref estimatedTime, fromZoneId, toZoneId, ref IsMoreFareWise, ref fareCalculateBy, subCompanyId, null, 0, ref returnFares, ref companyPrice, cls.manualMiles);
                                    returnFares = fareVal;
                                }
                            }
                        }

                    }
                    else
                    {
                        milesList.Clear();



                        decimal journeyMilage = 0.00m;
                        tempFromPostCode = General.GetPostCodeMatch(tempFromPostCode);
                        tempToPostCode = General.GetPostCodeMatch(tempToPostCode);

                        if (tempFromPostCode.Length == 0)
                            tempFromPostCode = fromAddress;


                        if (tempToPostCode.Length == 0)
                            tempToPostCode = toAddress;




                        //if (AppVars.objPolicyConfiguration.DeadMileage.ToDecimal() > 0)
                        //{

                        //    string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();




                        //    // new


                        //    decimal towntoPickup = General.CalculateDistance(basePostCode, tempFromPostCode);
                        //    decimal destToTown = (General.CalculateDistance(tempToPostCode, basePostCode));


                        //    var viaList = listofvia;
                        //    journeyMilage = CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode);

                        //    journeyMilage = (towntoPickup + journeyMilage + destToTown) / 2;



                        //    fareCalculateBy = 3;
                        //    journeyMilage = Math.Round(journeyMilage, 1);
                        //    milesList.Add(journeyMilage);

                        //    //
                        //}
                        //else
                        //{
                        //    var viaList = listofvia;
                        //    milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));
                        //}

                        if (AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal() == 0)
                        {
                            if (cls.hasVia)
                            {
                                try
                                {
                                    using (TaxiDataContext db = new TaxiDataContext())
                                    {
                                        List<int?> zoneIds = new List<int?>();
                                        foreach (var item in cls.viaList)
                                        {
                                            var zoneId = General.GetZoneId(item);

                                            if (zoneId > 0)
                                                zoneIds.Add(zoneId);
                                        }

                                        if (zoneIds.Count > 0)
                                        {
                                            //  if(zoneIds.Count>1)
                                            //   zoneIds = zoneIds.Distinct().ToList();

                                            foreach (var item in zoneIds)
                                            {
                                                cls.ExtraViaCharges += db.Gen_Zones.Where(c => c.Id == item).Select(c => c.ViaCharge).FirstOrDefault().ToDecimal();

                                            }

                                        }

                                    }

                                }
                                catch
                                {

                                }
                            }

                        }


                        if (AppVars.objPolicyConfiguration.DeadMileageType.ToInt() > 0)
                        {

                            // string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();

                            decimal deadMileageX = AppVars.objPolicyConfiguration.DeadMileage.ToDecimal();
                            int DeadMileageType = AppVars.objPolicyConfiguration.DeadMileageType.ToInt();
                            string basePostCode = AppVars.objPolicyConfiguration.DefaultCounty.ToStr();
                            decimal deadmileagepercent = 65m;
                            bool fromBoundary = false;
                            if (cls.SubCompanyId == AppVars.objSubCompany.Id)
                            {
                                basePostCode = AppVars.objSubCompany.DefaultCounty.ToStr();
                                DeadMileageType = AppVars.objSubCompany.DeadMileageType.ToInt();
                                deadMileageX = AppVars.objSubCompany.DeadMileage.ToDecimal();
                                deadmileagepercent = AppVars.objSubCompany.DeadMileagePercent.ToDecimal();
                                fromBoundary = AppVars.objSubCompany.ApplyDeadMileageFromBoundary.ToBool();
                            }
                            else
                            {
                                using (TaxiDataContext db = new TaxiDataContext())
                                {
                                    var objSub = db.Gen_SubCompanies.Where(c => c.Id == cls.SubCompanyId).Select(args => new { args.DeadMileagePercent, args.ApplyDeadMileageFromBoundary, args.DeadMileage, args.DeadMileageType, args.DefaultCounty }).FirstOrDefault();
                                    basePostCode = objSub.DefaultCounty.ToStr();
                                    DeadMileageType = objSub.DeadMileageType.ToInt();
                                    deadMileageX = objSub.DeadMileage.ToDecimal();
                                    deadmileagepercent = objSub.DeadMileagePercent.ToDecimal();
                                    fromBoundary = objSub.ApplyDeadMileageFromBoundary.ToBool();
                                }
                            }


                            if (DeadMileageType > 0)
                            {
                                decimal towntoPickup = General.CalculateDistance(basePostCode, tempFromPostCode);
                                decimal destToTown = 0.00m;


                                if (DeadMileageType == 3)
                                    destToTown = deadMileageX + 1;
                                else
                                    destToTown = (General.CalculateDistance(tempToPostCode, basePostCode));


                                var viaList = listofvia;
                                journeyMilage = CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode);



                                if (deadMileageX == 0
                                  || (towntoPickup > deadMileageX
                                    && destToTown > deadMileageX)

                                    )
                                {

                                    if (DeadMileageType == 1)    //METHOD 1
                                    {
                                        journeyMilage = (towntoPickup + journeyMilage + destToTown) / 2;
                                    }
                                    else if (DeadMileageType == 2)    //METHOD 2
                                    {
                                        journeyMilage = ((towntoPickup / 2) + journeyMilage + (destToTown / 2));
                                    }
                                    else if (DeadMileageType == 3)   //METHOD 3
                                    {
                                        journeyMilage = (towntoPickup + journeyMilage);
                                    }
                                    else if (DeadMileageType == 4)   //METHOD 4
                                    {
                                        journeyMilage = ((towntoPickup / 2) + journeyMilage);
                                    }
                                    else if (DeadMileageType == 5)   //METHOD 5
                                    {
                                        if (towntoPickup < destToTown)
                                        {
                                            if (fromBoundary)
                                            {
                                                towntoPickup = towntoPickup - deadMileageX;

                                                if (towntoPickup < 0)
                                                    towntoPickup = 0;
                                            }
                                            journeyMilage = (((towntoPickup * deadmileagepercent) / 100) + journeyMilage);


                                        }
                                        else
                                        {
                                            if (fromBoundary)
                                            {
                                                destToTown = destToTown - deadMileageX;

                                                if (destToTown < 0)
                                                    destToTown = 0;
                                            }
                                            journeyMilage = (((destToTown * deadmileagepercent) / 100) + journeyMilage);



                                        }
                                    }


                                    fareCalculateBy = 3;
                                }
                                else
                                    fareCalculateBy = 2;




                                journeyMilage = Math.Round(journeyMilage, 1);
                                milesList.Add(journeyMilage);

                            }
                            else
                            {
                                var viaList = listofvia;
                                milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));
                                fareCalculateBy = 2;
                            }
                        }
                        else
                        {
                            var viaList = listofvia;
                            milesList.Add(CalculateTotalDistance(tempFromPostCode, viaList, tempToPostCode));
                            fareCalculateBy = 2;
                        }
                        //   }

                        if (cls.returnVehicleTypeId != null && cls.returnVehicleTypeId.ToInt() > 0 && cls.returnVehicleTypeId != vehicleTypeId && cls.returnVehicleTypeId != defaultVehicleTypeId && cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN && cls.returnpickupdateTime != null && General.GetQueryable<Fare>(c => c.VehicleTypeId == cls.returnVehicleTypeId).Count() == 0)
                        {
                            cls.returnVehicleTypeId = vehicleTypeId;
                        }
                        if (cls.returnVehicleTypeId.ToInt() == 0)
                            cls.returnVehicleTypeId = vehicleTypeId;

                        decimal totalMiles = milesList.Sum();


                        if (AppVars.objPolicyConfiguration.RoundJourneyMiles.ToDecimal() > 0)
                        {

                            totalMiles = Math.Ceiling(totalMiles / AppVars.objPolicyConfiguration.RoundJourneyMiles.ToDecimal()) * AppVars.objPolicyConfiguration.RoundJourneyMiles.ToDecimal();

                        }

                        if (excludeStartRate)
                        {
                            totalMiles = viaMiles;
                        }


                        if (cls.manualMiles > 0)
                            totalMiles = cls.manualMiles;



                        //if (IsMoreFareWise && fareVal == 0 && vehicleTypeId != defaultVehicleTypeId)
                        //{

                        //    vehicleTypeId = defaultVehicleTypeId;

                        //}


                        if (IsMoreFareWise && fareVal == 0 && vehicleTypeId != defaultVehicleTypeId)
                        {

                            //vehicleTypeId = defaultVehicleTypeId;
                            using (TaxiDataContext db = new TaxiDataContext())
                            {

                                if (db.Fare_OtherCharges.Where(c => c.Fare.VehicleTypeId == vehicleTypeId && c.Fare.SubCompanyId == cls.SubCompanyId).Count() == 0)
                                    vehicleTypeId = defaultVehicleTypeId;
                                else
                                    IsMoreFareWise = false;
                            }
                        }

                        if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool())
                        {
                            // var objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, cls.SubCompanyId);

                            Clsstp_CalculateGeneralFaresBySubCompany objFare = null;


                            try
                            {
                                objFare = new TaxiDataContext().ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5},{6}"
                                 , vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, subCompanyId, excludeStartRate, fromZoneId.ToInt().ToStr()).FirstOrDefault();
                            }
                            catch
                            {
                                objFare = new TaxiDataContext().ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5}"
                              , vehicleTypeId, companyId, totalMiles, cls.pickupDateTime, subCompanyId, excludeStartRate).FirstOrDefault();


                            }


                            if (objFare != null)
                            {
                                var f = objFare;

                                if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    fareVal = f.totalFares.ToDecimal();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";



                            if (cls.JourneyTypeId == Enums.JOURNEY_TYPES.RETURN)
                            {
                                // objFare = new TaxiDataContext().stp_CalculateGeneralFaresBySubCompany(cls.returnVehicleTypeId.ToInt(), companyId, totalMiles, cls.returnpickupdateTime, cls.SubCompanyId);

                                try
                                {
                                    objFare = new TaxiDataContext().ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5},{6}"
                                     , cls.returnVehicleTypeId.ToInt(), companyId, totalMiles, cls.returnpickupdateTime, subCompanyId, excludeStartRate, toZoneId.ToInt().ToStr()).FirstOrDefault();
                                }
                                catch
                                {
                                    objFare = new TaxiDataContext().ExecuteQuery<Clsstp_CalculateGeneralFaresBySubCompany>("exec stp_CalculateGeneralFaresBySubCompany {0},{1},{2},{3},{4},{5}"
                                  , cls.returnVehicleTypeId.ToInt(), companyId, totalMiles, cls.returnpickupdateTime, subCompanyId, excludeStartRate).FirstOrDefault();


                                }


                                if (objFare != null)
                                {
                                    var f = objFare;

                                    if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                    {
                                        returnFares = f.totalFares.ToDecimal();
                                    }
                                    else
                                        errorMsg = "Error";
                                }
                                else
                                    errorMsg = "Error";

                            }
                        }
                        else
                        {
                            var objFare = new TaxiDataContext().stp_CalculateGeneralFares(vehicleTypeId, companyId, totalMiles, DateTime.Now);
                            if (objFare != null)
                            {
                                var f = objFare.FirstOrDefault();

                                if ((f.Result == null || f.Result == "Success" || f.Result.ToStr().IsNumeric()))
                                {
                                    fareVal = f.totalFares.ToDecimal();
                                }
                                else
                                    errorMsg = "Error";
                            }
                            else
                                errorMsg = "Error";
                        }


                        //Surcharge on Mileage






                        if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                        {
                            //   decimal startRateTillMiles = General.GetObject<Fleet_VehicleType>(c => c.Id == vehicleTypeId).DefaultIfEmpty().StartRateValidMiles.ToDecimal();
                            if (totalMiles > 0)
                            {
                                //  rtnFare = Math.Ceiling((rtnFare);
                                fareVal = Math.Ceiling(fareVal);

                                returnFares = Math.Ceiling(returnFares);
                            }
                        }
                        else
                        {
                            decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                            if (roundUp > 0)
                            {
                                fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                                returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                            }
                        }

                        //  fareVal = fareVal;
                        if (returnFares == 0)
                            returnFares = fareVal;


                    }

                    if (excludeStartRate && AppVars.objPolicyConfiguration.ViaPointExtraCharges.ToDecimal() == 0)
                    {

                        try
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                List<int?> zoneIds = new List<int?>();
                                foreach (var item in cls.viaList)
                                {
                                    var zoneId = General.GetZoneId(item);

                                    if (zoneId > 0)
                                        zoneIds.Add(zoneId);
                                }

                                if (zoneIds.Count > 0)
                                {
                                    // if (zoneIds.Count > 1)
                                    //       zoneIds = zoneIds.Distinct().ToList();

                                    foreach (var item in zoneIds)
                                    {
                                        cls.ExtraViaCharges += db.Gen_Zones.Where(c => c.Id == item).Select(c => c.ViaCharge).FirstOrDefault().ToDecimal();

                                    }

                                }

                            }

                        }
                        catch
                        {

                        }


                    }

                    //if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == false)
                    //{

                    //    decimal totalSurchargePercentage = surchargeRateFrom + surchargeRateTo;

                    //    decimal fareSurchargePercent = (fareVal * totalSurchargePercentage) / 100;

                    //    cls.TotalSurcharge = fareSurchargePercent;
                    //    fareSurchargePercent = (returnFares * totalSurchargePercentage) / 100;


                    //}
                    //else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == true)
                    //{


                    //    cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;
                    //}
                    //else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == false)
                    //{
                    //    surchargeRateTo = (fareVal * surchargeRateTo) / 100;


                    //    cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;

                    //    surchargeRateTo = (returnFares * surchargeRateTo) / 100;

                    //}
                    //else if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == true)
                    //{
                    //    surchargeRateFrom = (fareVal * surchargeRateFrom) / 100;

                    //    cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;

                    //    surchargeRateFrom = (returnFares * surchargeRateFrom) / 100;

                    //}


                    if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == false)
                    {

                        decimal totalSurchargePercentage = surchargeRateFrom + surchargeRateTo;

                        decimal fareSurchargePercent = ((fareVal + cls.ExtraViaCharges) * totalSurchargePercentage) / 100;


                        cls.TotalSurcharge = fareSurchargePercent;
                        cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                        cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;


                        fareSurchargePercent = ((returnFares + cls.ExtraViaCharges) * totalSurchargePercentage) / 100;

                        fareVal = fareVal + cls.TotalSurcharge;
                        returnFares = returnFares + cls.TotalSurcharge;

                        if (companyPrice > 0)
                        {
                            companyPrice = companyPrice + cls.TotalSurcharge;

                        }

                    }
                    else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == true)
                    {


                        cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;
                        cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                        cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;

                        fareVal = fareVal + cls.TotalSurcharge;
                        returnFares = returnFares + cls.TotalSurcharge;

                        if (companyPrice > 0)
                        {
                            companyPrice = companyPrice + cls.TotalSurcharge;

                        }


                    }
                    else if (surchargeRateFromAmountWise == true && surchargeRateToAmountWise == false)
                    {
                        surchargeRateTo = (fareVal * surchargeRateTo) / 100;

                        cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;

                        surchargeRateTo = (returnFares * surchargeRateTo) / 100;

                        cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                        cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;

                        fareVal = fareVal + cls.TotalSurcharge;
                        returnFares = returnFares + cls.TotalSurcharge;


                        if (companyPrice > 0)
                        {
                            companyPrice = companyPrice + cls.TotalSurcharge;

                        }
                    }
                    else if (surchargeRateFromAmountWise == false && surchargeRateToAmountWise == true)
                    {
                        surchargeRateFrom = (fareVal * surchargeRateFrom) / 100;

                        cls.TotalSurcharge = surchargeRateFrom + surchargeRateTo;

                        surchargeRateFrom = (returnFares * surchargeRateFrom) / 100;
                        cls.TotalSurchargeParking = surchargeRateFromParking + surchargeRateToParking;
                        cls.TotalSurchargeExtra = surchargeRateFromExtra + surchargeRateToExtra;
                        // returnFares = returnFares + surchargeRateFrom + surchargeRateTo;

                        fareVal = fareVal + cls.TotalSurcharge;
                        returnFares = returnFares + cls.TotalSurcharge;


                        if (companyPrice > 0)
                        {
                            companyPrice = companyPrice + cls.TotalSurcharge;

                        }
                    }
                }

            }




            //decimal waitandreturnnfare = 0.00m;
            //if (opt_WaitandReturn.ToggleState == ToggleState.On)
            //{
            //    if (AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt() > 0)
            //    {
            //        waitandreturnnfare = (fareVal * AppVars.objPolicyConfiguration.DiscountForWRJourneyPercent.ToInt()) / 100;
            //        fareVal += waitandreturnnfare;


            //    }

            //}


            if (companyId != 0 && cls.PaymentTypeId != Enums.PAYMENT_TYPES.BANK_ACCOUNT)
            {
                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.DeferredLoadingEnabled = false;
                    var objCompany = db.Gen_Companies.FirstOrDefault(c => c.Id == companyId);


                    if (objCompany != null)
                    {
                        if (objCompany.IsAgent.ToBool())
                        {
                            cls.agentPrice = objCompany.CommissionPerBooking.ToDecimal();
                            cls.IsAmountWiseAgentFees = objCompany.IsAmountWiseComm.ToBool();
                            cls.agentPercent = objCompany.CommissionPerBooking.ToDecimal();

                            if (agentComm > 0)
                            {


                                cls.agentPrice = agentComm;

                                cls.agentPercent = 0;
                                cls.IsAmountWiseAgentFees = true;
                            }




                            if (agentcharge > 0)
                                cls.agentcharge = agentcharge;

                            //if (fareVal < companyPrice || errorMsg == "fixed")
                            //    cls.IsAirportAgentFares = true;

                            Gen_Company_AgentCommission objComm = null;

                            //if (paymentTypeId == Enums.PAYMENT_TYPES.CASH && --27/03/2017=> hyde park cars=> ask to remove cash payment type=> it should be from all payment types
                            if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT || toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                            {

                                string locPostCode = string.Empty;
                                if ((fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT))
                                {
                                    locPostCode = General.GetPostCodeMatch(cls.tempFromPostCode.ToStr().ToUpper());
                                }
                                else
                                {
                                    locPostCode = General.GetPostCodeMatch(cls.tempToPostCode.ToStr().ToUpper());
                                }


                                objComm = General.GetObject<Gen_Company_AgentCommission>(c => c.FareId != null && c.CompanyId == companyId && c.LocationId != null
                                            && c.Gen_Location.PostCode == locPostCode && c.VehicleTypeId == vehicleTypeId && c.CompanyPrice > 0);

                                if (objComm != null)
                                {

                                    if (changepaymenttype == false)
                                    {



                                        if (objComm.CommissionOnPercent.ToBool())
                                        {
                                            cls.agentPercent = objComm.CommissionPercent.ToDecimal();
                                        }
                                        else
                                        {
                                            cls.agentPercent = 0;
                                            cls.agentPrice = objComm.CommissionAmount.ToDecimal(); ;
                                            cls.IsAmountWiseAgentFees = true;


                                        }

                                        cls.IsAmountWiseAgentFees = true;
                                    }
                                    cls.IsAirportAgentFares = true;
                                    companyPrice = objComm.CompanyPrice.ToDecimal();
                                    cls.companyPrice = objComm.CompanyPrice.ToDecimal();

                                    fareVal = objComm.DriverPrice.ToDecimal();
                                    cls.fareVal = fareVal;
                                    // numCompanyFares.Value = objComm.CompanyPrice.ToDecimal();

                                }
                                //else
                                //{

                                //    if (cls.IsAirportAgentFares)
                                //    {

                                //        cls.agentPercent = 0;
                                //        cls.agentPrice = companyPrice - fareVal;
                                //        cls.IsAmountWiseAgentFees = true;
                                //    }


                                //}
                            }
                            //else
                            //{

                            //    if (objComm == null && cls.IsAirportAgentFares)
                            //    {

                            //        cls.agentPercent = 0;
                            //        cls.agentPrice = companyPrice - fareVal;
                            //        cls.IsAmountWiseAgentFees = true;
                            //    }

                            //}

                        }
                        else
                        {
                            cls.agentPrice = 0.00m;
                            cls.IsAmountWiseAgentFees = false;

                        }




                    }
                }


            }
            else
            {
                cls.agentPrice = 0.00m;
                cls.IsAmountWiseAgentFees = false;
                cls.agentPercent = 0;


            }


            cls.fareVal = fareVal;
            cls.returnfares = returnFares;



            if (IsMoreFareWise)
            {
                int actualVehicleTypeId = cls.vehicleTypeId.ToInt();

                decimal AddedAmount = 0.00m;
                decimal returnAddedAmount = 0.00m;
                string op = string.Empty;


                Gen_SysPolicy_FaresSetting objFare = General.GetObject<Gen_SysPolicy_FaresSetting>(c => c.SysPolicyId != null && c.VehicleTypeId == actualVehicleTypeId);

                if (objFare != null)
                {
                    op = objFare.Operator.ToStr();


                    if (objFare.IsAmountWise.ToBool() && objFare.Percentage.ToInt() > 0 && objFare.VehicleTypeName.ToStr().Trim().Length > 0 && objFare.VehicleTypeName.ToStr().Trim().IsNumeric() && objFare.VehicleTypeName.ToStr().Trim().ToInt() > 0)
                    {

                        int ValueAddedType = objFare.VehicleTypeName.ToStr().Trim().ToInt();

                        decimal AddedPercentage = 0.00m;
                        decimal returnAddedPercentage = 0.00m;

                        decimal onlyAmount = objFare.Amount.ToDecimal();

                        AddedPercentage = ((fareVal + cls.ExtraViaCharges) * objFare.Percentage.ToDecimal()) / 100;
                        returnAddedPercentage = ((returnFares + cls.ExtraViaCharges) * objFare.Percentage.ToDecimal()) / 100;



                        AddedAmount = objFare.Amount.ToDecimal() + cls.ExtraViaCharges;
                        returnAddedAmount = objFare.Amount.ToDecimal() + cls.ExtraViaCharges;



                        if (ValueAddedType == 1)
                        {
                            if (AddedPercentage < onlyAmount)
                            {
                                AddedPercentage = 0;
                                returnAddedAmount = 0;

                                if (cls.JourneyTypeId != 2 ||
                                    (cls.JourneyTypeId == 2 && cls.returnActualVehicleTypeId.ToInt() > 0 && actualVehicleTypeId == cls.returnActualVehicleTypeId.ToInt()))
                                    cls.ExtraViaCharges = 0;

                            }
                            else
                            {
                                AddedAmount = AddedPercentage + cls.ExtraViaCharges;
                                returnAddedAmount = returnAddedPercentage + cls.ExtraViaCharges;

                            }

                        }
                        else if (ValueAddedType == 2)
                        {
                            if (AddedPercentage > onlyAmount)
                            {

                                AddedPercentage = 0;
                                returnAddedAmount = 0;
                                if (cls.JourneyTypeId != 2 ||
                                    (cls.JourneyTypeId == 2 && cls.returnActualVehicleTypeId.ToInt() > 0 && actualVehicleTypeId == cls.returnActualVehicleTypeId.ToInt()))
                                    cls.ExtraViaCharges = 0;




                            }
                            else
                            {
                                AddedAmount = AddedPercentage + cls.ExtraViaCharges;
                                returnAddedAmount = returnAddedPercentage + cls.ExtraViaCharges;

                            }


                        }


                        if (cls.JourneyTypeId != 2 ||
                                (cls.JourneyTypeId == 2 && cls.returnActualVehicleTypeId.ToInt() > 0 && actualVehicleTypeId == cls.returnActualVehicleTypeId.ToInt()))
                            cls.ExtraViaCharges = 0;
                        //  }


                        if (cls.JourneyTypeId == 2 && cls.returnActualVehicleTypeId.ToInt() > 0 && actualVehicleTypeId != cls.returnActualVehicleTypeId.ToInt())
                        {


                            objFare = General.GetObject<Gen_SysPolicy_FaresSetting>(c => c.SysPolicyId != null && c.VehicleTypeId == cls.returnActualVehicleTypeId);

                            if (objFare != null)
                            {


                                returnAddedPercentage = ((returnFares + cls.ExtraViaCharges) * objFare.Percentage.ToDecimal()) / 100;


                                returnAddedAmount = objFare.Amount.ToDecimal() + cls.ExtraViaCharges;

                                if (ValueAddedType == 1)
                                {
                                    if (returnAddedPercentage < returnAddedAmount)
                                    {
                                        returnAddedPercentage = 0;
                                        returnAddedAmount = 0;


                                        cls.ExtraViaCharges = 0;

                                    }
                                    else
                                    {

                                        returnAddedAmount = returnAddedPercentage;

                                    }

                                }
                                else if (ValueAddedType == 2)
                                {
                                    if (returnAddedPercentage > returnAddedAmount)
                                    {

                                        returnAddedAmount = returnAddedPercentage;



                                    }
                                    else
                                    {

                                        returnAddedPercentage = 0;
                                        returnAddedAmount = 0;

                                        cls.ExtraViaCharges = 0;
                                    }


                                }





                            }
                            else
                                returnAddedAmount = 0.00m;
                        }

                    }
                    else
                    {


                        if (objFare.IsAmountWise == false)
                        {

                            AddedAmount = ((fareVal + cls.ExtraViaCharges) * objFare.Percentage.ToDecimal()) / 100;
                            returnAddedAmount = ((returnFares + cls.ExtraViaCharges) * objFare.Percentage.ToDecimal()) / 100;
                        }
                        else
                        {
                            AddedAmount = objFare.Amount.ToDecimal() + cls.ExtraViaCharges;
                            returnAddedAmount = objFare.Amount.ToDecimal() + cls.ExtraViaCharges;

                            if (cls.JourneyTypeId != 2 ||
                                    (cls.JourneyTypeId == 2 && cls.returnActualVehicleTypeId.ToInt() > 0 && actualVehicleTypeId == cls.returnActualVehicleTypeId.ToInt()))
                                cls.ExtraViaCharges = 0;
                        }


                        if (cls.JourneyTypeId == 2 && cls.returnActualVehicleTypeId.ToInt() > 0 && actualVehicleTypeId != cls.returnActualVehicleTypeId.ToInt())
                        {


                            objFare = General.GetObject<Gen_SysPolicy_FaresSetting>(c => c.SysPolicyId != null && c.VehicleTypeId == cls.returnActualVehicleTypeId);

                            if (objFare != null)
                            {
                                if (objFare.IsAmountWise == false)
                                {

                                    returnAddedAmount = ((returnFares + cls.ExtraViaCharges) * objFare.Percentage.ToDecimal()) / 100;
                                }
                                else
                                {

                                    returnAddedAmount = objFare.Amount.ToDecimal() + cls.ExtraViaCharges;
                                    cls.ExtraViaCharges = 0;
                                }

                            }
                            else
                                returnAddedAmount = 0.00m;
                        }

                    }


                    //cls.ExtraViaCharges = 0.00m;

                    switch (op)
                    {
                        case "+":

                            if (AddedAmount > 0)
                                fareVal = (decimal)Math.Ceiling((fareVal + AddedAmount) / 0.1m) * 0.1m;

                            if (returnAddedAmount > 0)
                                returnFares = (decimal)Math.Ceiling((returnFares + returnAddedAmount) / 0.1m) * 0.1m;

                            if (companyPrice > 0 && companyPrice == fareVal && AddedAmount > 0)
                                companyPrice = (decimal)Math.Ceiling((companyPrice + AddedAmount) / 0.1m) * 0.1m;
                            break;

                        case "-":
                            //fareVal = fareVal - AddedAmount;
                            //returnFares = returnFares + returnAddedAmount;
                            if (AddedAmount > 0)
                                fareVal = (decimal)Math.Ceiling((fareVal - AddedAmount) / 0.1m) * 0.1m;

                            if (returnAddedAmount > 0)
                                returnFares = (decimal)Math.Ceiling((returnFares - returnAddedAmount) / 0.1m) * 0.1m;
                            break;

                        default:
                            if (companyPrice > 0 && companyPrice == fareVal && AddedAmount > 0)
                                companyPrice = (decimal)Math.Ceiling((companyPrice + AddedAmount) / 0.1m) * 0.1m;

                            if (AddedAmount > 0)
                                fareVal = (decimal)Math.Ceiling((fareVal + AddedAmount) / 0.1m) * 0.1m;

                            if (returnAddedAmount > 0)
                                returnFares = (decimal)Math.Ceiling((returnFares + returnAddedAmount) / 0.1m) * 0.1m;
                            break;


                            //   rtnFare = (decimal)Math.Ceiling(rtnFare / 0.5m) * 0.5m;

                    }


                    decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();
                    if (roundUp > 0)
                    {
                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                        returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;

                        if (ENABLECMACBOOKINGCALCULATION == true)
                        {
                            if (objMaster.Current != null)
                            {
                                companyPrice = objMaster.Current.CompanyPrice.ToDecimal();
                            }
                            else
                            {
                                if (companyPrice > 0 && companyPrice == fareVal)
                                {
                                    companyPrice = (decimal)Math.Ceiling(companyPrice / roundUp) * roundUp;


                                }
                            }
                        }
                        else
                        {
                            if (companyPrice > 0 && companyPrice == fareVal)
                            {
                                companyPrice = (decimal)Math.Ceiling(companyPrice / roundUp) * roundUp;


                            }
                        }


                    }
                }

            }

            if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() &&
             (fareCalculateBy == 1 || fareCalculateBy == 4
             || AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "st@r_c@r$"
             || AppVars.listUserRights.Count(c => c.functionId == "APPLY ON FIXED/MILEAGE TARIFF") > 0))
            {

                decimal incrementvalue = GetFareIncrementCharges(fareVal, cls.pickupDateTime);
                fareVal += incrementvalue;
                returnFares += GetFareIncrementCharges(returnFares, cls.returnpickupdateTime);


                //if(companyPrice==0)
                //{
                //    companyPrice = fareVal;


                //}

                if (companyPrice > 0)
                    companyPrice += incrementvalue;

                //decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                //if (roundUp > 0)
                //{


                //    fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;
                //    returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                //    companyPrice = (decimal)Math.Ceiling(companyPrice / roundUp) * roundUp;
                //}

            }


            if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
            {

                fareVal = Math.Round(fareVal, 1);
                returnFares = Math.Round(returnFares, 1);


                companyPrice = Math.Round(companyPrice, 1);
                // fareVal = (Math.Round((fareVal * 2), MidpointRounding.AwayFromZero)) / 2;
                // returnFares = (Math.Round((returnFares * 2), MidpointRounding.AwayFromZero)) / 2;
            }
            else
            {
                decimal roundUp = AppVars.objPolicyConfiguration.RoundUpTo.ToDecimal();

                if (roundUp > 0)
                {

                    if (fareVal > 0 && (fareCalculateBy == 1 || fareCalculateBy == 4))
                    {
                        fareVal = fareVal.ToDecimal();
                        returnFares = returnFares.ToDecimal();
                    }
                    else
                    {
                        fareVal = (decimal)Math.Ceiling(fareVal / roundUp) * roundUp;


                        returnFares = (decimal)Math.Ceiling(returnFares / roundUp) * roundUp;
                    }

                    if (companyPrice > 0 && (fareCalculateBy == 1 || fareCalculateBy == 4))
                    {
                        companyPrice = companyPrice.ToDecimal();
                    }
                    else
                    {
                        if (ENABLECMACBOOKINGCALCULATION == true)
                        {
                            if (objMaster.Current != null)
                            {
                                companyPrice = objMaster.Current.CompanyPrice.ToDecimal();
                            }
                            else
                            {
                                companyPrice = (decimal)Math.Ceiling(companyPrice / roundUp) * roundUp;
                            }

                        }
                        else
                        {
                            companyPrice = (decimal)Math.Ceiling(companyPrice / roundUp) * roundUp;
                        }
                    }
                }
            }



            decimal dd = fareVal.ToDecimal();


            decimal airportPickupChrgs = AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
            /// Add Airport Pickup Charges If Pickup Point is From Airport...
            if (fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {

                if (AppVars.objPolicyConfiguration.HasMultipleAirportPickupCharges.ToBool())
                {
                    string airportPostCode = General.GetPostCodeMatch(cls.tempFromPostCode.ToStr().ToUpper()).ToStr().Trim();
                    if (airportPostCode.Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            airportPickupChrgs = db.Gen_SysPolicy_AirportPickupCharges.Where(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).Select(c => c.Charges).FirstOrDefault().DefaultIfEmpty().ToDecimal();
                        }
                    }


                    // airportPickupChrgs = General.GetObject<Gen_SysPolicy_AirportPickupCharge>(c => c.AirportId == fromLocationId).DefaultIfEmpty().Charges.ToDecimal();
                    dd += airportPickupChrgs;
                    cls.OtherParking = airportPickupChrgs;
                    airportPickupChrgs = 0.00m;
                }
                else
                {
                    dd += AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
                    cls.OtherParking = AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
                }




            }
            else if (cls.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
            {

                if (AppVars.objPolicyConfiguration.HasMultipleAirportPickupCharges.ToBool())
                {
                    string airportPostCode = General.GetPostCodeMatch(cls.tempToPostCode.ToStr().ToUpper()).ToStr().Trim();
                    if (airportPostCode.Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            airportPickupChrgs = db.Gen_SysPolicy_AirportPickupCharges.FirstOrDefault(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).DefaultIfEmpty().Charges.ToDecimal();
                        }
                    }


                    // airportPickupChrgs = General.GetObject<Gen_SysPolicy_AirportPickupCharge>(c => c.AirportId == fromLocationId).DefaultIfEmpty().Charges.ToDecimal();
                    // dd += airportPickupChrgs;

                    cls.OtherParking = airportPickupChrgs;
                    cls.ReturnOtherParking = cls.OtherParking;
                    airportPickupChrgs = 0.00m;
                }
                else
                {
                    dd += AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
                    cls.OtherParking = AppVars.objPolicyConfiguration.AirportPickupCharges.ToDecimal();
                }

            }



            if (AppVars.objPolicyConfiguration.HasAirportDropOffCharges.ToBool())
            {
                if (toLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                {
                    string airportPostCode = General.GetPostCodeMatch(cls.tempToPostCode.ToStr().ToUpper()).ToStr().Trim();
                    if (airportPostCode.Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            //cls.airportDropOffChrgs += db.Gen_SysPolicy_AirportDropOffCharges
                            //    .Where(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).FirstOrDefault().DefaultIfEmpty().Charges.ToDecimal();

                            cls.OtherParking += db.Gen_SysPolicy_AirportDropOffCharges
                                .Where(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).FirstOrDefault().DefaultIfEmpty().Charges.ToDecimal();

                            // cls.OtherParking += cls.airportDropOffChrgs;
                        }
                    }


                }

                if (cls.JourneyTypeId.ToInt() == Enums.JOURNEY_TYPES.RETURN && fromLocTypeId == Enums.LOCATION_TYPES.AIRPORT)
                {
                    string airportPostCode = General.GetPostCodeMatch(cls.tempFromPostCode.ToStr().ToUpper()).ToStr().Trim();
                    if (airportPostCode.Length > 0)
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            //  cls.airportDropOffChrgs += db.Gen_SysPolicy_AirportDropOffCharges
                            //   .Where(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).FirstOrDefault().DefaultIfEmpty().Charges.ToDecimal();

                            decimal charges = db.Gen_SysPolicy_AirportDropOffCharges
                              .Where(c => c.AirportId != null && c.Gen_Location.PostCode == airportPostCode).FirstOrDefault().DefaultIfEmpty().Charges.ToDecimal();

                            cls.OtherParking += charges;

                            cls.ReturnOtherParking += charges;


                        }
                    }
                }

            }



            if (AppVars.objPolicyConfiguration.PickCommissionDeductionFromJobsTotal.ToBool())
            {

                using (TaxiDataContext db = new TaxiDataContext())
                {
                    //var objServiceCharge = db.Gen_ServiceCharges.FirstOrDefault();
                    Gen_ServiceCharge objServiceCharge = null;
                    try
                    {
                        if (AppVars.BookingFeeRange == null)
                            AppVars.BookingFeeRange = db.ExecuteQuery<string>("select setval from appsettings where setkey='bookingfeerange'").FirstOrDefault().ToStr().ToBool();
                    }
                    catch
                    {
                        AppVars.BookingFeeRange = false;
                    }

                    if (AppVars.BookingFeeRange.ToBool())
                    {
                        objServiceCharge = db.Gen_ServiceCharges.Where(c => c.SubCompanyId == cls.SubCompanyId && (fareVal >= c.FromValue && fareVal <= c.ToValue)).FirstOrDefault();
                    }
                    else
                        objServiceCharge = db.Gen_ServiceCharges.FirstOrDefault();


                    if (objServiceCharge != null)
                    {
                        cls.objServiceCharge = new Gen_ServiceCharge();
                        cls.objServiceCharge.AmountWise = objServiceCharge.AmountWise;
                        cls.objServiceCharge.FromValue = objServiceCharge.FromValue;
                        cls.objServiceCharge.IsAccount = objServiceCharge.IsAccount;
                        cls.objServiceCharge.ServiceChargeAmount = objServiceCharge.ServiceChargeAmount;
                        cls.objServiceCharge.ServiceChargePercent = objServiceCharge.ServiceChargePercent;
                        cls.objServiceCharge.ToValue = objServiceCharge.ToValue;
                        cls.objServiceCharge.DifferentAirportBookingFee = objServiceCharge.DifferentAirportBookingFee.ToBool();
                        cls.objServiceCharge.AirportBookingFee = objServiceCharge.AirportBookingFee.ToDecimal();


                    }


                }

            }

            cls.airportPickupChrgs = airportPickupChrgs;
            cls.fareVal = fareVal;
            cls.returnfares = returnFares;
            cls.dd = dd;
            cls.companyPrice = companyPrice;

            if ((cls.airportPickupChrgs > 0 || cls.airportDropOffChrgs > 0) && (AppVars.listUserRights.Count(c => c.functionId == "APPLY CONGESTION ON PARKING") > 0 || AppVars.objPolicyConfiguration.DefaultClientId.ToStr() == "MoUNtCaRsLTd"))
            {
                cls.Congestion += cls.airportPickupChrgs + cls.airportDropOffChrgs;
                cls.airportPickupChrgs = 0;
                cls.airportDropOffChrgs = 0;
            }
            if (ENABLECMACBOOKINGCALCULATION == true)
            {
                if (companyId == 2)
                {
                    cls.companyPrice = objMaster.Current == null ? cls.fareVal : objMaster.Current.CompanyPrice.ToDecimal();
                    companyPrice = objMaster.Current == null ? cls.fareVal : objMaster.Current.CompanyPrice.ToDecimal();

                }
            }
            e.Result = cls;

        }



        int fareCalculateBy = 0;

        private decimal GetReturnFareIncrementCharges(decimal faresToIncrement)
        {
            if (dtpReturnPickupDate == null)
                return 0;

            if (dtpReturnPickupTime == null || dtpReturnPickupTime.Value == null)
                return 0;
            try
            {
                faresToIncrement = 0;

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var objIncList = db.GetTable<Fare_IncrementSetting>().Where(c => c.Id != 0 && c.EnableIncrement != null && c.EnableIncrement == true);

                    foreach (var objInc in objIncList)
                    {
                        if (objInc != null)
                        {
                            //   enablefareincrement = true;
                            bool IsExist = false;

                            DateTime? pickupDateTime = (dtpReturnPickupDate.Value.ToDate() + dtpReturnPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();

                            if ((objInc.CriteriaBy.ToInt() == 1 && pickupDateTime >= objInc.FromDate && pickupDateTime <= objInc.TillDate)
                            || (objInc.CriteriaBy.ToInt() == 2 && pickupDateTime.ToDate() >= objInc.FromDate.ToDate() && pickupDateTime.ToDate() <= objInc.TillDate.ToDate())
                                )
                            {

                                IsExist = true;

                            }
                            else if (objInc.CriteriaBy.ToInt() == 3)
                            {
                                string str = dtpReturnPickupTime.Text.ToDateTime().TimeOfDay.ToStr();

                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();

                                int time = str.ToInt();


                                str = objInc.FromDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int fromTime = str.ToInt();


                                str = objInc.TillDate.Value.TimeOfDay.ToStr();
                                str = str.Substring(0, str.LastIndexOf(':'));
                                str = str.Replace(":", "").Trim();
                                int toTime = str.ToInt();


                                if (time < 1000)
                                {

                                    // PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // OFF PEAK FARES

                                    if (fromTime < 1000 && toTime < 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }
                                    // 6 AM (600) TO 15 PM (1500)
                                    else if (fromTime < 1000 && toTime > 1000)
                                    {
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                    // 6 PM (1800) TO 6 AM (600)
                                    else if (fromTime > 1000 && toTime < 1000)
                                    {

                                        if (time <= toTime)
                                        {
                                            IsExist = true;
                                        }
                                    }

                                }

                                else if (time >= 1000)
                                {
                                    if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                        else if ((fromTime >= 1000 && toTime < 1000))
                                        {

                                            if (time >= fromTime)
                                            {
                                                IsExist = true;
                                            }
                                        }
                                        else if ((toTime > fromTime && time < (toTime - fromTime))
                                            || (fromTime > toTime && time > (fromTime - toTime)))
                                        {
                                            IsExist = true;

                                        }

                                    }

                                    else if ((fromTime < 1000 && toTime >= 1000)
                                            || (fromTime >= 1000 && toTime >= 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime
                                                && time <= toTime)
                                        {
                                            IsExist = true;
                                        }

                                    }

                                    else if ((fromTime >= 1000 && toTime < 1000))
                                    {

                                        // 6 AM (600) TO 6PM (1700)
                                        if (time >= fromTime)
                                        {
                                            IsExist = true;
                                        }

                                    }
                                }
                            }



                            if (IsExist)
                            {

                                if (objInc.IncrementType.ToStr() == "percent")
                                {
                                    faresToIncrement = ((faresToIncrement * objInc.IncrementRate.ToDecimal()) / 100);

                                    if (AppVars.objPolicyConfiguration.RoundMileageFares.ToBool())
                                    {
                                        faresToIncrement = Math.Ceiling(faresToIncrement);
                                    }
                                }
                                else
                                {
                                    faresToIncrement = objInc.IncrementRate.ToDecimal();
                                }
                            }
                            else
                            {

                                faresToIncrement = 0;
                            }
                        }
                        else
                        {
                            //    enablefareincrement = false;
                            faresToIncrement = 0;

                        }

                    }
                }
            }
            catch
            {


            }

            return faresToIncrement;

        }

        #endregion




        void DateTimePickerElement_ValueChanged(object sender, EventArgs e)
        {

            if (this.Tag != null && this.Tag.ToStr() == "f12")
                return;

            GetCurrentWaitingBookings();


            try
            {
                //ShowLimitedBookings(dtpPickupTime.Value);

                if (dtpReturnPickupDate != null && dtpReturnPickupDate.Value.ToDate() < dtpPickupDate.Value.ToDate())
                {
                    dtpReturnPickupDate.Value = dtpPickupDate.Value.ToDate();

                }

            }
            catch
            {


            }

        }
        //fwdkh00


        private void InitializeCurrentWaitingBookings()
        {
            if (this.grdPickupDateTime != null)
                return;

            f = new Font("Tahoma", 9, FontStyle.Bold);
            this.grdPickupDateTime = new System.Windows.Forms.DataGridView();
            ((System.ComponentModel.ISupportInitialize)(this.grdPickupDateTime)).BeginInit();
            this.tabCurrentBooking.Controls.Add(this.grdPickupDateTime);

            this.grdPickupDateTime.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(191)))), ((int)(((byte)(219)))), ((int)(((byte)(255)))));
            this.grdPickupDateTime.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
            this.grdPickupDateTime.Location = new System.Drawing.Point(4, 9);
            // 
            // grdPickupDateTime
            // 

            this.grdPickupDateTime.TabIndex = 0;
            this.grdPickupDateTime.TabStop = true;

            this.grdPickupDateTime.Name = "grdPickupDateTime";
            this.grdPickupDateTime.Size = new System.Drawing.Size(260, 426);
            this.grdPickupDateTime.TabIndex = 284;
            this.grdPickupDateTime.Text = "Attributes";
            this.grdPickupDateTime.Dock = DockStyle.Fill;
            this.grdPickupDateTime.CellFormatting += new DataGridViewCellFormattingEventHandler(grdPickupDateTime_CellFormatting);
            this.grdPickupDateTime.RowHeadersVisible = false;
            ((System.ComponentModel.ISupportInitialize)(this.grdPickupDateTime)).EndInit();

            LoadNearest();
        }

        void grdPickupDateTime_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            foreach (DataGridViewRow item in grdPickupDateTime.Rows)
            {
                if (item.Cells["id"].Value.ToInt() == PickupTimeAsc)
                {
                    item.Cells["Time"].Style.Font = f;
                    item.Cells["Time"].Style.ForeColor = Color.Red;
                    // item.Cells["Time"].Style.Font = f;
                    item.Cells["Time"].Selected = false;
                }
                if (item.Cells["id"].Value.ToInt() == PickupTimeDesc)
                {
                    // f = new Font("Tahoma", 9, FontStyle.Bold);
                    item.Cells["Time"].Style.Font = f;
                    item.Cells["Time"].Style.ForeColor = Color.Red;
                    item.Cells["Time"].Selected = false;
                }
            }

        }
        private void InitializeCurrentWaitingBookingsTab()
        {
            try
            {
                if (this.radPageView1 != null)
                    return;

                this.radPageView1 = new System.Windows.Forms.TabControl();
                this.tabCurrentBooking = new System.Windows.Forms.TabPage();
                this.tabNearestDrivers = new System.Windows.Forms.TabPage();

                //fwdkh
                //      this.tabBookingLimit = new System.Windows.Forms.TabPage();

                this.btnRefreshNearestDrivers = new Button();

                this.radPageView1.SuspendLayout();
                this.tabNearestDrivers.SuspendLayout();
                //  ((System.ComponentModel.ISupportInitialize)(this.btnRefreshNearestDrivers)).BeginInit();


                // 
                // radPageView1
                // 
                this.radPageView1.Controls.Add(this.tabCurrentBooking);
                this.radPageView1.Controls.Add(this.tabNearestDrivers);
                //     this.radPageView1.Controls.Add(this.tabBookingLimit);
                this.radPageView1.Location = new System.Drawing.Point(909, 38);
                this.radPageView1.Name = "radPageView1";
                this.radPageView1.SelectedTab = this.tabCurrentBooking;
                this.radPageView1.Size = new System.Drawing.Size(540, 410);//(310, 410);
                this.radPageView1.TabIndex = 0;
                this.radPageView1.TabStop = true;

                this.radPageView1.Text = "radPageView1";
                // 
                // tabCurrentBooking
                // 
                this.tabCurrentBooking.Location = new System.Drawing.Point(10, 37);
                this.tabCurrentBooking.Name = "tabCurrentBooking";
                this.tabCurrentBooking.Size = new System.Drawing.Size(289, 503);
                this.tabCurrentBooking.Text = "Current Bookings";

                // 
                // tabNearestDrivers
                // 
                this.tabNearestDrivers.Controls.Add(this.btnRefreshNearestDrivers);
                this.tabNearestDrivers.Location = new System.Drawing.Point(10, 37);
                this.tabNearestDrivers.Name = "tabNearestDrivers";
                this.tabNearestDrivers.Size = new System.Drawing.Size(289, 410);
                this.tabNearestDrivers.Text = "Nearest Drivers";

                //tab Booking Limits, tabBookingLimit


                //this.tabBookingLimit.Location = new System.Drawing.Point(10, 37);
                //this.tabBookingLimit.Name = "tabBookingLimit";
                //this.tabBookingLimit.Size = new System.Drawing.Size(300, 410);//(289, 410);
                //this.tabBookingLimit.Text = "Booking Limits";




                // 
                // btnRefreshNearestDrivers
                // 
                //    this.btnRefreshNearestDrivers.Image = global::Taxi_AppMain.Properties.Resources.refresh_small;
                //    this.btnRefreshNearestDrivers.ImageAlignment = System.Drawing.ContentAlignment.MiddleCenter;
                this.btnRefreshNearestDrivers.Location = new System.Drawing.Point(257, 5);
                this.btnRefreshNearestDrivers.Name = "btnRefreshNearestDrivers";
                this.btnRefreshNearestDrivers.Size = new System.Drawing.Size(28, 28);
                btnRefreshNearestDrivers.Visible = false;
                this.btnRefreshNearestDrivers.TabIndex = 250;
                this.btnRefreshNearestDrivers.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
                this.btnRefreshNearestDrivers.Click += new EventHandler(btnRefreshNearestDrivers_Click);
                this.radPageView1.ResumeLayout(false);
                this.tabNearestDrivers.ResumeLayout(false);
                //  ((System.ComponentModel.ISupportInitialize)(this.btnRefreshNearestDrivers)).EndInit();

                // this.pnlMain.Controls.Add(this.radPageView1);
                radPageView1.BringToFront();
                radPageView1.Dock = DockStyle.Right;
                this.tableLayoutPanel1.Controls.Add(this.radPageView1);


            }
            catch (Exception ex)
            {
                ENUtils.ShowMessage(ex.Message);
            }
        }

        private void GetCurrentWaitingBookings(bool isStarting = false)
        {
            try
            {




                InitializeCurrentWaitingBookingsTab();
                InitializeCurrentWaitingBookings();

                dtpPickupTime.Update();


                DateTime? dtDate = dtpPickupDate.Value;

                if (dtpPickupDate.AllowDrop == false && DateTime.Now.TimeOfDay > dtpPickupTime.Value.ToDateTime().TimeOfDay
                       && dtpPickupDate.Value != null && dtpPickupDate.Value.ToDate() == DateTime.Now.Date)
                {
                    double hours = DateTime.Now.TimeOfDay.Subtract(dtpPickupTime.Value.ToDateTime().TimeOfDay).TotalHours;
                    if (hours >= 2)
                    {
                        dtDate = dtpPickupDate.Value.ToDate().AddDays(1);
                        //  dtpPickupDate.AllowDrop = true;
                    }
                }



                DateTime Time = string.Format("{0:dd/MM/yyyy HH:mm}", dtDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime();


                if (worker_Map == null)
                {

                    worker_Map = new BackgroundWorker();
                    worker_Map.DoWork += new DoWorkEventHandler(worker_Map_DoWork);
                    worker_Map.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_Map_RunWorkerCompleted);
                    worker_Map.WorkerSupportsCancellation = true;

                }


                if (worker_Map.IsBusy == false)
                {



                    if (isStarting)
                        return;

                    worker_Map.RunWorkerAsync(Time);
                }
                else
                {


                }



            }
            catch
            {


            }


        }



        private void LoadNearest()
        {
            try
            {

                if (IsFormShown == false)
                    return;


                SetRouteType();

                if ((txtFromAddress.Text.Length == 0 || txtToAddress.Text.Length == 0) && AppVars.listUserRights.Count(c => c.functionId == "ETA ON PICKUP") == 0)
                {
                    return;


                }

                if (AppVars.objPolicyConfiguration.EnableReplaceNoToZoneSuggesstion.ToBool())
                {

                    if (txtFromAddress.Text.Length == 0 || txtToAddress.Text.Length == 0)
                        return;


                    if (string.IsNullOrEmpty(txtFromAddress.Text.Trim()) && string.IsNullOrEmpty(txtToAddress.Text.Trim()))
                    {
                        return;
                    }



                    if (worker_Map == null)
                    {

                        worker_Map = new BackgroundWorker();
                        worker_Map.DoWork += new DoWorkEventHandler(worker_Map_DoWork);
                        worker_Map.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_Map_RunWorkerCompleted);
                        worker_Map.WorkerSupportsCancellation = true;




                    }


                    if (webBrowser1 == null)
                    {
                        //  this.webBrowser1 = new WebBrowser();
                        this.webBrowser1 = new Gecko.GeckoWebBrowser();

                        this.webBrowser1.Location = new System.Drawing.Point(0, 0);
                        this.webBrowser1.MinimumSize = new System.Drawing.Size(20, 0);
                        this.webBrowser1.Name = "webBrowser1";
                        // this.webBrowser1.ScrollBarsEnabled = false;
                        this.webBrowser1.Size = new System.Drawing.Size(275, 880);//(270, 700);//760);
                        //this.webBrowser1.Region = new Region(new RectangleF(0, 0, 300, 300));

                        this.webBrowser1.TabIndex = 225;
                        this.webBrowser1.Visible = false;
                        this.webBrowser1.Dock = DockStyle.Top;

                        this.tabNearestDrivers.Controls.Add(this.webBrowser1);

                        this.chkETA = new System.Windows.Forms.Label();

                        this.tabNearestDrivers.Controls.Add(chkETA);
                        // 
                        // chkETA
                        // 
                        this.chkETA.BackColor = System.Drawing.Color.LightYellow;
                        this.chkETA.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                        this.chkETA.ForeColor = System.Drawing.Color.Black;
                        this.chkETA.Location = new System.Drawing.Point(webBrowser1.Location.X, 0);
                        this.chkETA.Name = "chkETA";
                        this.chkETA.Size = new System.Drawing.Size(147, 21);
                        this.chkETA.TabIndex = 508;
                        this.chkETA.Visible = false;
                        this.chkETA.AutoSize = true;
                        //    this.chkETA.Anchor = AnchorStyles.Left | AnchorStyles.Right;

                        this.chkETA.DoubleClick += ChkETA_DoubleClick;

                    }


                    if (chkETA == null)
                    {
                        chkETA = new Label();
                        this.chkETA.DoubleClick += ChkETA_DoubleClick;

                    }
                    chkETA.Visible = false;

                    clsfaresworker f = new clsfaresworker();
                    f.fromAddress = txtFromAddress.Text.Trim();
                    f.toAddress = txtToAddress.Text.Trim();
                    f.CompanyId = objMaster.PrimaryKeyValue != null ? objMaster.Current.BookingStatusId : Enums.BOOKINGSTATUS.WAITING;
                    f.fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                    f.toLocTypeId = ddlToLocType.SelectedValue.ToInt();

                    worker_Map.RunWorkerAsync(f);

                    // adding nearest drivers

                    if (AppVars.listUserRights.Count(c => c.functionId == "Show Nearest Drivers") > 0)
                    {
                        ShowNearestDrivers();
                    }

                    // end nearest drivers





                }
                else
                {




                    if (string.IsNullOrEmpty(txtFromAddress.Text.Trim()))
                    {
                        return;
                    }

                    if (this.radPageView1 == null)
                    {

                        this.radPageView1 = new System.Windows.Forms.TabControl();

                        this.tabNearestDrivers = new System.Windows.Forms.TabPage();

                        //fwdkh
                        //      this.tabBookingLimit = new System.Windows.Forms.TabPage();

                        this.btnRefreshNearestDrivers = new Button();

                        this.radPageView1.SuspendLayout();
                        this.tabNearestDrivers.SuspendLayout();


                        this.radPageView1.Controls.Add(this.tabNearestDrivers);
                        //     this.radPageView1.Controls.Add(this.tabBookingLimit);
                        this.radPageView1.Location = new System.Drawing.Point(909, 38);
                        this.radPageView1.Name = "radPageView1";
                        this.radPageView1.SelectedTab = this.tabCurrentBooking;
                        this.radPageView1.Size = new System.Drawing.Size(540, 410);//(310, 410);
                        this.radPageView1.TabIndex = 0;
                        this.radPageView1.TabStop = true;

                        this.radPageView1.Text = "radPageView1";

                        // 
                        // tabNearestDrivers
                        // 
                        this.tabNearestDrivers.Controls.Add(this.btnRefreshNearestDrivers);
                        this.tabNearestDrivers.Location = new System.Drawing.Point(10, 37);
                        this.tabNearestDrivers.Name = "tabNearestDrivers";
                        this.tabNearestDrivers.Size = new System.Drawing.Size(289, 410);
                        this.tabNearestDrivers.Text = "Nearest Drivers";



                        this.btnRefreshNearestDrivers.Location = new System.Drawing.Point(257, 5);
                        this.btnRefreshNearestDrivers.Name = "btnRefreshNearestDrivers";
                        this.btnRefreshNearestDrivers.Size = new System.Drawing.Size(28, 28);
                        btnRefreshNearestDrivers.Visible = false;
                        this.btnRefreshNearestDrivers.TabIndex = 250;
                        this.btnRefreshNearestDrivers.TextImageRelation = System.Windows.Forms.TextImageRelation.ImageAboveText;
                        this.btnRefreshNearestDrivers.Click += new EventHandler(btnRefreshNearestDrivers_Click);
                        this.radPageView1.ResumeLayout(false);
                        this.tabNearestDrivers.ResumeLayout(false);

                        radPageView1.BringToFront();
                        radPageView1.Dock = DockStyle.Right;


                        this.tableLayoutPanel1.Controls.Add(this.radPageView1);
                    }

                    if (worker_Map == null)
                    {

                        worker_Map = new BackgroundWorker();
                        worker_Map.DoWork += new DoWorkEventHandler(worker_Map_DoWork);
                        worker_Map.RunWorkerCompleted += new RunWorkerCompletedEventHandler(worker_Map_RunWorkerCompleted);
                        worker_Map.WorkerSupportsCancellation = true;




                    }


                    if (webBrowser1 == null)
                    {


                        //  this.webBrowser1 = new WebBrowser();
                        //
                        this.webBrowser1 = new Gecko.GeckoWebBrowser();

                        this.webBrowser1.Location = new System.Drawing.Point(0, 0);
                        this.webBrowser1.MinimumSize = new System.Drawing.Size(20, 0);
                        this.webBrowser1.Name = "webBrowser1";
                        //  this.webBrowser1.ScrollBarsEnabled = false;
                        this.webBrowser1.Size = new System.Drawing.Size(275, 830);//(270, 700);//760);
                        //this.webBrowser1.Region = new Region(new RectangleF(0, 0, 300, 300));

                        this.webBrowser1.TabIndex = 225;
                        this.webBrowser1.Visible = false;
                        this.webBrowser1.Dock = DockStyle.Top;

                        this.tabNearestDrivers.Controls.Add(this.webBrowser1);

                        this.chkETA = new System.Windows.Forms.Label();

                        this.tabNearestDrivers.Controls.Add(chkETA);
                        // 
                        // chkETA
                        // 
                        //this.chkETA.BackColor = System.Drawing.Color.Red;
                        //this.chkETA.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                        //this.chkETA.ForeColor = System.Drawing.Color.White;
                        //this.chkETA.Location = new System.Drawing.Point(230, 0);
                        //this.chkETA.Name = "chkETA";
                        //this.chkETA.Size = new System.Drawing.Size(131, 21);
                        //this.chkETA.TabIndex = 508;
                        //this.chkETA.Visible = false;

                        this.chkETA.BackColor = System.Drawing.Color.LightYellow;
                        this.chkETA.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Bold);
                        this.chkETA.ForeColor = System.Drawing.Color.Black;
                        this.chkETA.Location = new System.Drawing.Point(webBrowser1.Location.X, 0);
                        this.chkETA.Name = "chkETA";
                        this.chkETA.Size = new System.Drawing.Size(147, 21);
                        this.chkETA.TabIndex = 508;
                        this.chkETA.Visible = false;
                        this.chkETA.AutoSize = true;

                        this.chkETA.DoubleClick += ChkETA_DoubleClick;



                        this.lblVehicleAvail = new System.Windows.Forms.Label();

                        this.tabNearestDrivers.Controls.Add(lblVehicleAvail);

                        this.lblVehicleAvail.BackColor = System.Drawing.Color.LightYellow;
                        this.lblVehicleAvail.Font = new System.Drawing.Font("Tahoma", 11F, System.Drawing.FontStyle.Bold);
                        this.lblVehicleAvail.ForeColor = System.Drawing.Color.Black;
                        this.lblVehicleAvail.Location = new System.Drawing.Point(200, 0);
                        this.lblVehicleAvail.Name = "lblVehicleAvail";
                        this.lblVehicleAvail.Size = new System.Drawing.Size(147, 22);
                        this.lblVehicleAvail.TabIndex = 508;
                        this.lblVehicleAvail.Visible = false;
                        this.lblVehicleAvail.AutoSize = false;
                        this.lblVehicleAvail.Dock = DockStyle.Bottom;
                        // this.lblVehicleAvail.Text = "       SALOON CAR(2)" + "   |   " + "ESTATE CAR(3)"  +Environment.NewLine+ "       8 SEATER(7)" + "          |   " + "6 SEATER(1)";
                        this.lblVehicleAvail.BringToFront();



                        if (AppVars.listUserRights.Count(c => c.functionId == "SHOW PLOT DETAILS ON MAP") > 0)
                        {



                            this.pnl_Drivers = new System.Windows.Forms.Panel();
                            this.pnl_Drivers.SuspendLayout();
                            // 

                            this.label2 = new System.Windows.Forms.Label();
                            this.label4 = new System.Windows.Forms.Label();
                            this.label5 = new System.Windows.Forms.Label();
                            this.label10 = new System.Windows.Forms.Label();
                            this.label11 = new System.Windows.Forms.Label();
                            this.label12 = new System.Windows.Forms.Label();
                            this.label13 = new System.Windows.Forms.Label();
                            this.label14 = new System.Windows.Forms.Label();
                            this.label15 = new System.Windows.Forms.Label();
                            this.label16 = new System.Windows.Forms.Label();

                            this.pnl_Drivers.BackColor = System.Drawing.Color.White;
                            this.pnl_Drivers.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.pnl_Drivers.Controls.Add(this.label12);
                            this.pnl_Drivers.Controls.Add(this.label13);
                            this.pnl_Drivers.Controls.Add(this.label14);
                            this.pnl_Drivers.Controls.Add(this.label15);
                            this.pnl_Drivers.Controls.Add(this.label16);
                            this.pnl_Drivers.Controls.Add(this.label11);
                            this.pnl_Drivers.Controls.Add(this.label10);
                            this.pnl_Drivers.Controls.Add(this.label5);
                            this.pnl_Drivers.Controls.Add(this.label4);
                            this.pnl_Drivers.Controls.Add(this.label2);
                            this.pnl_Drivers.Dock = System.Windows.Forms.DockStyle.Bottom;
                            this.pnl_Drivers.Location = new System.Drawing.Point(0, 0);
                            this.pnl_Drivers.Name = "pnl_Drivers";
                            this.pnl_Drivers.Size = new System.Drawing.Size(370, 46);
                            this.pnl_Drivers.TabIndex = 108;



                            // 
                            // label2
                            // 
                            this.label2.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label2.Location = new System.Drawing.Point(-1, -1);
                            this.label2.Name = "label2";
                            this.label2.Size = new System.Drawing.Size(90, 20);
                            this.label2.TabIndex = 0;
                            this.label2.Text = "Zone";
                            this.label2.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label4
                            // 
                            this.label4.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label4.Location = new System.Drawing.Point(86, -1);
                            this.label4.Name = "label4";
                            this.label4.Size = new System.Drawing.Size(81, 20);
                            this.label4.TabIndex = 1;
                            this.label4.Text = "Vehicles";
                            this.label4.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label5
                            // 
                            this.label5.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label5.ForeColor = System.Drawing.Color.Green;
                            this.label5.Location = new System.Drawing.Point(166, -1);
                            this.label5.Name = "label5";
                            this.label5.Size = new System.Drawing.Size(51, 20);
                            this.label5.TabIndex = 2;
                            this.label5.Text = "Clear";
                            this.label5.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label10
                            // 
                            this.label10.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label10.ForeColor = System.Drawing.Color.Red;
                            this.label10.Location = new System.Drawing.Point(216, -1);
                            this.label10.Name = "label10";
                            this.label10.Size = new System.Drawing.Size(51, 20);
                            this.label10.TabIndex = 3;
                            this.label10.Text = "Busy";
                            this.label10.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label11
                            // 
                            this.label11.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label11.Location = new System.Drawing.Point(266, -1);
                            this.label11.Name = "label11";
                            this.label11.Size = new System.Drawing.Size(103, 20);
                            this.label11.TabIndex = 4;
                            this.label11.Text = "Bookings";
                            this.label11.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label12
                            // 
                            this.label12.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label12.Location = new System.Drawing.Point(266, 18);
                            this.label12.Name = "Bookings";
                            this.label12.Size = new System.Drawing.Size(103, 30);
                            this.label12.TabIndex = 9;
                            this.label12.Text = "0";
                            this.label12.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label13
                            // 
                            this.label13.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label13.ForeColor = System.Drawing.Color.Red;
                            this.label13.Location = new System.Drawing.Point(216, 18);
                            this.label13.Name = "Busy";
                            this.label13.Size = new System.Drawing.Size(51, 30);
                            this.label13.TabIndex = 8;
                            this.label13.Text = "0";
                            this.label13.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label14
                            // 
                            this.label14.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label14.ForeColor = System.Drawing.Color.Green;
                            this.label14.Location = new System.Drawing.Point(166, 18);
                            this.label14.Name = "Clear";
                            this.label14.Size = new System.Drawing.Size(51, 30);
                            this.label14.TabIndex = 7;
                            this.label14.Text = "0";
                            this.label14.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label15
                            // 
                            this.label15.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label15.Location = new System.Drawing.Point(86, 18);
                            this.label15.Name = "Vehicle";
                            this.label15.Size = new System.Drawing.Size(81, 30);
                            this.label15.TabIndex = 6;
                            this.label15.Text = "0";
                            this.label15.TextAlign = System.Drawing.ContentAlignment.TopCenter;
                            // 
                            // label16
                            // 
                            this.label16.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
                            this.label16.Location = new System.Drawing.Point(-1, 18);
                            this.label16.Name = "Zone";
                            this.label16.Size = new System.Drawing.Size(90, 30);
                            this.label16.TabIndex = 5;
                            this.label16.Text = "0";
                            this.label16.TextAlign = System.Drawing.ContentAlignment.TopCenter;

                            this.pnl_Drivers.ResumeLayout(false);


                            this.tabNearestDrivers.Controls.Add(this.pnl_Drivers);
                            this.pnl_Drivers.BringToFront();
                        }

                    }


                    if (chkETA == null)
                        chkETA = new Label();
                    chkETA.Visible = false;

                    clsfaresworker f = new clsfaresworker();
                    f.fromAddress = txtFromAddress.Text.Trim();
                    f.toAddress = txtToAddress.Text.Trim();
                    f.CompanyId = objMaster.PrimaryKeyValue != null ? objMaster.Current.BookingStatusId : Enums.BOOKINGSTATUS.WAITING;
                    f.fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                    f.toLocTypeId = ddlToLocType.SelectedValue.ToInt();

                    worker_Map.RunWorkerAsync(f);


                    if (pnl_Drivers != null && ddlPickupPlot.SelectedValue != null && (pnl_Drivers.Tag == null || pnl_Drivers.Tag.ToInt() != ddlPickupPlot.SelectedValue.ToInt()))
                    {
                        using (TaxiDataContext db = new TaxiDataContext())
                        {

                            var data = db.ExecuteQuery<Taxi_AppMain.General.stp_GetPlotDetailsForBookingResult>("exec stp_GetPlotDetailsForBooking {0},{1},{2}", ddlPickupPlot.SelectedValue.ToInt()
                                   , string.Format("{0:dd/MM/yyyy HH:mm}", dtpPickupDate.Value.ToDate() + dtpPickupTime.Value.ToDateTime().TimeOfDay).ToDateTime(), ddlVehicleType.SelectedValue.ToInt()).FirstOrDefault();

                            if (data != null)
                            {
                                label16.Text = ddlPickupPlot.Text;

                                if (label16.Text.Contains("."))
                                    label16.Text = label16.Text.Substring(label16.Text.IndexOf(".") + 1).Trim();

                                label15.Text = data.Vehicles.ToStr();
                                label14.Text = data.Clear.ToStr();
                                label13.Text = data.Busy.ToStr();
                                label12.Text = data.Bookings.ToStr();
                            }

                        }
                    }


                    if (pnl_Drivers != null)
                        pnl_Drivers.Tag = ddlPickupPlot.SelectedValue.ToInt();


                }
            }
            catch (Exception ex)
            {


            }
        }

        private void ShowNearestDrivers()
        {
            //NC 130919
            StringBuilder nearestDrvLocations = new StringBuilder();
            double jobLatitude = 0;
            double jobLongitude = 0;
            double milesAway = 5;


            if (ddlMilesDrvs2 == null)
            {
                this.ddlMilesDrvs2 = new System.Windows.Forms.ComboBox();


                this.ddlMilesDrvs2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
                this.ddlMilesDrvs2.Font = new System.Drawing.Font("Tahoma", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.ddlMilesDrvs2.FormattingEnabled = true;
                this.ddlMilesDrvs2.Items.AddRange(new object[] {
                        "within 3 miles away",
                        "within 5 miles away",
                        "within 10 miles away"});
                //this.ddlMilesDrvs2.Location = new System.Drawing.Point(929, 349);
                this.ddlMilesDrvs2.Location = new System.Drawing.Point(929, 190);
                //988, 214

                this.ddlMilesDrvs2.Name = "ddlMilesDrvs2";
                this.ddlMilesDrvs2.Size = new System.Drawing.Size(283, 22);
                this.ddlMilesDrvs2.TabIndex = 227;
                //this.ddlMilesDrvs2.Visible = false;

                ddlMilesDrvs2.Visible = true;

                ddlMilesDrvs2.SelectedItem = ddlMilesDrvs2.Items[1];

                this.ddlMilesDrvs2.SelectedIndexChanged += new System.EventHandler(this.ddlMilesDrvs2_SelectedIndexChanged);


                this.tabNearestDrivers.Controls.Add(this.ddlMilesDrvs2);
                ddlMilesDrvs2.BringToFront();
            }

            if (ddlMilesDrvs2.SelectedIndex == 0)
                milesAway = 3;
            else if (ddlMilesDrvs2.SelectedIndex == 2)
                milesAway = 10;


            int? jobStatusId = objMaster.PrimaryKeyValue != null ? objMaster.Current.BookingStatusId : Enums.BOOKINGSTATUS.WAITING;
            string fromAddress = General.GetPostCodeMatch(txtFromAddress.Text.Trim().ToUpper());
            string toAddress = General.GetPostCodeMatch(txtToAddress.Text.Trim().ToUpper());


            //Grid
            if (grdDrivers == null)
            {

                this.grdDrivers = new System.Windows.Forms.DataGridView();
                // ((System.ComponentModel.ISupportInitialize)(this.grdDrivers)).BeginInit();



                System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle1 = new System.Windows.Forms.DataGridViewCellStyle();
                System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle3 = new System.Windows.Forms.DataGridViewCellStyle();
                System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle4 = new System.Windows.Forms.DataGridViewCellStyle();
                System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle2 = new System.Windows.Forms.DataGridViewCellStyle();



                this.DriverId = new System.Windows.Forms.DataGridViewTextBoxColumn();
                this.details = new System.Windows.Forms.DataGridViewTextBoxColumn();
                this.btnDespatchJob = new System.Windows.Forms.DataGridViewButtonColumn();

                this.DriverId.HeaderText = "DriverId";
                this.DriverId.Name = "DriverId";
                this.DriverId.ReadOnly = true;
                this.DriverId.Visible = false;
                // 
                // details
                // 
                this.details.HeaderText = "details";
                this.details.Name = "details";
                this.details.ReadOnly = true;
                this.details.Width = 220;
                // 
                // btnDespatchJob
                // 
                dataGridViewCellStyle2.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleCenter;
                dataGridViewCellStyle2.ForeColor = System.Drawing.Color.Black;
                dataGridViewCellStyle2.SelectionForeColor = System.Drawing.Color.Black;
                this.btnDespatchJob.DefaultCellStyle = dataGridViewCellStyle2;
                this.btnDespatchJob.HeaderText = "btnDespatchJob";
                this.btnDespatchJob.Name = "btnDespatchJob";
                this.btnDespatchJob.ReadOnly = true;
                this.btnDespatchJob.Text = "Despatch";
                this.btnDespatchJob.UseColumnTextForButtonValue = true;
                this.btnDespatchJob.Width = 100;


                this.grdDrivers.AllowUserToAddRows = false;
                this.grdDrivers.AllowUserToDeleteRows = false;
                this.grdDrivers.BackgroundColor = System.Drawing.Color.FloralWhite;
                dataGridViewCellStyle1.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
                dataGridViewCellStyle1.BackColor = System.Drawing.Color.SteelBlue;
                dataGridViewCellStyle1.Font = new System.Drawing.Font("Segoe UI", 8.25F);
                dataGridViewCellStyle1.ForeColor = System.Drawing.Color.White;
                dataGridViewCellStyle1.SelectionBackColor = System.Drawing.SystemColors.Highlight;
                dataGridViewCellStyle1.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
                dataGridViewCellStyle1.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
                this.grdDrivers.ColumnHeadersDefaultCellStyle = dataGridViewCellStyle1;
                this.grdDrivers.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize;
                this.grdDrivers.ColumnHeadersVisible = false;
                this.grdDrivers.Columns.AddRange(new System.Windows.Forms.DataGridViewColumn[] {
                            this.DriverId,
                            this.details,
                            this.btnDespatchJob});
                dataGridViewCellStyle3.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
                dataGridViewCellStyle3.BackColor = System.Drawing.SystemColors.Window;
                dataGridViewCellStyle3.Font = new System.Drawing.Font("Segoe UI", 8.25F);
                dataGridViewCellStyle3.ForeColor = System.Drawing.Color.Black;
                dataGridViewCellStyle3.SelectionBackColor = System.Drawing.Color.FloralWhite;
                dataGridViewCellStyle3.SelectionForeColor = System.Drawing.Color.Black;
                dataGridViewCellStyle3.WrapMode = System.Windows.Forms.DataGridViewTriState.False;
                this.grdDrivers.DefaultCellStyle = dataGridViewCellStyle3;
                this.grdDrivers.Location = new System.Drawing.Point(929, 36);
                this.grdDrivers.Name = "grdDrivers";
                this.grdDrivers.ReadOnly = true;
                dataGridViewCellStyle4.Alignment = System.Windows.Forms.DataGridViewContentAlignment.MiddleLeft;
                dataGridViewCellStyle4.BackColor = System.Drawing.SystemColors.Control;
                dataGridViewCellStyle4.Font = new System.Drawing.Font("Segoe UI", 8.25F);
                dataGridViewCellStyle4.ForeColor = System.Drawing.SystemColors.WindowText;
                dataGridViewCellStyle4.SelectionBackColor = System.Drawing.Color.AliceBlue;
                dataGridViewCellStyle4.SelectionForeColor = System.Drawing.SystemColors.HighlightText;
                dataGridViewCellStyle4.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
                this.grdDrivers.RowHeadersDefaultCellStyle = dataGridViewCellStyle4;
                this.grdDrivers.RowHeadersVisible = false;
                this.grdDrivers.RowTemplate.DefaultCellStyle.BackColor = System.Drawing.Color.FloralWhite;
                this.grdDrivers.RowTemplate.DefaultCellStyle.ForeColor = System.Drawing.Color.Black;
                this.grdDrivers.RowTemplate.DefaultCellStyle.SelectionBackColor = System.Drawing.Color.FloralWhite;
                this.grdDrivers.RowTemplate.DefaultCellStyle.SelectionForeColor = System.Drawing.Color.Black;
                this.grdDrivers.RowTemplate.DefaultCellStyle.WrapMode = System.Windows.Forms.DataGridViewTriState.True;
                this.grdDrivers.RowTemplate.Height = 45;
                this.grdDrivers.RowTemplate.Resizable = System.Windows.Forms.DataGridViewTriState.True;
                this.grdDrivers.SelectionMode = System.Windows.Forms.DataGridViewSelectionMode.FullRowSelect;
                // this.grdDrivers.Size = new System.Drawing.Size(286, 650);
                this.grdDrivers.Size = new System.Drawing.Size(310, 150);
                this.grdDrivers.TabIndex = 226;
                this.grdDrivers.CellClick += new System.Windows.Forms.DataGridViewCellEventHandler(this.grdDrivers_CellClick);



                //  ((System.ComponentModel.ISupportInitialize)(this.grdDrivers)).EndInit();

                this.tabNearestDrivers.Controls.Add(this.grdDrivers);
                grdDrivers.Dock = DockStyle.Bottom;
            }

            using (TaxiDataContext db = new TaxiDataContext())
            {
                var coord = db.stp_getCoordinatesByAddress(General.GetPostCodeMatch(fromAddress), General.GetPostCodeMatch(fromAddress)).ToList().FirstOrDefault();



                Gen_Coordinate pickupCoord = null;

                if (coord != null && coord.Latitude != null && coord.Latitude != 0)
                {

                    pickupCoord = new Gen_Coordinate();
                    pickupCoord.Latitude = coord.Latitude;
                    pickupCoord.Longitude = coord.Longtiude;
                }
                //   Gen_Coordinate pickupCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == fromAddress);
                if (pickupCoord != null)
                {
                    jobLatitude = Convert.ToDouble(pickupCoord.Latitude);
                    jobLongitude = Convert.ToDouble(pickupCoord.Longitude);
                }

            }

            if (jobStatusId == Enums.BOOKINGSTATUS.WAITING)
            {
                // IList ListofAvailDrvs = null;

                int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();

                grdDrivers.Rows.Clear();

                using (TaxiDataContext db = new TaxiDataContext())
                {

                    var ListofAvailDrvs = (from a in db.GetTable<Fleet_DriverQueueList>().Where(c => c.Status == true &&
                                  (c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE))
                                           join b in db.GetTable<Fleet_Driver_Location>().Where(c => c.Latitude != 0)
                                           on a.DriverId equals b.DriverId
                                           //   where a.Fleet_Driver.VehicleTypeId == vehicleTypeId
                                           select new
                                           {
                                               DriverId = a.DriverId,
                                               DriverNo = a.Fleet_Driver.DriverNo,
                                               DriverLocation = b.LocationName,
                                               Latitude = b.Latitude,
                                               Longitude = b.Longitude,
                                               NoofPassengers = a.Fleet_Driver.Fleet_VehicleType.NoofPassengers
                                           }).ToList();



                    int pax = db.Fleet_VehicleTypes.FirstOrDefault(c => c.Id == ddlVehicleType.SelectedValue.ToInt()).DefaultIfEmpty().NoofPassengers.ToInt();

                    var ListofPDAAvailDrvs2 = ListofAvailDrvs.Where(c => c.NoofPassengers >= pax).ToList();






                    //ListofAvailDrvs = (from a in AppVars.BLData.GetAll<Fleet_DriverQueueList>(c => c.Status == true && c.Fleet_Driver.HasPDA == true &&
                    //               (c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE)).AsEnumerable()
                    //                      join b in AppVars.BLData.GetAll<Fleet_Driver_Location>(c => c.Latitude != 0).AsEnumerable()
                    //                      on a.DriverId equals b.DriverId
                    //                      select new
                    //                      {
                    //                          DriverId = a.DriverId,
                    //                          DriverNo = a.Fleet_Driver.DriverNo,
                    //                          DriverLocation = b.LocationName,
                    //                          Latitude = b.Latitude,
                    //                          Longitude = b.Longitude
                    //                      }).ToList();

                    var nearestDrivers = ListofPDAAvailDrvs2.Select(args => new
                    {
                        args.DriverId,
                        // MilesAwayFromPickup = GetNearestDistance(args.DriverLocation,fromAddress) ,
                        MilesAwayFromPickup = new DotNetCoords.LatLng(args.Latitude, args.Longitude).DistanceMiles(new DotNetCoords.LatLng(jobLatitude, jobLongitude)),
                        args.DriverNo,
                        Latitude = args.Latitude,
                        Longitude = args.Longitude,
                        Location = args.DriverLocation

                    }).OrderBy(args => args.MilesAwayFromPickup).Where(c => c.MilesAwayFromPickup <= milesAway).Take(3).ToList();

                    for (int i = 0; i < nearestDrivers.Count; i++)
                    {
                        string MILESX = string.Empty;
                        double milesX = Math.Round(nearestDrivers[i].MilesAwayFromPickup, 1);
                        if (milesX > 0.1 && AppVars.listUserRights.Count(c => c.functionId == "SHOW ACTUAL DRIVER DISTANCE") > 0)
                        {
                            MILESX = General.GetETADistanceWithDuration(nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude, Convert.ToDouble(jobLatitude) + "," + Convert.ToDouble(jobLongitude), AppVars.etaKey).ToStr();


                            string dist = "";
                            string time = Math.Ceiling((nearestDrivers[i].MilesAwayFromPickup / 0.25)) + " min(s)";

                            if (MILESX.Contains(","))
                            {
                                dist = MILESX.Split(',')[0];
                                time = MILESX.Split(',')[1] + "min(s)";
                            }
                            else
                                dist = MILESX;

                            grdDrivers.Rows.Add(nearestDrivers[i].DriverId, "Drv " + nearestDrivers[i].DriverNo + " - " + dist + " mi ," + time);
                        }
                        else
                        {
                            grdDrivers.Rows.Add(nearestDrivers[i].DriverId, "Drv " + nearestDrivers[i].DriverNo + " - " + Math.Round(milesX, 1) + " mi ," + Math.Ceiling((nearestDrivers[i].MilesAwayFromPickup / 0.25)) + " min(s)");
                        }

                        nearestDrvLocations.Append("['<h4>" + nearestDrivers[i].Location + "</h4>'," + nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "],");
                        // grdDrivers.Rows.Add(nearestDrivers[i].DriverId, nearestDrivers[i].DriverNo + " is " + milesX + " miles away");

                    }

                }
            }

            if (webBrowser1.Visible == false)
            {
                webBrowser1.Visible = true;
                grdDrivers.Size = new Size(grdDrivers.Size.Width, 150);
                grdDrivers.Location = new Point(967, 211);
                grdDrivers.Font = new Font("Tahoma", 11, FontStyle.Bold);
                grdDrivers.BringToFront();
                ddlMilesDrvs2.Visible = true;
                ddlMilesDrvs2.BringToFront();
                ddlMilesDrvs2.Dock = DockStyle.Bottom;
            }


        }

        private void grdDrivers_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (grdDrivers.Columns[e.ColumnIndex].Name == "btnDespatchJob" && grdDrivers.CurrentCell is DataGridViewButtonCell)
            {
                if (RadMessageBox.Show("Are you sure you want to Despatch the job?", "Despatch", MessageBoxButtons.YesNo, RadMessageIcon.Question) == DialogResult.Yes)
                {
                    FillDriversCombo();

                    ddlDriver.SelectedValue = grdDrivers.CurrentRow.Cells["DriverId"].Value.ToInt();
                    Save();

                    if (!this.IsDespatched)
                    {
                        ddlDriver.SelectedValue = null;
                    }
                    else
                    {

                        Close();
                    }
                }


            }
        }
        Label lblVehicleAvail = null;
        void worker_Map_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)
        {

            try
            {
                if (e.Result != null && (e.Result is IList))
                {


                    grdPickupDateTime.DataSource = e.Result;
                    if (grdPickupDateTime.Columns.Count > 0)
                    {
                        //grdPickupDateTime.ShowRowHeaderColumn = false;
                        grdPickupDateTime.Columns["Id"].Visible = false;
                        grdPickupDateTime.Columns["CompanyId"].Visible = false;
                        grdPickupDateTime.Columns["Pickup"].Visible = false;
                        grdPickupDateTime.Columns["Time"].Width = 60;
                        grdPickupDateTime.Columns["PickUpAddress"].Width = 290;//190;
                        grdPickupDateTime.Columns["PickUpAddress"].HeaderText = "Pickup Address";
                    }
                    //ShowLimitedBookings((dtpPickupTime.Value.ToDateTime()));

                    this.tabCurrentBooking.Text = "Current Bookings(" + grdPickupDateTime.Rows.Count + ")";
                }
                else
                {


                    if (txtFromAddress.Text.ToStr().Trim().Length > 0 && txtToAddress.Text.ToStr().Trim().Length == 0)
                    {
                        if (ddlFromLocType.SelectedValue.ToInt() != Enums.LOCATION_TYPES.AIRPORT)
                        {

                            if (pnlVia != null && pnlVia.Visible)
                            {
                                FocusOnViaAddress();
                            }
                            else
                                FocusOnToAddress();
                        }


                    }
                    else
                    {
                        if (aTxt != null && aTxt.Name == "txtFromAddress")
                        {
                            FocusOnToAddress();
                        }
                        //else if (ddlCustomerName.Text.Trim().Length == 0)
                        //{
                        else
                        {
                            if (pnlVia != null && pnlVia.Visible == true)
                            {
                                pnlVia.Select();
                                txtViaAddress.Focus();
                            }
                            else
                            {

                                if (this.Tag != null && this.Tag.ToStr() == "f12")
                                {
                                    if (this.Tag.ToStr() == "f12" && this.CallRefNo.ToStr().Trim().Length > 0)
                                    {
                                        FocusOnPickupTime();
                                        this.Tag = "cli";

                                    }
                                }
                                else
                                {
                                    if (AppVars.listUserRights.Count(c => c.functionId == "OPTIONAL CUSTOMER DETAILS FOR ADVANCE BOOKING") == 0)
                                        FocusOnCustomer();
                                    else
                                        FocusOnDriver();


                                }

                            }
                        }
                        //}
                        //else
                        //{
                        //    FocusOnVehicle();
                        //}
                    }

                    if (chkETA.Tag.ToStr().Length > 0)
                    {
                        chkETA.Visible = true;
                        chkETA.Text = chkETA.Tag.ToStr();
                        chkETA.BringToFront();


                        if (lblVehicleAvail.Tag.ToStr().Trim().Length > 0)
                        {

                            if (lblVehicleAvail.Tag.ToStr().Contains(Environment.NewLine))
                                this.lblVehicleAvail.Size = new System.Drawing.Size(147, 40);

                            lblVehicleAvail.Visible = true;
                            lblVehicleAvail.Text = lblVehicleAvail.Tag.ToStr();
                            lblVehicleAvail.BringToFront();
                        }
                    }


                }




            }
            catch
            {


            }
        }
        //fwd00


        void worker_Map_DoWork(object sender, DoWorkEventArgs e)
        {
            try
            {


                if (e.Argument is DateTime)
                {

                    DateTime Time = e.Argument.ToDateTime();

                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        db.CommandTimeout = 4;
                        db.DeferredLoadingEnabled = false;

                        var query = (from a in db.Bookings

                                     where (a.PickupDateTime.Value >= Time.AddHours(-1) && a.PickupDateTime.Value <= Time.AddHours(1))

                                      && (a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING
                                                 || a.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || a.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                                     // && c.PickupDateTime.Value.TimeOfDay == Time.Value.TimeOfDay


                                     select new
                                     {
                                         id = a.Id,
                                         Time = string.Format("{0:HH:mm}", a.PickupDateTime.Value),
                                         Pickup = a.PickupDateTime,
                                         PickupAddress = a.FromAddress,
                                         CompanyId = a.CompanyId

                                     }).OrderBy(c => c.Pickup).ToList();
                        //ls = db.Bookings.Where(a => a.PickupDateTime.Value >= Time.AddHours(-1) && a.PickupDateTime.Value <= Time.AddHours(1) && (a.BookingStatusId == Enums.BOOKINGSTATUS.WAITING || a.BookingStatusId == Enums.BOOKINGSTATUS.PENDING
                        //                   || a.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED || a.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)

                        //  ).OrderBy(c => c.PickupDateTime).ToList();



                        var SlectTimeRangeListAsc = query.Where(c => c.Pickup.ToDateTime() > Time.ToDateTime()).OrderBy(c => c.Pickup).FirstOrDefault();
                        var SlectTimeRangeListDesc = query.Where(c => c.Pickup.ToDateTime() < Time.ToDateTime()).OrderByDescending(c => c.Pickup).FirstOrDefault();

                        if (SlectTimeRangeListAsc != null)
                        {
                            PickupTimeAsc = SlectTimeRangeListAsc.id;
                        }
                        else
                        {
                            PickupTimeAsc = 0;
                        }


                        if (SlectTimeRangeListDesc != null)
                        {
                            PickupTimeDesc = SlectTimeRangeListDesc.id;
                        }

                        else
                        {
                            PickupTimeDesc = 0;
                        }


                        e.Result = query;


                    }


                }
                else if (e.Argument is clsfaresworker)
                {


                    clsfaresworker fworker = (clsfaresworker)e.Argument;


                    int? jobStatusId = fworker.CompanyId;

                    string fromAddress = General.GetPostCodeMatch(fworker.fromAddress.Trim().ToUpper());
                    string toAddress = General.GetPostCodeMatch(fworker.toAddress.ToStr().Trim().ToUpper());

                    int fromLocTypeId = fworker.fromLocTypeId.ToInt();
                    int toLocTypeId = fworker.toLocTypeId.ToInt();



                    string fullFromAddress = fworker.fromAddress.Trim().ToUpper();
                    string fulltoAddress = fworker.toAddress.ToStr().Trim().ToUpper();

                    stp_getCoordinatesByAddressResult pickupCoords = null;
                    stp_getCoordinatesByAddressResult destCoord = null;

                    try
                    {
                        pickupCoords = General.GetCoordinatesByAddress(fullFromAddress, fromAddress);
                        destCoord = General.GetCoordinatesByAddress(fulltoAddress, toAddress);

                        //using (TaxiDataContext db = new TaxiDataContext())
                        //{
                        //    pickupCoords = db.stp_getCoordinatesByAddress(fullFromAddress, fromAddress).FirstOrDefault();

                        //    if (fulltoAddress.Length > 0)
                        //    {
                        //        destCoord = db.stp_getCoordinatesByAddress(fulltoAddress, toAddress).FirstOrDefault();
                        //    }
                        //}
                    }
                    catch
                    {

                    }


                    string originString = string.Empty;
                    string destString = string.Empty;
                    if (pickupCoords != null && pickupCoords.Latitude != null && pickupCoords.Latitude != 0)
                    {
                        originString = pickupCoords.Latitude + "," + pickupCoords.Longtiude;
                    }
                    else
                    {
                        fullFromAddress = fromAddress;
                        originString = fullFromAddress;

                    }
                    if (destCoord != null && destCoord.Latitude != null && destCoord.Latitude != 0)
                    {
                        destString = destCoord.Latitude + "," + destCoord.Longtiude;
                    }
                    else
                    {
                        fulltoAddress = toAddress;
                        destString = fulltoAddress;

                    }

                    if (string.IsNullOrEmpty(fromAddress) && pickupCoords == null)
                        return;


                    if (!string.IsNullOrEmpty(toAddress))
                        toAddress += " UK";


                    string pickupPoint = string.Empty;
                    string pickupPointImageUrl = string.Empty;

                    Gen_Coordinate pickupCoord = null;


                    if (pickupCoords != null && pickupCoords.Latitude != null && pickupCoords.Latitude != 0)
                    {
                        pickupCoord = new Gen_Coordinate();
                        pickupCoord.Latitude = pickupCoords.Latitude;
                        pickupCoord.Longitude = pickupCoords.Longtiude;
                        pickupCoord.PostCode = fromAddress;

                    }
                    else
                    {

                        pickupCoord = General.GetObject<Gen_Coordinate>(c => c.PostCode == fromAddress);

                        if (pickupCoord == null)
                        {

                            var coord = GetDistance.PostCodeToLongLat(fromAddress, "GBP");


                            if (coord != null)
                            {
                                pickupCoord = new Gen_Coordinate();
                                pickupCoord.PostCode = fromAddress;
                                pickupCoord.Latitude = coord.Value.Latitude;
                                pickupCoord.Longitude = coord.Value.Longitude;

                            }
                        }
                    }


                    StringBuilder nearestDrvLocations = new StringBuilder();
                    double jobLatitude = 0;
                    double jobLongitude = 0;


                    if (!string.IsNullOrEmpty(fullFromAddress) && string.IsNullOrEmpty(fulltoAddress))
                    {

                        if (pickupCoord != null)
                        {

                            pickupPoint = "['<h4>test</h4>'," + pickupCoord.Latitude + "," + pickupCoord.Longitude + "],";

                            pickupPointImageUrl = "'http://google.com/mapfiles/kml/paddle/A.png',";
                            jobLatitude = Convert.ToDouble(pickupCoord.Latitude);
                            jobLongitude = Convert.ToDouble(pickupCoord.Longitude);

                        }
                        else
                            return;

                    }





                    if (pickupCoord != null)
                    {
                        jobLatitude = Convert.ToDouble(pickupCoord.Latitude);
                        jobLongitude = Convert.ToDouble(pickupCoord.Longitude);
                    }


                    if (jobStatusId == Enums.BOOKINGSTATUS.WAITING)
                    {
                        if (nearestDriverString.ToStr().Contains("" + jobLatitude + "") == false)
                        {

                            if (AppVars.listUserRights.Count(c => c.functionId == "SHOW VEHICLE DETAILS") == 0)
                            {

                                using (TaxiDataContext db = new TaxiDataContext())
                                {


                                    var ListofAvailDrvs = db.stp_getavailabledrivers().ToList();

                                    var nearestDrivers = ListofAvailDrvs.Select(args => new
                                    {
                                        args.driverid,
                                        // MilesAwayFromPickup = GetNearestDistance(args.DriverLocation,fromAddress) ,
                                        MilesAwayFromPickup = new DotNetCoords.LatLng(args.latitude, args.longitude).DistanceMiles(new DotNetCoords.LatLng(jobLatitude, jobLongitude)),
                                        args.driverno,
                                        Latitude = args.latitude,
                                        Longitude = args.longitude,
                                        Location = args.driverno

                                    }).OrderBy(args => args.MilesAwayFromPickup).Take(3).ToList();

                                    for (int i = 0; i < nearestDrivers.Count; i++)
                                    {

                                        nearestDrvLocations.Append("" + nearestDrivers[i].Location + "'," + nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "],");
                                        if (i == 0)
                                        {

                                            try
                                            {

                                                string eta = Math.Ceiling(((nearestDrivers[i].MilesAwayFromPickup / 30) * 60)).ToInt().ToStr();
                                                if (eta.ToStr().Trim().ToInt() > 15)
                                                    eta = "15+";

                                                chkETA.Tag = "ETA : " + eta + " min";
                                                nearestETA = nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "|" + jobLatitude + "," + jobLongitude + "|" + nearestDrivers[i].driverno.ToStr() + "|" + nearestDrivers[i].driverid.ToStr();

                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }

                                }

                            }
                            else
                            {

                                using (TaxiDataContext db = new TaxiDataContext())
                                {


                                    //  var ListofAvailDrvs = db.stp_getavailabledrivers().ToList();

                                    var ListofAvailDrvs = db.ExecuteQuery<stp_getavailabledriversForBooking>("exec stp_getavailabledriversForBooking {0},{1}", fworker.vehicleTypeId.ToInt(), fworker.fromZoneId.ToInt()).ToList();


                                    var nearestDrivers = ListofAvailDrvs.Select(args => new
                                    {
                                        args.driverid,
                                        // MilesAwayFromPickup = GetNearestDistance(args.DriverLocation,fromAddress) ,
                                        MilesAwayFromPickup = new DotNetCoords.LatLng(args.latitude, args.longitude).DistanceMiles(new DotNetCoords.LatLng(jobLatitude, jobLongitude)),
                                        args.driverno,
                                        Latitude = args.latitude,
                                        Longitude = args.longitude,
                                        Location = args.driverno

                                    }).OrderBy(args => args.MilesAwayFromPickup).Take(3).ToList();

                                    for (int i = 0; i < nearestDrivers.Count; i++)
                                    {

                                        nearestDrvLocations.Append("" + nearestDrivers[i].Location + "'," + nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "],");
                                        if (i == 0)
                                        {

                                            try
                                            {

                                                string eta = Math.Ceiling(((nearestDrivers[i].MilesAwayFromPickup / 30) * 60)).ToInt().ToStr();
                                                if (eta.ToStr().Trim().ToInt() > 15)
                                                    eta = "15+";

                                                chkETA.Tag = "ETA : " + eta + " min";
                                                //   nearestETA = nearestDrivers[i].Latitude + "," + nearestDrivers[i].Longitude + "|" + jobLatitude + "," + jobLongitude + "|" + nearestDrivers[i].driverno.ToStr() + "|" + nearestDrivers[i].driverid.ToStr();

                                            }
                                            catch
                                            {

                                            }
                                        }
                                    }


                                    //if(Debugger.IsAttached)
                                    //{

                                    lblVehicleAvail.Tag = null;
                                    var groupedVehicles = ListofAvailDrvs.GroupBy(args => new { args.VehicleType, args.driverworkstatusid })
                                                                         .Select(args => new { args.Key.VehicleType, Cnt = args.Count() }).ToList();

                                    for (int i = 0; i < groupedVehicles.Count; i++)
                                    {
                                        if (i % 2 == 0)
                                        {

                                            lblVehicleAvail.Tag += "         " + groupedVehicles[i].VehicleType + "(" + groupedVehicles[i].Cnt + ")";

                                        }
                                        else
                                        {
                                            lblVehicleAvail.Tag = lblVehicleAvail.Tag.ToStr() + "   |   " + groupedVehicles[i].VehicleType + "(" + groupedVehicles[i].Cnt + ")";

                                            if (groupedVehicles.Count > (i + 1))
                                                lblVehicleAvail.Tag += Environment.NewLine;
                                        }
                                    }





                                    // this.lblVehicleAvail.Text = "       SALOON CAR(2)" + "   |   " + "ESTATE CAR(3)"  +Environment.NewLine+ "       8 SEATER(7)" + "          |   " + "6 SEATER(1)";




                                    //}

                                }

                            }

                            /////
                            if (nearestDrvLocations.Length > 0)
                                nearestDrvLocations[nearestDrvLocations.Length - 1] = ' ';
                            else
                            {
                                if (pickupPoint.Length > 0)
                                    pickupPoint = pickupPoint.Remove(pickupPoint.LastIndexOf(','));


                            }
                        }
                        else if (nearestDriverString.ToStr().Contains(">>>"))
                        {
                            nearestDriverString = nearestDriverString.Substring(nearestDriverString.IndexOf(">>>") + 3);
                            nearestDrvLocations.Append(nearestDriverString);

                        }

                    }
                    else
                    {

                        if (pickupPoint.Length > 0)
                            pickupPoint = pickupPoint.Remove(pickupPoint.LastIndexOf(','));


                    }
                    string text = "";


                    if (!string.IsNullOrEmpty(fullFromAddress) && !string.IsNullOrEmpty(fulltoAddress))
                    {
                        text = GetMapTemplate("{lat: " + jobLatitude + ", lng: " + jobLongitude + " }", originString, destString, fullFromAddress, fulltoAddress, nearestDrvLocations.ToString());
                    }
                    else
                    {


                        text = GetMapTemplatePickup("{lat: " + jobLatitude + ", lng: " + jobLongitude + " }", jobLatitude + "," + jobLongitude, "", fullFromAddress, fulltoAddress, nearestDrvLocations.ToString());

                    }


                    e.Result = text;



                    SameFromAddress = originString;
                    SameToAddress = destString;




                    ShowMapDirections(e.Result.ToStr());
                }

            }
            catch (Exception ex)
            {

                e.Result = "";

            }
        }


        delegate bool UIDelegateX(string text);


        string OSMFromLatLng = "";
        string OSMToLatLng = "";
        string OSMCenterPoint = "";
        string OSMVia = "";


        //delegate bool UIDelegateX(string text);

        private bool ShowMapDirections(string text)
        {


            if (this.InvokeRequired)
            {

                this.BeginInvoke(new UIDelegateX(ShowMapDirections), text);
            }
            else
            {

                if (webBrowser1.Visible == false)
                {
                    webBrowser1.Visible = true;

                }


                if (text.ToStr().Trim().Length > 0)
                {
                    webBrowser1.UseHttpActivityObserver = false;

                    // webBrowser1.LoadHtml(text.ToStr().Trim());

                    string mapname = "OSM";         // osm , here , google , makbook
                    bool ShowFullScreen = false;



                    if (SameFromAddress == SameToAddress)
                    {
                        // Split the string "lat,lng" into an array
                        string[] coords = OSMFromLatLng.Split(',');

                        // Convert string to double
                        double lat = Convert.ToDouble(coords[0]);
                        double lng = Convert.ToDouble(coords[1]);
                        // Slightly adjust the coordinates
                        lat += 0.0001;  // Small increment to latitude
                        lng += 0.0001;  // Small increment to longitude
                                        // Update OSMToLatLng with new values
                        OSMFromLatLng = $"{lat},{lng}";
                    }

                    string URL = "https://www.treasurecloud.co.uk/openstreet/forms/drawmap.html?&mapname=" + mapname + "&FromLatLng=" + OSMFromLatLng + "&ToLatLng=" + OSMToLatLng + "&CenterPoint=" + OSMCenterPoint + "&via=" + OSMVia + "&ShowFullScreen=" + ShowFullScreen + "&defaultclientid=" + AppVars.objPolicyConfiguration.DefaultClientId.ToStr() + "&routetype=" + AppVars.routemode.ToStr();



                    // Construct the base URL without query parameters
                    // string URL = "http://localhost/work/Forms/testmap.html?&mapname="+mapname+"&FromLatLng=" + OSMFromLatLng+"&ToLatLng="+OSMToLatLng+"&CenterPoint="+OSMCenterPoint+"&via="+OSMVia+"&ShowFullScreen="+ ShowFullScreen;

                    // Navigate to the base URL
                    webBrowser1.Navigate(URL);

                }

                this.radPageView1.SelectedTab = this.tabNearestDrivers;


            }

            return true;
        }

        //private bool ShowMapDirections(string text)
        //{


        //    if (this.InvokeRequired)
        //    {

        //        this.BeginInvoke(new UIDelegateX(ShowMapDirections), text);
        //    }
        //    else
        //    {

        //        if (webBrowser1.Visible == false)
        //        {
        //            webBrowser1.Visible = true;

        //        }


        //        if (text.ToStr().Trim().Length > 0)
        //        {
        //            webBrowser1.UseHttpActivityObserver = false;

        //            webBrowser1.LoadHtml(text.ToStr().Trim());

        //        }

        //        this.radPageView1.SelectedTab = this.tabNearestDrivers;


        //    }

        //    return true;
        //}


        private BackgroundWorker worker_Map = null;


        void btnRefreshNearestDrivers_Click(object sender, EventArgs e)
        {
            LoadNearest();
        }



        private void opt_return_Validating(object sender, CancelEventArgs e)
        {
            if (CheckReturnBooking(opt_return.Checked ? ToggleState.On : ToggleState.Off) == false)
                e.Cancel = true;


        }





        private void opt_one_CheckedChanged(object sender, EventArgs e)
        {
            //if (opt_one.Tag != null)
            //    return;

            //if (opt_one.Checked==false && txtToAddress.Text.Length == 0)
            //{
            //    MessageBox.Show("Please enter Drop-Off Address first");
            //    opt_one.Tag = 1;
            //    opt_one.Checked = true;
            //    opt_one.Tag = null;
            //    FocusOnToAddress();

            //}
            //else
            //{


            SetJourneyWise(opt_one.Checked ? ToggleState.On : ToggleState.Off);

            if (IsFormShown && opt_one.Checked && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
            //  }
        }

        private void opt_return_CheckedChanged(object sender, EventArgs e)
        {
            if (opt_one.Checked == false)
            {
                SetJourneyWise(opt_return.Checked ? ToggleState.Off : ToggleState.On);
            }

            SetReturnAirportJob(opt_return.Checked ? ToggleState.On : ToggleState.Off);

            //   FocusToPassenger();

            if (opt_return.Checked && AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
            {
                UpdateAutoCalculateFares();
            }
        }



        private void opt_waitreturn_CheckedChanged(object sender, EventArgs e)
        {

            if (txtToAddress.Text.Length == 0 && opt_waitreturn.Checked && IsDisplayingRecord == false)
            {
                opt_waitreturn.CheckedChanged -= opt_waitreturn_CheckedChanged;
                SetJourneyWise(ToggleState.On);
                opt_waitreturn.Checked = false;
                opt_waitreturn.CheckedChanged += opt_waitreturn_CheckedChanged;

                MessageBox.Show("Please enter Destination Address first");
                FocusOnToAddress();
                return;


            }


            SetJourneyWise(opt_waitreturn.Checked ? ToggleState.On : ToggleState.Off);




            if (AppVars.DisableWaitandreturnAsVia == null)
                AppVars.DisableWaitandreturnAsVia = AppVars.listUserRights.Count(c => c.functionId == "DISABLE VIA ON WAIT & RETURN JOURNEY") > 0;

            if (AppVars.DisableWaitandreturnAsVia.ToBool() == false)
            {
                if (IsDisplayingRecord == false)
                    SetWaitAndReturnJourney();

            }
            if (opt_waitreturn.Checked)
            {



                if (AppVars.objPolicyConfiguration.AutoCalculateFares.ToBool())
                    UpdateAutoCalculateFares();
            }
            else
            {



            }
        }


        private void SetWaitAndReturnJourney()
        {
            try
            {
                IsAllowUpdating = false;
                if (opt_waitreturn.Checked)
                {


                    string pickup = txtFromAddress.Text;
                    int pickupType = ddlFromLocType.SelectedValue.ToInt();

                    string dropoff = txtToAddress.Text;
                    int dropOffType = ddlToLocType.SelectedValue.ToInt();

                    ddlToLocType.SelectedValue = pickupType;
                    txtToAddress.TextChanged -= TextBoxElement_TextChanged;
                    txtToAddress.Text = pickup;
                    SetDropOffZone(txtToAddress.Text);
                    txtToAddress.TextChanged += TextBoxElement_TextChanged;







                    ShowViaPoint(true);




                    GridViewRowInfo row;


                    row = grdVia.Rows.AddNew();




                    row.Cells["FROMTYPELABEL"].Value = "";

                    //  row.Cells["FROMTYPEVALUE"].Value = dropOffType;

                    row.Cells["VIALOCATIONID"].Value = null;
                    row.Cells["VIALOCATIONLABEL"].Value = "Via Address";
                    row.Cells["VIALOCATIONVALUE"].Value = dropoff;


                    //   AddViaPoint();
                    ShowViaPoint(false);

                }
                else
                {
                    if (grdVia.Rows.Count > 0)
                    {
                        var row = grdVia.Rows[grdVia.Rows.Count - 1];

                        ddlToLocType.SelectedValue = Enums.LOCATION_TYPES.ADDRESS;
                        txtToAddress.TextChanged -= TextBoxElement_TextChanged;
                        txtToAddress.Text = row.Cells["VIALOCATIONVALUE"].Value.ToStr();
                        SetDropOffZone(txtToAddress.Text);
                        txtToAddress.TextChanged += TextBoxElement_TextChanged;




                    }

                    grdVia.Rows.Clear();


                    ShowViaPoint(false);
                }

                IsAllowUpdating = true;
            }
            catch
            {

                IsAllowUpdating = true;
            }

        }





        private void btnAccountCode_Click(object sender, EventArgs e)
        {
            AccountCode();
        }

        private void btnAttributes_Click(object sender, EventArgs e)
        {
            ShowAttributes();
        }


        private void ShowAttributes()
        {
            try
            {



                frmBookingAttributesList frm = new frmBookingAttributesList(btnAttributes.Tag.ToStr());
                frm.ShowDialog();
                btnAttributes.Text = "Attri&butes" + Environment.NewLine + frm.input_values;

                if (frm.input_values.ToStr().Trim().Length > 0)
                {

                    btnAttributes.Tag = "," + frm.input_values + ",";


                }
                else
                    btnAttributes.Tag = "";


                setvipbookingtype();
                frm.Dispose();

                FocusOnCustomer();

            }
            catch
            {


            }
        }


        private void setvipbookingtype()
        {
            if (AppVars.objPolicyConfiguration.ShowPendingJobsOnRecentTab.ToBool())
            {
                if (btnAttributes.Tag.ToStr().Trim().ToLower().Contains(",vip,"))
                {
                    ddlBookingType.SelectedValue = Enums.BOOKING_TYPES.VIP;

                }
                else
                {
                    if (ddlBookingType.SelectedValue.ToInt() == Enums.BOOKING_TYPES.VIP)
                        ddlBookingType.SelectedValue = Enums.BOOKING_TYPES.LOCAL;


                }

            }
        }



        private void SearchLocation()
        {
            string search = string.Empty;
            try
            {
                if (txtFromAddress.Focused)
                {
                    search = txtFromAddress.Text.Trim();

                }
                else if (txtToAddress.Focused)
                {

                    search = txtToAddress.Text.Trim();
                }
                else if (txtViaAddress != null && pnlVia != null && pnlVia.Visible && txtViaAddress.Focused != null && txtViaAddress.Focused)
                {
                    search = txtViaAddress.Text.Trim();
                }

                else if (txtReturnFrom != null && txtReturnFrom.Visible && txtReturnFrom.Focused != null && txtReturnFrom.Focused)
                {
                    search = txtReturnFrom.Text.Trim();
                }

                else if (txtReturnTo != null && txtReturnTo != null && txtReturnTo.Visible && txtReturnTo.Focused != null && txtReturnTo.Focused)
                {
                    search = txtReturnTo.Text.Trim();
                }



                if (search.Length == 0)
                    return;


                frmSearchLocation frm = new frmSearchLocation();
                frm.LocationName = search;

                frm.OpenFromSearch = true;
                frm.Address = search;

                frm.ShowDialog();

                if (frm.IsPick)
                {

                    txtFromAddress.Leave -= txtFromAddress_Leave;

                    int focusType = 1;
                    if (frm.SelectedLocation.ToStr().Trim().Length > 0)
                    {
                        if (txtFromAddress.Focused)
                        {
                            txtFromAddress.TextChanged -= TextBoxElement_TextChanged;
                            txtFromAddress.Text = frm.SelectedLocation.ToStr();
                            txtFromAddress.TextChanged += TextBoxElement_TextChanged;

                            SetPickupZone(txtFromAddress.Text);
                            txtFromAddress.ResetListBox();
                        }
                        else if (txtToAddress.Focused)
                        {

                            txtToAddress.TextChanged -= TextBoxElement_TextChanged;
                            txtToAddress.Text = frm.SelectedLocation.ToStr();
                            txtToAddress.TextChanged += TextBoxElement_TextChanged;
                            SetDropOffZone(txtToAddress.Text);
                            focusType = 2;
                            txtToAddress.ResetListBox();
                        }
                        else if (txtViaAddress != null && pnlVia != null && pnlVia.Visible && txtViaAddress.Focused)
                        {

                            txtViaAddress.TextChanged -= TextBoxElement_TextChanged;
                            txtViaAddress.Text = frm.SelectedLocation.ToStr();
                            txtViaAddress.TextChanged += TextBoxElement_TextChanged;

                            focusType = 3;
                            txtViaAddress.ResetListBox();
                        }
                        else if (txtReturnFrom != null && txtReturnFrom != null && txtReturnFrom.Visible && txtReturnFrom.Focused)
                        {

                            txtReturnFrom.TextChanged -= TextBoxElement_TextChanged;
                            txtReturnFrom.Text = frm.SelectedLocation.ToStr();
                            txtReturnFrom.TextChanged += TextBoxElement_TextChanged;

                            focusType = 4;
                            txtReturnFrom.ResetListBox();
                        }
                        else if (txtReturnTo != null && txtReturnTo != null && txtReturnTo.Visible && txtReturnTo.Focused)
                        {

                            txtReturnTo.TextChanged -= TextBoxElement_TextChanged;
                            txtReturnTo.Text = frm.SelectedLocation.ToStr();
                            txtReturnTo.TextChanged += TextBoxElement_TextChanged;

                            focusType = 5;
                            txtReturnTo.ResetListBox();
                        }
                    }




                    LoadNearest();

                    if (txtViaAddress != null && pnlVia != null && pnlVia.Visible && txtViaAddress.Focused)
                    {
                        AddViaPoint();

                    }

                    UpdateAutoCalculateFares();

                    if (focusType == 1)
                    {
                        FocusOnFromAddress();

                    }
                    else if (focusType == 2)
                        FocusOnToAddress();
                    else if (focusType == 3)
                        FocusOnViaAddress();
                    else if (focusType == 4)
                        txtReturnFrom.Focus();
                    else if (focusType == 5)
                        txtReturnTo.Focus();

                    txtFromAddress.Leave += txtFromAddress_Leave;

                }


                frm.Dispose();
            }
            catch
            {


            }
        }


        void dtpPickupTime_Validated(object sender, EventArgs e)
        {
            try
            {

                if (objMaster.PrimaryKeyValue == null)
                {

                    if (dtpPickupDate.AllowDrop == false && DateTime.Now.TimeOfDay > dtpPickupTime.Value.ToDateTime().TimeOfDay
             && dtpPickupDate.Value != null && dtpPickupDate.Value.ToDate() == DateTime.Now.Date)
                    {
                        double hours = DateTime.Now.TimeOfDay.Subtract(dtpPickupTime.Value.ToDateTime().TimeOfDay).TotalHours;
                        if (hours >= 2)
                        {
                            dtpPickupDate.Value = dtpPickupDate.Value.ToDate().AddDays(1);
                            dtpPickupDate.AllowDrop = true;
                        }
                    }
                }
            }
            catch
            {


            }
        }




        private string GetMapTemplate(string CenterPointLatLng, string FromLatLng, string ToLatLng, string FromAddress, string ToAddress, string NearestDriverList)
        {
            try
            {
                //Start Calculate VIA 
                string[] viaLocs = new string[0];
                string viaadd = "";

                //Open sreet Map Global Variables Set here
                OSMFromLatLng = FromLatLng;
                OSMToLatLng = ToLatLng;


                // Find the indices of the latitude and longitude values
                int latIndex = CenterPointLatLng.IndexOf("lat:") + 4;
                int lngIndex = CenterPointLatLng.IndexOf("lng:") + 4;

                // Extract latitude and longitude as substrings
                string latString = CenterPointLatLng.Substring(latIndex, CenterPointLatLng.IndexOf(',', latIndex) - latIndex).Trim();
                string lngString = CenterPointLatLng.Substring(lngIndex, CenterPointLatLng.IndexOf('}', lngIndex) - lngIndex).Trim();

                // Concatenate latitude and longitude with comma
                OSMCenterPoint = latString + "," + lngString;

                stp_getCoordinatesByAddressResult viaPostcode = null;
                if (pnlVia != null && grdVia.Rows.Count > 0)
                {
                    viaLocs = grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();




                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        foreach (var a in viaLocs)
                        {
                            viaPostcode = General.GetCoordinatesByAddress(a.ToStr(), General.GetPostCodeMatch(a));
                            //   viaPostcode = db.stp_getCoordinatesByAddress(a.ToStr(), General.GetPostCodeMatch(a)).FirstOrDefault();
                            viaadd += viaPostcode.Latitude + "," + viaPostcode.Longtiude + "|";
                        }
                        viaadd = viaadd.Remove(viaadd.Length - 1);

                    }
                }
                //End Calculate VIA 

                OSMVia = viaadd;
                if (viaadd.ToStr().Trim().Length > 0)
                    return GetMapTemplateVia(CenterPointLatLng, FromLatLng, viaadd, ToLatLng, FromAddress, ToAddress, NearestDriverList);

                else
                {


                    if (FromAddress.ToStr().Trim().Contains("\n"))
                        FromAddress = FromAddress.ToStr().Trim().Replace("\n", "").Trim();


                    if (ToAddress.ToStr().Trim().Contains("\n"))
                        ToAddress = ToAddress.ToStr().Trim().Replace("\n", "").Trim();

                    //  CenterPointLatLng = ToLatLng;

                    string toCaption = "B";
                    if (FromLatLng.Contains(",") == false)
                    {
                        return "";

                    }

                    if (ToLatLng == "" || ToLatLng.Contains(",") == false)
                    {
                        ToLatLng = FromLatLng;
                        ToAddress = FromAddress;
                        toCaption = "A";
                    }


                    if (FromLatLng == "0,0")
                        return "";

                    if (ToLatLng == "0,0")
                        return "";

                    if (ToLatLng.Contains(",") == false)
                        return "";




                    string APP_ID = System.Configuration.ConfigurationManager.AppSettings["MAP_APP_ID"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_APP_ID"].ToStr() : "3AFVxo9lo4YV4NVnqgz1";
                    string APP_CODE = System.Configuration.ConfigurationManager.AppSettings["MAP_APP_CODE"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_APP_CODE"].ToStr() : "uCIGBo3LGjk4d02fxXGtvw";
                    string IsUseHTTPS = "true";



                    if (AppVars.objPolicyConfiguration.MapType.ToInt() == 2)
                    {
                        if (AppVars.etaKey.ToStr().Trim().Length > 0 && AppVars.etaKey.ToStr().Where(c => (c == ',')).Count() == 2)
                        {
                            APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
                            APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
                        }
                        else
                        {
                            using (TaxiDataContext db = new TaxiDataContext())
                            {
                                try
                                {
                                    if (db.ExecuteQuery<long>("select len(APIKey)- len(replace(APIKey,',','')) from MapKeys where MapType='here'").FirstOrDefault() == 2)
                                    {
                                        AppVars.etaKey = db.ExecuteQuery<string>("select apikey from MapKeys where MapType='here'").FirstOrDefault();
                                        APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
                                        APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }
                        }

                    }



                    nearestDriverString = FromLatLng + ">>>" + NearestDriverList.ToStr();
                    NearestDriverList = NearestDriverList.Replace("'", @"\'");
                    FromAddress = FromAddress.Replace("'", @"\'");
                    ToAddress = ToAddress.Replace("'", @"\'");



                    string distanceType = "fastest;car";
                    StringBuilder htmlMap = new StringBuilder();

                    if (AppVars.objPolicyConfiguration.MapType.ToInt() == 2)
                        distanceType = AppVars.routemode;


                    htmlMap.Append(
                     @"<!DOCTYPE html>
                <html>
                <head>
                <meta http-equiv='X-UA-Compatible' content='IE=edge'>
                <meta http-equiv='ontent-type' content='text/html; charset=UTF-8' />
                <meta name='viewport' content='initial-scale=1.0, width=device-width' />
                <link rel='stylesheet' type='text/css' href='https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059' />
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-core.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-service.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-ui.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-mapevents.js'></script>

                </head>
                <body>
  
                  <div id='map' style='position:absolute; width:99%; height:50%; background:grey; left:0px; top:0px;'></div>
                  <div id='panel' style='position:absolute; width:49%; left:51%; height:100%; background:inherit;display:none;' ></div>

                  <script  type='text/javascript' charset='UTF-8' >

                      var APP_ID = '" + APP_ID + @"';
                      var APP_CODE = '" + APP_CODE + @"';
                      var IsUseHTTPS = " + IsUseHTTPS + @";

                      var CenterPoint = " + CenterPointLatLng + @";
                      var FromLatLng = '" + FromLatLng + @"';
                      var ToLatLng = '" + ToLatLng + @"';
                      var FromLocName = '" + FromAddress + @"';
                      var ToLocName = '" + ToAddress + @"';
                      var NearestDriverList = '" + NearestDriverList + @"'
                      var distanceTypes = '" + distanceType + @"';

                /**
                 * Calculates and displays a car route from the Brandenburg Gate in the centre of Berlin
                 * to Friedrichstraße Railway Station.
                 *
                 * A full list of available request parameters can be found in the Routing API documentation.
                 * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
                 *
                 * @param   {H.service.Platform} platform    A stub class to access HERE services
                 */
                function calculateRouteFromAtoB (platform) {
                  var router = platform.getRoutingService(),
                    routeRequestParams = {      
                      mode: distanceTypes,
                      representation: 'display',
                      routeattributes : 'waypoints,summary,shape,legs',
                      maneuverattributes: 'direction,action',
                      waypoint0: FromLatLng, // Brandenburg Gate
                      waypoint1: ToLatLng  // Friedrichstraße Railway Station
                    
                    };


                  router.calculateRoute(
                    routeRequestParams,
                    onSuccess,
                    onError
                  );
                }
                /**
                 * This function will be called once the Routing REST API provides a response
                 * @param  {Object} result          A JSONP object representing the calculated route
                 *
                 * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
                 */
                function onSuccess(result) {




            if (result.response.route[0].mode.type == 'shortest') {
 var count = 0;
            var markers = [];
                result.response.route.forEach(function (point) {
                    markers[count] = point;
                    if (count == 0) {
                        addRouteShapeToMap(markers[count], 'rgba(0, 128, 255, 0.9)', 8);
                        addManueversToMap(markers[count]);

                        addSummaryToPanel(markers[count].summary);
                    }
                    else {
                        addRouteShapeToMap(markers[count], 'rgba(102, 102, 102, 0.5)', 6);
                        addManueversToMap(markers[count]);
                    }
                    count++;
                });
            }
else
{


                  var route = result.response.route[0];
                
                  addRouteShapeToMap(route);
                  addManueversToMap(route);

                  addWaypointsToPanel(route.waypoint);
                  addManueversToPanel(route);
               }
                }

                /**
                 * This function will be called if a communication error occurs during the JSON-P request
                 * @param  {Object} error  The error message received.
                 */
                function onError(error) {
                 // alert('Ooops!');
                }




                /**
                 * Boilerplate map initialization code starts below:
                 */

                // set up containers for the map  + panel
                var mapContainer = document.getElementById('map'),
                  routeInstructionsContainer = document.getElementById('panel');

                //Step 1: initialize communication with the platform
                var platform = new H.service.Platform({
                    app_id: APP_ID,
                    app_code: APP_CODE,
                    useHTTPS: IsUseHTTPS
                });

                var pixelRatio = window.devicePixelRatio || 1;
                var defaultLayers = platform.createDefaultLayers({
                  tileSize: pixelRatio === 1 ? 256 : 512,
                  ppi: pixelRatio === 1 ? undefined : 320
                });

                //Step 2: initialize a map - this map is centered over Berlin
                var map = new H.Map(mapContainer,
                  defaultLayers.normal.map,{
                      center: CenterPoint,
                  zoom: 10,
                  pixelRatio: pixelRatio
                });

                //Step 3: make the map interactive
                // MapEvents enables the event system
                // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
                var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

                // Create the default UI components
                var ui = H.ui.UI.createDefault(map, defaultLayers);

                // Hold a reference to any infobubble opened
                var bubble;

                /**
                 * Opens/Closes a infobubble
                 * @param  {H.geo.Point} position     The location on the map.
                 * @param  {String} text              The contents of the infobubble.
                 */
                function openBubble(position, text){
                 if(!bubble){
                    bubble =  new H.ui.InfoBubble(
                      position,
                      // The FO property holds the province name.
                      {content: text});
                    ui.addBubble(bubble);
                  } else {
                    bubble.setPosition(position);
                    bubble.setContent(text);
                    bubble.open();
                  }
                }


                /**
                 * Creates a H.map.Polyline from the shape of the route and adds it to the map.
                 * @param {Object} route A route as received from the H.service.RoutingService
                 */
                function addRouteShapeToMap(route){
                  var lineString = new H.geo.LineString(),
                    routeShape = route.shape,
                    polyline;

                  routeShape.forEach(function(point) {
                    var parts = point.split(',');
                    lineString.pushLatLngAlt(parts[0], parts[1]);
                  });

                  polyline = new H.map.Polyline(lineString, {
                    style: {
                      lineWidth: 4,
                      strokeColor: 'rgba(0, 128, 255, 0.7)'
                    }
                  });
                  // Add the polyline to the map
                  map.addObject(polyline);
                  // And zoom to its bounding rectangle
                  map.setViewBounds(polyline.getBounds(), true);
                }


                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addManueversToMap(route){
                      var group = new  H.map.Group(),
                        i,
                        j;
                      /*
                      // Add a marker for each maneuver
                      for (i = 0;  i < route.leg.length; i += 1) {
                        for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
                          // Get the next maneuver.
                          maneuver = route.leg[i].maneuver[j];
                          // Add a marker to the maneuvers group
                          var marker =  new H.map.Marker({
                            lat: maneuver.position.latitude,
                            lng: maneuver.position.longitude} ,
                            { icon: new H.map.Icon(svgMarkup.replace('${text}', j), { anchor: { x: 8, y: 8} }) });
                          marker.instruction = maneuver.instruction;
                          group.addObject(marker);
                        }
                      }*/

                      drawNearestDriver(map, group);

                      // Add a marker to the maneuvers group
                      var FromManeuver = route.leg[0].maneuver[0];
                      var FromMarker = new H.map.Marker(
                                { lat: FromManeuver.position.latitude, lng: FromManeuver.position.longitude },
                                { icon: GetMarkerIconTemp('red','A') }
                                );
                      FromMarker.instruction = FromLocName;
                      group.addObject(FromMarker);

                      var ToManeuver = route.leg[route.leg.length - 1].maneuver[route.leg[route.leg.length - 1].maneuver.length - 1];

                      var ToMarker = new H.map.Marker(
                                { lat: ToManeuver.position.latitude, lng: ToManeuver.position.longitude },
                                { icon: GetMarkerIconTemp('red', '" + toCaption + @"') }
                                );
                      ToMarker.instruction = ToLocName;
                      group.addObject(ToMarker);

                      var zIndex = 1;
                      group.addEventListener('tap', function (evt) {
                        map.setCenter(evt.target.getPosition());
                        openBubble(
                           evt.target.getPosition(), evt.target.instruction);
                           // increase z-index of the marker that was tapped
                                  evt.target.setZIndex(zIndex++);
                      }, false);

                      

                      // Add the maneuvers group to the map
                      map.addObject(group);
                    }


                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addWaypointsToPanel(waypoints){



                  var nodeH3 = document.createElement('h3'),
                    waypointLabels = [],
                    i;


                   for (i = 0;  i < waypoints.length; i += 1) {
                    waypointLabels.push(waypoints[i].label)
                   }

                   nodeH3.textContent = waypointLabels.join(' - ');

                  //*routeInstructionsContainer.innerHTML = '';
                  //*routeInstructionsContainer.appendChild(nodeH3);
                }

                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addSummaryToPanel(summary){
                  var summaryDiv = document.createElement('div'),
                   content = '';
                   content += '<b>Total distance</b>: ' + summary.distance  + 'm. <br/>';
                   content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


                 summaryDiv.style.fontSize = 'small';
                  summaryDiv.style.marginLeft ='5%';
                  summaryDiv.style.marginRight ='5%';
                  summaryDiv.innerHTML = content;
                  //*routeInstructionsContainer.appendChild(summaryDiv);
                }

                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addManueversToPanel(route){



                  var nodeOL = document.createElement('ol'),
                    i,
                    j;

                  nodeOL.style.fontSize = 'small';
                  nodeOL.style.marginLeft ='5%';
                  nodeOL.style.marginRight ='5%';
                  nodeOL.className = 'directions';

                     // Add a marker for each maneuver
                  for (i = 0;  i < route.leg.length; i += 1) {
                    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
                      // Get the next maneuver.
                      maneuver = route.leg[i].maneuver[j];

                      var li = document.createElement('li'),
                        spanArrow = document.createElement('span'),
                        spanInstruction = document.createElement('span');

                      spanArrow.className = 'arrow '  + maneuver.action;
                      spanInstruction.innerHTML = maneuver.instruction;
                      li.appendChild(spanArrow);
                      li.appendChild(spanInstruction);

                      nodeOL.appendChild(li);
                    }
                  }

                //*routeInstructionsContainer.appendChild(nodeOL);
                }


                Number.prototype.toMMSS = function () {
                  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
                }

                
                function addMarkersToMap(map) {

                    drawNearestDriver(map, group);

                    var group = new H.map.Group();

                    // Add a marker to the maneuvers group    
                    var FromMarker = new H.map.Marker(
                                        { lat: parseFloat(FromLatLng.split(',')[0]), lng: parseFloat(FromLatLng.split(',')[1]) },
                                        { icon: GetMarkerIconTemp('red', 'A') }
                                        );
                    FromMarker.instruction = FromLocName;
                    group.addObject(FromMarker);                   

                   var zIndex = 1;
                   group.addEventListener('tap', function (evt) {
                       map.setCenter(evt.target.getPosition());
                       openBubble(
                      evt.target.getPosition(), evt.target.instruction);
                      // increase z-index of the marker that was tapped
                        evt.target.setZIndex(zIndex++);

                   }, false);

                    // Add the maneuvers group to the map
                    map.addObject(group);

                //    var parisMarker = new H.map.Marker({ lat: 48.8567, lng: 2.3508 });
                //    map.addObject(parisMarker);

                }


                function drawNearestDriver(map, group) {
                    if (NearestDriverList != undefined && NearestDriverList != '') {
                        var text = NearestDriverList;
                        var NearestDriver = text.split('],')
                        for (i = 0; i < NearestDriver.length; i++) {
                            var Drv = NearestDriver[i].split('\',')[0];
                            var nearestLatLng = NearestDriver[i].split('\',');

                            var parisMarker = new H.map.Marker({ lat: parseFloat(nearestLatLng[1].split(',')[0]), lng: parseFloat(nearestLatLng[1].split(',')[1]) },
                                        { icon: GetMarkerIconTemp('blue', Drv) });
                            group.addObject(parisMarker);
                        }
                    }
                }

                function GetMarkerIconTemp(color, text) {

                    var svgMarkup = '<svg xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' width=\'32\' height=\'32\' viewBox=\'0 0 263.335 263.335\' style=\'enable-background:new 0 0 263.335 263.335;\' xml:space=\'preserve\'> ' +
                                        '<g> ' +
                                        '<g xmlns=\'http://www.w3.org/2000/svg\'> ' +
                                            '<path d=\'M40.479,159.021c21.032,39.992,49.879,74.22,85.732,101.756c0.656,0.747,1.473,1.382,2.394,1.839   c0.838-0.396,1.57-0.962,2.178-1.647c80.218-61.433,95.861-125.824,96.44-128.34c2.366-9.017,3.57-18.055,3.57-26.864    C237.389,47.429,189.957,0,131.665,0C73.369,0,25.946,47.424,25.946,105.723c0,8.636,1.148,17.469,3.412,26.28\' fill=\'${COLOR}\'/> ' +
                                            '<text x=\'${spo}\' y=\'130\' font-family=\'arial\' font-size=\'6em\' font-weight=\'bold\' fill=\'white\'>${TEXT}</text>' +
                                        '</g>' +
                                    '</g></svg>';

    
                    color = color == undefined ? 'blue' : color;
                    text = text == undefined ? '' : text;

                    var XPos =90;

                    if(text.length>1)
                    XPos=70;

                    // Add the first marker
                    var Icon = new H.map.Icon(svgMarkup.replace('${COLOR}', color).replace('${TEXT}', text).replace('${spo}', XPos), { anchor: { x: 20, y: 20} });
                    return Icon;
                }

                // Now use the map as required...
                if (ToLatLng != undefined && ToLatLng != '') {
                    calculateRouteFromAtoB(platform);
                }
                else {
                    addMarkersToMap(map);
                }
                  </script>
                </body>
                </html>");




                    return htmlMap.ToString();

                }
            }
            catch
            {
                return "";
            }


        }


        private string GetMapTemplatePickup(string CenterPointLatLng, string FromLatLng, string ToLatLng, string FromAddress, string ToAddress, string NearestDriverList)
        {
            try
            {

                if (FromAddress.ToStr().Trim().Contains("\r\n"))
                    FromAddress = FromAddress.ToStr().Trim().Replace("\r\n", " ").Trim();


                if (ToAddress.ToStr().Trim().Contains("\r\n"))
                    ToAddress = ToAddress.ToStr().Trim().Replace("\r\n", " ").Trim();



                if (FromAddress.ToStr().Trim().Contains("\n"))
                    FromAddress = FromAddress.ToStr().Trim().Replace("\n", "").Trim();


                if (ToAddress.ToStr().Trim().Contains("\n"))
                    ToAddress = ToAddress.ToStr().Trim().Replace("\n", "").Trim();


                if (FromLatLng.Contains(",") == false)
                {
                    return "";

                }

                if (ToLatLng == "" || ToLatLng.Contains(",") == false)
                {
                    ToLatLng = FromLatLng;
                    ToAddress = FromAddress;
                    //     toCaption = "A";
                }


                if (FromLatLng == "0,0")
                    return "";

                if (ToLatLng == "0,0")
                    return "";



                if (ToLatLng.Contains(",") == false)
                    return "";


                //Open sreet Map Global Variables Set here
                OSMFromLatLng = FromLatLng;
                OSMToLatLng = ToLatLng;
                // Find the indices of the latitude and longitude values
                int latIndex = CenterPointLatLng.IndexOf("lat:") + 4;
                int lngIndex = CenterPointLatLng.IndexOf("lng:") + 4;

                // Extract latitude and longitude as substrings
                string latString = CenterPointLatLng.Substring(latIndex, CenterPointLatLng.IndexOf(',', latIndex) - latIndex).Trim();
                string lngString = CenterPointLatLng.Substring(lngIndex, CenterPointLatLng.IndexOf('}', lngIndex) - lngIndex).Trim();

                // Concatenate latitude and longitude with comma
                OSMCenterPoint = latString + "," + lngString;

                string APP_ID = System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_ID"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_ID"].ToStr() : "3AFVxo9lo4YV4NVnqgz1";
                string APP_CODE = System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_CODE"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_CODE"].ToStr() : "uCIGBo3LGjk4d02fxXGtvw";
                string IsUseHTTPS = System.Configuration.ConfigurationSettings.AppSettings["MAP_IsUseHTTPS"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_IsUseHTTPS"].ToStr() : "true";


                if (AppVars.etaKey.ToStr().Trim().Length > 0 && AppVars.etaKey.ToStr().Where(c => (c == ',')).Count() == 2)
                {
                    APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
                    APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        try
                        {
                            if (db.ExecuteQuery<long>("select len(APIKey)- len(replace(APIKey,',','')) from MapKeys where MapType='here'").FirstOrDefault() == 2)
                            {
                                AppVars.etaKey = db.ExecuteQuery<string>("select apikey from MapKeys where MapType='here'").FirstOrDefault();
                                APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
                                APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }

                nearestDriverString = FromLatLng + ">>>" + NearestDriverList.ToStr();

                NearestDriverList = NearestDriverList.Replace("'", @"\'");
                //  nearestDriverString = NearestDriverList;
                FromAddress = FromAddress.Replace("'", @"\'");
                ToAddress = ToAddress.Replace("'", @"\'");

                StringBuilder htmlMap = new StringBuilder();
                htmlMap.Append(
                 @"<!DOCTYPE html>
                <html>
                <head>
                <meta http-equiv='X-UA-Compatible' content='IE=edge'>
                <meta http-equiv='ontent-type' content='text/html; charset=UTF-8' />
                <meta name='viewport' content='initial-scale=1.0, width=device-width' />
                <link rel='stylesheet' type='text/css' href='https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059' />
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-core.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-service.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-ui.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-mapevents.js'></script>

                </head>
                <body>
  
                  <div id='map' style='position:absolute; width:99%; height:50%; background:grey; left:0px; top:0px;'></div>
                  <div id='panel' style='position:absolute; width:49%; left:51%; height:100%; background:inherit;display:none;' ></div>

                  <script  type='text/javascript' charset='UTF-8' >

                      var APP_ID = '" + APP_ID + @"';
                      var APP_CODE = '" + APP_CODE + @"';
                      var IsUseHTTPS = " + IsUseHTTPS + @";

                      var CenterPoint = " + CenterPointLatLng + @";
                      var FromLatLng = '" + FromLatLng + @"';
                      var ToLatLng = '" + ToLatLng + @"';
                      var FromLocName = '" + FromAddress + @"';
                      var ToLocName = '" + ToAddress + @"';
                      var NearestDriverList = '" + NearestDriverList + @"'


               
               
                
               

                /**
                 * This function will be called if a communication error occurs during the JSON-P request
                 * @param  {Object} error  The error message received.
                 */
                function onError(error) {
                //  alert('Ooops!');
                }




                /**
                 * Boilerplate map initialization code starts below:
                 */

                // set up containers for the map  + panel
                var mapContainer = document.getElementById('map'),
                  routeInstructionsContainer = document.getElementById('panel');

                //Step 1: initialize communication with the platform
                var platform = new H.service.Platform({
                    app_id: APP_ID,
                    app_code: APP_CODE,
                    useHTTPS: IsUseHTTPS
                });

                var pixelRatio = window.devicePixelRatio || 1;
                var defaultLayers = platform.createDefaultLayers({
                  tileSize: pixelRatio === 1 ? 256 : 512,
                  ppi: pixelRatio === 1 ? undefined : 320
                });

                //Step 2: initialize a map - this map is centered over Berlin
                var map = new H.Map(mapContainer,
                  defaultLayers.normal.map,{
                      center: CenterPoint,
                  zoom: 16,
                  pixelRatio: pixelRatio
                });

                //Step 3: make the map interactive
                // MapEvents enables the event system
                // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
                var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

                // Create the default UI components
                var ui = H.ui.UI.createDefault(map, defaultLayers);

                // Hold a reference to any infobubble opened
                var bubble;

                /**
                 * Opens/Closes a infobubble
                 * @param  {H.geo.Point} position     The location on the map.
                 * @param  {String} text              The contents of the infobubble.
                 */
                function openBubble(position, text){
                 if(!bubble){
                    bubble =  new H.ui.InfoBubble(
                      position,
                      // The FO property holds the province name.
                      {content: text});
                    ui.addBubble(bubble);
                  } else {
                    bubble.setPosition(position);
                    bubble.setContent(text);
                    bubble.open();
                  }
                }


              



                Number.prototype.toMMSS = function () {
                  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
                }

                
                function addMarkersToMap(map) {

                

                    var group = new H.map.Group();

                    // Add a marker to the maneuvers group    
                    var FromMarker = new H.map.Marker(
                                        { lat: parseFloat(FromLatLng.split(',')[0]), lng: parseFloat(FromLatLng.split(',')[1]) },
                                        { icon: GetMarkerIconTemp('red', 'A') }
                                        );
                    FromMarker.instruction = FromLocName;
                    group.addObject(FromMarker);                   

                   var zIndex = 1;
                   group.addEventListener('tap', function (evt) {
                       map.setCenter(evt.target.getPosition());
                       openBubble(
                      evt.target.getPosition(), evt.target.instruction);
                      // increase z-index of the marker that was tapped
                        evt.target.setZIndex(zIndex++);

                   }, false);

                    // Add the maneuvers group to the map
                    map.addObject(group);
  drawNearestDriver(map, group);
                //    var parisMarker = new H.map.Marker({ lat: 48.8567, lng: 2.3508 });
                //    map.addObject(parisMarker);

                }


                function drawNearestDriver(map, group) {
                    if (NearestDriverList != undefined && NearestDriverList != '') {
                        var text = NearestDriverList;
                        var NearestDriver = text.split('],')
                        for (i = 0; i < NearestDriver.length; i++) {
                            var Drv = NearestDriver[i].split('\',')[0];
                            var nearestLatLng = NearestDriver[i].split('\',');

                            var parisMarker = new H.map.Marker({ lat: parseFloat(nearestLatLng[1].split(',')[0]), lng: parseFloat(nearestLatLng[1].split(',')[1]) },
                                        { icon: GetMarkerIconTemp('blue', Drv) });
                            group.addObject(parisMarker);
                        }
                    }
                }

                function GetMarkerIconTemp(color, text) {

                    var svgMarkup = '<svg xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' width=\'32\' height=\'32\' viewBox=\'0 0 263.335 263.335\' style=\'enable-background:new 0 0 263.335 263.335;\' xml:space=\'preserve\'> ' +
                                        '<g> ' +
                                        '<g xmlns=\'http://www.w3.org/2000/svg\'> ' +
                                            '<path d=\'M40.479,159.021c21.032,39.992,49.879,74.22,85.732,101.756c0.656,0.747,1.473,1.382,2.394,1.839   c0.838-0.396,1.57-0.962,2.178-1.647c80.218-61.433,95.861-125.824,96.44-128.34c2.366-9.017,3.57-18.055,3.57-26.864    C237.389,47.429,189.957,0,131.665,0C73.369,0,25.946,47.424,25.946,105.723c0,8.636,1.148,17.469,3.412,26.28\' fill=\'${COLOR}\'/> ' +
                                            '<text x=\'${spo}\' y=\'130\' font-family=\'arial\' font-size=\'6em\' font-weight=\'bold\' fill=\'white\'>${TEXT}</text>' +
                                        '</g>' +
                                    '</g></svg>';

    
                    color = color == undefined ? 'blue' : color;
                    text = text == undefined ? '' : text;

                    var XPos =90;

                    if(text.length>1)
                    XPos=70;

                    // Add the first marker
                    var Icon = new H.map.Icon(svgMarkup.replace('${COLOR}', color).replace('${TEXT}', text).replace('${spo}', XPos), { anchor: { x: 20, y: 20} });
                    return Icon;
                }

                // Now use the map as required...
                
                    addMarkersToMap(map);
                
                  </script>
                </body>
                </html>");
                return htmlMap.ToString();
            }
            catch
            {
                return "";
            }


        }






        //        private string GetMapTemplate(string CenterPointLatLng, string FromLatLng, string ToLatLng, string FromAddress, string ToAddress, string NearestDriverList)
        //        {
        //            try
        //            {
        //                 //Start Calculate VIA 
        //                string[] viaLocs = new string[0];
        //                string viaadd = "";

        //                stp_getCoordinatesByAddressResult viaPostcode = null;
        //                if (pnlVia != null && grdVia.Rows.Count>0)
        //                {
        //                    viaLocs = grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();




        //                    using (TaxiDataContext db = new TaxiDataContext())
        //                    {
        //                        foreach (var a in viaLocs)
        //                        {
        //                            viaPostcode =General.GetCoordinatesByAddress(a.ToStr(), General.GetPostCodeMatch(a));
        //                         //   viaPostcode = db.stp_getCoordinatesByAddress(a.ToStr(), General.GetPostCodeMatch(a)).FirstOrDefault();
        //                            viaadd += viaPostcode.Latitude + "," + viaPostcode.Longtiude + "|";
        //                        }
        //                        viaadd = viaadd.Remove(viaadd.Length - 1);

        //                    }
        //                }
        //                //End Calculate VIA 

        //                if (viaadd.ToStr().Trim().Length > 0)
        //                    return GetMapTemplateVia(CenterPointLatLng, FromLatLng, viaadd, ToLatLng, FromAddress, ToAddress, NearestDriverList);

        //                else
        //                {


        //                    if (FromAddress.ToStr().Trim().Contains("\n"))
        //                        FromAddress = FromAddress.ToStr().Trim().Replace("\n", "").Trim();


        //                    if (ToAddress.ToStr().Trim().Contains("\n"))
        //                        ToAddress = ToAddress.ToStr().Trim().Replace("\n", "").Trim();

        //                    //  CenterPointLatLng = ToLatLng;

        //                    string toCaption = "B";
        //                    if (FromLatLng.Contains(",") == false)
        //                    {
        //                        return "";

        //                    }

        //                    if (ToLatLng == "" || ToLatLng.Contains(",") == false)
        //                    {
        //                        ToLatLng = FromLatLng;
        //                        ToAddress = FromAddress;
        //                        toCaption = "A";
        //                    }


        //                    if (FromLatLng == "0,0")
        //                        return "";

        //                    if (ToLatLng == "0,0")
        //                        return "";

        //                    if (ToLatLng.Contains(",") == false)
        //                        return "";




        //                    string APP_ID = System.Configuration.ConfigurationManager.AppSettings["MAP_APP_ID"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_APP_ID"].ToStr() : "3AFVxo9lo4YV4NVnqgz1";
        //                    string APP_CODE = System.Configuration.ConfigurationManager.AppSettings["MAP_APP_CODE"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_APP_CODE"].ToStr() : "uCIGBo3LGjk4d02fxXGtvw";
        //                    string IsUseHTTPS = "true";



        //                    if (AppVars.objPolicyConfiguration.MapType.ToInt() == 2)
        //                    {
        //                        if (AppVars.etaKey.ToStr().Trim().Length > 0 && AppVars.etaKey.ToStr().Where(c => (c == ',')).Count() == 2)
        //                        {
        //                            APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
        //                            APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
        //                        }
        //                        else
        //                        {
        //                            using (TaxiDataContext db = new TaxiDataContext())
        //                            {
        //                                try
        //                                {
        //                                    if (db.ExecuteQuery<long>("select len(APIKey)- len(replace(APIKey,',','')) from MapKeys where MapType='here'").FirstOrDefault() == 2)
        //                                    {
        //                                        AppVars.etaKey = db.ExecuteQuery<string>("select apikey from MapKeys where MapType='here'").FirstOrDefault();
        //                                        APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
        //                                        APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
        //                                    }
        //                                }
        //                                catch (Exception ex)
        //                                {

        //                                }
        //                            }
        //                        }

        //                    }



        //                    nearestDriverString = FromLatLng + ">>>" + NearestDriverList.ToStr();
        //                    NearestDriverList = NearestDriverList.Replace("'", @"\'");
        //                    FromAddress = FromAddress.Replace("'", @"\'");
        //                    ToAddress = ToAddress.Replace("'", @"\'");



        //                    string distanceType = "fastest;car";
        //                   StringBuilder htmlMap = new StringBuilder();

        //                    if(AppVars.objPolicyConfiguration.MapType.ToInt()==2)
        //                        distanceType = AppVars.routemode;


        //                    htmlMap.Append(
        //                     @"<!DOCTYPE html>
        //                <html>
        //                <head>
        //                <meta http-equiv='X-UA-Compatible' content='IE=edge'>
        //                <meta http-equiv='ontent-type' content='text/html; charset=UTF-8' />
        //                <meta name='viewport' content='initial-scale=1.0, width=device-width' />
        //                <link rel='stylesheet' type='text/css' href='https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059' />
        //                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-core.js'></script>
        //                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-service.js'></script>
        //                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-ui.js'></script>
        //                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-mapevents.js'></script>

        //                </head>
        //                <body>

        //                  <div id='map' style='position:absolute; width:99%; height:50%; background:grey; left:0px; top:0px;'></div>
        //                  <div id='panel' style='position:absolute; width:49%; left:51%; height:100%; background:inherit;display:none;' ></div>

        //                  <script  type='text/javascript' charset='UTF-8' >

        //                      var APP_ID = '" + APP_ID + @"';
        //                      var APP_CODE = '" + APP_CODE + @"';
        //                      var IsUseHTTPS = " + IsUseHTTPS + @";

        //                      var CenterPoint = " + CenterPointLatLng + @";
        //                      var FromLatLng = '" + FromLatLng + @"';
        //                      var ToLatLng = '" + ToLatLng + @"';
        //                      var FromLocName = '" + FromAddress + @"';
        //                      var ToLocName = '" + ToAddress + @"';
        //                      var NearestDriverList = '" + NearestDriverList + @"'
        //                      var distanceTypes = '" + distanceType + @"';

        //                /**
        //                 * Calculates and displays a car route from the Brandenburg Gate in the centre of Berlin
        //                 * to Friedrichstraße Railway Station.
        //                 *
        //                 * A full list of available request parameters can be found in the Routing API documentation.
        //                 * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
        //                 *
        //                 * @param   {H.service.Platform} platform    A stub class to access HERE services
        //                 */
        //                function calculateRouteFromAtoB (platform) {
        //                  var router = platform.getRoutingService(),
        //                    routeRequestParams = {      
        //                      mode: distanceTypes,
        //                      representation: 'display',
        //                      routeattributes : 'waypoints,summary,shape,legs',
        //                      maneuverattributes: 'direction,action',
        //                      waypoint0: FromLatLng, // Brandenburg Gate
        //                      waypoint1: ToLatLng  // Friedrichstraße Railway Station

        //                    };


        //                  router.calculateRoute(
        //                    routeRequestParams,
        //                    onSuccess,
        //                    onError
        //                  );
        //                }
        //                /**
        //                 * This function will be called once the Routing REST API provides a response
        //                 * @param  {Object} result          A JSONP object representing the calculated route
        //                 *
        //                 * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
        //                 */
        //                function onSuccess(result) {




        //            if (result.response.route[0].mode.type == 'shortest') {
        // var count = 0;
        //            var markers = [];
        //                result.response.route.forEach(function (point) {
        //                    markers[count] = point;
        //                    if (count == 0) {
        //                        addRouteShapeToMap(markers[count], 'rgba(0, 128, 255, 0.9)', 8);
        //                        addManueversToMap(markers[count]);

        //                        addSummaryToPanel(markers[count].summary);
        //                    }
        //                    else {
        //                        addRouteShapeToMap(markers[count], 'rgba(102, 102, 102, 0.5)', 6);
        //                        addManueversToMap(markers[count]);
        //                    }
        //                    count++;
        //                });
        //            }
        //else
        //{


        //                  var route = result.response.route[0];

        //                  addRouteShapeToMap(route);
        //                  addManueversToMap(route);

        //                  addWaypointsToPanel(route.waypoint);
        //                  addManueversToPanel(route);
        //               }
        //                }

        //                /**
        //                 * This function will be called if a communication error occurs during the JSON-P request
        //                 * @param  {Object} error  The error message received.
        //                 */
        //                function onError(error) {
        //                 // alert('Ooops!');
        //                }




        //                /**
        //                 * Boilerplate map initialization code starts below:
        //                 */

        //                // set up containers for the map  + panel
        //                var mapContainer = document.getElementById('map'),
        //                  routeInstructionsContainer = document.getElementById('panel');

        //                //Step 1: initialize communication with the platform
        //                var platform = new H.service.Platform({
        //                    app_id: APP_ID,
        //                    app_code: APP_CODE,
        //                    useHTTPS: IsUseHTTPS
        //                });

        //                var pixelRatio = window.devicePixelRatio || 1;
        //                var defaultLayers = platform.createDefaultLayers({
        //                  tileSize: pixelRatio === 1 ? 256 : 512,
        //                  ppi: pixelRatio === 1 ? undefined : 320
        //                });

        //                //Step 2: initialize a map - this map is centered over Berlin
        //                var map = new H.Map(mapContainer,
        //                  defaultLayers.normal.map,{
        //                      center: CenterPoint,
        //                  zoom: 10,
        //                  pixelRatio: pixelRatio
        //                });

        //                //Step 3: make the map interactive
        //                // MapEvents enables the event system
        //                // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
        //                var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

        //                // Create the default UI components
        //                var ui = H.ui.UI.createDefault(map, defaultLayers);

        //                // Hold a reference to any infobubble opened
        //                var bubble;

        //                /**
        //                 * Opens/Closes a infobubble
        //                 * @param  {H.geo.Point} position     The location on the map.
        //                 * @param  {String} text              The contents of the infobubble.
        //                 */
        //                function openBubble(position, text){
        //                 if(!bubble){
        //                    bubble =  new H.ui.InfoBubble(
        //                      position,
        //                      // The FO property holds the province name.
        //                      {content: text});
        //                    ui.addBubble(bubble);
        //                  } else {
        //                    bubble.setPosition(position);
        //                    bubble.setContent(text);
        //                    bubble.open();
        //                  }
        //                }


        //                /**
        //                 * Creates a H.map.Polyline from the shape of the route and adds it to the map.
        //                 * @param {Object} route A route as received from the H.service.RoutingService
        //                 */
        //                function addRouteShapeToMap(route){
        //                  var lineString = new H.geo.LineString(),
        //                    routeShape = route.shape,
        //                    polyline;

        //                  routeShape.forEach(function(point) {
        //                    var parts = point.split(',');
        //                    lineString.pushLatLngAlt(parts[0], parts[1]);
        //                  });

        //                  polyline = new H.map.Polyline(lineString, {
        //                    style: {
        //                      lineWidth: 4,
        //                      strokeColor: 'rgba(0, 128, 255, 0.7)'
        //                    }
        //                  });
        //                  // Add the polyline to the map
        //                  map.addObject(polyline);
        //                  // And zoom to its bounding rectangle
        //                  map.setViewBounds(polyline.getBounds(), true);
        //                }


        //                /**
        //                 * Creates a series of H.map.Marker points from the route and adds them to the map.
        //                 * @param {Object} route  A route as received from the H.service.RoutingService
        //                 */
        //                function addManueversToMap(route){
        //                      var group = new  H.map.Group(),
        //                        i,
        //                        j;
        //                      /*
        //                      // Add a marker for each maneuver
        //                      for (i = 0;  i < route.leg.length; i += 1) {
        //                        for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
        //                          // Get the next maneuver.
        //                          maneuver = route.leg[i].maneuver[j];
        //                          // Add a marker to the maneuvers group
        //                          var marker =  new H.map.Marker({
        //                            lat: maneuver.position.latitude,
        //                            lng: maneuver.position.longitude} ,
        //                            { icon: new H.map.Icon(svgMarkup.replace('${text}', j), { anchor: { x: 8, y: 8} }) });
        //                          marker.instruction = maneuver.instruction;
        //                          group.addObject(marker);
        //                        }
        //                      }*/

        //                      drawNearestDriver(map, group);

        //                      // Add a marker to the maneuvers group
        //                      var FromManeuver = route.leg[0].maneuver[0];
        //                      var FromMarker = new H.map.Marker(
        //                                { lat: FromManeuver.position.latitude, lng: FromManeuver.position.longitude },
        //                                { icon: GetMarkerIconTemp('red','A') }
        //                                );
        //                      FromMarker.instruction = FromLocName;
        //                      group.addObject(FromMarker);

        //                      var ToManeuver = route.leg[route.leg.length - 1].maneuver[route.leg[route.leg.length - 1].maneuver.length - 1];

        //                      var ToMarker = new H.map.Marker(
        //                                { lat: ToManeuver.position.latitude, lng: ToManeuver.position.longitude },
        //                                { icon: GetMarkerIconTemp('red', '" + toCaption + @"') }
        //                                );
        //                      ToMarker.instruction = ToLocName;
        //                      group.addObject(ToMarker);

        //                      var zIndex = 1;
        //                      group.addEventListener('tap', function (evt) {
        //                        map.setCenter(evt.target.getPosition());
        //                        openBubble(
        //                           evt.target.getPosition(), evt.target.instruction);
        //                           // increase z-index of the marker that was tapped
        //                                  evt.target.setZIndex(zIndex++);
        //                      }, false);



        //                      // Add the maneuvers group to the map
        //                      map.addObject(group);
        //                    }


        //                /**
        //                 * Creates a series of H.map.Marker points from the route and adds them to the map.
        //                 * @param {Object} route  A route as received from the H.service.RoutingService
        //                 */
        //                function addWaypointsToPanel(waypoints){



        //                  var nodeH3 = document.createElement('h3'),
        //                    waypointLabels = [],
        //                    i;


        //                   for (i = 0;  i < waypoints.length; i += 1) {
        //                    waypointLabels.push(waypoints[i].label)
        //                   }

        //                   nodeH3.textContent = waypointLabels.join(' - ');

        //                  //*routeInstructionsContainer.innerHTML = '';
        //                  //*routeInstructionsContainer.appendChild(nodeH3);
        //                }

        //                /**
        //                 * Creates a series of H.map.Marker points from the route and adds them to the map.
        //                 * @param {Object} route  A route as received from the H.service.RoutingService
        //                 */
        //                function addSummaryToPanel(summary){
        //                  var summaryDiv = document.createElement('div'),
        //                   content = '';
        //                   content += '<b>Total distance</b>: ' + summary.distance  + 'm. <br/>';
        //                   content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


        //                 summaryDiv.style.fontSize = 'small';
        //                  summaryDiv.style.marginLeft ='5%';
        //                  summaryDiv.style.marginRight ='5%';
        //                  summaryDiv.innerHTML = content;
        //                  //*routeInstructionsContainer.appendChild(summaryDiv);
        //                }

        //                /**
        //                 * Creates a series of H.map.Marker points from the route and adds them to the map.
        //                 * @param {Object} route  A route as received from the H.service.RoutingService
        //                 */
        //                function addManueversToPanel(route){



        //                  var nodeOL = document.createElement('ol'),
        //                    i,
        //                    j;

        //                  nodeOL.style.fontSize = 'small';
        //                  nodeOL.style.marginLeft ='5%';
        //                  nodeOL.style.marginRight ='5%';
        //                  nodeOL.className = 'directions';

        //                     // Add a marker for each maneuver
        //                  for (i = 0;  i < route.leg.length; i += 1) {
        //                    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
        //                      // Get the next maneuver.
        //                      maneuver = route.leg[i].maneuver[j];

        //                      var li = document.createElement('li'),
        //                        spanArrow = document.createElement('span'),
        //                        spanInstruction = document.createElement('span');

        //                      spanArrow.className = 'arrow '  + maneuver.action;
        //                      spanInstruction.innerHTML = maneuver.instruction;
        //                      li.appendChild(spanArrow);
        //                      li.appendChild(spanInstruction);

        //                      nodeOL.appendChild(li);
        //                    }
        //                  }

        //                //*routeInstructionsContainer.appendChild(nodeOL);
        //                }


        //                Number.prototype.toMMSS = function () {
        //                  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
        //                }


        //                function addMarkersToMap(map) {

        //                    drawNearestDriver(map, group);

        //                    var group = new H.map.Group();

        //                    // Add a marker to the maneuvers group    
        //                    var FromMarker = new H.map.Marker(
        //                                        { lat: parseFloat(FromLatLng.split(',')[0]), lng: parseFloat(FromLatLng.split(',')[1]) },
        //                                        { icon: GetMarkerIconTemp('red', 'A') }
        //                                        );
        //                    FromMarker.instruction = FromLocName;
        //                    group.addObject(FromMarker);                   

        //                   var zIndex = 1;
        //                   group.addEventListener('tap', function (evt) {
        //                       map.setCenter(evt.target.getPosition());
        //                       openBubble(
        //                      evt.target.getPosition(), evt.target.instruction);
        //                      // increase z-index of the marker that was tapped
        //                        evt.target.setZIndex(zIndex++);

        //                   }, false);

        //                    // Add the maneuvers group to the map
        //                    map.addObject(group);

        //                //    var parisMarker = new H.map.Marker({ lat: 48.8567, lng: 2.3508 });
        //                //    map.addObject(parisMarker);

        //                }


        //                function drawNearestDriver(map, group) {
        //                    if (NearestDriverList != undefined && NearestDriverList != '') {
        //                        var text = NearestDriverList;
        //                        var NearestDriver = text.split('],')
        //                        for (i = 0; i < NearestDriver.length; i++) {
        //                            var Drv = NearestDriver[i].split('\',')[0];
        //                            var nearestLatLng = NearestDriver[i].split('\',');

        //                            var parisMarker = new H.map.Marker({ lat: parseFloat(nearestLatLng[1].split(',')[0]), lng: parseFloat(nearestLatLng[1].split(',')[1]) },
        //                                        { icon: GetMarkerIconTemp('blue', Drv) });
        //                            group.addObject(parisMarker);
        //                        }
        //                    }
        //                }

        //                function GetMarkerIconTemp(color, text) {

        //                    var svgMarkup = '<svg xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' width=\'32\' height=\'32\' viewBox=\'0 0 263.335 263.335\' style=\'enable-background:new 0 0 263.335 263.335;\' xml:space=\'preserve\'> ' +
        //                                        '<g> ' +
        //                                        '<g xmlns=\'http://www.w3.org/2000/svg\'> ' +
        //                                            '<path d=\'M40.479,159.021c21.032,39.992,49.879,74.22,85.732,101.756c0.656,0.747,1.473,1.382,2.394,1.839   c0.838-0.396,1.57-0.962,2.178-1.647c80.218-61.433,95.861-125.824,96.44-128.34c2.366-9.017,3.57-18.055,3.57-26.864    C237.389,47.429,189.957,0,131.665,0C73.369,0,25.946,47.424,25.946,105.723c0,8.636,1.148,17.469,3.412,26.28\' fill=\'${COLOR}\'/> ' +
        //                                            '<text x=\'${spo}\' y=\'130\' font-family=\'arial\' font-size=\'6em\' font-weight=\'bold\' fill=\'white\'>${TEXT}</text>' +
        //                                        '</g>' +
        //                                    '</g></svg>';


        //                    color = color == undefined ? 'blue' : color;
        //                    text = text == undefined ? '' : text;

        //                    var XPos =90;

        //                    if(text.length>1)
        //                    XPos=70;

        //                    // Add the first marker
        //                    var Icon = new H.map.Icon(svgMarkup.replace('${COLOR}', color).replace('${TEXT}', text).replace('${spo}', XPos), { anchor: { x: 20, y: 20} });
        //                    return Icon;
        //                }

        //                // Now use the map as required...
        //                if (ToLatLng != undefined && ToLatLng != '') {
        //                    calculateRouteFromAtoB(platform);
        //                }
        //                else {
        //                    addMarkersToMap(map);
        //                }
        //                  </script>
        //                </body>
        //                </html>");




        //                    return htmlMap.ToString();

        //                }
        //            }
        //            catch
        //            {
        //                return "";
        //            }


        //        }




        private string GetMapTemplateVia(string CenterPointLatLng, string FromLatLng, string viaadd, string ToLatLng, string FromAddress, string ToAddress, string NearestDriverList)
        {
            try
            {
                //Start Calculate VIA 
                //string[] viaLocs = new string[0];
                //string viaadd = "";

                //stp_getCoordinatesByAddressResult viaPostcode = null;
                //if (pnlVia != null)
                //{
                //    viaLocs = grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr()).ToArray<string>();

                //    using (TaxiDataContext db = new TaxiDataContext())
                //    {
                //        foreach (var a in viaLocs)
                //        {
                //            viaPostcode = db.stp_getCoordinatesByAddress(a.ToStr(), General.GetPostCodeMatch(a)).FirstOrDefault();
                //            viaadd += viaPostcode.Latitude + "," + viaPostcode.Longtiude + "|";
                //        }
                //        viaadd = viaadd.Remove(viaadd.Length - 1);

                //    }
                //}
                //End Calculate VIA 

                if (FromAddress.ToStr().Trim().Contains("\n"))
                    FromAddress = FromAddress.ToStr().Trim().Replace("\n", "").Trim();


                if (ToAddress.ToStr().Trim().Contains("\n"))
                    ToAddress = ToAddress.ToStr().Trim().Replace("\n", "").Trim();

                //  CenterPointLatLng = ToLatLng;

                string toCaption = "B";
                if (FromLatLng.Contains(",") == false)
                {
                    return "";

                }

                if (ToLatLng == "" || ToLatLng.Contains(",") == false)
                {
                    ToLatLng = FromLatLng;
                    ToAddress = FromAddress;
                    toCaption = "A";
                }


                if (FromLatLng == "0,0")
                    return "";

                if (ToLatLng == "0,0")
                    return "";



                if (ToLatLng.Contains(",") == false)
                    return "";





                string APP_ID = System.Configuration.ConfigurationManager.AppSettings["MAP_APP_ID"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_APP_ID"].ToStr() : "3AFVxo9lo4YV4NVnqgz1";
                string APP_CODE = System.Configuration.ConfigurationManager.AppSettings["MAP_APP_CODE"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_APP_CODE"].ToStr() : "uCIGBo3LGjk4d02fxXGtvw";
                string IsUseHTTPS = System.Configuration.ConfigurationManager.AppSettings["MAP_IsUseHTTPS"] != null ? System.Configuration.ConfigurationManager.AppSettings["MAP_IsUseHTTPS"].ToStr() : "true";



                if (AppVars.etaKey.ToStr().Trim().Length > 0 && AppVars.etaKey.ToStr().Where(c => (c == ',')).Count() == 2)
                {
                    APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
                    APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
                }
                else
                {
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        try
                        {
                            if (db.ExecuteQuery<long>("select len(APIKey)- len(replace(APIKey,',','')) from MapKeys where MapType='here'").FirstOrDefault() == 2)
                            {
                                AppVars.etaKey = db.ExecuteQuery<string>("select apikey from MapKeys where MapType='here'").FirstOrDefault();
                                APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
                                APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
                            }
                        }
                        catch (Exception ex)
                        {

                        }
                    }
                }



                nearestDriverString = FromLatLng + ">>>" + NearestDriverList.ToStr();
                NearestDriverList = NearestDriverList.Replace("'", @"\'");
                FromAddress = FromAddress.Replace("'", @"\'");
                ToAddress = ToAddress.Replace("'", @"\'");


                string distanceType = "fastest;car";

                if (AppVars.objPolicyConfiguration.MapType.ToInt() == 2)
                    distanceType = AppVars.routemode;

                StringBuilder htmlMap = new StringBuilder();
                htmlMap.Append(
                 @"<!DOCTYPE html>
                <html>
                <head>
                <meta http-equiv='X-UA-Compatible' content='IE=edge'>
                <meta http-equiv='ontent-type' content='text/html; charset=UTF-8' />
                <meta name='viewport' content='initial-scale=1.0, width=device-width' />
                <link rel='stylesheet' type='text/css' href='https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059' />
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-core.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-service.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-ui.js'></script>
                <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-mapevents.js'></script>

                </head>
                <body>
  
                  <div id='map' style='position:absolute; width:99%; height:50%; background:grey; left:0px; top:0px;'></div>
                  <div id='panel' style='position:absolute; width:49%; left:51%; height:100%; background:inherit;display:none;' ></div>

                  <script  type='text/javascript' charset='UTF-8' >

                      var APP_ID = '" + APP_ID + @"';
                      var APP_CODE = '" + APP_CODE + @"';
                      var IsUseHTTPS = " + IsUseHTTPS + @";

                      var CenterPoint = " + CenterPointLatLng + @";
                      var FromLatLng = '" + FromLatLng + @"';
                      var ToLatLng = '" + ToLatLng + @"';
                      var FromLocName = '" + FromAddress + @"';
                      var ToLocName = '" + ToAddress + @"';

  var distanceTypes = '" + distanceType + @"';


                      var NearestDriverList = '" + NearestDriverList + @"'
var via ='" + viaadd + @"'


                /**
                 * Calculates and displays a car route from the Brandenburg Gate in the centre of Berlin
                 * to Friedrichstraße Railway Station.
                 *
                 * A full list of available request parameters can be found in the Routing API documentation.
                 * see:  http://developer.here.com/rest-apis/documentation/routing/topics/resource-calculate-route.html
                 *
                 * @param   {H.service.Platform} platform    A stub class to access HERE services
                 */
                function calculateRouteFromAtoB (platform) {
 var ViaPoints = via.split('|');
                  var router = platform.getRoutingService(),
                    routeRequestParams = {      
                      mode: distanceTypes,
                      representation: 'display',
                      routeattributes : 'waypoints,summary,shape,legs',
                      maneuverattributes: 'direction,action',
                      waypoint0: FromLatLng, // Brandenburg Gate
                      waypoint1: ToLatLng  // Friedrichstraße Railway Station
                    
                    };
  var i = 0;
                    for (var j = 0; j < ViaPoints.length; j++) {
                        i++;
                        var a = ViaPoints[j];
                        routeRequestParams['waypoint' + i] = ViaPoints[j].replace('|', '');
                     }
                     i++;

 routeRequestParams['waypoint' + i] = ToLatLng;

                  router.calculateRoute(
                    routeRequestParams,
                    onSuccess,
                    onError
                  );
                }
                /**
                 * This function will be called once the Routing REST API provides a response
                 * @param  {Object} result          A JSONP object representing the calculated route
                 *
                 * see: http://developer.here.com/rest-apis/documentation/routing/topics/resource-type-calculate-route.html
                 */
                function onSuccess(result) {
                  var route = result.response.route[0];
                 /*
                  * The styling of the route response on the map is entirely under the developer's control.
                  * A representitive styling can be found the full JS + HTML code of this example
                  * in the functions below:
                  */
                  addRouteShapeToMap(route);
                  addManueversToMap(route);

                  addWaypointsToPanel(route.waypoint);
                  addManueversToPanel(route);
                //  addSummaryToPanel(route.summary);
                  // ... etc.
                }

                /**
                 * This function will be called if a communication error occurs during the JSON-P request
                 * @param  {Object} error  The error message received.
                 */
                function onError(error) {
                 // alert('Ooops!');
                }




                /**
                 * Boilerplate map initialization code starts below:
                 */

                // set up containers for the map  + panel
                var mapContainer = document.getElementById('map'),
                  routeInstructionsContainer = document.getElementById('panel');

                //Step 1: initialize communication with the platform
                var platform = new H.service.Platform({
                    app_id: APP_ID,
                    app_code: APP_CODE,
                    useHTTPS: IsUseHTTPS
                });

                var pixelRatio = window.devicePixelRatio || 1;
                var defaultLayers = platform.createDefaultLayers({
                  tileSize: pixelRatio === 1 ? 256 : 512,
                  ppi: pixelRatio === 1 ? undefined : 320
                });

                //Step 2: initialize a map - this map is centered over Berlin
                var map = new H.Map(mapContainer,
                  defaultLayers.normal.map,{
                      center: CenterPoint,
                  zoom: 10,
                  pixelRatio: pixelRatio
                });

                //Step 3: make the map interactive
                // MapEvents enables the event system
                // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
                var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

                // Create the default UI components
                var ui = H.ui.UI.createDefault(map, defaultLayers);

                // Hold a reference to any infobubble opened
                var bubble;

                /**
                 * Opens/Closes a infobubble
                 * @param  {H.geo.Point} position     The location on the map.
                 * @param  {String} text              The contents of the infobubble.
                 */
                function openBubble(position, text){
                 if(!bubble){
                    bubble =  new H.ui.InfoBubble(
                      position,
                      // The FO property holds the province name.
                      {content: text});
                    ui.addBubble(bubble);
                  } else {
                    bubble.setPosition(position);
                    bubble.setContent(text);
                    bubble.open();
                  }
                }


                /**
                 * Creates a H.map.Polyline from the shape of the route and adds it to the map.
                 * @param {Object} route A route as received from the H.service.RoutingService
                 */
                function addRouteShapeToMap(route){
                  var lineString = new H.geo.LineString(),
                    routeShape = route.shape,
                    polyline;

                  routeShape.forEach(function(point) {
                    var parts = point.split(',');
                    lineString.pushLatLngAlt(parts[0], parts[1]);
                  });

                  polyline = new H.map.Polyline(lineString, {
                    style: {
                      lineWidth: 4,
                      strokeColor: 'rgba(0, 128, 255, 0.7)'
                    }
                  });
                  // Add the polyline to the map
                  map.addObject(polyline);
                  // And zoom to its bounding rectangle
                  map.setViewBounds(polyline.getBounds(), true);
                }


                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
               function addManueversToMap(route){
                      var group = new  H.map.Group(),
                        i,
                        j;
                      
                      // Add a marker for each maneuver
                   var c = 'A';
            for (i = 0; i < route.waypoint.length; i++) {
                //for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
                // Get the next maneuver.
                //maneuver = route.leg[i].maneuver[j];
                //maneuver = route.leg[i].maneuver[i];
                // Add a marker to the maneuvers group

                var marker = new H.map.Marker({
                    lat: route.waypoint[i].mappedPosition.latitude,
                    lng: route.waypoint[i].mappedPosition.longitude
                },
                    { icon: GetMarkerIconTemp('Red', c) });
                //{ icon: new H.map.Icon(svgMarkup.replace('${text}', j), { anchor: { x: 8, y: 8} }) });
                marker.instruction = route.waypoint[i].label;
                group.addObject(marker);
                c = String.fromCharCode(c.charCodeAt(0) + 1);
                //}
            }

                      drawNearestDriver(map, group);

                      // Add a marker to the maneuvers group
                      //var FromManeuver = route.leg[0].maneuver[0];
                      //var FromMarker = new H.map.Marker(
                      //          { lat: FromManeuver.position.latitude, lng: FromManeuver.position.longitude },
                      //          { icon: GetMarkerIconTemp('red','A') }
                      //          );
                      //FromMarker.instruction = FromLocName;
                      //group.addObject(FromMarker);

                      //var ToManeuver = route.leg[route.leg.length - 1].maneuver[route.leg[route.leg.length - 1].maneuver.length - 1];

                      //var ToMarker = new H.map.Marker(
                      //          { lat: ToManeuver.position.latitude, lng: ToManeuver.position.longitude },
                      //          { icon: GetMarkerIconTemp('red', '" + toCaption + @"') }
                      //          );
                      //ToMarker.instruction = ToLocName;
                      //group.addObject(ToMarker);

                      //var zIndex = 1;
                      //group.addEventListener('tap', function (evt) {
                      //  map.setCenter(evt.target.getPosition());
                      //  openBubble(
                      //     evt.target.getPosition(), evt.target.instruction);
                      //     // increase z-index of the marker that was tapped
                      //            evt.target.setZIndex(zIndex++);
                      //}, false);

                      

                      // Add the maneuvers group to the map
                      map.addObject(group);
                    }


                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addWaypointsToPanel(waypoints){



                  var nodeH3 = document.createElement('h3'),
                    waypointLabels = [],
                    i;


                   for (i = 0;  i < waypoints.length; i += 1) {
                    waypointLabels.push(waypoints[i].label)
                   }

                   nodeH3.textContent = waypointLabels.join(' - ');

                  //*routeInstructionsContainer.innerHTML = '';
                  //*routeInstructionsContainer.appendChild(nodeH3);
                }

                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addSummaryToPanel(summary){
                  var summaryDiv = document.createElement('div'),
                   content = '';
                   content += '<b>Total distance</b>: ' + summary.distance  + 'm. <br/>';
                   content += '<b>Travel Time</b>: ' + summary.travelTime.toMMSS() + ' (in current traffic)';


                 summaryDiv.style.fontSize = 'small';
                  summaryDiv.style.marginLeft ='5%';
                  summaryDiv.style.marginRight ='5%';
                  summaryDiv.innerHTML = content;
                  //*routeInstructionsContainer.appendChild(summaryDiv);
                }

                /**
                 * Creates a series of H.map.Marker points from the route and adds them to the map.
                 * @param {Object} route  A route as received from the H.service.RoutingService
                 */
                function addManueversToPanel(route){



                  var nodeOL = document.createElement('ol'),
                    i,
                    j;

                  nodeOL.style.fontSize = 'small';
                  nodeOL.style.marginLeft ='5%';
                  nodeOL.style.marginRight ='5%';
                  nodeOL.className = 'directions';

                     // Add a marker for each maneuver
                  for (i = 0;  i < route.leg.length; i += 1) {
                    for (j = 0;  j < route.leg[i].maneuver.length; j += 1) {
                      // Get the next maneuver.
                      maneuver = route.leg[i].maneuver[j];

                      var li = document.createElement('li'),
                        spanArrow = document.createElement('span'),
                        spanInstruction = document.createElement('span');

                      spanArrow.className = 'arrow '  + maneuver.action;
                      spanInstruction.innerHTML = maneuver.instruction;
                      li.appendChild(spanArrow);
                      li.appendChild(spanInstruction);

                      nodeOL.appendChild(li);
                    }
                  }

                //*routeInstructionsContainer.appendChild(nodeOL);
                }


                Number.prototype.toMMSS = function () {
                  return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
                }

                
                function addMarkersToMap(map) {

                    drawNearestDriver(map, group);

                    var group = new H.map.Group();

                    // Add a marker to the maneuvers group    
                    var FromMarker = new H.map.Marker(
                                        { lat: parseFloat(FromLatLng.split(',')[0]), lng: parseFloat(FromLatLng.split(',')[1]) },
                                        { icon: GetMarkerIconTemp('red', 'A') }
                                        );
                    FromMarker.instruction = FromLocName;
                    group.addObject(FromMarker);                   

                   var zIndex = 1;
                   group.addEventListener('tap', function (evt) {
                       map.setCenter(evt.target.getPosition());
                       openBubble(
                      evt.target.getPosition(), evt.target.instruction);
                      // increase z-index of the marker that was tapped
                        evt.target.setZIndex(zIndex++);

                   }, false);

                    // Add the maneuvers group to the map
                    map.addObject(group);

                //    var parisMarker = new H.map.Marker({ lat: 48.8567, lng: 2.3508 });
                //    map.addObject(parisMarker);

                }


                function drawNearestDriver(map, group) {
                    if (NearestDriverList != undefined && NearestDriverList != '') {
                        var text = NearestDriverList;
                        var NearestDriver = text.split('],')
                        for (i = 0; i < NearestDriver.length; i++) {
                            var Drv = NearestDriver[i].split('\',')[0];
                            var nearestLatLng = NearestDriver[i].split('\',');

                            var parisMarker = new H.map.Marker({ lat: parseFloat(nearestLatLng[1].split(',')[0]), lng: parseFloat(nearestLatLng[1].split(',')[1]) },
                                        { icon: GetMarkerIconTemp('blue', Drv) });
                            group.addObject(parisMarker);
                        }
                    }
                }

                function GetMarkerIconTemp(color, text) {

                    var svgMarkup = '<svg xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' width=\'32\' height=\'32\' viewBox=\'0 0 263.335 263.335\' style=\'enable-background:new 0 0 263.335 263.335;\' xml:space=\'preserve\'> ' +
                                        '<g> ' +
                                        '<g xmlns=\'http://www.w3.org/2000/svg\'> ' +
                                            '<path d=\'M40.479,159.021c21.032,39.992,49.879,74.22,85.732,101.756c0.656,0.747,1.473,1.382,2.394,1.839   c0.838-0.396,1.57-0.962,2.178-1.647c80.218-61.433,95.861-125.824,96.44-128.34c2.366-9.017,3.57-18.055,3.57-26.864    C237.389,47.429,189.957,0,131.665,0C73.369,0,25.946,47.424,25.946,105.723c0,8.636,1.148,17.469,3.412,26.28\' fill=\'${COLOR}\'/> ' +
                                            '<text x=\'${spo}\' y=\'130\' font-family=\'arial\' font-size=\'6em\' font-weight=\'bold\' fill=\'white\'>${TEXT}</text>' +
                                        '</g>' +
                                    '</g></svg>';

    
                    color = color == undefined ? 'blue' : color;
                    text = text == undefined ? '' : text;

                    var XPos =90;

                    if(text.length>1)
                    XPos=70;

                    // Add the first marker
                    var Icon = new H.map.Icon(svgMarkup.replace('${COLOR}', color).replace('${TEXT}', text).replace('${spo}', XPos), { anchor: { x: 20, y: 20} });
                    return Icon;
                }

                // Now use the map as required...
                if (ToLatLng != undefined && ToLatLng != '') {
                    calculateRouteFromAtoB(platform);
                }
                else {
                    addMarkersToMap(map);
                }
                  </script>
                </body>
                </html>");
                return htmlMap.ToString();
            }
            catch
            {
                return "";
            }


        }



        string nearestDriverString = string.Empty;
        //      private string GetMapTemplatePickup(string CenterPointLatLng, string FromLatLng, string ToLatLng, string FromAddress, string ToAddress, string NearestDriverList)
        //      {
        //          try
        //          {

        //              if (FromAddress.ToStr().Trim().Contains("\r\n"))
        //                  FromAddress = FromAddress.ToStr().Trim().Replace("\r\n", " ").Trim();


        //              if (ToAddress.ToStr().Trim().Contains("\r\n"))
        //                  ToAddress = ToAddress.ToStr().Trim().Replace("\r\n", " ").Trim();



        //              if (FromAddress.ToStr().Trim().Contains("\n"))
        //                  FromAddress = FromAddress.ToStr().Trim().Replace("\n", "").Trim();


        //              if (ToAddress.ToStr().Trim().Contains("\n"))
        //                  ToAddress = ToAddress.ToStr().Trim().Replace("\n", "").Trim();


        //              if (FromLatLng.Contains(",") == false)
        //              {
        //                  return "";

        //              }

        //              if (ToLatLng == "" || ToLatLng.Contains(",") == false)
        //              {
        //                  ToLatLng = FromLatLng;
        //                  ToAddress = FromAddress;
        //             //     toCaption = "A";
        //              }


        //              if (FromLatLng == "0,0")
        //                  return "";

        //              if (ToLatLng == "0,0")
        //                  return "";



        //              if (ToLatLng.Contains(",") == false)
        //                  return "";





        //              string APP_ID = System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_ID"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_ID"].ToStr() : "3AFVxo9lo4YV4NVnqgz1";
        //              string APP_CODE = System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_CODE"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_APP_CODE"].ToStr() : "uCIGBo3LGjk4d02fxXGtvw";
        //              string IsUseHTTPS = System.Configuration.ConfigurationSettings.AppSettings["MAP_IsUseHTTPS"] != null ? System.Configuration.ConfigurationSettings.AppSettings["MAP_IsUseHTTPS"].ToStr() : "true";


        //              if (AppVars.etaKey.ToStr().Trim().Length > 0 && AppVars.etaKey.ToStr().Where(c => (c == ',')).Count() == 2)
        //              {
        //                  APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
        //                  APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
        //              }
        //              else
        //              {
        //                  using (TaxiDataContext db = new TaxiDataContext())
        //                  {
        //                      try
        //                      {
        //                          if (db.ExecuteQuery<long>("select len(APIKey)- len(replace(APIKey,',','')) from MapKeys where MapType='here'").FirstOrDefault() == 2)
        //                          {
        //                              AppVars.etaKey = db.ExecuteQuery<string>("select apikey from MapKeys where MapType='here'").FirstOrDefault();
        //                              APP_ID = AppVars.etaKey.Split(new char[] { ',' })[0];
        //                              APP_CODE = AppVars.etaKey.Split(new char[] { ',' })[1];
        //                          }
        //                      }
        //                      catch (Exception ex)
        //                      {

        //                      }
        //                  }
        //              }

        //              nearestDriverString = FromLatLng+">>>"+ NearestDriverList.ToStr();

        //              NearestDriverList = NearestDriverList.Replace("'", @"\'");
        //            //  nearestDriverString = NearestDriverList;
        //              FromAddress = FromAddress.Replace("'", @"\'");
        //              ToAddress = ToAddress.Replace("'", @"\'");

        //              StringBuilder htmlMap = new StringBuilder();
        //              htmlMap.Append(
        //               @"<!DOCTYPE html>
        //              <html>
        //              <head>
        //              <meta http-equiv='X-UA-Compatible' content='IE=edge'>
        //              <meta http-equiv='ontent-type' content='text/html; charset=UTF-8' />
        //              <meta name='viewport' content='initial-scale=1.0, width=device-width' />
        //              <link rel='stylesheet' type='text/css' href='https://js.api.here.com/v3/3.0/mapsjs-ui.css?dp-version=1533195059' />
        //              <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-core.js'></script>
        //              <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-service.js'></script>
        //              <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-ui.js'></script>
        //              <script type='text/javascript' src='https://js.api.here.com/v3/3.0/mapsjs-mapevents.js'></script>

        //              </head>
        //              <body>

        //                <div id='map' style='position:absolute; width:99%; height:50%; background:grey; left:0px; top:0px;'></div>
        //                <div id='panel' style='position:absolute; width:49%; left:51%; height:100%; background:inherit;display:none;' ></div>

        //                <script  type='text/javascript' charset='UTF-8' >

        //                    var APP_ID = '" + APP_ID + @"';
        //                    var APP_CODE = '" + APP_CODE + @"';
        //                    var IsUseHTTPS = " + IsUseHTTPS + @";

        //                    var CenterPoint = " + CenterPointLatLng + @";
        //                    var FromLatLng = '" + FromLatLng + @"';
        //                    var ToLatLng = '" + ToLatLng + @"';
        //                    var FromLocName = '" + FromAddress + @"';
        //                    var ToLocName = '" + ToAddress + @"';
        //                    var NearestDriverList = '" + NearestDriverList + @"'







        //              /**
        //               * This function will be called if a communication error occurs during the JSON-P request
        //               * @param  {Object} error  The error message received.
        //               */
        //              function onError(error) {
        //              //  alert('Ooops!');
        //              }




        //              /**
        //               * Boilerplate map initialization code starts below:
        //               */

        //              // set up containers for the map  + panel
        //              var mapContainer = document.getElementById('map'),
        //                routeInstructionsContainer = document.getElementById('panel');

        //              //Step 1: initialize communication with the platform
        //              var platform = new H.service.Platform({
        //                  app_id: APP_ID,
        //                  app_code: APP_CODE,
        //                  useHTTPS: IsUseHTTPS
        //              });

        //              var pixelRatio = window.devicePixelRatio || 1;
        //              var defaultLayers = platform.createDefaultLayers({
        //                tileSize: pixelRatio === 1 ? 256 : 512,
        //                ppi: pixelRatio === 1 ? undefined : 320
        //              });

        //              //Step 2: initialize a map - this map is centered over Berlin
        //              var map = new H.Map(mapContainer,
        //                defaultLayers.normal.map,{
        //                    center: CenterPoint,
        //                zoom: 16,
        //                pixelRatio: pixelRatio
        //              });

        //              //Step 3: make the map interactive
        //              // MapEvents enables the event system
        //              // Behavior implements default interactions for pan/zoom (also on mobile touch environments)
        //              var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

        //              // Create the default UI components
        //              var ui = H.ui.UI.createDefault(map, defaultLayers);

        //              // Hold a reference to any infobubble opened
        //              var bubble;

        //              /**
        //               * Opens/Closes a infobubble
        //               * @param  {H.geo.Point} position     The location on the map.
        //               * @param  {String} text              The contents of the infobubble.
        //               */
        //              function openBubble(position, text){
        //               if(!bubble){
        //                  bubble =  new H.ui.InfoBubble(
        //                    position,
        //                    // The FO property holds the province name.
        //                    {content: text});
        //                  ui.addBubble(bubble);
        //                } else {
        //                  bubble.setPosition(position);
        //                  bubble.setContent(text);
        //                  bubble.open();
        //                }
        //              }






        //              Number.prototype.toMMSS = function () {
        //                return  Math.floor(this / 60)  +' minutes '+ (this % 60)  + ' seconds.';
        //              }


        //              function addMarkersToMap(map) {



        //                  var group = new H.map.Group();

        //                  // Add a marker to the maneuvers group    
        //                  var FromMarker = new H.map.Marker(
        //                                      { lat: parseFloat(FromLatLng.split(',')[0]), lng: parseFloat(FromLatLng.split(',')[1]) },
        //                                      { icon: GetMarkerIconTemp('red', 'A') }
        //                                      );
        //                  FromMarker.instruction = FromLocName;
        //                  group.addObject(FromMarker);                   

        //                 var zIndex = 1;
        //                 group.addEventListener('tap', function (evt) {
        //                     map.setCenter(evt.target.getPosition());
        //                     openBubble(
        //                    evt.target.getPosition(), evt.target.instruction);
        //                    // increase z-index of the marker that was tapped
        //                      evt.target.setZIndex(zIndex++);

        //                 }, false);

        //                  // Add the maneuvers group to the map
        //                  map.addObject(group);
        //drawNearestDriver(map, group);
        //              //    var parisMarker = new H.map.Marker({ lat: 48.8567, lng: 2.3508 });
        //              //    map.addObject(parisMarker);

        //              }


        //              function drawNearestDriver(map, group) {
        //                  if (NearestDriverList != undefined && NearestDriverList != '') {
        //                      var text = NearestDriverList;
        //                      var NearestDriver = text.split('],')
        //                      for (i = 0; i < NearestDriver.length; i++) {
        //                          var Drv = NearestDriver[i].split('\',')[0];
        //                          var nearestLatLng = NearestDriver[i].split('\',');

        //                          var parisMarker = new H.map.Marker({ lat: parseFloat(nearestLatLng[1].split(',')[0]), lng: parseFloat(nearestLatLng[1].split(',')[1]) },
        //                                      { icon: GetMarkerIconTemp('blue', Drv) });
        //                          group.addObject(parisMarker);
        //                      }
        //                  }
        //              }

        //              function GetMarkerIconTemp(color, text) {

        //                  var svgMarkup = '<svg xmlns=\'http://www.w3.org/2000/svg\' xmlns:xlink=\'http://www.w3.org/1999/xlink\' version=\'1.1\' x=\'0px\' y=\'0px\' width=\'32\' height=\'32\' viewBox=\'0 0 263.335 263.335\' style=\'enable-background:new 0 0 263.335 263.335;\' xml:space=\'preserve\'> ' +
        //                                      '<g> ' +
        //                                      '<g xmlns=\'http://www.w3.org/2000/svg\'> ' +
        //                                          '<path d=\'M40.479,159.021c21.032,39.992,49.879,74.22,85.732,101.756c0.656,0.747,1.473,1.382,2.394,1.839   c0.838-0.396,1.57-0.962,2.178-1.647c80.218-61.433,95.861-125.824,96.44-128.34c2.366-9.017,3.57-18.055,3.57-26.864    C237.389,47.429,189.957,0,131.665,0C73.369,0,25.946,47.424,25.946,105.723c0,8.636,1.148,17.469,3.412,26.28\' fill=\'${COLOR}\'/> ' +
        //                                          '<text x=\'${spo}\' y=\'130\' font-family=\'arial\' font-size=\'6em\' font-weight=\'bold\' fill=\'white\'>${TEXT}</text>' +
        //                                      '</g>' +
        //                                  '</g></svg>';


        //                  color = color == undefined ? 'blue' : color;
        //                  text = text == undefined ? '' : text;

        //                  var XPos =90;

        //                  if(text.length>1)
        //                  XPos=70;

        //                  // Add the first marker
        //                  var Icon = new H.map.Icon(svgMarkup.replace('${COLOR}', color).replace('${TEXT}', text).replace('${spo}', XPos), { anchor: { x: 20, y: 20} });
        //                  return Icon;
        //              }

        //              // Now use the map as required...

        //                  addMarkersToMap(map);

        //                </script>
        //              </body>
        //              </html>");
        //              return htmlMap.ToString();
        //          }
        //          catch
        //          {
        //              return "";
        //          }


        //      }

        private void btnSaveNew_MouseHover(object sender, EventArgs e)
        {

            ((Button)sender).BackColor = Color.LightCyan;

        }

        private void btnSaveNew_MouseLeave(object sender, EventArgs e)
        {
            ((Button)sender).BackColor = Color.AliceBlue;

        }

        private void btnBase_Click(object sender, EventArgs e)
        {
            if (txtToAddress.Focused)
            {
                SetToBase();
            }
            else
            {
                SetFromBase();
            }

            UpdateAutoCalculateFares();
        }






        private void FillCompanyContacts()
        {
            try
            {




                using (TaxiDataContext db = new TaxiDataContext())
                {
                    db.CommandTimeout = 5;
                    db.DeferredLoadingEnabled = false;

                    int companyId = ddlCompany.SelectedValue.ToInt();


                    if (companyId == 0)
                    {
                        ddlCustomerName.AutoCompleteCustomSource.Clear();

                    }
                    else
                    {
                        var list = db.Gen_Company_Contacts.Where(c => c.CompanyId == companyId).Select(c => c.ContactName).Distinct().ToArray<string>();


                        ddlCustomerName.AutoCompleteSource = AutoCompleteSource.CustomSource;
                        ddlCustomerName.AutoCompleteMode = AutoCompleteMode.Suggest;
                        AutoCompleteStringCollection coll = new AutoCompleteStringCollection();
                        coll.AddRange(list);

                        ddlCustomerName.TextChanged -= ddlCustomerName_TextChanged;
                        ddlCustomerName.AutoCompleteCustomSource = coll;
                        ddlCustomerName.TextChanged += ddlCustomerName_TextChanged;
                    }
                }

            }
            catch
            {


            }
        }


        void ddlCustomerName_TextChanged(object sender, EventArgs e)
        {

            if (btnSetFares != null && btnSetFares.Visible && ddlCustomerName.Text.Trim().Length >= 2)
            {

                try
                {
                    ddlCustomerName.TextChanged -= ddlCustomerName_TextChanged;


                    if (ddlCustomerName.AutoCompleteCustomSource.Count == 0)
                    {
                        new Thread(new ThreadStart(delegate ()
                         {
                             ddlCustomerName.Invoke(new MethodInvoker(delegate ()
                             {

                                 using (TaxiDataContext db = new TaxiDataContext())
                                 {
                                     db.CommandTimeout = 5;
                                     db.DeferredLoadingEnabled = false;







                                     var list = db.Customers.Select(c => c.Name)
                                     //    .Where(c => c.ToLower().Contains(ddlCustomerName.Text.ToLower()))
                                     .Distinct().ToList().ToArray<string>();



                                     //var list = db.Bookings.Select(c => c.CustomerName)
                                     //    .Where(c => c.ToLower().Contains(ddlCustomerName.Text.ToLower())).Distinct().ToArray<string>();

                                     if (list.Count() > 0)
                                     {
                                         AutoCompleteStringCollection coll = new AutoCompleteStringCollection();
                                         coll.AddRange(list);

                                         ddlCustomerName.AutoCompleteCustomSource = coll;
                                         //    ddlCustomerName.TextChanged += ddlCustomerName_TextChanged;
                                     }
                                 }

                                 //   ddlCustomerName.AutoCompleteSource = AutoCompleteSource.ListItems;
                                 //   ddlControl.AutoCompleteMode = AutoCompleteMode.Suggest;
                                 //    ddlControl.Select(ddlControl.Text.Length, 0);
                             }));
                         })).Start();


                    }

                }
                catch
                {


                }

            }
        }









        private void chkLead_CheckedChanged(object sender, EventArgs e)
        {
            if (chkLead.Checked)
                numLead.Enabled = true;
            else
                numLead.Enabled = false;
        }

        private void btnExcludeDrivers_Click(object sender, EventArgs e)
        {
            ShowExcludedDrivers();
        }

        private void ShowExcludedDrivers()
        {
            try
            {




                frmBookingExcDriversList frm = new frmBookingExcDriversList(btnExcludeDrivers.Tag.ToStr());
                frm.ShowDialog();
                btnExcludeDrivers.Text = "E&xclude Driver(s)" + Environment.NewLine + frm.input_values;

                if (frm.input_Ids.ToStr().Trim().Length > 0)
                {

                    btnExcludeDrivers.Tag = "," + frm.input_Ids + ",";
                }
                else
                    btnExcludeDrivers.Tag = "";


                FocusOnCustomer();

            }
            catch
            {


            }
        }






        private void DisableFieldsForDriverInvoice()
        {
            //DisableFields();


            try
            {


                numFareRate.Enabled = true;
                numCongChrgs.Enabled = false;
                numMeetCharges.Enabled = false;
                numExtraChrgs.Enabled = false;

                if (numReturnFare != null)
                {
                    numReturnFare.Enabled = false;

                }

                if (numCompanyFares != null && ddlCompany.SelectedValue != null)
                {

                    numCompanyFares.Enabled = true;


                    if (numReturnCompanyFares != null && numReturnCompanyFares.Visible)
                        numReturnCompanyFares.Enabled = true;
                }

                opt_one.Enabled = false;
                opt_return.Enabled = false;
                opt_waitreturn.Enabled = false;
            }
            catch
            {

            }


        }





        private void DisableFieldsForCompanyInvoice()
        {
            DisableFields();


            try
            {

                ddlFromLocType.Enabled = false;
                //  ddlToLocation.Enabled = false;

                txtFromAddress.Enabled = false;
                txtToAddress.Enabled = false;
                txtFromFlightDoorNo.Enabled = false;
                txtToFlightDoorNo.Enabled = false;

                // ddlFromLocation.Enabled = false;
                // ddlToLocation.Enabled = false;


                txtFromPostCode.Enabled = false;
                txtToPostCode.Enabled = false;


                if (ddlReturnFromAirport != null)
                    ddlReturnFromAirport.Enabled = false;

                // if (ddlReturnTo != null)
                //     ddlReturnTo.Enabled = false;

                if (txtReturnFrom != null)
                    txtReturnFrom.Enabled = false;

                if (txtReturnTo != null)
                    txtReturnTo.Enabled = false;


                ddlVehicleType.Enabled = false;

                if (ddlReturnVehicleType != null)
                    ddlReturnVehicleType.Visible = false;



                opt_one.Enabled = false;
                opt_return.Enabled = false;
                opt_waitreturn.Enabled = false;

                dtpPickupDate.Enabled = false;
                dtpPickupTime.Enabled = false;


                if (dtpReturnPickupDate != null)
                    dtpReturnPickupDate.Enabled = false;

                if (dtpReturnPickupTime != null)
                    dtpReturnPickupTime.Enabled = false;



                //  radLabel1.Enabled = false;


                if (numCompanyFares.Enabled)
                {

                    numCompanyFares.Enabled = false;

                    if (numReturnCompanyFares != null)
                    {
                        numReturnCompanyFares.Enabled = false;

                    }

                    numParkingChrgs.Enabled = false;
                    numWaitingChrgs.Enabled = false;
                    numExtraChrgs.Enabled = false;

                }



                if (numFareRate.Enabled)
                {


                    numFareRate.Enabled = true;


                    if (numReturnFare != null && numReturnFare.Visible)
                        numReturnFare.Enabled = true;


                }



            }
            catch
            {

            }
        }


        bool IsAllowUpdating = true;

        private void DisableFields()
        {
            try
            {
                pnlOtherCharges.Enabled = false;



                btnBase.Enabled = false;


                btnDespatchView.Enabled = false;


                ddlSubCompany.Enabled = false;
                ddlBookingType.Enabled = false;


                btnSaveNew.Enabled = true;
                if (numCompanyFares != null && ddlCompany.SelectedValue != null)
                {
                    pnlFares.Enabled = true;

                }


                btnSearch.Enabled = false;

            }
            catch
            {


            }

        }


        private void SetPickupTimeHourAndMin(DateTime dt)
        {


            string hour = dt.Hour.ToStr();
            string min = dt.Minute.ToStr();
            if (hour.ToStr().Length == 1)
                hour = "0" + hour;

            if (min.ToStr().Length == 1)
                min = "0" + min;

            UpdatePickupTimeText(hour + min);


        }

        private void UpdatePickupTimeText(string text)
        {
            dtpPickupTime_txt.Tag = "onchanging";
            dtpPickupTime_txt.Text = text;
            dtpPickupTime_txt.Tag = "onchanged";

        }

        private void UpdatePickupTime()
        {

            try
            {
                string text = dtpPickupTime_txt.Text;


                if (text.Length > 0 && text.Length <= 3)
                {

                    SetPickupTimeHourAndMin(DateTime.Now.AddMinutes(text.ToInt()));

                }
                else if (text.Length == 0)
                {
                    UpdatePickupTimeText("ASAP");


                }
            }
            catch
            {

            }
        }

        private void dtpPickupTime_txt_Leave(object sender, EventArgs e)
        {

            try
            {
                UpdatePickupTime();

                string text = dtpPickupTime_txt.Text.Trim();
                if (text == "ASAP")
                {
                    dtpPickupTime.Value = DateTime.Now;



                    if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true)
                    {
                        //comment
                        try
                        {
                            if (lastPickupTime == null || (lastPickupTime.Value.Hour != dtpPickupTime.Value.Value.Hour && lastPickupTime.Value.Minute != dtpPickupTime.Value.Value.Minute))
                            {

                                UpdateAutoCalculateFares();


                            }
                        }
                        catch
                        {


                        }
                    }
                }
                else
                {
                    if (text.Length == 4)
                    {
                        if (text.IsNumeric())
                        {
                            if (text.ToInt() > 2359)
                            {
                                MessageBox.Show("Invalid Pickup Time");
                                FocusOnPickupTime();

                                return;
                            }

                        }

                        dtpPickupTime.Value = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, text.Substring(0, 2).ToInt(), text.Substring(2).ToInt(), 0);


                        try
                        {

                            if (objMaster.PrimaryKeyValue == null)
                            {

                                if (dtpPickupDate.AllowDrop == false && DateTime.Now.TimeOfDay > dtpPickupTime.Value.ToDateTime().TimeOfDay
                         && dtpPickupDate.Value != null && dtpPickupDate.Value.ToDate() == DateTime.Now.Date)
                                {
                                    double hours = DateTime.Now.TimeOfDay.Subtract(dtpPickupTime.Value.ToDateTime().TimeOfDay).TotalHours;
                                    if (hours >= 2)
                                    {
                                        dtpPickupDate.Value = dtpPickupDate.Value.ToDate().AddDays(1);
                                        dtpPickupDate.AllowDrop = true;
                                    }
                                }








                                if (AppVars.objPolicyConfiguration.EnablePeakOffPeakFares.ToBool() == true)
                                {
                                    //comment
                                    try
                                    {
                                        if (lastPickupTime == null || (lastPickupTime.Value.TimeOfDay != dtpPickupTime.Value.Value.TimeOfDay))
                                        {

                                            UpdateAutoCalculateFares();


                                        }
                                    }
                                    catch
                                    {


                                    }
                                }












                            }
                        }
                        catch
                        {


                        }

                    }
                    else
                    {
                        MessageBox.Show("Invalid Pickup Time");
                        FocusOnPickupTime();
                    }


                }

                alreadyFocused = false;
            }
            catch
            {

            }
        }

        private void dtpPickupTime_txt_KeyDown(object sender, KeyEventArgs e)
        {


            if (e.KeyCode == Keys.Enter)
            {
                dtpPickupTime.Tag = null;
                FocusOnPickupDate();
            }

        }

        private void dtpPickupTime_txt_TextChanged(object sender, EventArgs e)
        {

            if (dtpPickupTime_txt.Tag.ToStr() == "onchanging")
                return;

            if (dtpPickupTime_txt.Text.ToStr().IsNumeric() == false)
            {
                dtpPickupTime_txt.Text = string.Empty;

                return;
            }
        }



        private bool alreadyFocused = false;




        void dtpPickupTime_txt_GotFocus(object sender, EventArgs e)
        {
            // Select all text only if the mouse isn't down.
            // This makes tabbing to the textbox give focus.
            if (MouseButtons == MouseButtons.None)
            {
                dtpPickupTime_txt.Tag = "onchanging";
                this.dtpPickupTime_txt.SelectAll();
                dtpPickupTime_txt.Tag = "onchanged";
                lastPickupTime = dtpPickupTime.Value.ToDateTimeorNull();
                alreadyFocused = true;

            }
        }


        void dtpPickupTime_txt_MouseUp(object sender, MouseEventArgs e)
        {
            // Web browsers like Google Chrome select the text on mouse up.
            // They only do it if the textbox isn't already focused,
            // and if the user hasn't selected all text.
            if (!alreadyFocused && this.dtpPickupTime_txt.SelectionLength == 0)
            {
                alreadyFocused = true;
                this.dtpPickupTime_txt.SelectAll();
                lastPickupTime = dtpPickupTime.Value.ToDateTimeorNull();
            }
        }

        private void btnInfo_Click(object sender, EventArgs e)
        {

            ShowInfo();
        }

        private void ShowInfo()
        {
            try
            {

                if (objMaster.PrimaryKeyValue == null)
                {
                    if (DialogResult.Yes == MessageBox.Show("Do you want to save this Booking ? ", "", MessageBoxButtons.YesNo))
                    {

                        chkAutoDespatch.Checked = false;
                        chkBidding.Checked = false;
                        if (Save() == false)
                            return;


                    }
                    else
                        return;

                }


                frmCustomer c = new frmCustomer(true);

                int? custId = null;


                if (objMaster.Current.CustomerId != null)
                    custId = objMaster.Current.CustomerId;


                if (custId == null)
                {

                    string mobNo = objMaster.Current.CustomerMobileNo.ToStr().Trim();
                    string telNo = objMaster.Current.CustomerPhoneNo.ToStr().Trim();

                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        if (mobNo.ToStr().Trim().Length > 0 && telNo.ToStr().Trim().Length == 0)
                            custId = db.Customers.OrderByDescending(cc => cc.Id).FirstOrDefault(cc => (cc.MobileNo == mobNo || cc.TelephoneNo == mobNo)).Id;

                        else if (telNo.ToStr().Trim().Length > 0 && mobNo.ToStr().Trim().Length == 0)
                            custId = db.Customers.OrderByDescending(cc => cc.Id).FirstOrDefault(cc => cc.TelephoneNo == telNo || cc.MobileNo == telNo).Id;
                        else
                            custId = db.Customers.OrderByDescending(cc => cc.Id).FirstOrDefault(cc => ((cc.MobileNo == mobNo || mobNo == string.Empty) || (cc.TelephoneNo == telNo || telNo == string.Empty))).Id;

                    }

                }

                c.OpenFromBooking = true;
                c.OnDisplayRecord(custId);
                c.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
                c.StartPosition = FormStartPosition.CenterScreen;
                c.ShowDialog();


                if ((c.excludedDriverIds.ToStr().Trim().Length > 0 && c.excludedDriverNos.ToStr().Trim().Length > 0)
                    || (c.excludedDriverIds.ToStr().Trim().Length == 0 && c.excludedDriverNos.ToStr().Trim().Length == 0))
                {
                    btnExcludeDrivers.Tag = "," + c.excludedDriverIds + ",";
                    btnExcludeDrivers.Text = "Exclude Driver(s)" + Environment.NewLine + c.excludedDriverNos;
                }


                c.Dispose();
                c = null;
            }
            catch
            {


            }
        }


        private void btnSetFares_Click(object sender, EventArgs e)
        {
            SaveSetFare(true);
        }


        private bool CheckCustomJourneyFares(int? fromLocTypeId, int? toLocTypeId, string fromAddress, string toAddress)
        {
            try
            {
                string fromSetFareVal = fromAddress.ToStr().ToUpper().Replace("  ", " ");
                string toSetFareVal = toAddress.ToStr().ToUpper().Replace("  ", " ");


                string via = string.Empty;
                if (grdVia != null)
                {
                    via = string.Join(",", grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper().Replace("  ", " ")).ToArray<string>());
                }


                int? tCompanyId = ddlCompany.SelectedValue.ToIntorNull();

                Fare_CustomJourney objCustomFare = null;


                int vehicletypeid = ddlVehicleType.SelectedValue.ToInt();


                using (TaxiDataContext db = new TaxiDataContext())
                {

                    objCustomFare = db.Fare_CustomJourneys.Where(c => (c.Pickup == fromSetFareVal && c.Destination == toSetFareVal)
                        && (c.CompanyId == tCompanyId || tCompanyId == null)
                        && (c.ViaPoints == via || via == string.Empty)
                        && c.VehicleTypeId == vehicletypeid).OrderByDescending(c => c.Id).FirstOrDefault();
                    //  }

                    if (objCustomFare != null)
                    {
                        numFareRate.Value = objCustomFare.DriverFares.ToDecimal();
                        numFareRate.BackColor = Color.Pink;

                        string msg = "Drv Fare : " + numFareRate.Value;
                        if (numReturnFare != null)
                        {
                            numReturnFare.Value = objCustomFare.DriverRtnFares.ToDecimal();
                            numReturnFare.BackColor = Color.Pink;

                        }

                        // numCustomerFares.Value = objCustomFare.CustomerFares.ToDecimal();
                        // numCustomerFares.SpinElement.TextBoxItem.BackColor = Color.Pink;
                        //   msg += " , Cust Fare : " + numCustomerFares.Value;

                        //if (numReturnCustFare != null)
                        //{
                        //    numReturnCustFare.Value = objCustomFare.CustomerRtnFares.ToDecimal();
                        //    numReturnCustFare.SpinElement.TextBoxItem.BackColor = Color.Pink;
                        //}

                        if (numCompanyFares != null)
                        {
                            numCompanyFares.Value = objCustomFare.CompanyFares.ToDecimal();
                            numCompanyFares.BackColor = Color.Pink;
                            msg += " , Company Fare : " + numCompanyFares.Value;
                            if (numReturnCompanyFares != null)
                            {
                                numReturnCompanyFares.Value = objCustomFare.CompanyRtnFares.ToDecimal();
                                numReturnCompanyFares.BackColor = Color.Pink;
                            }
                        }

                        numAgentCommission.Value = objCustomFare.AgentCommission.ToDecimal();
                        numAgentCharge.Value = objCustomFare.AgentCharge.ToDecimal();



                        decimal miles = CalculateTotalDistance(fromSetFareVal, via.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToArray<string>(), toSetFareVal);

                        milesList.Add(miles);
                        if (objMaster.Current == null)
                        {
                            setFareLogMsg = "Calculate Fares from (Set Fare : " + msg + ")";
                        }
                        else
                        {
                            UpdateSetFareLog("Calculate Fares from (Set Fare : " + msg + ")");
                        }

                        return false;

                    }
                    else
                    {
                        numFareRate.BackColor = Color.White;
                        if (numReturnFare != null)
                            numReturnFare.BackColor = Color.White;

                        //    numCustomerFares.SpinElement.TextBoxItem.BackColor = Color.White;

                        // if (numReturnCustFare != null)
                        //     numReturnCustFare.SpinElement.TextBoxItem.BackColor = Color.White;

                        if (numCompanyFares != null)
                            numCompanyFares.BackColor = Color.White;

                        if (numCompanyFares != null)
                            numReturnCompanyFares.BackColor = Color.White;
                        return true;




                    }
                }
            }
            catch
            {
                return true;
            }
        }


        private void SaveSetFare(bool breakThread)
        {
            try
            {

                btnSetFares.Enabled = false;

                if (breakThread)
                    System.Threading.Thread.Sleep(1000);

                int? fromLocTypeId = ddlFromLocType.SelectedValue.ToInt();
                int vehicleTypeId = ddlVehicleType.SelectedValue.ToInt();

                int? toLocTypeId = ddlToLocType.SelectedValue.ToInt();


                string fromAddress = txtFromAddress.Text.Trim().ToUpper();
                string toAddress = txtToAddress.Text.Trim().ToUpper();
                string fromPostCode = txtFromPostCode.Text.Trim().ToUpper();
                string toPostCode = txtToPostCode.Text.Trim().ToUpper();




                //if (fromLocTypeId == Enums.LOCATION_TYPES.BASE || fromLocTypeId == Enums.LOCATION_TYPES.ADDRESS)
                //{
                fromAddress = txtFromAddress.Text.Trim().ToUpper().Replace("  ", " ");

                //}
                //else if (fromLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //{

                //    fromAddress = txtFromPostCode.Text.Trim().ToUpper();
                //}
                //else
                //{
                //    fromAddress = fromLocName;

                //}


                //if (toLocTypeId == Enums.LOCATION_TYPES.BASE || toLocTypeId == Enums.LOCATION_TYPES.ADDRESS)
                //{
                toAddress = txtToAddress.Text.Trim().ToUpper().Replace("  ", " ");

                //}
                //else if (toLocTypeId == Enums.LOCATION_TYPES.POSTCODE)
                //{

                //    toAddress = txtToPostCode.Text.Trim().ToUpper();
                //}
                //else
                //{
                //    toAddress = toLocName;

                //}


                string via = string.Empty;


                if (grdVia != null)
                {
                    via = string.Join(",", grdVia.Rows.Select(c => c.Cells["VIALOCATIONVALUE"].Value.ToStr().ToUpper()).ToArray<string>());

                }


                int? companyId = ddlCompany.SelectedValue.ToIntorNull();



                if (btnSetFares.Tag.ToStr() == "frmAlertShowFares")
                {

                    frmAlertShowFares frm = new frmAlertShowFares(ddlSubCompany.SelectedValue.ToInt(), companyId, vehicleTypeId
                                                                , numFareRate.Value.ToDecimal(), numCompanyFares.Value.ToDecimal(), numAgentCommission != null ? numAgentCommission.Value : 0.00m, numAgentCharge != null ? numAgentCharge.Value : 0.00m,
                                                                ddlPickupPlot.SelectedValue.ToIntorNull(), ddlDropOffPlot.SelectedValue.ToIntorNull(), fromAddress, toAddress);

                    frm.StartPosition = FormStartPosition.CenterParent;
                    frm.ShowDialog();

                    frm.Dispose();

                }
                else
                {



                    bool IsAddMode = false;


                    using (TaxiDataContext db = new TaxiDataContext())
                    {

                        Fare_CustomJourney obj = db.Fare_CustomJourneys.FirstOrDefault(c => c.Pickup == fromAddress && c.Destination == toAddress && (via == string.Empty || c.ViaPoints == via)
                        && (companyId == null || c.CompanyId == companyId));

                        if (obj == null)
                        {
                            obj = new Fare_CustomJourney();

                            IsAddMode = true;
                        }


                        obj.DriverFares = numFareRate.Value.ToDecimal();
                        obj.DriverRtnFares = numReturnFare != null ? numReturnFare.Value.ToDecimal() : 0.00m;
                        obj.CustomerFares = obj.DriverFares.ToDecimal();
                        obj.CustomerRtnFares = obj.DriverRtnFares.ToDecimal();
                        obj.VehicleTypeId = vehicleTypeId;
                        obj.CompanyId = ddlCompany.SelectedValue.ToIntorNull();
                        obj.ViaPoints = via.ToStr().ToUpper().Replace("  ", " ");

                        obj.CompanyFares = numCompanyFares != null ? numCompanyFares.Value.ToDecimal() : 0.00m;
                        obj.CompanyRtnFares = numReturnCompanyFares != null ? numReturnCompanyFares.Value.ToDecimal() : 0.00m;

                        if (numAgentCommission != null && numAgentCommission.Visible)
                            obj.AgentCommission = numAgentCommission.Value;

                        if (numAgentCharge != null && numAgentCharge.Visible)
                            obj.AgentCharge = numAgentCharge.Value;



                        obj.Pickup = fromAddress;
                        obj.Destination = toAddress;


                        if (IsAddMode)
                        {

                            db.Fare_CustomJourneys.InsertOnSubmit(obj);

                        }
                        db.SubmitChanges();


                    }



                }

                btnSetFares.Enabled = true;
            }
            catch (Exception ex)
            {

                btnSetFares.Enabled = true;

            }

        }


        private void ChkETA_DoubleClick(object sender, EventArgs e)
        {

            //     if(AppVars.objPolicyConfiguration.MapType.ToInt()==1)
            CalculateActualETA();


        }

        string nearestETA = string.Empty;
        private void CalculateActualETA()
        {

            try
            {
                if (nearestETA.ToStr().Length > 0)
                {

                    var arr = nearestETA.Split('|');
                    int driverId = arr[3].ToInt();
                    using (TaxiDataContext db = new TaxiDataContext())
                    {
                        int cnt = db.Fleet_DriverQueueLists.Where(c => c.DriverId == driverId && c.Status == true
                        && (c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.AVAILABLE || c.DriverWorkStatusId == Enums.Driver_WORKINGSTATUS.ONBREAK)
                        ).Count();


                        if (cnt == 0 && webBrowser1.Tag == null)
                        {
                            LoadNearestMap();

                            webBrowser1.Tag = "-1";
                        }
                        else
                        {


                            string etaDuration = string.Empty;
                            etaDuration = General.CalculateETA(arr[0], arr[1]);

                            if (etaDuration.ToStr().Length > 0)
                            {
                                if (chkETA.Text.Contains("Actual ETA"))
                                {
                                    chkETA.Text = chkETA.Text.Substring(chkETA.Text.IndexOf(Environment.NewLine) + Environment.NewLine.Length);

                                }
                                chkETA.Text = "Actual ETA: " + etaDuration + " , Drv " + arr[2].ToStr() + Environment.NewLine + chkETA.Text;

                            }
                        }
                    }
                }
            }
            catch
            {

            }
        }


        private string GetBookingJSON()
        {
            string json = "";
            try
            {


                string status = "";

                if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.WAITING)
                    status = "Waiting";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.DISPATCHED)
                    status = "Completed";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ONROUTE)
                    status = "OnRoute";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.ARRIVED)
                    status = "Arrived";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.POB)
                    status = "POB";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.STC)
                    status = "STC";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.NOPICKUP)
                    status = "NoPickup";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.CANCELLED)
                    status = "Cancelled";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.FOJ)
                    status = "FOJ";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING)
                    status = "Pending";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.PENDING_START)
                    status = "Pending Start";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.BID)
                    status = "BID";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.NOSHOW)
                    status = "Recover";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.NOTACCEPTED)
                    status = "Not Accepted";
                else if (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.REJECTED)
                    status = "Rejected";



                DateTime? oneWayJobDue = null;

                if (objMaster.Current.ZoneId != null)
                {
                    try
                    {
                        oneWayJobDue = (ddlPickupPlot.SelectedItem as DataRowView).Row["JobDueTime"].ToDateTime();
                    }
                    catch
                    {

                    }


                    if (chkLead.Checked)
                    {
                        oneWayJobDue = objMaster.Current.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt());

                    }
                    else
                    {

                        if (oneWayJobDue != null)
                        {
                            oneWayJobDue = objMaster.Current.PickupDateTime.Value.AddMinutes(-((oneWayJobDue.Value.Hour * 60) + oneWayJobDue.Value.Minute)).ToDateTime();

                        }
                        else
                            oneWayJobDue = objMaster.Current.PickupDateTime;
                    }
                }
                else
                {
                    if (chkLead.Checked)
                    {
                        oneWayJobDue = objMaster.Current.PickupDateTime.Value.AddMinutes(-numLead.Value.ToInt());

                    }
                    else
                    {
                        oneWayJobDue = objMaster.Current.PickupDateTime.Value.AddMinutes(-AppVars.objPolicyConfiguration.BookingExpiryNoticeInMins.ToInt());
                    }


                }



                if (ddlBookingType.SelectedItem == null)
                    ddlBookingType.SelectedValue = Enums.BOOKING_TYPES.LOCAL;


                if (ddlSubCompany.SelectedValue == null)
                {
                    try
                    {
                        if (ddlSubCompany.Items.Count > 0)
                        {
                            ddlSubCompany.SelectedItem = ddlSubCompany.Items[0];
                        }


                    }
                    catch
                    {

                    }
                }



                string pickupNotes = "";
                if (objMaster.Current.FromDoorNo.ToStr().Trim().Length > 0)
                {

                    pickupNotes = objMaster.Current.FromDoorNo.ToStr().Trim() + "-";


                    if (objMaster.Current.FromStreet.ToStr().Trim().Length > 0 && objMaster.Current.FromLocTypeId.ToInt() == Enums.LOCATION_TYPES.AIRPORT && AppVars.listUserRights.Count(c => c.functionId == "HIDE FLIGHT OTHER DETAILS ON DASHBOARD") == 0)
                    {
                        pickupNotes += objMaster.Current.FromStreet.ToStr().Trim() + " ";

                    }

                }



                string specialReq = objMaster.Current.SpecialRequirements.ToStr().Replace("=", "-");

                string accountbgcolor = "";
                string accounttextcolor = "";

                if (objMaster.Current.CompanyId != null && ddlCompany.SelectedItem != null)
                {
                    if (ddlCompany.SelectedItem.ToStr().ToLower().Contains("backgroundcolor"))
                    {
                        try
                        {
                            string[] arr = (ddlCompany.SelectedItem.ToStr().Substring(ddlCompany.SelectedItem.ToStr().IndexOf("BackgroundColor = ")).Split(','));
                            if (arr.Count() == 2)
                            {
                                accountbgcolor = arr[0].Replace("BackgroundColor =", "").ToStr().Trim();
                                accounttextcolor = arr[1].Replace("TextColor =", "").ToStr().Trim();

                                if (accounttextcolor.ToStr().EndsWith("}"))
                                {
                                    accounttextcolor = accounttextcolor.Replace("}", "").ToStr().Trim();
                                }
                            }
                        }
                        catch
                        {

                        }


                    }
                }


                string vehicleDetails = string.Empty;
                if (objMaster.Current.DriverId != null)
                {
                    if (ddlDriver.SelectedItem.DataBoundItem.ToStr().ToLower().Contains("vehicledetails"))
                    {
                        try
                        {
                            string[] arr = (ddlDriver.SelectedItem.DataBoundItem.ToStr().Substring(ddlDriver.SelectedItem.DataBoundItem.ToStr().ToLower().IndexOf("vehicledetails = ")).Split(','));
                            if (arr.Count() == 1)
                            {
                                vehicleDetails = arr[0].ToLower().Replace("vehicledetails =", "").ToStr().Trim();

                            }
                        }
                        catch
                        {

                        }


                    }


                }


                int hasNotes = 0;
                if ((objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.BID && btn_notes.Text.Contains("(0)") == false))
                {
                    hasNotes = 1;
                }
                else if (ddlPickupPlot.Text.ToUpper().Contains("CONGESTION") || ddlDropOffPlot.Text.ToUpper().Contains("CONGESTION"))
                {

                    hasNotes = -1;
                }



                string AccountName = ddlCompany.Text.Trim();

                if (AccountName.Contains(" - "))
                    AccountName = AccountName.Substring(AccountName.IndexOf(" - ") + 3).Trim();


                // (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.BID && btn_notes.Text.Contains("(0)") == false) ? 1 : 0

                json = Newtonsoft.Json.JsonConvert.SerializeObject(
                    new stp_GetBookingsDataResult()
                    {
                        Id = objMaster.Current.Id,

                        Account = AccountName,


                        Vehicle = ddlVehicleType.Text,
                        From = pickupNotes + objMaster.Current.FromAddress,
                        To = objMaster.Current.ToAddress,
                        Fare = Math.Round(objMaster.Current.FareRate.ToDecimal() + objMaster.Current.ServiceCharges.ToDecimal(), 2),

                        Plot = ddlPickupPlot.Text.Trim() != "" ? ddlPickupPlot.Text.Substring(ddlPickupPlot.Text.IndexOf(".") + 1).Trim() : "",
                        BabySeats = "",

                        BookingTypeId = objMaster.Current.BookingTypeId,


                        FromLocTypeId = objMaster.Current.FromLocTypeId,
                        JourneyTypeId = objMaster.Current.JourneyTypeId,
                        Passenger = objMaster.Current.CustomerName,
                        ToLocTypeId = objMaster.Current.ToLocTypeId,

                        DeadMileage = objMaster.Current.DeadMileage,
                        IsAutoDespatch = objMaster.Current.AutoDespatch,
                        IsBidding = objMaster.Current.IsBidding,
                        FromPostCode = objMaster.Current.FromPostCode,
                        PReference = objMaster.Current.PaymentComments,
                        Vias = grdVia != null ? grdVia.Rows.Count : 0,
                        RefNumber = objMaster.Current.BookingNo,
                        SpecialReq = specialReq,

                        PaymentMethod = ddlPaymentType.Text,

                        Pax = objMaster.Current.NoofPassengers,
                        BackgroundColor1 = accountbgcolor,
                        TextColor1 = accounttextcolor,
                        BackgroundColor = (ddlVehicleType.SelectedItem as DataRowView).Row["BackgroundColor"].ToStr(),
                        TextColor = (ddlVehicleType.SelectedItem as DataRowView).Row["TextColor"].ToStr(),
                        SubCompanyBgColor = (ddlSubCompany.SelectedItem as DataRowView).Row["BackgroundColor"].ToIntorNull(),
                        BookingBackgroundColor = (ddlBookingType.SelectedItem as DataRowView).Row["BackgroundColor"].ToIntorNull(),
                        UpdateBy = objMaster.Current.AddLog,
                        StatusColor = "-1",
                        MobileNo = objMaster.Current.CustomerMobileNo,

                        BookingDateTime = objMaster.Current.BookingDate,
                        Due = objMaster.Current.PickupDateTime,
                        Time = string.Format("{0:HH:mm}", objMaster.Current.PickupDateTime),
                        PickUpDate = string.Format("{0:dd-MMM}", objMaster.Current.PickupDateTime).ToUpper(),
                        PrePickupDate = objMaster.Current.PickupDateTime.Value.Date,
                        PickupDateTemp = objMaster.Current.PickupDateTime,
                        Lead = oneWayJobDue,
                        DespatchDateTime = objMaster.Current.DespatchDateTime,

                        Driver = objMaster.Current.DriverId != null ? ddlDriver.Text.Remove(ddlDriver.Text.IndexOf("-")).Trim() : "",
                        DriverId = objMaster.Current.DriverId,
                        IsConfirmedDriver = objMaster.Current.IsConfirmedDriver,
                        StatusId = objMaster.Current.BookingStatusId,
                        Status = status,

                        TelephoneNo = objMaster.Current.CustomerPhoneNo,
                        HasNotesImg = "",
                        //  HasNotes = (objMaster.Current.BookingStatusId == Enums.BOOKINGSTATUS.BID && btn_notes.Text.Contains("(0)") == false) ? 1 : 0,
                        HasNotes = hasNotes,
                        MilesFromBase = objMaster.Current.ExtraMile,
                        NoofLuggages = objMaster.Current.IsQuotedPrice.ToBool() ? 1 : 0,
                        Attributes = objMaster.Current.AttributeValues.ToStr().Replace(",", " "),
                        VehicleDetails = vehicleDetails,
                        ToPostCode = objMaster.Current.ToPostCode,
                        GroupId = objMaster.Current.GroupJobId != null ? objMaster.Current.BookingGroup.GroupName.ToStr() : "",
                        DropOffPlot = ddlDropOffPlot.Text.Trim() != "" ? ddlDropOffPlot.Text.Substring(ddlDropOffPlot.Text.IndexOf(".") + 1).Trim() : "",
                        Total = numTotalChrgs.Value,
                        OrderNo = txtOrderNo != null ? txtOrderNo.Text.Trim() : ""


                    });




                return json;

            }
            catch (Exception ex)
            {
                try
                {

                    File.AppendAllText(Application.StartupPath + "\\exception_getbookingjson.txt", DateTime.Now + " :" + ex.Message + Environment.NewLine);

                }
                catch
                {


                }
                return json;


            }


        }






        public List<Booking_Attribute> extraChargesOneWaySavedList = null;
        public List<Booking_Attribute> extraChargesReturnSavedList = null;

        private void button1_Click_1(object sender, EventArgs e)
        {
            ShowExtraCharges();
        }

        private void ShowExtraCharges()
        {
            try
            {





                //int journeyTypeId = Enums.JOURNEY_TYPES.ONEWAY;

                //if (opt_return.Checked)
                //    journeyTypeId = Enums.JOURNEY_TYPES.RETURN;

                //frmAttributesList frm = new frmAttributesList(objMaster.PrimaryKeyValue.ToInt(), journeyTypeId);

                int journeyTypeId = Enums.JOURNEY_TYPES.ONEWAY;

                if (opt_return.Checked)
                    journeyTypeId = Enums.JOURNEY_TYPES.RETURN;

                frmAttributesList frm = new frmAttributesList(objMaster.PrimaryKeyValue.ToInt(), journeyTypeId, extraChargesOneWaySavedList, extraChargesReturnSavedList);



                frm.StartPosition = FormStartPosition.CenterScreen;
                frm.ShowDialog();



                extraChargesOneWaySavedList = frm.extraChargesOneWaySavedList;
                extraChargesReturnSavedList = frm.extraChargesReturnSavedList;

                if (frm.input_values.ToStr().Trim().Length > 0)
                {

                    numExtraChrgs.Tag = frm.totalSelectedAmount;
                    numExtraChrgs.Value = frm.totalSelectedAmount;
                    txtSpecialRequirements.Text = frm.selectedAtts;
                }
                else
                {
                    numExtraChrgs.Tag = null;
                    numExtraChrgs.Value = 0;
                    txtSpecialRequirements.Text = "";

                }


                if (opt_return.Checked && frm.retselectedAtts.ToStr().Length > 0)
                {



                    txtReturnSpecialReq.Text = frm.retselectedAtts;
                    txtReturnSpecialReq.Tag = frm.totalReturnSelectedAmount;
                }
                else
                {

                    if (txtReturnSpecialReq != null)
                    {
                        txtReturnSpecialReq.Text = "";
                        txtReturnSpecialReq.Tag = null;
                    }

                }
                frm.Dispose();


                if (ddlCompany.SelectedValue != null)
                {
                    numTotalChrgs.Value = numCompanyFares.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numExtraChrgs.Value + numBookingFee.Value;

                }
                else
                {
                    numTotalChrgs.Value = numFareRate.Value + numParkingChrgs.Value + numWaitingChrgs.Value + numExtraChrgs.Value + numBookingFee.Value;


                }



            }
            catch
            {

            }
        }

        string AccBookerEmail = string.Empty;
        string AccPassengerType = string.Empty;
        string AccCompanyCode = string.Empty;
        private void btnAccountInformation_Click(object sender, EventArgs e)
        {
            try
            {
                int companyId = ddlCompany.SelectedValue.ToInt();

                if (companyId > 0)
                {



                    frmBookingMemberDetail frm = new frmBookingMemberDetail(objMaster.PrimaryKeyValue.ToLong()
                        , companyId, ddlCompany.Text.Trim(), AccCompanyCode, AccPassengerType, AccBookerEmail);
                    frm.ShowDialog();
                    AccBookerEmail = frm.email;
                    AccPassengerType = frm.passengerType;
                    AccCompanyCode = frm.companyCode;
                    frm.Dispose();




                }
                else
                    MessageBox.Show("Required : Account");


            }
            catch (Exception)
            {

                throw;
            }
        }



        private void chkQuotedPrice_Click(object sender, EventArgs e)
        {
            if (chkQuotedPrice.Checked)
                IsAllowUpdating = false;
            else
                IsAllowUpdating = true;
        }


        private bool CheckWhiteListAddress(string address)
        {

            if (address.ToStr().Trim().Length == 0)
                return false;

            bool rtn = false;
            try
            {
                if (this.InvokeRequired)
                {
                    this.BeginInvoke(new UIDelegateX(CheckWhiteListAddress), address);

                }
                else
                {

                    //    string address = txtFromAddress.Text.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim();

                    if (address.Length > 0)
                    {
                        string notes = string.Empty;
                        using (TaxiDataContext db = new TaxiDataContext())
                        {
                            db.CommandTimeout = 5;


                            if (address == "all")
                            {

                                string from = txtFromAddress.Text.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim();
                                string to = txtToAddress.Text.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim();

                                var noteList = db.WhiteListAddresses
                                       .Where(c => c.Address.ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim() == from
                                       || c.Address.ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim() == to)
                                       .Select(c => new { c.Notes, c.Address }).ToList();


                                foreach (var item in noteList)
                                {
                                    if (item.Address.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim() == from)
                                    {
                                        if (notes.Length == 0)
                                            notes = "Pickup:" + Environment.NewLine + item.Notes;
                                        else
                                            notes += Environment.NewLine + "Pickup:" + Environment.NewLine + item.Notes;
                                    }
                                    else if (item.Address.ToStr().ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim() == to)
                                    {
                                        if (notes.Length == 0)
                                            notes = "Destination:" + Environment.NewLine + item.Notes;
                                        else
                                            notes += Environment.NewLine + "Destination:" + Environment.NewLine + item.Notes;
                                    }
                                }
                            }
                            else
                            {
                                notes = db.WhiteListAddresses
                                    .Where(c => c.Address.ToUpper().Trim().Replace(",", "").Replace("  ", " ").Trim() == address)
                                    .Select(c => c.Notes).FirstOrDefault().ToStr().Trim();
                            }

                        }

                        //
                        if (notes.Length > 0)
                        {

                            frmInformation frmInfo = new frmInformation(0, "INFORMATION", notes);
                            frmInfo.StartPosition = FormStartPosition.CenterScreen;
                            frmInfo.ShowDialog();

                            frmInfo.Dispose();
                            rtn = true;
                        }
                    }


                }
            }
            catch
            {

            }

            return rtn;
        }




        private Gecko.GeckoWebBrowser webBrowser1;

        private void chkHasPriority_CheckedChanged(object sender, EventArgs e)
        {
            if (chkHasPriority.Checked)
                numPriority.Enabled = true;
            else
                numPriority.Enabled = false;
        }

        private void btnCall_Click(object sender, EventArgs e)
        {
            General.ClickACallCustomer(objMaster.Current.Id);
        }

        private void chkMiles_CheckedChanged(object sender, EventArgs e)
        {
            numMiles.Enabled = chkMiles.Checked;
        }

        private void btnRefundKP_Click(object sender, EventArgs e)
        {
            frmRefundJob frm = new frmRefundJob(objMaster.Current.Id);

            frm.ShowDialog();
            frm.Dispose();
        }
    }
}

